//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Sun Feb  3 21:13:51 2019
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Sep 20 22:03:15 2019
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 8
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @indata = internal unnamed_addr constant [2 x [8192 x i8]] [[8192 x i8] c"KurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscr...
`define TAG_g_indata `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_indata_a {`TAG_g_indata, 23'd0}
// @sha_info_data = internal unnamed_addr global [16 x i32] zeroinitializer, align 4
`define TAG_g_sha_info_data `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_sha_info_data_a {`TAG_g_sha_info_data, 23'd0}
// @sha_info_digest.0 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest0 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_sha_info_digest0_a {`TAG_g_sha_info_digest0, 23'd0}
// @sha_info_digest.1 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest1 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_sha_info_digest1_a {`TAG_g_sha_info_digest1, 23'd0}
// @sha_info_digest.2 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest2 `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_sha_info_digest2_a {`TAG_g_sha_info_digest2, 23'd0}
// @sha_info_digest.3 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest3 `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_sha_info_digest3_a {`TAG_g_sha_info_digest3, 23'd0}
// @sha_info_digest.4 = internal unnamed_addr global i32 0
`define TAG_g_sha_info_digest4 `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_sha_info_digest4_a {`TAG_g_sha_info_digest4, 23'd0}
//   %W = alloca [80 x i32], align 4
`define TAG_sha_transform_entry_W `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_sha_transform_entry_W_a {`TAG_sha_transform_entry_W, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [13:0] indata_address_a;
reg [13:0] indata_address_b;
reg indata_write_enable_a;
reg indata_write_enable_b;
reg [7:0] indata_in_a;
reg [7:0] indata_in_b;
wire [7:0] indata_out_a;
wire [7:0] indata_out_b;

// @indata = internal unnamed_addr constant [2 x [8192 x i8]] [[8192 x i8] c"KurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscr...
rom_dual_port indata (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( indata_address_a ),
	.address_b( indata_address_b ),
	.q_a( indata_out_a ),
	.q_b( indata_out_b)
);
defparam indata.width_a = 8;
defparam indata.width_b = 8;
defparam indata.widthad_a = 14;
defparam indata.widthad_b = 14;
defparam indata.numwords_a = 16384;
defparam indata.numwords_b = 16384;
defparam indata.latency = ram_latency;
defparam indata.init_file = "indata.mif";

reg [0:0] sha_info_digest0_address_a;
reg [0:0] sha_info_digest0_address_b;
reg sha_info_digest0_write_enable_a;
reg sha_info_digest0_write_enable_b;
reg [31:0] sha_info_digest0_in_a;
reg [31:0] sha_info_digest0_in_b;
wire [31:0] sha_info_digest0_out_a;
wire [31:0] sha_info_digest0_out_b;

// @sha_info_digest.0 = internal unnamed_addr global i32 0
ram_dual_port sha_info_digest0 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sha_info_digest0_address_a ),
	.address_b( sha_info_digest0_address_b ),
	.wren_a( sha_info_digest0_write_enable_a ),
	.wren_b( sha_info_digest0_write_enable_b ),
	.data_a( sha_info_digest0_in_a ),
	.data_b( sha_info_digest0_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sha_info_digest0_out_a ),
	.q_b( sha_info_digest0_out_b)
);
defparam sha_info_digest0.width_a = 32;
defparam sha_info_digest0.width_b = 32;
defparam sha_info_digest0.widthad_a = 1;
defparam sha_info_digest0.widthad_b = 1;
defparam sha_info_digest0.width_be_a = 1;
defparam sha_info_digest0.width_be_b = 1;
defparam sha_info_digest0.numwords_a = 1;
defparam sha_info_digest0.numwords_b = 1;
defparam sha_info_digest0.latency = ram_latency;
defparam sha_info_digest0.init_file = "sha_info_digest0.mif";

reg [0:0] sha_info_digest1_address_a;
reg [0:0] sha_info_digest1_address_b;
reg sha_info_digest1_write_enable_a;
reg sha_info_digest1_write_enable_b;
reg [31:0] sha_info_digest1_in_a;
reg [31:0] sha_info_digest1_in_b;
wire [31:0] sha_info_digest1_out_a;
wire [31:0] sha_info_digest1_out_b;

// @sha_info_digest.1 = internal unnamed_addr global i32 0
ram_dual_port sha_info_digest1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sha_info_digest1_address_a ),
	.address_b( sha_info_digest1_address_b ),
	.wren_a( sha_info_digest1_write_enable_a ),
	.wren_b( sha_info_digest1_write_enable_b ),
	.data_a( sha_info_digest1_in_a ),
	.data_b( sha_info_digest1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sha_info_digest1_out_a ),
	.q_b( sha_info_digest1_out_b)
);
defparam sha_info_digest1.width_a = 32;
defparam sha_info_digest1.width_b = 32;
defparam sha_info_digest1.widthad_a = 1;
defparam sha_info_digest1.widthad_b = 1;
defparam sha_info_digest1.width_be_a = 1;
defparam sha_info_digest1.width_be_b = 1;
defparam sha_info_digest1.numwords_a = 1;
defparam sha_info_digest1.numwords_b = 1;
defparam sha_info_digest1.latency = ram_latency;
defparam sha_info_digest1.init_file = "sha_info_digest1.mif";

reg [0:0] sha_info_digest2_address_a;
reg [0:0] sha_info_digest2_address_b;
reg sha_info_digest2_write_enable_a;
reg sha_info_digest2_write_enable_b;
reg [31:0] sha_info_digest2_in_a;
reg [31:0] sha_info_digest2_in_b;
wire [31:0] sha_info_digest2_out_a;
wire [31:0] sha_info_digest2_out_b;

// @sha_info_digest.2 = internal unnamed_addr global i32 0
ram_dual_port sha_info_digest2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sha_info_digest2_address_a ),
	.address_b( sha_info_digest2_address_b ),
	.wren_a( sha_info_digest2_write_enable_a ),
	.wren_b( sha_info_digest2_write_enable_b ),
	.data_a( sha_info_digest2_in_a ),
	.data_b( sha_info_digest2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sha_info_digest2_out_a ),
	.q_b( sha_info_digest2_out_b)
);
defparam sha_info_digest2.width_a = 32;
defparam sha_info_digest2.width_b = 32;
defparam sha_info_digest2.widthad_a = 1;
defparam sha_info_digest2.widthad_b = 1;
defparam sha_info_digest2.width_be_a = 1;
defparam sha_info_digest2.width_be_b = 1;
defparam sha_info_digest2.numwords_a = 1;
defparam sha_info_digest2.numwords_b = 1;
defparam sha_info_digest2.latency = ram_latency;
defparam sha_info_digest2.init_file = "sha_info_digest2.mif";

reg [0:0] sha_info_digest3_address_a;
reg [0:0] sha_info_digest3_address_b;
reg sha_info_digest3_write_enable_a;
reg sha_info_digest3_write_enable_b;
reg [31:0] sha_info_digest3_in_a;
reg [31:0] sha_info_digest3_in_b;
wire [31:0] sha_info_digest3_out_a;
wire [31:0] sha_info_digest3_out_b;

// @sha_info_digest.3 = internal unnamed_addr global i32 0
ram_dual_port sha_info_digest3 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sha_info_digest3_address_a ),
	.address_b( sha_info_digest3_address_b ),
	.wren_a( sha_info_digest3_write_enable_a ),
	.wren_b( sha_info_digest3_write_enable_b ),
	.data_a( sha_info_digest3_in_a ),
	.data_b( sha_info_digest3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sha_info_digest3_out_a ),
	.q_b( sha_info_digest3_out_b)
);
defparam sha_info_digest3.width_a = 32;
defparam sha_info_digest3.width_b = 32;
defparam sha_info_digest3.widthad_a = 1;
defparam sha_info_digest3.widthad_b = 1;
defparam sha_info_digest3.width_be_a = 1;
defparam sha_info_digest3.width_be_b = 1;
defparam sha_info_digest3.numwords_a = 1;
defparam sha_info_digest3.numwords_b = 1;
defparam sha_info_digest3.latency = ram_latency;
defparam sha_info_digest3.init_file = "sha_info_digest3.mif";

reg [0:0] sha_info_digest4_address_a;
reg [0:0] sha_info_digest4_address_b;
reg sha_info_digest4_write_enable_a;
reg sha_info_digest4_write_enable_b;
reg [31:0] sha_info_digest4_in_a;
reg [31:0] sha_info_digest4_in_b;
wire [31:0] sha_info_digest4_out_a;
wire [31:0] sha_info_digest4_out_b;

// @sha_info_digest.4 = internal unnamed_addr global i32 0
ram_dual_port sha_info_digest4 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sha_info_digest4_address_a ),
	.address_b( sha_info_digest4_address_b ),
	.wren_a( sha_info_digest4_write_enable_a ),
	.wren_b( sha_info_digest4_write_enable_b ),
	.data_a( sha_info_digest4_in_a ),
	.data_b( sha_info_digest4_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sha_info_digest4_out_a ),
	.q_b( sha_info_digest4_out_b)
);
defparam sha_info_digest4.width_a = 32;
defparam sha_info_digest4.width_b = 32;
defparam sha_info_digest4.widthad_a = 1;
defparam sha_info_digest4.widthad_b = 1;
defparam sha_info_digest4.width_be_a = 1;
defparam sha_info_digest4.width_be_b = 1;
defparam sha_info_digest4.numwords_a = 1;
defparam sha_info_digest4.numwords_b = 1;
defparam sha_info_digest4.latency = ram_latency;
defparam sha_info_digest4.init_file = "sha_info_digest4.mif";

reg [3:0] sha_info_data_address_a;
reg [3:0] sha_info_data_address_b;
reg sha_info_data_write_enable_a;
reg sha_info_data_write_enable_b;
reg [31:0] sha_info_data_in_a;
reg [31:0] sha_info_data_in_b;
wire [31:0] sha_info_data_out_a;
wire [31:0] sha_info_data_out_b;

// @sha_info_data = internal unnamed_addr global [16 x i32] zeroinitializer, align 4
ram_dual_port sha_info_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sha_info_data_address_a ),
	.address_b( sha_info_data_address_b ),
	.wren_a( sha_info_data_write_enable_a ),
	.wren_b( sha_info_data_write_enable_b ),
	.data_a( sha_info_data_in_a ),
	.data_b( sha_info_data_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sha_info_data_out_a ),
	.q_b( sha_info_data_out_b)
);
defparam sha_info_data.width_a = 32;
defparam sha_info_data.width_b = 32;
defparam sha_info_data.widthad_a = 4;
defparam sha_info_data.widthad_b = 4;
defparam sha_info_data.width_be_a = 1;
defparam sha_info_data.width_be_b = 1;
defparam sha_info_data.numwords_a = 16;
defparam sha_info_data.numwords_b = 16;
defparam sha_info_data.latency = ram_latency;
defparam sha_info_data.init_file = "sha_info_data.mif";

reg [6:0] sha_transform_entry_W_address_a;
reg [6:0] sha_transform_entry_W_address_b;
reg sha_transform_entry_W_write_enable_a;
reg sha_transform_entry_W_write_enable_b;
reg [31:0] sha_transform_entry_W_in_a;
reg [31:0] sha_transform_entry_W_in_b;
wire [31:0] sha_transform_entry_W_out_a;
wire [31:0] sha_transform_entry_W_out_b;

//   %W = alloca [80 x i32], align 4
ram_dual_port sha_transform_entry_W (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( sha_transform_entry_W_address_a ),
	.address_b( sha_transform_entry_W_address_b ),
	.wren_a( sha_transform_entry_W_write_enable_a ),
	.wren_b( sha_transform_entry_W_write_enable_b ),
	.data_a( sha_transform_entry_W_in_a ),
	.data_b( sha_transform_entry_W_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( sha_transform_entry_W_out_a ),
	.q_b( sha_transform_entry_W_out_b)
);
defparam sha_transform_entry_W.width_a = 32;
defparam sha_transform_entry_W.width_b = 32;
defparam sha_transform_entry_W.widthad_a = 7;
defparam sha_transform_entry_W.widthad_b = 7;
defparam sha_transform_entry_W.width_be_a = 1;
defparam sha_transform_entry_W.width_be_b = 1;
defparam sha_transform_entry_W.numwords_a = 80;
defparam sha_transform_entry_W.numwords_b = 80;
defparam sha_transform_entry_W.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_indata_a;
assign select_indata_a = (tag_a == `TAG_g_indata);
reg [ram_latency:0] select_indata_reg_a;
wire [7:0] memory_controller_indata_out_a;
assign memory_controller_indata_out_a = {8{ select_indata_reg_a[ram_latency]}} & indata_out_a;

wire select_sha_info_digest0_a;
assign select_sha_info_digest0_a = (tag_a == `TAG_g_sha_info_digest0);
reg [ram_latency:0] select_sha_info_digest0_reg_a;
wire [31:0] memory_controller_sha_info_digest0_out_a;
assign memory_controller_sha_info_digest0_out_a = {32{ select_sha_info_digest0_reg_a[ram_latency]}} & sha_info_digest0_out_a;

wire select_sha_info_digest1_a;
assign select_sha_info_digest1_a = (tag_a == `TAG_g_sha_info_digest1);
reg [ram_latency:0] select_sha_info_digest1_reg_a;
wire [31:0] memory_controller_sha_info_digest1_out_a;
assign memory_controller_sha_info_digest1_out_a = {32{ select_sha_info_digest1_reg_a[ram_latency]}} & sha_info_digest1_out_a;

wire select_sha_info_digest2_a;
assign select_sha_info_digest2_a = (tag_a == `TAG_g_sha_info_digest2);
reg [ram_latency:0] select_sha_info_digest2_reg_a;
wire [31:0] memory_controller_sha_info_digest2_out_a;
assign memory_controller_sha_info_digest2_out_a = {32{ select_sha_info_digest2_reg_a[ram_latency]}} & sha_info_digest2_out_a;

wire select_sha_info_digest3_a;
assign select_sha_info_digest3_a = (tag_a == `TAG_g_sha_info_digest3);
reg [ram_latency:0] select_sha_info_digest3_reg_a;
wire [31:0] memory_controller_sha_info_digest3_out_a;
assign memory_controller_sha_info_digest3_out_a = {32{ select_sha_info_digest3_reg_a[ram_latency]}} & sha_info_digest3_out_a;

wire select_sha_info_digest4_a;
assign select_sha_info_digest4_a = (tag_a == `TAG_g_sha_info_digest4);
reg [ram_latency:0] select_sha_info_digest4_reg_a;
wire [31:0] memory_controller_sha_info_digest4_out_a;
assign memory_controller_sha_info_digest4_out_a = {32{ select_sha_info_digest4_reg_a[ram_latency]}} & sha_info_digest4_out_a;

wire select_sha_info_data_a;
assign select_sha_info_data_a = (tag_a == `TAG_g_sha_info_data);
reg [ram_latency:0] select_sha_info_data_reg_a;
wire [31:0] memory_controller_sha_info_data_out_a;
assign memory_controller_sha_info_data_out_a = {32{ select_sha_info_data_reg_a[ram_latency]}} & sha_info_data_out_a;

wire select_sha_transform_entry_W_a;
assign select_sha_transform_entry_W_a = (tag_a == `TAG_sha_transform_entry_W);
reg [ram_latency:0] select_sha_transform_entry_W_reg_a;
wire [31:0] memory_controller_sha_transform_entry_W_out_a;
assign memory_controller_sha_transform_entry_W_out_a = {32{ select_sha_transform_entry_W_reg_a[ram_latency]}} & sha_transform_entry_W_out_a;

always @(*)
begin
	indata_address_a = memory_controller_address_a [14-1+0:0] & {14{select_indata_a}};
	indata_write_enable_a = memory_controller_write_enable_a & select_indata_a;
	indata_in_a [8-1:0] = memory_controller_in_a[8-1:0];

	sha_info_digest0_address_a = memory_controller_address_a [1-1+2:2] & {1{select_sha_info_digest0_a}};
	sha_info_digest0_write_enable_a = memory_controller_write_enable_a & select_sha_info_digest0_a;
	sha_info_digest0_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	sha_info_digest1_address_a = memory_controller_address_a [1-1+2:2] & {1{select_sha_info_digest1_a}};
	sha_info_digest1_write_enable_a = memory_controller_write_enable_a & select_sha_info_digest1_a;
	sha_info_digest1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	sha_info_digest2_address_a = memory_controller_address_a [1-1+2:2] & {1{select_sha_info_digest2_a}};
	sha_info_digest2_write_enable_a = memory_controller_write_enable_a & select_sha_info_digest2_a;
	sha_info_digest2_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	sha_info_digest3_address_a = memory_controller_address_a [1-1+2:2] & {1{select_sha_info_digest3_a}};
	sha_info_digest3_write_enable_a = memory_controller_write_enable_a & select_sha_info_digest3_a;
	sha_info_digest3_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	sha_info_digest4_address_a = memory_controller_address_a [1-1+2:2] & {1{select_sha_info_digest4_a}};
	sha_info_digest4_write_enable_a = memory_controller_write_enable_a & select_sha_info_digest4_a;
	sha_info_digest4_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	sha_info_data_address_a = memory_controller_address_a [4-1+2:2] & {4{select_sha_info_data_a}};
	sha_info_data_write_enable_a = memory_controller_write_enable_a & select_sha_info_data_a;
	sha_info_data_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	sha_transform_entry_W_address_a = memory_controller_address_a [7-1+2:2] & {7{select_sha_transform_entry_W_a}};
	sha_transform_entry_W_write_enable_a = memory_controller_write_enable_a & select_sha_transform_entry_W_a;
	sha_transform_entry_W_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_sha_info_digest0_reg_a[ram_latency]}} | {2{select_sha_info_digest1_reg_a[ram_latency]}} | {2{select_sha_info_digest2_reg_a[ram_latency]}} | {2{select_sha_info_digest3_reg_a[ram_latency]}} | {2{select_sha_info_digest4_reg_a[ram_latency]}} | {2{select_sha_info_data_reg_a[ram_latency]}} | {2{select_sha_transform_entry_W_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_indata_out_a | memory_controller_sha_info_digest0_out_a | memory_controller_sha_info_digest1_out_a | memory_controller_sha_info_digest2_out_a | memory_controller_sha_info_digest3_out_a | memory_controller_sha_info_digest4_out_a | memory_controller_sha_info_data_out_a | memory_controller_sha_transform_entry_W_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_indata_reg_a[j+1] <= select_indata_reg_a[j];
select_sha_info_digest0_reg_a[j+1] <= select_sha_info_digest0_reg_a[j];
select_sha_info_digest1_reg_a[j+1] <= select_sha_info_digest1_reg_a[j];
select_sha_info_digest2_reg_a[j+1] <= select_sha_info_digest2_reg_a[j];
select_sha_info_digest3_reg_a[j+1] <= select_sha_info_digest3_reg_a[j];
select_sha_info_digest4_reg_a[j+1] <= select_sha_info_digest4_reg_a[j];
select_sha_info_data_reg_a[j+1] <= select_sha_info_data_reg_a[j];
select_sha_transform_entry_W_reg_a[j+1] <= select_sha_transform_entry_W_reg_a[j];
end
always @(*)
begin
select_indata_reg_a[0] <= select_indata_a;
select_sha_info_digest0_reg_a[0] <= select_sha_info_digest0_a;
select_sha_info_digest1_reg_a[0] <= select_sha_info_digest1_a;
select_sha_info_digest2_reg_a[0] <= select_sha_info_digest2_a;
select_sha_info_digest3_reg_a[0] <= select_sha_info_digest3_a;
select_sha_info_digest4_reg_a[0] <= select_sha_info_digest4_a;
select_sha_info_data_reg_a[0] <= select_sha_info_data_a;
select_sha_transform_entry_W_reg_a[0] <= select_sha_transform_entry_W_a;
end

reg [2:0] select_not_struct_b;

wire select_indata_b;
assign select_indata_b = (tag_b == `TAG_g_indata);
reg [ram_latency:0] select_indata_reg_b;
wire [7:0] memory_controller_indata_out_b;
assign memory_controller_indata_out_b = {8{ select_indata_reg_b[ram_latency]}} & indata_out_b;

wire select_sha_info_digest0_b;
assign select_sha_info_digest0_b = (tag_b == `TAG_g_sha_info_digest0);
reg [ram_latency:0] select_sha_info_digest0_reg_b;
wire [31:0] memory_controller_sha_info_digest0_out_b;
assign memory_controller_sha_info_digest0_out_b = {32{ select_sha_info_digest0_reg_b[ram_latency]}} & sha_info_digest0_out_b;

wire select_sha_info_digest1_b;
assign select_sha_info_digest1_b = (tag_b == `TAG_g_sha_info_digest1);
reg [ram_latency:0] select_sha_info_digest1_reg_b;
wire [31:0] memory_controller_sha_info_digest1_out_b;
assign memory_controller_sha_info_digest1_out_b = {32{ select_sha_info_digest1_reg_b[ram_latency]}} & sha_info_digest1_out_b;

wire select_sha_info_digest2_b;
assign select_sha_info_digest2_b = (tag_b == `TAG_g_sha_info_digest2);
reg [ram_latency:0] select_sha_info_digest2_reg_b;
wire [31:0] memory_controller_sha_info_digest2_out_b;
assign memory_controller_sha_info_digest2_out_b = {32{ select_sha_info_digest2_reg_b[ram_latency]}} & sha_info_digest2_out_b;

wire select_sha_info_digest3_b;
assign select_sha_info_digest3_b = (tag_b == `TAG_g_sha_info_digest3);
reg [ram_latency:0] select_sha_info_digest3_reg_b;
wire [31:0] memory_controller_sha_info_digest3_out_b;
assign memory_controller_sha_info_digest3_out_b = {32{ select_sha_info_digest3_reg_b[ram_latency]}} & sha_info_digest3_out_b;

wire select_sha_info_digest4_b;
assign select_sha_info_digest4_b = (tag_b == `TAG_g_sha_info_digest4);
reg [ram_latency:0] select_sha_info_digest4_reg_b;
wire [31:0] memory_controller_sha_info_digest4_out_b;
assign memory_controller_sha_info_digest4_out_b = {32{ select_sha_info_digest4_reg_b[ram_latency]}} & sha_info_digest4_out_b;

wire select_sha_info_data_b;
assign select_sha_info_data_b = (tag_b == `TAG_g_sha_info_data);
reg [ram_latency:0] select_sha_info_data_reg_b;
wire [31:0] memory_controller_sha_info_data_out_b;
assign memory_controller_sha_info_data_out_b = {32{ select_sha_info_data_reg_b[ram_latency]}} & sha_info_data_out_b;

wire select_sha_transform_entry_W_b;
assign select_sha_transform_entry_W_b = (tag_b == `TAG_sha_transform_entry_W);
reg [ram_latency:0] select_sha_transform_entry_W_reg_b;
wire [31:0] memory_controller_sha_transform_entry_W_out_b;
assign memory_controller_sha_transform_entry_W_out_b = {32{ select_sha_transform_entry_W_reg_b[ram_latency]}} & sha_transform_entry_W_out_b;

always @(*)
begin
	indata_address_b = memory_controller_address_b [14-1+0:0] & {14{select_indata_b}};
	indata_write_enable_b = memory_controller_write_enable_b & select_indata_b;
	indata_in_b [8-1:0] = memory_controller_in_b[8-1:0];

	sha_info_digest0_address_b = memory_controller_address_b [1-1+2:2] & {1{select_sha_info_digest0_b}};
	sha_info_digest0_write_enable_b = memory_controller_write_enable_b & select_sha_info_digest0_b;
	sha_info_digest0_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	sha_info_digest1_address_b = memory_controller_address_b [1-1+2:2] & {1{select_sha_info_digest1_b}};
	sha_info_digest1_write_enable_b = memory_controller_write_enable_b & select_sha_info_digest1_b;
	sha_info_digest1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	sha_info_digest2_address_b = memory_controller_address_b [1-1+2:2] & {1{select_sha_info_digest2_b}};
	sha_info_digest2_write_enable_b = memory_controller_write_enable_b & select_sha_info_digest2_b;
	sha_info_digest2_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	sha_info_digest3_address_b = memory_controller_address_b [1-1+2:2] & {1{select_sha_info_digest3_b}};
	sha_info_digest3_write_enable_b = memory_controller_write_enable_b & select_sha_info_digest3_b;
	sha_info_digest3_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	sha_info_digest4_address_b = memory_controller_address_b [1-1+2:2] & {1{select_sha_info_digest4_b}};
	sha_info_digest4_write_enable_b = memory_controller_write_enable_b & select_sha_info_digest4_b;
	sha_info_digest4_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	sha_info_data_address_b = memory_controller_address_b [4-1+2:2] & {4{select_sha_info_data_b}};
	sha_info_data_write_enable_b = memory_controller_write_enable_b & select_sha_info_data_b;
	sha_info_data_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	sha_transform_entry_W_address_b = memory_controller_address_b [7-1+2:2] & {7{select_sha_transform_entry_W_b}};
	sha_transform_entry_W_write_enable_b = memory_controller_write_enable_b & select_sha_transform_entry_W_b;
	sha_transform_entry_W_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_sha_info_digest0_reg_b[ram_latency]}} | {2{select_sha_info_digest1_reg_b[ram_latency]}} | {2{select_sha_info_digest2_reg_b[ram_latency]}} | {2{select_sha_info_digest3_reg_b[ram_latency]}} | {2{select_sha_info_digest4_reg_b[ram_latency]}} | {2{select_sha_info_data_reg_b[ram_latency]}} | {2{select_sha_transform_entry_W_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_indata_out_b | memory_controller_sha_info_digest0_out_b | memory_controller_sha_info_digest1_out_b | memory_controller_sha_info_digest2_out_b | memory_controller_sha_info_digest3_out_b | memory_controller_sha_info_digest4_out_b | memory_controller_sha_info_data_out_b | memory_controller_sha_transform_entry_W_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_indata_reg_b[j+1] <= select_indata_reg_b[j];
select_sha_info_digest0_reg_b[j+1] <= select_sha_info_digest0_reg_b[j];
select_sha_info_digest1_reg_b[j+1] <= select_sha_info_digest1_reg_b[j];
select_sha_info_digest2_reg_b[j+1] <= select_sha_info_digest2_reg_b[j];
select_sha_info_digest3_reg_b[j+1] <= select_sha_info_digest3_reg_b[j];
select_sha_info_digest4_reg_b[j+1] <= select_sha_info_digest4_reg_b[j];
select_sha_info_data_reg_b[j+1] <= select_sha_info_data_reg_b[j];
select_sha_transform_entry_W_reg_b[j+1] <= select_sha_transform_entry_W_reg_b[j];
end
always @(*)
begin
select_indata_reg_b[0] <= select_indata_b;
select_sha_info_digest0_reg_b[0] <= select_sha_info_digest0_b;
select_sha_info_digest1_reg_b[0] <= select_sha_info_digest1_b;
select_sha_info_digest2_reg_b[0] <= select_sha_info_digest2_b;
select_sha_info_digest3_reg_b[0] <= select_sha_info_digest3_b;
select_sha_info_digest4_reg_b[0] <= select_sha_info_digest4_b;
select_sha_info_data_reg_b[0] <= select_sha_info_data_b;
select_sha_transform_entry_W_reg_b[0] <= select_sha_transform_entry_W_b;
end

endmodule 

`timescale 1 ns / 1 ns
module sha_transform
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_1 = 6'd1;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_2 = 6'd2;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_3 = 6'd3;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_4 = 6'd4;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_5 = 6'd5;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_6 = 6'd6;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_7 = 6'd7;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_8 = 6'd8;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_9 = 6'd9;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_10 = 6'd10;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_11 = 6'd11;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_12 = 6'd12;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_13 = 6'd13;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_14 = 6'd14;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_15 = 6'd15;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_16 = 6'd16;
parameter [5:0] LEGUP_F_sha_transform_BB_entry_17 = 6'd17;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody4_18 = 6'd18;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody4_19 = 6'd19;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody4_20 = 6'd20;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody4_21 = 6'd21;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody4_22 = 6'd22;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody4_23 = 6'd23;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody4forbody4_crit_edge_24 = 6'd24;
parameter [5:0] LEGUP_F_sha_transform_BB_forend17_25 = 6'd25;
parameter [5:0] LEGUP_F_sha_transform_BB_forend17_26 = 6'd26;
parameter [5:0] LEGUP_F_sha_transform_BB_forend17_27 = 6'd27;
parameter [5:0] LEGUP_F_sha_transform_BB_forend17_28 = 6'd28;
parameter [5:0] LEGUP_F_sha_transform_BB_forend17_29 = 6'd29;
parameter [5:0] LEGUP_loop_pipeline_wait_loop2_1_30 = 6'd30;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody35preheader_31 = 6'd31;
parameter [5:0] LEGUP_loop_pipeline_wait_loop3_1_32 = 6'd32;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody54preheader_33 = 6'd33;
parameter [5:0] LEGUP_loop_pipeline_wait_loop4_1_34 = 6'd34;
parameter [5:0] LEGUP_F_sha_transform_BB_forbody76preheader_35 = 6'd35;
parameter [5:0] LEGUP_loop_pipeline_wait_loop5_1_36 = 6'd36;
parameter [5:0] LEGUP_F_sha_transform_BB_forend92_37 = 6'd37;
parameter [5:0] LEGUP_F_sha_transform_BB_forend92_38 = 6'd38;
parameter [5:0] LEGUP_F_sha_transform_BB_forend92_39 = 6'd39;
parameter [5:0] LEGUP_F_sha_transform_BB_forend92_40 = 6'd40;
parameter [5:0] LEGUP_F_sha_transform_BB_forend92_41 = 6'd41;
parameter [5:0] LEGUP_F_sha_transform_BB_forend92_42 = 6'd42;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] sha_transform_entry_0;
reg [31:0] sha_transform_entry_0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx1_reg;
reg [31:0] sha_transform_entry_1;
reg [31:0] sha_transform_entry_1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx11_reg;
reg [31:0] sha_transform_entry_2;
reg [31:0] sha_transform_entry_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx12_reg;
reg [31:0] sha_transform_entry_3;
reg [31:0] sha_transform_entry_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx13_reg;
reg [31:0] sha_transform_entry_4;
reg [31:0] sha_transform_entry_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx14_reg;
reg [31:0] sha_transform_entry_5;
reg [31:0] sha_transform_entry_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx15_reg;
reg [31:0] sha_transform_entry_6;
reg [31:0] sha_transform_entry_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx16_reg;
reg [31:0] sha_transform_entry_7;
reg [31:0] sha_transform_entry_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx17_reg;
reg [31:0] sha_transform_entry_8;
reg [31:0] sha_transform_entry_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx18_reg;
reg [31:0] sha_transform_entry_9;
reg [31:0] sha_transform_entry_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx19_reg;
reg [31:0] sha_transform_entry_10;
reg [31:0] sha_transform_entry_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx110;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx110_reg;
reg [31:0] sha_transform_entry_11;
reg [31:0] sha_transform_entry_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx111;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx111_reg;
reg [31:0] sha_transform_entry_12;
reg [31:0] sha_transform_entry_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx112;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx112_reg;
reg [31:0] sha_transform_entry_13;
reg [31:0] sha_transform_entry_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx113;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx113_reg;
reg [31:0] sha_transform_entry_14;
reg [31:0] sha_transform_entry_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx114;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx114_reg;
reg [31:0] sha_transform_entry_15;
reg [31:0] sha_transform_entry_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx115;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_entry_arrayidx115_reg;
reg [31:0] sha_transform_forbody4_indvar8;
reg [31:0] sha_transform_forbody4_indvar8_reg;
reg [31:0] sha_transform_forbody4_i1196;
reg [31:0] sha_transform_forbody4_i1196_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody4_arrayidx14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody4_arrayidx14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody4_arrayidx12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody4_arrayidx12_reg;
reg [31:0] sha_transform_forbody4_16;
reg [31:0] sha_transform_forbody4_16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody4_arrayidx9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody4_arrayidx9_reg;
reg [31:0] sha_transform_forbody4_17;
reg [31:0] sha_transform_forbody4_17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody4_arrayidx7;
reg [31:0] sha_transform_forbody4_18;
reg [31:0] sha_transform_forbody4_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody4_arrayidx5;
reg [31:0] sha_transform_forbody4_19;
reg [31:0] sha_transform_forbody4_20;
reg [31:0] sha_transform_forbody4_xor;
reg [31:0] sha_transform_forbody4_xor_reg;
reg [31:0] sha_transform_forbody4_21;
reg [31:0] sha_transform_forbody4_xor10;
reg [31:0] sha_transform_forbody4_22;
reg [31:0] sha_transform_forbody4_xor13;
reg  sha_transform_forbody4_exitcond10;
reg  sha_transform_forbody4_exitcond10_reg;
reg [31:0] sha_transform_forbody4forbody4_crit_edge_indvarnext9;
reg [31:0] sha_transform_forend17_23;
reg [31:0] sha_transform_forend17_23_reg;
reg [31:0] sha_transform_forend17_24;
reg [31:0] sha_transform_forend17_24_reg;
reg [31:0] sha_transform_forend17_25;
reg [31:0] sha_transform_forend17_25_reg;
reg [31:0] sha_transform_forend17_26;
reg [31:0] sha_transform_forend17_26_reg;
reg [31:0] sha_transform_forend17_27;
reg [31:0] sha_transform_forbody20_E0195;
reg [31:0] sha_transform_forbody20_D0194;
reg [31:0] sha_transform_forbody20_D0194_reg;
reg [31:0] sha_transform_forbody20_C0193;
reg [31:0] sha_transform_forbody20_C0193_reg;
reg [31:0] sha_transform_forbody20_B0192;
reg [31:0] sha_transform_forbody20_A0191;
reg [31:0] sha_transform_forbody20_A0191_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody20_arrayidx24;
reg [31:0] sha_transform_forbody20_shl;
reg [31:0] sha_transform_forbody20_shr;
reg [31:0] sha_transform_forbody20_or;
reg [31:0] sha_transform_forbody20_and;
reg [31:0] sha_transform_forbody20_neg;
reg [31:0] sha_transform_forbody20_and21;
reg [31:0] sha_transform_forbody20_or22;
reg [31:0] sha_transform_forbody20_29;
reg [31:0] sha_transform_forbody20_add;
reg [31:0] sha_transform_forbody20_add23;
reg [31:0] sha_transform_forbody20_add25;
reg [31:0] sha_transform_forbody20_add26;
reg [31:0] sha_transform_forbody20_add26_reg;
reg [31:0] sha_transform_forbody20_shl27;
reg [31:0] sha_transform_forbody20_shr28;
reg [31:0] sha_transform_forbody20_or29;
reg [31:0] sha_transform_forbody20_or29_reg;
reg [31:0] sha_transform_forbody35_E1189;
reg [31:0] sha_transform_forbody35_D1188;
reg [31:0] sha_transform_forbody35_D1188_reg;
reg [31:0] sha_transform_forbody35_C1187;
reg [31:0] sha_transform_forbody35_C1187_reg;
reg [31:0] sha_transform_forbody35_B1186;
reg [31:0] sha_transform_forbody35_A1185;
reg [31:0] sha_transform_forbody35_A1185_reg;
reg [31:0] sha_transform_forbody35_i3184;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody35_arrayidx43;
reg [31:0] sha_transform_forbody35_shl36;
reg [31:0] sha_transform_forbody35_shr37;
reg [31:0] sha_transform_forbody35_or38;
reg [31:0] sha_transform_forbody35_xor39;
reg [31:0] sha_transform_forbody35_xor40;
reg [31:0] sha_transform_forbody35_30;
reg [31:0] sha_transform_forbody35_add41;
reg [31:0] sha_transform_forbody35_add42;
reg [31:0] sha_transform_forbody35_add44;
reg [31:0] sha_transform_forbody35_add45;
reg [31:0] sha_transform_forbody35_add45_reg;
reg [31:0] sha_transform_forbody35_shl46;
reg [31:0] sha_transform_forbody35_shr47;
reg [31:0] sha_transform_forbody35_or48;
reg [31:0] sha_transform_forbody35_or48_reg;
reg [31:0] sha_transform_forbody54_E2183;
reg [31:0] sha_transform_forbody54_D2182;
reg [31:0] sha_transform_forbody54_D2182_reg;
reg [31:0] sha_transform_forbody54_C2181;
reg [31:0] sha_transform_forbody54_C2181_reg;
reg [31:0] sha_transform_forbody54_B2180;
reg [31:0] sha_transform_forbody54_A2179;
reg [31:0] sha_transform_forbody54_A2179_reg;
reg [31:0] sha_transform_forbody54_i4178;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody54_arrayidx65;
reg [31:0] sha_transform_forbody54_shl55;
reg [31:0] sha_transform_forbody54_shr56;
reg [31:0] sha_transform_forbody54_or57;
reg [31:0] sha_transform_forbody54_and59171;
reg [31:0] sha_transform_forbody54_or60;
reg [31:0] sha_transform_forbody54_and61;
reg [31:0] sha_transform_forbody54_or62;
reg [31:0] sha_transform_forbody54_31;
reg [31:0] sha_transform_forbody54_add63;
reg [31:0] sha_transform_forbody54_add64;
reg [31:0] sha_transform_forbody54_add66;
reg [31:0] sha_transform_forbody54_add67;
reg [31:0] sha_transform_forbody54_add67_reg;
reg [31:0] sha_transform_forbody54_shl68;
reg [31:0] sha_transform_forbody54_shr69;
reg [31:0] sha_transform_forbody54_or70;
reg [31:0] sha_transform_forbody54_or70_reg;
reg [31:0] sha_transform_forbody76_E3177;
reg [31:0] sha_transform_forbody76_D3176;
reg [31:0] sha_transform_forbody76_D3176_reg;
reg [31:0] sha_transform_forbody76_C3175;
reg [31:0] sha_transform_forbody76_C3175_reg;
reg [31:0] sha_transform_forbody76_B3174;
reg [31:0] sha_transform_forbody76_A3173;
reg [31:0] sha_transform_forbody76_A3173_reg;
reg [31:0] sha_transform_forbody76_i5172;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_forbody76_arrayidx84;
reg [31:0] sha_transform_forbody76_shl77;
reg [31:0] sha_transform_forbody76_shr78;
reg [31:0] sha_transform_forbody76_or79;
reg [31:0] sha_transform_forbody76_xor80;
reg [31:0] sha_transform_forbody76_xor81;
reg [31:0] sha_transform_forbody76_32;
reg [31:0] sha_transform_forbody76_add82;
reg [31:0] sha_transform_forbody76_add83;
reg [31:0] sha_transform_forbody76_add85;
reg [31:0] sha_transform_forbody76_add86;
reg [31:0] sha_transform_forbody76_add86_reg;
reg [31:0] sha_transform_forbody76_shl87;
reg [31:0] sha_transform_forbody76_shr88;
reg [31:0] sha_transform_forbody76_or89;
reg [31:0] sha_transform_forbody76_or89_reg;
reg [31:0] sha_transform_forend92_33;
reg [31:0] sha_transform_forend92_add93;
reg [31:0] sha_transform_forend92_34;
reg [31:0] sha_transform_forend92_add94;
reg [31:0] sha_transform_forend92_add94_reg;
reg [31:0] sha_transform_forend92_35;
reg [31:0] sha_transform_forend92_add95;
reg [31:0] sha_transform_forend92_36;
reg [31:0] sha_transform_forend92_add96;
reg [31:0] sha_transform_forend92_add96_reg;
reg [31:0] sha_transform_forend92_37;
reg [31:0] sha_transform_forend92_add97;
reg  loop2_1_pipeline_start;
reg  loop2_1_started;
reg  loop2_1_ii_state;
reg [31:0] loop2_1_i_stage0;
reg  loop2_1_epilogue;
reg  loop2_1_valid_bit_0;
reg  loop2_1_valid_bit_1;
reg  loop2_1_valid_bit_2;
reg  loop2_1_valid_bit_3;
reg [31:0] sha_transform_forbody20_E0195_reg_stage0;
reg [31:0] sha_transform_forbody20_E0195_reg_stage1;
reg [31:0] sha_transform_forbody20_or22_reg_stage0;
reg [31:0] sha_transform_forbody20_or22_reg_stage1;
reg [31:0] sha_transform_forbody20_29_reg_stage1;
reg [31:0] sha_transform_forbody20_add25_reg_stage1;
reg  loop2_1_pipeline_exit_cond;
reg  loop2_1_pipeline_finish;
reg  loop3_1_pipeline_start;
reg  loop3_1_started;
reg  loop3_1_ii_state;
reg [31:0] loop3_1_i_stage0;
reg  loop3_1_epilogue;
reg  loop3_1_valid_bit_0;
reg  loop3_1_valid_bit_1;
reg  loop3_1_valid_bit_2;
reg  loop3_1_valid_bit_3;
reg  loop3_1_valid_bit_4;
reg  loop3_1_valid_bit_5;
reg [31:0] sha_transform_forbody35_E1189_reg_stage0;
reg [31:0] sha_transform_forbody35_E1189_reg_stage1;
reg [31:0] sha_transform_forbody35_E1189_reg_stage2;
reg [31:0] sha_transform_forbody35_D1188_reg_stage0;
reg [31:0] sha_transform_forbody35_D1188_reg_stage1;
reg [31:0] sha_transform_forbody35_i3184_reg_stage1;
reg [31:0] sha_transform_forbody35_xor40_reg_stage1;
reg [31:0] sha_transform_forbody35_xor40_reg_stage2;
reg [31:0] sha_transform_forbody35_30_reg_stage2;
reg [31:0] sha_transform_forbody35_add44_reg_stage2;
reg  loop3_1_pipeline_exit_cond;
reg  loop3_1_pipeline_finish;
reg  loop4_1_pipeline_start;
reg  loop4_1_started;
reg  loop4_1_ii_state;
reg [31:0] loop4_1_i_stage0;
reg  loop4_1_epilogue;
reg  loop4_1_valid_bit_0;
reg  loop4_1_valid_bit_1;
reg  loop4_1_valid_bit_2;
reg  loop4_1_valid_bit_3;
reg  loop4_1_valid_bit_4;
reg  loop4_1_valid_bit_5;
reg [31:0] sha_transform_forbody54_E2183_reg_stage0;
reg [31:0] sha_transform_forbody54_E2183_reg_stage1;
reg [31:0] sha_transform_forbody54_E2183_reg_stage2;
reg [31:0] sha_transform_forbody54_i4178_reg_stage1;
reg [31:0] sha_transform_forbody54_and59171_reg_stage0;
reg [31:0] sha_transform_forbody54_and59171_reg_stage1;
reg [31:0] sha_transform_forbody54_and61_reg_stage0;
reg [31:0] sha_transform_forbody54_and61_reg_stage1;
reg [31:0] sha_transform_forbody54_or62_reg_stage1;
reg [31:0] sha_transform_forbody54_or62_reg_stage2;
reg [31:0] sha_transform_forbody54_31_reg_stage2;
reg [31:0] sha_transform_forbody54_add66_reg_stage2;
reg  loop4_1_pipeline_exit_cond;
reg  loop4_1_pipeline_finish;
reg  loop5_1_pipeline_start;
reg  loop5_1_started;
reg  loop5_1_ii_state;
reg [31:0] loop5_1_i_stage0;
reg  loop5_1_epilogue;
reg  loop5_1_valid_bit_0;
reg  loop5_1_valid_bit_1;
reg  loop5_1_valid_bit_2;
reg  loop5_1_valid_bit_3;
reg  loop5_1_valid_bit_4;
reg  loop5_1_valid_bit_5;
reg [31:0] sha_transform_forbody76_E3177_reg_stage0;
reg [31:0] sha_transform_forbody76_E3177_reg_stage1;
reg [31:0] sha_transform_forbody76_E3177_reg_stage2;
reg [31:0] sha_transform_forbody76_D3176_reg_stage0;
reg [31:0] sha_transform_forbody76_D3176_reg_stage1;
reg [31:0] sha_transform_forbody76_i5172_reg_stage1;
reg [31:0] sha_transform_forbody76_xor81_reg_stage1;
reg [31:0] sha_transform_forbody76_xor81_reg_stage2;
reg [31:0] sha_transform_forbody76_32_reg_stage2;
reg [31:0] sha_transform_forbody76_add85_reg_stage2;
reg  loop5_1_pipeline_exit_cond;
reg  loop5_1_pipeline_finish;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_entry_1;
LEGUP_F_sha_transform_BB_entry_1:
		next_state = LEGUP_F_sha_transform_BB_entry_2;
LEGUP_F_sha_transform_BB_entry_10:
		next_state = LEGUP_F_sha_transform_BB_entry_11;
LEGUP_F_sha_transform_BB_entry_11:
		next_state = LEGUP_F_sha_transform_BB_entry_12;
LEGUP_F_sha_transform_BB_entry_12:
		next_state = LEGUP_F_sha_transform_BB_entry_13;
LEGUP_F_sha_transform_BB_entry_13:
		next_state = LEGUP_F_sha_transform_BB_entry_14;
LEGUP_F_sha_transform_BB_entry_14:
		next_state = LEGUP_F_sha_transform_BB_entry_15;
LEGUP_F_sha_transform_BB_entry_15:
		next_state = LEGUP_F_sha_transform_BB_entry_16;
LEGUP_F_sha_transform_BB_entry_16:
		next_state = LEGUP_F_sha_transform_BB_entry_17;
LEGUP_F_sha_transform_BB_entry_17:
		next_state = LEGUP_F_sha_transform_BB_forbody4_18;
LEGUP_F_sha_transform_BB_entry_2:
		next_state = LEGUP_F_sha_transform_BB_entry_3;
LEGUP_F_sha_transform_BB_entry_3:
		next_state = LEGUP_F_sha_transform_BB_entry_4;
LEGUP_F_sha_transform_BB_entry_4:
		next_state = LEGUP_F_sha_transform_BB_entry_5;
LEGUP_F_sha_transform_BB_entry_5:
		next_state = LEGUP_F_sha_transform_BB_entry_6;
LEGUP_F_sha_transform_BB_entry_6:
		next_state = LEGUP_F_sha_transform_BB_entry_7;
LEGUP_F_sha_transform_BB_entry_7:
		next_state = LEGUP_F_sha_transform_BB_entry_8;
LEGUP_F_sha_transform_BB_entry_8:
		next_state = LEGUP_F_sha_transform_BB_entry_9;
LEGUP_F_sha_transform_BB_entry_9:
		next_state = LEGUP_F_sha_transform_BB_entry_10;
LEGUP_F_sha_transform_BB_forbody35preheader_31:
		next_state = LEGUP_loop_pipeline_wait_loop3_1_32;
LEGUP_F_sha_transform_BB_forbody4_18:
		next_state = LEGUP_F_sha_transform_BB_forbody4_19;
LEGUP_F_sha_transform_BB_forbody4_19:
		next_state = LEGUP_F_sha_transform_BB_forbody4_20;
LEGUP_F_sha_transform_BB_forbody4_20:
		next_state = LEGUP_F_sha_transform_BB_forbody4_21;
LEGUP_F_sha_transform_BB_forbody4_21:
		next_state = LEGUP_F_sha_transform_BB_forbody4_22;
LEGUP_F_sha_transform_BB_forbody4_22:
		next_state = LEGUP_F_sha_transform_BB_forbody4_23;
LEGUP_F_sha_transform_BB_forbody4_23:
	if ((sha_transform_forbody4_exitcond10_reg == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_forend17_25;
	else if ((sha_transform_forbody4_exitcond10_reg == 1'd0))
		next_state = LEGUP_F_sha_transform_BB_forbody4forbody4_crit_edge_24;
LEGUP_F_sha_transform_BB_forbody4forbody4_crit_edge_24:
		next_state = LEGUP_F_sha_transform_BB_forbody4_18;
LEGUP_F_sha_transform_BB_forbody54preheader_33:
		next_state = LEGUP_loop_pipeline_wait_loop4_1_34;
LEGUP_F_sha_transform_BB_forbody76preheader_35:
		next_state = LEGUP_loop_pipeline_wait_loop5_1_36;
LEGUP_F_sha_transform_BB_forend17_25:
		next_state = LEGUP_F_sha_transform_BB_forend17_26;
LEGUP_F_sha_transform_BB_forend17_26:
		next_state = LEGUP_F_sha_transform_BB_forend17_27;
LEGUP_F_sha_transform_BB_forend17_27:
		next_state = LEGUP_F_sha_transform_BB_forend17_28;
LEGUP_F_sha_transform_BB_forend17_28:
		next_state = LEGUP_F_sha_transform_BB_forend17_29;
LEGUP_F_sha_transform_BB_forend17_29:
		next_state = LEGUP_loop_pipeline_wait_loop2_1_30;
LEGUP_F_sha_transform_BB_forend92_37:
		next_state = LEGUP_F_sha_transform_BB_forend92_38;
LEGUP_F_sha_transform_BB_forend92_38:
		next_state = LEGUP_F_sha_transform_BB_forend92_39;
LEGUP_F_sha_transform_BB_forend92_39:
		next_state = LEGUP_F_sha_transform_BB_forend92_40;
LEGUP_F_sha_transform_BB_forend92_40:
		next_state = LEGUP_F_sha_transform_BB_forend92_41;
LEGUP_F_sha_transform_BB_forend92_41:
		next_state = LEGUP_F_sha_transform_BB_forend92_42;
LEGUP_F_sha_transform_BB_forend92_42:
		next_state = LEGUP_0;
LEGUP_loop_pipeline_wait_loop2_1_30:
	if ((loop2_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_forbody35preheader_31;
	else if ((loop2_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_forbody35preheader_31;
LEGUP_loop_pipeline_wait_loop3_1_32:
	if ((loop3_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_forbody54preheader_33;
	else if ((loop3_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_forbody54preheader_33;
LEGUP_loop_pipeline_wait_loop4_1_34:
	if ((loop4_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_forbody76preheader_35;
	else if ((loop4_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_forbody76preheader_35;
LEGUP_loop_pipeline_wait_loop5_1_36:
	if ((loop5_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_forend92_37;
	else if ((loop5_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_sha_transform_BB_forend92_37;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
		sha_transform_entry_0 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		sha_transform_entry_0_reg <= sha_transform_entry_0;
		if (start == 1'b0 && ^(sha_transform_entry_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_0_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 0*/
if (reset) begin sha_transform_entry_arrayidx1 = 0; end
		sha_transform_entry_arrayidx1 = `TAG_sha_transform_entry_W_a;
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 0*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx1_reg <= sha_transform_entry_arrayidx1;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx1_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %1 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !2*/
		sha_transform_entry_1 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %1 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		sha_transform_entry_1_reg <= sha_transform_entry_1;
		if (start == 1'b0 && ^(sha_transform_entry_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_1_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.1 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 1*/
if (reset) begin sha_transform_entry_arrayidx11 = 0; end
		sha_transform_entry_arrayidx11 = (`TAG_sha_transform_entry_W_a + (4 * 32'd1));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.1 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 1*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx11_reg <= sha_transform_entry_arrayidx11;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx11_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !2*/
		sha_transform_entry_2 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		sha_transform_entry_2_reg <= sha_transform_entry_2;
		if (start == 1'b0 && ^(sha_transform_entry_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_2_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.2 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 2*/
if (reset) begin sha_transform_entry_arrayidx12 = 0; end
		sha_transform_entry_arrayidx12 = (`TAG_sha_transform_entry_W_a + (4 * 32'd2));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.2 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx12_reg <= sha_transform_entry_arrayidx12;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx12_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %3 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !2*/
		sha_transform_entry_3 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %3 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		sha_transform_entry_3_reg <= sha_transform_entry_3;
		if (start == 1'b0 && ^(sha_transform_entry_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_3_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.3 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 3*/
if (reset) begin sha_transform_entry_arrayidx13 = 0; end
		sha_transform_entry_arrayidx13 = (`TAG_sha_transform_entry_W_a + (4 * 32'd3));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.3 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 3*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx13_reg <= sha_transform_entry_arrayidx13;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx13_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !2*/
		sha_transform_entry_4 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		sha_transform_entry_4_reg <= sha_transform_entry_4;
		if (start == 1'b0 && ^(sha_transform_entry_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_4_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.4 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 4*/
if (reset) begin sha_transform_entry_arrayidx14 = 0; end
		sha_transform_entry_arrayidx14 = (`TAG_sha_transform_entry_W_a + (4 * 32'd4));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.4 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 4*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx14_reg <= sha_transform_entry_arrayidx14;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx14_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %5 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !2*/
		sha_transform_entry_5 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %5 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		sha_transform_entry_5_reg <= sha_transform_entry_5;
		if (start == 1'b0 && ^(sha_transform_entry_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_5_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.5 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 5*/
if (reset) begin sha_transform_entry_arrayidx15 = 0; end
		sha_transform_entry_arrayidx15 = (`TAG_sha_transform_entry_W_a + (4 * 32'd5));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.5 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 5*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx15_reg <= sha_transform_entry_arrayidx15;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx15_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !2*/
		sha_transform_entry_6 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		sha_transform_entry_6_reg <= sha_transform_entry_6;
		if (start == 1'b0 && ^(sha_transform_entry_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_6_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.6 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 6*/
if (reset) begin sha_transform_entry_arrayidx16 = 0; end
		sha_transform_entry_arrayidx16 = (`TAG_sha_transform_entry_W_a + (4 * 32'd6));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.6 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 6*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx16_reg <= sha_transform_entry_arrayidx16;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx16_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %7 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !2*/
		sha_transform_entry_7 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %7 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		sha_transform_entry_7_reg <= sha_transform_entry_7;
		if (start == 1'b0 && ^(sha_transform_entry_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_7_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.7 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 7*/
if (reset) begin sha_transform_entry_arrayidx17 = 0; end
		sha_transform_entry_arrayidx17 = (`TAG_sha_transform_entry_W_a + (4 * 32'd7));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.7 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 7*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx17_reg <= sha_transform_entry_arrayidx17;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx17_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !2*/
		sha_transform_entry_8 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		sha_transform_entry_8_reg <= sha_transform_entry_8;
		if (start == 1'b0 && ^(sha_transform_entry_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_8_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.8 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 8*/
if (reset) begin sha_transform_entry_arrayidx18 = 0; end
		sha_transform_entry_arrayidx18 = (`TAG_sha_transform_entry_W_a + (4 * 32'd8));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.8 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 8*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx18_reg <= sha_transform_entry_arrayidx18;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx18_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %9 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !2*/
		sha_transform_entry_9 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %9 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		sha_transform_entry_9_reg <= sha_transform_entry_9;
		if (start == 1'b0 && ^(sha_transform_entry_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_9_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.9 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 9*/
if (reset) begin sha_transform_entry_arrayidx19 = 0; end
		sha_transform_entry_arrayidx19 = (`TAG_sha_transform_entry_W_a + (4 * 32'd9));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.9 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 9*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx19_reg <= sha_transform_entry_arrayidx19;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx19_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !2*/
		sha_transform_entry_10 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		sha_transform_entry_10_reg <= sha_transform_entry_10;
		if (start == 1'b0 && ^(sha_transform_entry_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_10_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.10 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 10*/
if (reset) begin sha_transform_entry_arrayidx110 = 0; end
		sha_transform_entry_arrayidx110 = (`TAG_sha_transform_entry_W_a + (4 * 32'd10));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.10 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 10*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx110_reg <= sha_transform_entry_arrayidx110;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx110_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %11 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !2*/
		sha_transform_entry_11 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %11 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		sha_transform_entry_11_reg <= sha_transform_entry_11;
		if (start == 1'b0 && ^(sha_transform_entry_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_11_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.11 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 11*/
if (reset) begin sha_transform_entry_arrayidx111 = 0; end
		sha_transform_entry_arrayidx111 = (`TAG_sha_transform_entry_W_a + (4 * 32'd11));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.11 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 11*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx111_reg <= sha_transform_entry_arrayidx111;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx111_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !2*/
		sha_transform_entry_12 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		sha_transform_entry_12_reg <= sha_transform_entry_12;
		if (start == 1'b0 && ^(sha_transform_entry_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_12_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.12 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 12*/
if (reset) begin sha_transform_entry_arrayidx112 = 0; end
		sha_transform_entry_arrayidx112 = (`TAG_sha_transform_entry_W_a + (4 * 32'd12));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.12 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 12*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx112_reg <= sha_transform_entry_arrayidx112;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx112_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %13 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !2*/
		sha_transform_entry_13 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %13 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		sha_transform_entry_13_reg <= sha_transform_entry_13;
		if (start == 1'b0 && ^(sha_transform_entry_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_13_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.13 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 13*/
if (reset) begin sha_transform_entry_arrayidx113 = 0; end
		sha_transform_entry_arrayidx113 = (`TAG_sha_transform_entry_W_a + (4 * 32'd13));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.13 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 13*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx113_reg <= sha_transform_entry_arrayidx113;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx113_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
		sha_transform_entry_14 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		sha_transform_entry_14_reg <= sha_transform_entry_14;
		if (start == 1'b0 && ^(sha_transform_entry_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_14_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.14 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 14*/
if (reset) begin sha_transform_entry_arrayidx114 = 0; end
		sha_transform_entry_arrayidx114 = (`TAG_sha_transform_entry_W_a + (4 * 32'd14));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.14 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 14*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx114_reg <= sha_transform_entry_arrayidx114;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx114_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %15 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
		sha_transform_entry_15 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %15 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		sha_transform_entry_15_reg <= sha_transform_entry_15;
		if (start == 1'b0 && ^(sha_transform_entry_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_15_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.15 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 15*/
if (reset) begin sha_transform_entry_arrayidx115 = 0; end
		sha_transform_entry_arrayidx115 = (`TAG_sha_transform_entry_W_a + (4 * 32'd15));
end
always @(posedge clk) begin
	/* sha_transform: %entry*/
	/*   %arrayidx1.15 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 15*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		sha_transform_entry_arrayidx115_reg <= sha_transform_entry_arrayidx115;
		if (start == 1'b0 && ^(sha_transform_entry_arrayidx115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_entry_arrayidx115_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %indvar8 = phi i32 [ %indvar.next9, %for.body4.for.body4_crit_edge ], [ 0, %entry ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_entry_17) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody4_indvar8 = 32'd0;
	end
	/* sha_transform: %for.body4*/
	/*   %indvar8 = phi i32 [ %indvar.next9, %for.body4.for.body4_crit_edge ], [ 0, %entry ]*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody4forbody4_crit_edge_24) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody4_indvar8 = sha_transform_forbody4forbody4_crit_edge_indvarnext9;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %indvar8 = phi i32 [ %indvar.next9, %for.body4.for.body4_crit_edge ], [ 0, %entry ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_entry_17) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody4_indvar8_reg <= sha_transform_forbody4_indvar8;
		if (start == 1'b0 && ^(sha_transform_forbody4_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_indvar8_reg"); $finish; end
	end
	/* sha_transform: %for.body4*/
	/*   %indvar8 = phi i32 [ %indvar.next9, %for.body4.for.body4_crit_edge ], [ 0, %entry ]*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody4forbody4_crit_edge_24) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody4_indvar8_reg <= sha_transform_forbody4_indvar8;
		if (start == 1'b0 && ^(sha_transform_forbody4_indvar8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_indvar8_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %i.1196 = add i32 %indvar8, 16*/
		sha_transform_forbody4_i1196 = (sha_transform_forbody4_indvar8_reg + 32'd16);
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %i.1196 = add i32 %indvar8, 16*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		sha_transform_forbody4_i1196_reg <= sha_transform_forbody4_i1196;
		if (start == 1'b0 && ^(sha_transform_forbody4_i1196) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_i1196_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %arrayidx14 = getelementptr [80 x i32]* %W, i32 0, i32 %i.1196*/
		sha_transform_forbody4_arrayidx14 = (`TAG_sha_transform_entry_W_a + (4 * sha_transform_forbody4_i1196_reg));
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %arrayidx14 = getelementptr [80 x i32]* %W, i32 0, i32 %i.1196*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_20)) begin
		sha_transform_forbody4_arrayidx14_reg <= sha_transform_forbody4_arrayidx14;
		if (start == 1'b0 && ^(sha_transform_forbody4_arrayidx14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_arrayidx14_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %arrayidx12 = getelementptr [80 x i32]* %W, i32 0, i32 %indvar8*/
		sha_transform_forbody4_arrayidx12 = (`TAG_sha_transform_entry_W_a + (4 * sha_transform_forbody4_indvar8_reg));
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %arrayidx12 = getelementptr [80 x i32]* %W, i32 0, i32 %indvar8*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_18)) begin
		sha_transform_forbody4_arrayidx12_reg <= sha_transform_forbody4_arrayidx12;
		if (start == 1'b0 && ^(sha_transform_forbody4_arrayidx12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_arrayidx12_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %16 = add i32 %indvar8, 2*/
		sha_transform_forbody4_16 = (sha_transform_forbody4_indvar8_reg + 32'd2);
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %16 = add i32 %indvar8, 2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_18)) begin
		sha_transform_forbody4_16_reg <= sha_transform_forbody4_16;
		if (start == 1'b0 && ^(sha_transform_forbody4_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_16_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %arrayidx9 = getelementptr [80 x i32]* %W, i32 0, i32 %16*/
		sha_transform_forbody4_arrayidx9 = (`TAG_sha_transform_entry_W_a + (4 * sha_transform_forbody4_16_reg));
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %arrayidx9 = getelementptr [80 x i32]* %W, i32 0, i32 %16*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		sha_transform_forbody4_arrayidx9_reg <= sha_transform_forbody4_arrayidx9;
		if (start == 1'b0 && ^(sha_transform_forbody4_arrayidx9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_arrayidx9_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %17 = add i32 %indvar8, 8*/
		sha_transform_forbody4_17 = (sha_transform_forbody4_indvar8_reg + 32'd8);
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %17 = add i32 %indvar8, 8*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_18)) begin
		sha_transform_forbody4_17_reg <= sha_transform_forbody4_17;
		if (start == 1'b0 && ^(sha_transform_forbody4_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_17_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %arrayidx7 = getelementptr [80 x i32]* %W, i32 0, i32 %17*/
		sha_transform_forbody4_arrayidx7 = (`TAG_sha_transform_entry_W_a + (4 * sha_transform_forbody4_17_reg));
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %18 = add i32 %indvar8, 13*/
		sha_transform_forbody4_18 = (sha_transform_forbody4_indvar8_reg + 32'd13);
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %18 = add i32 %indvar8, 13*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_18)) begin
		sha_transform_forbody4_18_reg <= sha_transform_forbody4_18;
		if (start == 1'b0 && ^(sha_transform_forbody4_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_18_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %arrayidx5 = getelementptr [80 x i32]* %W, i32 0, i32 %18*/
		sha_transform_forbody4_arrayidx5 = (`TAG_sha_transform_entry_W_a + (4 * sha_transform_forbody4_18_reg));
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %19 = load i32* %arrayidx5, align 4, !tbaa !2*/
		sha_transform_forbody4_19 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %20 = load i32* %arrayidx7, align 4, !tbaa !2*/
		sha_transform_forbody4_20 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %xor = xor i32 %20, %19*/
		sha_transform_forbody4_xor = (sha_transform_forbody4_20 ^ sha_transform_forbody4_19);
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %xor = xor i32 %20, %19*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_21)) begin
		sha_transform_forbody4_xor_reg <= sha_transform_forbody4_xor;
		if (start == 1'b0 && ^(sha_transform_forbody4_xor) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_xor_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %21 = load i32* %arrayidx9, align 4, !tbaa !2*/
		sha_transform_forbody4_21 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %xor10 = xor i32 %xor, %21*/
		sha_transform_forbody4_xor10 = (sha_transform_forbody4_xor_reg ^ sha_transform_forbody4_21);
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %22 = load i32* %arrayidx12, align 4, !tbaa !2*/
		sha_transform_forbody4_22 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %xor13 = xor i32 %xor10, %22*/
		sha_transform_forbody4_xor13 = (sha_transform_forbody4_xor10 ^ sha_transform_forbody4_22);
end
always @(*) begin
	/* sha_transform: %for.body4*/
	/*   %exitcond10 = icmp eq i32 %indvar8, 63*/
		sha_transform_forbody4_exitcond10 = (sha_transform_forbody4_indvar8_reg == 32'd63);
end
always @(posedge clk) begin
	/* sha_transform: %for.body4*/
	/*   %exitcond10 = icmp eq i32 %indvar8, 63*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_18)) begin
		sha_transform_forbody4_exitcond10_reg <= sha_transform_forbody4_exitcond10;
		if (start == 1'b0 && ^(sha_transform_forbody4_exitcond10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody4_exitcond10_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body4.for.body4_crit_edge*/
	/*   %indvar.next9 = add i32 %indvar8, 1*/
		sha_transform_forbody4forbody4_crit_edge_indvarnext9 = (sha_transform_forbody4_indvar8_reg + 32'd1);
end
always @(*) begin
	/* sha_transform: %for.end17*/
	/*   %23 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
		sha_transform_forend17_23 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %for.end17*/
	/*   %23 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_27)) begin
		sha_transform_forend17_23_reg <= sha_transform_forend17_23;
		if (start == 1'b0 && ^(sha_transform_forend17_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forend17_23_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.end17*/
	/*   %24 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
		sha_transform_forend17_24 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %for.end17*/
	/*   %24 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_27)) begin
		sha_transform_forend17_24_reg <= sha_transform_forend17_24;
		if (start == 1'b0 && ^(sha_transform_forend17_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forend17_24_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.end17*/
	/*   %25 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
		sha_transform_forend17_25 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %for.end17*/
	/*   %25 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_28)) begin
		sha_transform_forend17_25_reg <= sha_transform_forend17_25;
		if (start == 1'b0 && ^(sha_transform_forend17_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forend17_25_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.end17*/
	/*   %26 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
		sha_transform_forend17_26 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* sha_transform: %for.end17*/
	/*   %26 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_28)) begin
		sha_transform_forend17_26_reg <= sha_transform_forend17_26;
		if (start == 1'b0 && ^(sha_transform_forend17_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forend17_26_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.end17*/
	/*   %27 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
		sha_transform_forend17_27 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %E.0195 = phi i32 [ %27, %for.end17 ], [ %D.0194, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0))) begin
		sha_transform_forbody20_E0195 = sha_transform_forbody20_D0194_reg;
	end
	/* sha_transform: %for.body20*/
	/*   %E.0195 = phi i32 [ %27, %for.end17 ], [ %D.0194, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forend17_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody20_E0195 = sha_transform_forend17_27;
	end
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %D.0194 = phi i32 [ %26, %for.end17 ], [ %C.0193, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0))) begin
		sha_transform_forbody20_D0194 = sha_transform_forbody20_C0193_reg;
	end
	/* sha_transform: %for.body20*/
	/*   %D.0194 = phi i32 [ %26, %for.end17 ], [ %C.0193, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forend17_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody20_D0194 = sha_transform_forend17_26_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body20*/
	/*   %D.0194 = phi i32 [ %26, %for.end17 ], [ %C.0193, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0))) begin
		sha_transform_forbody20_D0194_reg <= sha_transform_forbody20_D0194;
		if (start == 1'b0 && ^(sha_transform_forbody20_D0194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_D0194_reg"); $finish; end
	end
	/* sha_transform: %for.body20*/
	/*   %D.0194 = phi i32 [ %26, %for.end17 ], [ %C.0193, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forend17_29) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody20_D0194_reg <= sha_transform_forbody20_D0194;
		if (start == 1'b0 && ^(sha_transform_forbody20_D0194) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_D0194_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %C.0193 = phi i32 [ %25, %for.end17 ], [ %or29, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0))) begin
		sha_transform_forbody20_C0193 = sha_transform_forbody20_or29;
	end
	/* sha_transform: %for.body20*/
	/*   %C.0193 = phi i32 [ %25, %for.end17 ], [ %or29, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forend17_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody20_C0193 = sha_transform_forend17_25_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body20*/
	/*   %C.0193 = phi i32 [ %25, %for.end17 ], [ %or29, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0))) begin
		sha_transform_forbody20_C0193_reg <= sha_transform_forbody20_C0193;
		if (start == 1'b0 && ^(sha_transform_forbody20_C0193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_C0193_reg"); $finish; end
	end
	/* sha_transform: %for.body20*/
	/*   %C.0193 = phi i32 [ %25, %for.end17 ], [ %or29, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forend17_29) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody20_C0193_reg <= sha_transform_forbody20_C0193;
		if (start == 1'b0 && ^(sha_transform_forbody20_C0193) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_C0193_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %B.0192 = phi i32 [ %24, %for.end17 ], [ %A.0191, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_2))) begin
		sha_transform_forbody20_B0192 = sha_transform_forbody20_A0191_reg;
	end
	/* sha_transform: %for.body20*/
	/*   %B.0192 = phi i32 [ %24, %for.end17 ], [ %A.0191, %for.body20 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forend17_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody20_B0192 = sha_transform_forend17_24_reg;
	end
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %A.0191 = phi i32 [ %23, %for.end17 ], [ %add26, %for.body20 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd1) & loop2_1_valid_bit_3))) begin
		sha_transform_forbody20_A0191 = sha_transform_forbody20_add26;
	end
	/* sha_transform: %for.body20*/
	/*   %A.0191 = phi i32 [ %23, %for.end17 ], [ %add26, %for.body20 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forend17_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody20_A0191 = sha_transform_forend17_23_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body20*/
	/*   %A.0191 = phi i32 [ %23, %for.end17 ], [ %add26, %for.body20 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd1) & loop2_1_valid_bit_3))) begin
		sha_transform_forbody20_A0191_reg <= sha_transform_forbody20_A0191;
		if (start == 1'b0 && ^(sha_transform_forbody20_A0191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_A0191_reg"); $finish; end
	end
	/* sha_transform: %for.body20*/
	/*   %A.0191 = phi i32 [ %23, %for.end17 ], [ %add26, %for.body20 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forend17_29) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody20_A0191_reg <= sha_transform_forbody20_A0191;
		if (start == 1'b0 && ^(sha_transform_forbody20_A0191) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_A0191_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %arrayidx24 = getelementptr [80 x i32]* %W, i32 0, i32 %28, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody20_arrayidx24 = (`TAG_sha_transform_entry_W_a + (4 * loop2_1_i_stage0));
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %shl = shl i32 %A.0191, 5, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody20_shl = (sha_transform_forbody20_A0191_reg <<< (32'd5 % 32));
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %shr = lshr i32 %A.0191, 27, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody20_shr = (sha_transform_forbody20_A0191_reg >>> (32'd27 % 32));
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %or = or i32 %shl, %shr, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody20_or = (sha_transform_forbody20_shl | sha_transform_forbody20_shr);
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %and = and i32 %C.0193, %B.0192, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody20_and = (sha_transform_forbody20_C0193_reg & sha_transform_forbody20_B0192);
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %neg = xor i32 %B.0192, -1, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody20_neg = (sha_transform_forbody20_B0192 ^ -32'd1);
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %and21 = and i32 %D.0194, %neg, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody20_and21 = (sha_transform_forbody20_D0194_reg & sha_transform_forbody20_neg);
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %or22 = or i32 %and21, %and, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody20_or22 = (sha_transform_forbody20_and21 | sha_transform_forbody20_and);
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %29 = load i32* %arrayidx24, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !7, !legup.pipeline.stage !6
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody20_29 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %add = add i32 %or, 1518500249, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody20_add = (sha_transform_forbody20_or + 32'd1518500249);
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %add23 = add i32 %add, %E.0195, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody20_add23 = (sha_transform_forbody20_add + sha_transform_forbody20_E0195_reg_stage1);
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %add25 = add i32 %add23, %or22, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody20_add25 = (sha_transform_forbody20_add23 + sha_transform_forbody20_or22_reg_stage1);
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %add26 = add i32 %add25, %29, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 1 II: 2 start_ii_state = 3 % 2 = 1 avail_ii_state = 3 % 2 = 1*/
		sha_transform_forbody20_add26 = (sha_transform_forbody20_add25_reg_stage1 + sha_transform_forbody20_29_reg_stage1);
end
always @(posedge clk) begin
	/* sha_transform: %for.body20*/
	/*   %add26 = add i32 %add25, %29, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !8
	start_time: 3 avail_time: 3 stage: 1 II: 2 start_ii_state = 3 % 2 = 1 avail_ii_state = 3 % 2 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 1'd1) & loop2_1_valid_bit_3))) begin
		sha_transform_forbody20_add26_reg <= sha_transform_forbody20_add26;
		if (start == 1'b0 && ^(sha_transform_forbody20_add26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_add26_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %shl27 = shl i32 %B.0192, 30, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody20_shl27 = (sha_transform_forbody20_B0192 <<< (32'd30 % 32));
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %shr28 = lshr i32 %B.0192, 2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody20_shr28 = (sha_transform_forbody20_B0192 >>> (32'd2 % 32));
end
always @(*) begin
	/* sha_transform: %for.body20*/
	/*   %or29 = or i32 %shl27, %shr28, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody20_or29 = (sha_transform_forbody20_shl27 | sha_transform_forbody20_shr28);
end
always @(posedge clk) begin
	/* sha_transform: %for.body20*/
	/*   %or29 = or i32 %shl27, %shr28, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0))) begin
		sha_transform_forbody20_or29_reg <= sha_transform_forbody20_or29;
		if (start == 1'b0 && ^(sha_transform_forbody20_or29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_or29_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %E.1189 = phi i32 [ %D.0194, %for.body35.preheader ], [ %D.1188, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_0))) begin
		sha_transform_forbody35_E1189 = sha_transform_forbody35_D1188_reg;
	end
	/* sha_transform: %for.body35*/
	/*   %E.1189 = phi i32 [ %D.0194, %for.body35.preheader ], [ %D.1188, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody35preheader_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody35_E1189 = sha_transform_forbody20_D0194_reg;
	end
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %D.1188 = phi i32 [ %C.0193, %for.body35.preheader ], [ %C.1187, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_0))) begin
		sha_transform_forbody35_D1188 = sha_transform_forbody35_C1187;
	end
	/* sha_transform: %for.body35*/
	/*   %D.1188 = phi i32 [ %C.0193, %for.body35.preheader ], [ %C.1187, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody35preheader_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody35_D1188 = sha_transform_forbody20_C0193_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body35*/
	/*   %D.1188 = phi i32 [ %C.0193, %for.body35.preheader ], [ %C.1187, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_0))) begin
		sha_transform_forbody35_D1188_reg <= sha_transform_forbody35_D1188;
		if (start == 1'b0 && ^(sha_transform_forbody35_D1188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_D1188_reg"); $finish; end
	end
	/* sha_transform: %for.body35*/
	/*   %D.1188 = phi i32 [ %C.0193, %for.body35.preheader ], [ %C.1187, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody35preheader_31) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody35_D1188_reg <= sha_transform_forbody35_D1188;
		if (start == 1'b0 && ^(sha_transform_forbody35_D1188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_D1188_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %C.1187 = phi i32 [ %or29, %for.body35.preheader ], [ %or48, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_2))) begin
		sha_transform_forbody35_C1187 = sha_transform_forbody35_or48;
	end
	/* sha_transform: %for.body35*/
	/*   %C.1187 = phi i32 [ %or29, %for.body35.preheader ], [ %or48, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody35preheader_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody35_C1187 = sha_transform_forbody20_or29_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body35*/
	/*   %C.1187 = phi i32 [ %or29, %for.body35.preheader ], [ %or48, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_2))) begin
		sha_transform_forbody35_C1187_reg <= sha_transform_forbody35_C1187;
		if (start == 1'b0 && ^(sha_transform_forbody35_C1187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_C1187_reg"); $finish; end
	end
	/* sha_transform: %for.body35*/
	/*   %C.1187 = phi i32 [ %or29, %for.body35.preheader ], [ %or48, %for.body35 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody35preheader_31) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody35_C1187_reg <= sha_transform_forbody35_C1187;
		if (start == 1'b0 && ^(sha_transform_forbody35_C1187) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_C1187_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %B.1186 = phi i32 [ %A.0191, %for.body35.preheader ], [ %A.1185, %for.body35 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_4))) begin
		sha_transform_forbody35_B1186 = sha_transform_forbody35_A1185_reg;
	end
	/* sha_transform: %for.body35*/
	/*   %B.1186 = phi i32 [ %A.0191, %for.body35.preheader ], [ %A.1185, %for.body35 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody35preheader_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody35_B1186 = sha_transform_forbody20_A0191_reg;
	end
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %A.1185 = phi i32 [ %add26, %for.body35.preheader ], [ %add45, %for.body35 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd1) & loop3_1_valid_bit_5))) begin
		sha_transform_forbody35_A1185 = sha_transform_forbody35_add45;
	end
	/* sha_transform: %for.body35*/
	/*   %A.1185 = phi i32 [ %add26, %for.body35.preheader ], [ %add45, %for.body35 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody35preheader_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody35_A1185 = sha_transform_forbody20_add26_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body35*/
	/*   %A.1185 = phi i32 [ %add26, %for.body35.preheader ], [ %add45, %for.body35 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd1) & loop3_1_valid_bit_5))) begin
		sha_transform_forbody35_A1185_reg <= sha_transform_forbody35_A1185;
		if (start == 1'b0 && ^(sha_transform_forbody35_A1185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_A1185_reg"); $finish; end
	end
	/* sha_transform: %for.body35*/
	/*   %A.1185 = phi i32 [ %add26, %for.body35.preheader ], [ %add45, %for.body35 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody35preheader_31) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody35_A1185_reg <= sha_transform_forbody35_A1185;
		if (start == 1'b0 && ^(sha_transform_forbody35_A1185) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_A1185_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %i.3184 = add i32 %indvar4, 20, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !6
	start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
		sha_transform_forbody35_i3184 = (loop3_1_i_stage0 + 32'd20);
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %arrayidx43 = getelementptr [80 x i32]* %W, i32 0, i32 %i.3184, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody35_arrayidx43 = (`TAG_sha_transform_entry_W_a + (4 * sha_transform_forbody35_i3184_reg_stage1));
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %shl36 = shl i32 %A.1185, 5, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody35_shl36 = (sha_transform_forbody35_A1185_reg <<< (32'd5 % 32));
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %shr37 = lshr i32 %A.1185, 27, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody35_shr37 = (sha_transform_forbody35_A1185_reg >>> (32'd27 % 32));
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %or38 = or i32 %shl36, %shr37, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody35_or38 = (sha_transform_forbody35_shl36 | sha_transform_forbody35_shr37);
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %xor39 = xor i32 %C.1187, %B.1186, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody35_xor39 = (sha_transform_forbody35_C1187_reg ^ sha_transform_forbody35_B1186);
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %xor40 = xor i32 %xor39, %D.1188, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody35_xor40 = (sha_transform_forbody35_xor39 ^ sha_transform_forbody35_D1188_reg_stage1);
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %30 = load i32* %arrayidx43, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody35_30 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %add41 = add i32 %or38, 1859775393, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody35_add41 = (sha_transform_forbody35_or38 + 32'd1859775393);
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %add42 = add i32 %add41, %xor40, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody35_add42 = (sha_transform_forbody35_add41 + sha_transform_forbody35_xor40_reg_stage2);
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %add44 = add i32 %add42, %E.1189, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody35_add44 = (sha_transform_forbody35_add42 + sha_transform_forbody35_E1189_reg_stage2);
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %add45 = add i32 %add44, %30, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !13, !legup.pipeline.stage !7
	start_time: 5 avail_time: 5 stage: 2 II: 2 start_ii_state = 5 % 2 = 1 avail_ii_state = 5 % 2 = 1*/
		sha_transform_forbody35_add45 = (sha_transform_forbody35_add44_reg_stage2 + sha_transform_forbody35_30_reg_stage2);
end
always @(posedge clk) begin
	/* sha_transform: %for.body35*/
	/*   %add45 = add i32 %add44, %30, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !13, !legup.pipeline.stage !7
	start_time: 5 avail_time: 5 stage: 2 II: 2 start_ii_state = 5 % 2 = 1 avail_ii_state = 5 % 2 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop3_1_ii_state == 1'd1) & loop3_1_valid_bit_5))) begin
		sha_transform_forbody35_add45_reg <= sha_transform_forbody35_add45;
		if (start == 1'b0 && ^(sha_transform_forbody35_add45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_add45_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %shl46 = shl i32 %B.1186, 30, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody35_shl46 = (sha_transform_forbody35_B1186 <<< (32'd30 % 32));
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %shr47 = lshr i32 %B.1186, 2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody35_shr47 = (sha_transform_forbody35_B1186 >>> (32'd2 % 32));
end
always @(*) begin
	/* sha_transform: %for.body35*/
	/*   %or48 = or i32 %shl46, %shr47, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody35_or48 = (sha_transform_forbody35_shl46 | sha_transform_forbody35_shr47);
end
always @(posedge clk) begin
	/* sha_transform: %for.body35*/
	/*   %or48 = or i32 %shl46, %shr47, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_2))) begin
		sha_transform_forbody35_or48_reg <= sha_transform_forbody35_or48;
		if (start == 1'b0 && ^(sha_transform_forbody35_or48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_or48_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %E.2183 = phi i32 [ %D.1188, %for.body54.preheader ], [ %D.2182, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_0))) begin
		sha_transform_forbody54_E2183 = sha_transform_forbody54_D2182_reg;
	end
	/* sha_transform: %for.body54*/
	/*   %E.2183 = phi i32 [ %D.1188, %for.body54.preheader ], [ %D.2182, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody54preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody54_E2183 = sha_transform_forbody35_D1188_reg;
	end
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %D.2182 = phi i32 [ %C.1187, %for.body54.preheader ], [ %C.2181, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_0))) begin
		sha_transform_forbody54_D2182 = sha_transform_forbody54_C2181;
	end
	/* sha_transform: %for.body54*/
	/*   %D.2182 = phi i32 [ %C.1187, %for.body54.preheader ], [ %C.2181, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody54preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody54_D2182 = sha_transform_forbody35_C1187_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body54*/
	/*   %D.2182 = phi i32 [ %C.1187, %for.body54.preheader ], [ %C.2181, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_0))) begin
		sha_transform_forbody54_D2182_reg <= sha_transform_forbody54_D2182;
		if (start == 1'b0 && ^(sha_transform_forbody54_D2182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_D2182_reg"); $finish; end
	end
	/* sha_transform: %for.body54*/
	/*   %D.2182 = phi i32 [ %C.1187, %for.body54.preheader ], [ %C.2181, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody54preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody54_D2182_reg <= sha_transform_forbody54_D2182;
		if (start == 1'b0 && ^(sha_transform_forbody54_D2182) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_D2182_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %C.2181 = phi i32 [ %or48, %for.body54.preheader ], [ %or70, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_2))) begin
		sha_transform_forbody54_C2181 = sha_transform_forbody54_or70;
	end
	/* sha_transform: %for.body54*/
	/*   %C.2181 = phi i32 [ %or48, %for.body54.preheader ], [ %or70, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody54preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody54_C2181 = sha_transform_forbody35_or48_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body54*/
	/*   %C.2181 = phi i32 [ %or48, %for.body54.preheader ], [ %or70, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_2))) begin
		sha_transform_forbody54_C2181_reg <= sha_transform_forbody54_C2181;
		if (start == 1'b0 && ^(sha_transform_forbody54_C2181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_C2181_reg"); $finish; end
	end
	/* sha_transform: %for.body54*/
	/*   %C.2181 = phi i32 [ %or48, %for.body54.preheader ], [ %or70, %for.body54 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody54preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody54_C2181_reg <= sha_transform_forbody54_C2181;
		if (start == 1'b0 && ^(sha_transform_forbody54_C2181) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_C2181_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %B.2180 = phi i32 [ %A.1185, %for.body54.preheader ], [ %A.2179, %for.body54 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_4))) begin
		sha_transform_forbody54_B2180 = sha_transform_forbody54_A2179_reg;
	end
	/* sha_transform: %for.body54*/
	/*   %B.2180 = phi i32 [ %A.1185, %for.body54.preheader ], [ %A.2179, %for.body54 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody54preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody54_B2180 = sha_transform_forbody35_A1185_reg;
	end
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %A.2179 = phi i32 [ %add45, %for.body54.preheader ], [ %add67, %for.body54 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd1) & loop4_1_valid_bit_5))) begin
		sha_transform_forbody54_A2179 = sha_transform_forbody54_add67;
	end
	/* sha_transform: %for.body54*/
	/*   %A.2179 = phi i32 [ %add45, %for.body54.preheader ], [ %add67, %for.body54 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody54preheader_33) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody54_A2179 = sha_transform_forbody35_add45_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body54*/
	/*   %A.2179 = phi i32 [ %add45, %for.body54.preheader ], [ %add67, %for.body54 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd1) & loop4_1_valid_bit_5))) begin
		sha_transform_forbody54_A2179_reg <= sha_transform_forbody54_A2179;
		if (start == 1'b0 && ^(sha_transform_forbody54_A2179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_A2179_reg"); $finish; end
	end
	/* sha_transform: %for.body54*/
	/*   %A.2179 = phi i32 [ %add45, %for.body54.preheader ], [ %add67, %for.body54 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody54preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody54_A2179_reg <= sha_transform_forbody54_A2179;
		if (start == 1'b0 && ^(sha_transform_forbody54_A2179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_A2179_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %i.4178 = add i32 %indvar2, 40, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !6
	start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
		sha_transform_forbody54_i4178 = (loop4_1_i_stage0 + 32'd40);
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %arrayidx65 = getelementptr [80 x i32]* %W, i32 0, i32 %i.4178, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody54_arrayidx65 = (`TAG_sha_transform_entry_W_a + (4 * sha_transform_forbody54_i4178_reg_stage1));
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %shl55 = shl i32 %A.2179, 5, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody54_shl55 = (sha_transform_forbody54_A2179_reg <<< (32'd5 % 32));
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %shr56 = lshr i32 %A.2179, 27, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody54_shr56 = (sha_transform_forbody54_A2179_reg >>> (32'd27 % 32));
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %or57 = or i32 %shl55, %shr56, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody54_or57 = (sha_transform_forbody54_shl55 | sha_transform_forbody54_shr56);
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %and59171 = or i32 %D.2182, %C.2181, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody54_and59171 = (sha_transform_forbody54_D2182_reg | sha_transform_forbody54_C2181);
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %or60 = and i32 %and59171, %B.2180, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody54_or60 = (sha_transform_forbody54_and59171_reg_stage1 & sha_transform_forbody54_B2180);
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %and61 = and i32 %D.2182, %C.2181, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
		sha_transform_forbody54_and61 = (sha_transform_forbody54_D2182_reg & sha_transform_forbody54_C2181);
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %or62 = or i32 %or60, %and61, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody54_or62 = (sha_transform_forbody54_or60 | sha_transform_forbody54_and61_reg_stage1);
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %31 = load i32* %arrayidx65, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody54_31 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %add63 = add i32 %or57, -1894007588, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody54_add63 = (sha_transform_forbody54_or57 + -32'd1894007588);
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %add64 = add i32 %add63, %E.2183, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody54_add64 = (sha_transform_forbody54_add63 + sha_transform_forbody54_E2183_reg_stage2);
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %add66 = add i32 %add64, %or62, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody54_add66 = (sha_transform_forbody54_add64 + sha_transform_forbody54_or62_reg_stage2);
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %add67 = add i32 %add66, %31, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !13, !legup.pipeline.stage !7
	start_time: 5 avail_time: 5 stage: 2 II: 2 start_ii_state = 5 % 2 = 1 avail_ii_state = 5 % 2 = 1*/
		sha_transform_forbody54_add67 = (sha_transform_forbody54_add66_reg_stage2 + sha_transform_forbody54_31_reg_stage2);
end
always @(posedge clk) begin
	/* sha_transform: %for.body54*/
	/*   %add67 = add i32 %add66, %31, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !13, !legup.pipeline.stage !7
	start_time: 5 avail_time: 5 stage: 2 II: 2 start_ii_state = 5 % 2 = 1 avail_ii_state = 5 % 2 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop4_1_ii_state == 1'd1) & loop4_1_valid_bit_5))) begin
		sha_transform_forbody54_add67_reg <= sha_transform_forbody54_add67;
		if (start == 1'b0 && ^(sha_transform_forbody54_add67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_add67_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %shl68 = shl i32 %B.2180, 30, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody54_shl68 = (sha_transform_forbody54_B2180 <<< (32'd30 % 32));
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %shr69 = lshr i32 %B.2180, 2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody54_shr69 = (sha_transform_forbody54_B2180 >>> (32'd2 % 32));
end
always @(*) begin
	/* sha_transform: %for.body54*/
	/*   %or70 = or i32 %shl68, %shr69, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody54_or70 = (sha_transform_forbody54_shl68 | sha_transform_forbody54_shr69);
end
always @(posedge clk) begin
	/* sha_transform: %for.body54*/
	/*   %or70 = or i32 %shl68, %shr69, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_2))) begin
		sha_transform_forbody54_or70_reg <= sha_transform_forbody54_or70;
		if (start == 1'b0 && ^(sha_transform_forbody54_or70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_or70_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %E.3177 = phi i32 [ %D.2182, %for.body76.preheader ], [ %D.3176, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_0))) begin
		sha_transform_forbody76_E3177 = sha_transform_forbody76_D3176_reg;
	end
	/* sha_transform: %for.body76*/
	/*   %E.3177 = phi i32 [ %D.2182, %for.body76.preheader ], [ %D.3176, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody76preheader_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody76_E3177 = sha_transform_forbody54_D2182_reg;
	end
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %D.3176 = phi i32 [ %C.2181, %for.body76.preheader ], [ %C.3175, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_0))) begin
		sha_transform_forbody76_D3176 = sha_transform_forbody76_C3175;
	end
	/* sha_transform: %for.body76*/
	/*   %D.3176 = phi i32 [ %C.2181, %for.body76.preheader ], [ %C.3175, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody76preheader_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody76_D3176 = sha_transform_forbody54_C2181_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body76*/
	/*   %D.3176 = phi i32 [ %C.2181, %for.body76.preheader ], [ %C.3175, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_0))) begin
		sha_transform_forbody76_D3176_reg <= sha_transform_forbody76_D3176;
		if (start == 1'b0 && ^(sha_transform_forbody76_D3176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_D3176_reg"); $finish; end
	end
	/* sha_transform: %for.body76*/
	/*   %D.3176 = phi i32 [ %C.2181, %for.body76.preheader ], [ %C.3175, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody76preheader_35) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody76_D3176_reg <= sha_transform_forbody76_D3176;
		if (start == 1'b0 && ^(sha_transform_forbody76_D3176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_D3176_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %C.3175 = phi i32 [ %or70, %for.body76.preheader ], [ %or89, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_2))) begin
		sha_transform_forbody76_C3175 = sha_transform_forbody76_or89;
	end
	/* sha_transform: %for.body76*/
	/*   %C.3175 = phi i32 [ %or70, %for.body76.preheader ], [ %or89, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody76preheader_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody76_C3175 = sha_transform_forbody54_or70_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body76*/
	/*   %C.3175 = phi i32 [ %or70, %for.body76.preheader ], [ %or89, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_2))) begin
		sha_transform_forbody76_C3175_reg <= sha_transform_forbody76_C3175;
		if (start == 1'b0 && ^(sha_transform_forbody76_C3175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_C3175_reg"); $finish; end
	end
	/* sha_transform: %for.body76*/
	/*   %C.3175 = phi i32 [ %or70, %for.body76.preheader ], [ %or89, %for.body76 ], !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !6
	start_time: 0 avail_time: 0 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 0 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody76preheader_35) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody76_C3175_reg <= sha_transform_forbody76_C3175;
		if (start == 1'b0 && ^(sha_transform_forbody76_C3175) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_C3175_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %B.3174 = phi i32 [ %A.2179, %for.body76.preheader ], [ %A.3173, %for.body76 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_4))) begin
		sha_transform_forbody76_B3174 = sha_transform_forbody76_A3173_reg;
	end
	/* sha_transform: %for.body76*/
	/*   %B.3174 = phi i32 [ %A.2179, %for.body76.preheader ], [ %A.3173, %for.body76 ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody76preheader_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody76_B3174 = sha_transform_forbody54_A2179_reg;
	end
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %A.3173 = phi i32 [ %add67, %for.body76.preheader ], [ %add86, %for.body76 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd1) & loop5_1_valid_bit_5))) begin
		sha_transform_forbody76_A3173 = sha_transform_forbody76_add86;
	end
	/* sha_transform: %for.body76*/
	/*   %A.3173 = phi i32 [ %add67, %for.body76.preheader ], [ %add86, %for.body76 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	else /* if (((cur_state == LEGUP_F_sha_transform_BB_forbody76preheader_35) & (memory_controller_waitrequest == 1'd0))) */ begin
		sha_transform_forbody76_A3173 = sha_transform_forbody54_add67_reg;
	end
end
always @(posedge clk) begin
	/* sha_transform: %for.body76*/
	/*   %A.3173 = phi i32 [ %add67, %for.body76.preheader ], [ %add86, %for.body76 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd1) & loop5_1_valid_bit_5))) begin
		sha_transform_forbody76_A3173_reg <= sha_transform_forbody76_A3173;
		if (start == 1'b0 && ^(sha_transform_forbody76_A3173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_A3173_reg"); $finish; end
	end
	/* sha_transform: %for.body76*/
	/*   %A.3173 = phi i32 [ %add67, %for.body76.preheader ], [ %add86, %for.body76 ], !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody76preheader_35) & (memory_controller_waitrequest == 1'd0))) begin
		sha_transform_forbody76_A3173_reg <= sha_transform_forbody76_A3173;
		if (start == 1'b0 && ^(sha_transform_forbody76_A3173) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_A3173_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %i.5172 = add i32 %indvar, 60, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !8, !legup.pipeline.stage !6
	start_time: 1 avail_time: 1 stage: 0 II: 2 start_ii_state = 1 % 2 = 1 avail_ii_state = 1 % 2 = 1*/
		sha_transform_forbody76_i5172 = (loop5_1_i_stage0 + 32'd60);
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %arrayidx84 = getelementptr [80 x i32]* %W, i32 0, i32 %i.5172, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody76_arrayidx84 = (`TAG_sha_transform_entry_W_a + (4 * sha_transform_forbody76_i5172_reg_stage1));
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %shl77 = shl i32 %A.3173, 5, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody76_shl77 = (sha_transform_forbody76_A3173_reg <<< (32'd5 % 32));
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %shr78 = lshr i32 %A.3173, 27, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody76_shr78 = (sha_transform_forbody76_A3173_reg >>> (32'd27 % 32));
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %or79 = or i32 %shl77, %shr78, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody76_or79 = (sha_transform_forbody76_shl77 | sha_transform_forbody76_shr78);
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %xor80 = xor i32 %C.3175, %B.3174, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody76_xor80 = (sha_transform_forbody76_C3175_reg ^ sha_transform_forbody76_B3174);
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %xor81 = xor i32 %xor80, %D.3176, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody76_xor81 = (sha_transform_forbody76_xor80 ^ sha_transform_forbody76_D3176_reg_stage1);
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %32 = load i32* %arrayidx84, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody76_32 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %add82 = add i32 %or79, -899497514, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody76_add82 = (sha_transform_forbody76_or79 + -32'd899497514);
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %add83 = add i32 %add82, %xor81, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody76_add83 = (sha_transform_forbody76_add82 + sha_transform_forbody76_xor81_reg_stage2);
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %add85 = add i32 %add83, %E.3177, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 4 avail_time: 4 stage: 2 II: 2 start_ii_state = 4 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
		sha_transform_forbody76_add85 = (sha_transform_forbody76_add83 + sha_transform_forbody76_E3177_reg_stage2);
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %add86 = add i32 %add85, %32, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !13, !legup.pipeline.stage !7
	start_time: 5 avail_time: 5 stage: 2 II: 2 start_ii_state = 5 % 2 = 1 avail_ii_state = 5 % 2 = 1*/
		sha_transform_forbody76_add86 = (sha_transform_forbody76_add85_reg_stage2 + sha_transform_forbody76_32_reg_stage2);
end
always @(posedge clk) begin
	/* sha_transform: %for.body76*/
	/*   %add86 = add i32 %add85, %32, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !13, !legup.pipeline.stage !7
	start_time: 5 avail_time: 5 stage: 2 II: 2 start_ii_state = 5 % 2 = 1 avail_ii_state = 5 % 2 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop5_1_ii_state == 1'd1) & loop5_1_valid_bit_5))) begin
		sha_transform_forbody76_add86_reg <= sha_transform_forbody76_add86;
		if (start == 1'b0 && ^(sha_transform_forbody76_add86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_add86_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %shl87 = shl i32 %B.3174, 30, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody76_shl87 = (sha_transform_forbody76_B3174 <<< (32'd30 % 32));
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %shr88 = lshr i32 %B.3174, 2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody76_shr88 = (sha_transform_forbody76_B3174 >>> (32'd2 % 32));
end
always @(*) begin
	/* sha_transform: %for.body76*/
	/*   %or89 = or i32 %shl87, %shr88, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
		sha_transform_forbody76_or89 = (sha_transform_forbody76_shl87 | sha_transform_forbody76_shr88);
end
always @(posedge clk) begin
	/* sha_transform: %for.body76*/
	/*   %or89 = or i32 %shl87, %shr88, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !8
	start_time: 2 avail_time: 2 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_2))) begin
		sha_transform_forbody76_or89_reg <= sha_transform_forbody76_or89;
		if (start == 1'b0 && ^(sha_transform_forbody76_or89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_or89_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %33 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
		sha_transform_forend92_33 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %add93 = add i32 %33, %add86*/
		sha_transform_forend92_add93 = (sha_transform_forend92_33 + sha_transform_forbody76_add86_reg);
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %34 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
		sha_transform_forend92_34 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %add94 = add i32 %34, %A.3173*/
		sha_transform_forend92_add94 = (sha_transform_forend92_34 + sha_transform_forbody76_A3173_reg);
end
always @(posedge clk) begin
	/* sha_transform: %for.end92*/
	/*   %add94 = add i32 %34, %A.3173*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		sha_transform_forend92_add94_reg <= sha_transform_forend92_add94;
		if (start == 1'b0 && ^(sha_transform_forend92_add94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forend92_add94_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %35 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
		sha_transform_forend92_35 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %add95 = add i32 %35, %or89*/
		sha_transform_forend92_add95 = (sha_transform_forend92_35 + sha_transform_forbody76_or89_reg);
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %36 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
		sha_transform_forend92_36 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %add96 = add i32 %36, %C.3175*/
		sha_transform_forend92_add96 = (sha_transform_forend92_36 + sha_transform_forbody76_C3175_reg);
end
always @(posedge clk) begin
	/* sha_transform: %for.end92*/
	/*   %add96 = add i32 %36, %C.3175*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		sha_transform_forend92_add96_reg <= sha_transform_forend92_add96;
		if (start == 1'b0 && ^(sha_transform_forend92_add96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forend92_add96_reg"); $finish; end
	end
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %37 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
		sha_transform_forend92_37 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* sha_transform: %for.end92*/
	/*   %add97 = add i32 %37, %D.3176*/
		sha_transform_forend92_add97 = (sha_transform_forend92_37 + sha_transform_forbody76_D3176_reg);
end
always @(*) begin
	loop2_1_pipeline_start = 1'd0;
	if (reset) begin
		loop2_1_pipeline_start = 1'd0;
	end
	if (((cur_state == LEGUP_F_sha_transform_BB_forend17_29) & (memory_controller_waitrequest == 1'd0))) begin
		loop2_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop2_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started)))) begin
		loop2_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_epilogue & (~(loop2_1_valid_bit_2) & loop2_1_valid_bit_3)))) begin
		loop2_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop2_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started)))) begin
		loop2_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 1'd0))) begin
		loop2_1_ii_state <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 1'd1))) begin
		loop2_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop2_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started)))) begin
		loop2_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 1'd1)) & loop2_1_valid_bit_1))) begin
		loop2_1_i_stage0 <= (loop2_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop2_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop2_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop2_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_started & ((loop2_1_ii_state == 1'd0) & loop2_1_pipeline_exit_cond)))) begin
		loop2_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_epilogue & (~(loop2_1_valid_bit_2) & loop2_1_valid_bit_3)))) begin
		loop2_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started))) | ((loop2_1_started & ~(loop2_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop2_1_started & ((loop2_1_ii_state == 1'd0) & loop2_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started))) | ((loop2_1_started & ~(loop2_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop2_1_started & ((loop2_1_ii_state == 1'd0) & loop2_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_1 <= loop2_1_valid_bit_0;
		if (start == 1'b0 && ^(loop2_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_2 <= loop2_1_valid_bit_1;
		if (start == 1'b0 && ^(loop2_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_3 <= loop2_1_valid_bit_2;
		if (start == 1'b0 && ^(loop2_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0))) begin
		sha_transform_forbody20_E0195_reg_stage0 <= sha_transform_forbody20_E0195;
		if (start == 1'b0 && ^(sha_transform_forbody20_E0195) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_E0195_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd1) & loop2_1_valid_bit_1))) begin
		sha_transform_forbody20_E0195_reg_stage1 <= sha_transform_forbody20_E0195_reg_stage0;
		if (start == 1'b0 && ^(sha_transform_forbody20_E0195_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_E0195_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0))) begin
		sha_transform_forbody20_or22_reg_stage0 <= sha_transform_forbody20_or22;
		if (start == 1'b0 && ^(sha_transform_forbody20_or22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_or22_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd1) & loop2_1_valid_bit_1))) begin
		sha_transform_forbody20_or22_reg_stage1 <= sha_transform_forbody20_or22_reg_stage0;
		if (start == 1'b0 && ^(sha_transform_forbody20_or22_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_or22_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_2))) begin
		sha_transform_forbody20_29_reg_stage1 <= sha_transform_forbody20_29;
		if (start == 1'b0 && ^(sha_transform_forbody20_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_29_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_2))) begin
		sha_transform_forbody20_add25_reg_stage1 <= sha_transform_forbody20_add25;
		if (start == 1'b0 && ^(sha_transform_forbody20_add25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody20_add25_reg_stage1"); $finish; end
	end
end
always @(*) begin
	loop2_1_pipeline_exit_cond = (loop2_1_i_stage0 == 19);
end
always @(*) begin
	loop2_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop2_1_epilogue & (~(loop2_1_valid_bit_2) & loop2_1_valid_bit_3)));
end
always @(*) begin
	loop3_1_pipeline_start = 1'd0;
	if (reset) begin
		loop3_1_pipeline_start = 1'd0;
	end
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody35preheader_31) & (memory_controller_waitrequest == 1'd0))) begin
		loop3_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop3_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop3_1_pipeline_start & ~(loop3_1_started)))) begin
		loop3_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop3_1_epilogue & (~(loop3_1_valid_bit_4) & loop3_1_valid_bit_5)))) begin
		loop3_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop3_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop3_1_pipeline_start & ~(loop3_1_started)))) begin
		loop3_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop3_1_ii_state == 1'd0))) begin
		loop3_1_ii_state <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop3_1_ii_state == 1'd1))) begin
		loop3_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop3_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop3_1_pipeline_start & ~(loop3_1_started)))) begin
		loop3_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop3_1_ii_state == 1'd1)) & loop3_1_valid_bit_1))) begin
		loop3_1_i_stage0 <= (loop3_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop3_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop3_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop3_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop3_1_started & ((loop3_1_ii_state == 1'd0) & loop3_1_pipeline_exit_cond)))) begin
		loop3_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop3_1_epilogue & (~(loop3_1_valid_bit_4) & loop3_1_valid_bit_5)))) begin
		loop3_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop3_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop3_1_pipeline_start & ~(loop3_1_started))) | ((loop3_1_started & ~(loop3_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop3_1_started & ((loop3_1_ii_state == 1'd0) & loop3_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop3_1_pipeline_start & ~(loop3_1_started))) | ((loop3_1_started & ~(loop3_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop3_1_started & ((loop3_1_ii_state == 1'd0) & loop3_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop3_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop3_1_valid_bit_1 <= loop3_1_valid_bit_0;
		if (start == 1'b0 && ^(loop3_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop3_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop3_1_valid_bit_2 <= loop3_1_valid_bit_1;
		if (start == 1'b0 && ^(loop3_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop3_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop3_1_valid_bit_3 <= loop3_1_valid_bit_2;
		if (start == 1'b0 && ^(loop3_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop3_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop3_1_valid_bit_4 <= loop3_1_valid_bit_3;
		if (start == 1'b0 && ^(loop3_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop3_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop3_1_valid_bit_5 <= loop3_1_valid_bit_4;
		if (start == 1'b0 && ^(loop3_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop3_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop3_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_0))) begin
		sha_transform_forbody35_E1189_reg_stage0 <= sha_transform_forbody35_E1189;
		if (start == 1'b0 && ^(sha_transform_forbody35_E1189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_E1189_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd1) & loop3_1_valid_bit_1))) begin
		sha_transform_forbody35_E1189_reg_stage1 <= sha_transform_forbody35_E1189_reg_stage0;
		if (start == 1'b0 && ^(sha_transform_forbody35_E1189_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_E1189_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd1) & loop3_1_valid_bit_3))) begin
		sha_transform_forbody35_E1189_reg_stage2 <= sha_transform_forbody35_E1189_reg_stage1;
		if (start == 1'b0 && ^(sha_transform_forbody35_E1189_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_E1189_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_0))) begin
		sha_transform_forbody35_D1188_reg_stage0 <= sha_transform_forbody35_D1188;
		if (start == 1'b0 && ^(sha_transform_forbody35_D1188) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_D1188_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd1) & loop3_1_valid_bit_1))) begin
		sha_transform_forbody35_D1188_reg_stage1 <= sha_transform_forbody35_D1188_reg_stage0;
		if (start == 1'b0 && ^(sha_transform_forbody35_D1188_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_D1188_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd1) & loop3_1_valid_bit_1))) begin
		sha_transform_forbody35_i3184_reg_stage1 <= sha_transform_forbody35_i3184;
		if (start == 1'b0 && ^(sha_transform_forbody35_i3184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_i3184_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_2))) begin
		sha_transform_forbody35_xor40_reg_stage1 <= sha_transform_forbody35_xor40;
		if (start == 1'b0 && ^(sha_transform_forbody35_xor40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_xor40_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd1) & loop3_1_valid_bit_3))) begin
		sha_transform_forbody35_xor40_reg_stage2 <= sha_transform_forbody35_xor40_reg_stage1;
		if (start == 1'b0 && ^(sha_transform_forbody35_xor40_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_xor40_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_4))) begin
		sha_transform_forbody35_30_reg_stage2 <= sha_transform_forbody35_30;
		if (start == 1'b0 && ^(sha_transform_forbody35_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_30_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_4))) begin
		sha_transform_forbody35_add44_reg_stage2 <= sha_transform_forbody35_add44;
		if (start == 1'b0 && ^(sha_transform_forbody35_add44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody35_add44_reg_stage2"); $finish; end
	end
end
always @(*) begin
	loop3_1_pipeline_exit_cond = (loop3_1_i_stage0 == 19);
end
always @(*) begin
	loop3_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop3_1_epilogue & (~(loop3_1_valid_bit_4) & loop3_1_valid_bit_5)));
end
always @(*) begin
	loop4_1_pipeline_start = 1'd0;
	if (reset) begin
		loop4_1_pipeline_start = 1'd0;
	end
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody54preheader_33) & (memory_controller_waitrequest == 1'd0))) begin
		loop4_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop4_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop4_1_pipeline_start & ~(loop4_1_started)))) begin
		loop4_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop4_1_epilogue & (~(loop4_1_valid_bit_4) & loop4_1_valid_bit_5)))) begin
		loop4_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop4_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop4_1_pipeline_start & ~(loop4_1_started)))) begin
		loop4_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop4_1_ii_state == 1'd0))) begin
		loop4_1_ii_state <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop4_1_ii_state == 1'd1))) begin
		loop4_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop4_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop4_1_pipeline_start & ~(loop4_1_started)))) begin
		loop4_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop4_1_ii_state == 1'd1)) & loop4_1_valid_bit_1))) begin
		loop4_1_i_stage0 <= (loop4_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop4_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop4_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop4_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop4_1_started & ((loop4_1_ii_state == 1'd0) & loop4_1_pipeline_exit_cond)))) begin
		loop4_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop4_1_epilogue & (~(loop4_1_valid_bit_4) & loop4_1_valid_bit_5)))) begin
		loop4_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop4_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop4_1_pipeline_start & ~(loop4_1_started))) | ((loop4_1_started & ~(loop4_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop4_1_started & ((loop4_1_ii_state == 1'd0) & loop4_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop4_1_pipeline_start & ~(loop4_1_started))) | ((loop4_1_started & ~(loop4_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop4_1_started & ((loop4_1_ii_state == 1'd0) & loop4_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop4_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop4_1_valid_bit_1 <= loop4_1_valid_bit_0;
		if (start == 1'b0 && ^(loop4_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop4_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop4_1_valid_bit_2 <= loop4_1_valid_bit_1;
		if (start == 1'b0 && ^(loop4_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop4_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop4_1_valid_bit_3 <= loop4_1_valid_bit_2;
		if (start == 1'b0 && ^(loop4_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop4_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop4_1_valid_bit_4 <= loop4_1_valid_bit_3;
		if (start == 1'b0 && ^(loop4_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop4_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop4_1_valid_bit_5 <= loop4_1_valid_bit_4;
		if (start == 1'b0 && ^(loop4_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop4_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop4_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_0))) begin
		sha_transform_forbody54_E2183_reg_stage0 <= sha_transform_forbody54_E2183;
		if (start == 1'b0 && ^(sha_transform_forbody54_E2183) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_E2183_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd1) & loop4_1_valid_bit_1))) begin
		sha_transform_forbody54_E2183_reg_stage1 <= sha_transform_forbody54_E2183_reg_stage0;
		if (start == 1'b0 && ^(sha_transform_forbody54_E2183_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_E2183_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd1) & loop4_1_valid_bit_3))) begin
		sha_transform_forbody54_E2183_reg_stage2 <= sha_transform_forbody54_E2183_reg_stage1;
		if (start == 1'b0 && ^(sha_transform_forbody54_E2183_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_E2183_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd1) & loop4_1_valid_bit_1))) begin
		sha_transform_forbody54_i4178_reg_stage1 <= sha_transform_forbody54_i4178;
		if (start == 1'b0 && ^(sha_transform_forbody54_i4178) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_i4178_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_0))) begin
		sha_transform_forbody54_and59171_reg_stage0 <= sha_transform_forbody54_and59171;
		if (start == 1'b0 && ^(sha_transform_forbody54_and59171) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_and59171_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd1) & loop4_1_valid_bit_1))) begin
		sha_transform_forbody54_and59171_reg_stage1 <= sha_transform_forbody54_and59171_reg_stage0;
		if (start == 1'b0 && ^(sha_transform_forbody54_and59171_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_and59171_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_0))) begin
		sha_transform_forbody54_and61_reg_stage0 <= sha_transform_forbody54_and61;
		if (start == 1'b0 && ^(sha_transform_forbody54_and61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_and61_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd1) & loop4_1_valid_bit_1))) begin
		sha_transform_forbody54_and61_reg_stage1 <= sha_transform_forbody54_and61_reg_stage0;
		if (start == 1'b0 && ^(sha_transform_forbody54_and61_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_and61_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_2))) begin
		sha_transform_forbody54_or62_reg_stage1 <= sha_transform_forbody54_or62;
		if (start == 1'b0 && ^(sha_transform_forbody54_or62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_or62_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd1) & loop4_1_valid_bit_3))) begin
		sha_transform_forbody54_or62_reg_stage2 <= sha_transform_forbody54_or62_reg_stage1;
		if (start == 1'b0 && ^(sha_transform_forbody54_or62_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_or62_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_4))) begin
		sha_transform_forbody54_31_reg_stage2 <= sha_transform_forbody54_31;
		if (start == 1'b0 && ^(sha_transform_forbody54_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_31_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_4))) begin
		sha_transform_forbody54_add66_reg_stage2 <= sha_transform_forbody54_add66;
		if (start == 1'b0 && ^(sha_transform_forbody54_add66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody54_add66_reg_stage2"); $finish; end
	end
end
always @(*) begin
	loop4_1_pipeline_exit_cond = (loop4_1_i_stage0 == 19);
end
always @(*) begin
	loop4_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop4_1_epilogue & (~(loop4_1_valid_bit_4) & loop4_1_valid_bit_5)));
end
always @(*) begin
	loop5_1_pipeline_start = 1'd0;
	if (reset) begin
		loop5_1_pipeline_start = 1'd0;
	end
	if (((cur_state == LEGUP_F_sha_transform_BB_forbody76preheader_35) & (memory_controller_waitrequest == 1'd0))) begin
		loop5_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop5_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop5_1_pipeline_start & ~(loop5_1_started)))) begin
		loop5_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop5_1_epilogue & (~(loop5_1_valid_bit_4) & loop5_1_valid_bit_5)))) begin
		loop5_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop5_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop5_1_pipeline_start & ~(loop5_1_started)))) begin
		loop5_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop5_1_ii_state == 1'd0))) begin
		loop5_1_ii_state <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop5_1_ii_state == 1'd1))) begin
		loop5_1_ii_state <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop5_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop5_1_pipeline_start & ~(loop5_1_started)))) begin
		loop5_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop5_1_ii_state == 1'd1)) & loop5_1_valid_bit_1))) begin
		loop5_1_i_stage0 <= (loop5_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop5_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop5_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop5_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop5_1_started & ((loop5_1_ii_state == 1'd0) & loop5_1_pipeline_exit_cond)))) begin
		loop5_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop5_1_epilogue & (~(loop5_1_valid_bit_4) & loop5_1_valid_bit_5)))) begin
		loop5_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop5_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop5_1_pipeline_start & ~(loop5_1_started))) | ((loop5_1_started & ~(loop5_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop5_1_started & ((loop5_1_ii_state == 1'd0) & loop5_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop5_1_pipeline_start & ~(loop5_1_started))) | ((loop5_1_started & ~(loop5_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop5_1_started & ((loop5_1_ii_state == 1'd0) & loop5_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop5_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop5_1_valid_bit_1 <= loop5_1_valid_bit_0;
		if (start == 1'b0 && ^(loop5_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop5_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop5_1_valid_bit_2 <= loop5_1_valid_bit_1;
		if (start == 1'b0 && ^(loop5_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop5_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop5_1_valid_bit_3 <= loop5_1_valid_bit_2;
		if (start == 1'b0 && ^(loop5_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop5_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop5_1_valid_bit_4 <= loop5_1_valid_bit_3;
		if (start == 1'b0 && ^(loop5_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop5_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop5_1_valid_bit_5 <= loop5_1_valid_bit_4;
		if (start == 1'b0 && ^(loop5_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop5_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop5_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_0))) begin
		sha_transform_forbody76_E3177_reg_stage0 <= sha_transform_forbody76_E3177;
		if (start == 1'b0 && ^(sha_transform_forbody76_E3177) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_E3177_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd1) & loop5_1_valid_bit_1))) begin
		sha_transform_forbody76_E3177_reg_stage1 <= sha_transform_forbody76_E3177_reg_stage0;
		if (start == 1'b0 && ^(sha_transform_forbody76_E3177_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_E3177_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd1) & loop5_1_valid_bit_3))) begin
		sha_transform_forbody76_E3177_reg_stage2 <= sha_transform_forbody76_E3177_reg_stage1;
		if (start == 1'b0 && ^(sha_transform_forbody76_E3177_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_E3177_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_0))) begin
		sha_transform_forbody76_D3176_reg_stage0 <= sha_transform_forbody76_D3176;
		if (start == 1'b0 && ^(sha_transform_forbody76_D3176) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_D3176_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd1) & loop5_1_valid_bit_1))) begin
		sha_transform_forbody76_D3176_reg_stage1 <= sha_transform_forbody76_D3176_reg_stage0;
		if (start == 1'b0 && ^(sha_transform_forbody76_D3176_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_D3176_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd1) & loop5_1_valid_bit_1))) begin
		sha_transform_forbody76_i5172_reg_stage1 <= sha_transform_forbody76_i5172;
		if (start == 1'b0 && ^(sha_transform_forbody76_i5172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_i5172_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_2))) begin
		sha_transform_forbody76_xor81_reg_stage1 <= sha_transform_forbody76_xor81;
		if (start == 1'b0 && ^(sha_transform_forbody76_xor81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_xor81_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd1) & loop5_1_valid_bit_3))) begin
		sha_transform_forbody76_xor81_reg_stage2 <= sha_transform_forbody76_xor81_reg_stage1;
		if (start == 1'b0 && ^(sha_transform_forbody76_xor81_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_xor81_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_4))) begin
		sha_transform_forbody76_32_reg_stage2 <= sha_transform_forbody76_32;
		if (start == 1'b0 && ^(sha_transform_forbody76_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_32_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_4))) begin
		sha_transform_forbody76_add85_reg_stage2 <= sha_transform_forbody76_add85;
		if (start == 1'b0 && ^(sha_transform_forbody76_add85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_forbody76_add85_reg_stage2"); $finish; end
	end
end
always @(*) begin
	loop5_1_pipeline_exit_cond = (loop5_1_i_stage0 == 19);
end
always @(*) begin
	loop5_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop5_1_epilogue & (~(loop5_1_valid_bit_4) & loop5_1_valid_bit_5)));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* sha_transform: %for.end92*/
	/*   ret void*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_42)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %0, i32* %arrayidx1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %2, i32* %arrayidx1.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %4, i32* %arrayidx1.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %6, i32* %arrayidx1.6, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %8, i32* %arrayidx1.8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %10, i32* %arrayidx1.10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %12, i32* %arrayidx1.12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %14, i32* %arrayidx1.14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.body4*/
	/*   %19 = load i32* %arrayidx5, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.body4*/
	/*   %21 = load i32* %arrayidx9, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.body4*/
	/*   store i32 %xor13, i32* %arrayidx14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.end17*/
	/*   %23 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.end17*/
	/*   %25 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.body54*/
	/*   %31 = load i32* %arrayidx65, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   %33 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   %35 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_38)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add93, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add94, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add96, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		memory_controller_address_a = `TAG_g_sha_info_data_a;
	end
	/* sha_transform: %entry*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_2)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a + (4 * 32'd2));
	end
	/* sha_transform: %entry*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a + (4 * 32'd4));
	end
	/* sha_transform: %entry*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a + (4 * 32'd6));
	end
	/* sha_transform: %entry*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a + (4 * 32'd8));
	end
	/* sha_transform: %entry*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a + (4 * 32'd10));
	end
	/* sha_transform: %entry*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a + (4 * 32'd12));
	end
	/* sha_transform: %entry*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a + (4 * 32'd14));
	end
	/* sha_transform: %entry*/
	/*   store i32 %0, i32* %arrayidx1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_address_a = sha_transform_entry_arrayidx1_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %2, i32* %arrayidx1.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_address_a = sha_transform_entry_arrayidx12_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %4, i32* %arrayidx1.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_address_a = sha_transform_entry_arrayidx14_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %6, i32* %arrayidx1.6, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_address_a = sha_transform_entry_arrayidx16_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %8, i32* %arrayidx1.8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_address_a = sha_transform_entry_arrayidx18_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %10, i32* %arrayidx1.10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_address_a = sha_transform_entry_arrayidx110_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %12, i32* %arrayidx1.12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_address_a = sha_transform_entry_arrayidx112_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %14, i32* %arrayidx1.14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_address_a = sha_transform_entry_arrayidx114_reg;
	end
	/* sha_transform: %for.body4*/
	/*   %19 = load i32* %arrayidx5, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		memory_controller_address_a = sha_transform_forbody4_arrayidx5;
	end
	/* sha_transform: %for.body4*/
	/*   %21 = load i32* %arrayidx9, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_20)) begin
		memory_controller_address_a = sha_transform_forbody4_arrayidx9_reg;
	end
	/* sha_transform: %for.body4*/
	/*   store i32 %xor13, i32* %arrayidx14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_22)) begin
		memory_controller_address_a = sha_transform_forbody4_arrayidx14_reg;
	end
	/* sha_transform: %for.end17*/
	/*   %23 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_25)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* sha_transform: %for.end17*/
	/*   %25 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_26)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
	/* sha_transform: %for.body54*/
	/*   %31 = load i32* %arrayidx65, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_2)) begin
		memory_controller_address_a = sha_transform_forbody54_arrayidx65;
	end
	/* sha_transform: %for.end92*/
	/*   %33 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_37)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* sha_transform: %for.end92*/
	/*   %35 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_38)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add93, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add94, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest1_a;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add96, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest3_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   store i32 %0, i32* %arrayidx1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %2, i32* %arrayidx1.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %4, i32* %arrayidx1.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %6, i32* %arrayidx1.6, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %8, i32* %arrayidx1.8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %10, i32* %arrayidx1.10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %12, i32* %arrayidx1.12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %14, i32* %arrayidx1.14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %for.body4*/
	/*   %19 = load i32* %arrayidx5, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %for.body4*/
	/*   %21 = load i32* %arrayidx9, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %for.body4*/
	/*   store i32 %xor13, i32* %arrayidx14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %for.end17*/
	/*   %23 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %for.end17*/
	/*   %25 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %for.body54*/
	/*   %31 = load i32* %arrayidx65, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %for.end92*/
	/*   %33 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_37)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %for.end92*/
	/*   %35 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_38)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add93, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add94, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add96, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   store i32 %0, i32* %arrayidx1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_in_a = sha_transform_entry_0_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %2, i32* %arrayidx1.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_in_a = sha_transform_entry_2_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %4, i32* %arrayidx1.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_in_a = sha_transform_entry_4_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %6, i32* %arrayidx1.6, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_in_a = sha_transform_entry_6_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %8, i32* %arrayidx1.8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_in_a = sha_transform_entry_8_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %10, i32* %arrayidx1.10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_in_a = sha_transform_entry_10_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %12, i32* %arrayidx1.12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_in_a = sha_transform_entry_12_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %14, i32* %arrayidx1.14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_in_a = sha_transform_entry_14_reg;
	end
	/* sha_transform: %for.body4*/
	/*   store i32 %xor13, i32* %arrayidx14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_22)) begin
		memory_controller_in_a = sha_transform_forbody4_xor13;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add93, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		memory_controller_in_a = sha_transform_forend92_add93;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add94, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_in_a = sha_transform_forend92_add94_reg;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add96, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_in_a = sha_transform_forend92_add96_reg;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %0, i32* %arrayidx1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %2, i32* %arrayidx1.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %4, i32* %arrayidx1.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %6, i32* %arrayidx1.6, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %8, i32* %arrayidx1.8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %10, i32* %arrayidx1.10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %12, i32* %arrayidx1.12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %14, i32* %arrayidx1.14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.body4*/
	/*   %19 = load i32* %arrayidx5, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.body4*/
	/*   %21 = load i32* %arrayidx9, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.body4*/
	/*   store i32 %xor13, i32* %arrayidx14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_22)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.end17*/
	/*   %23 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.end17*/
	/*   %25 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.body54*/
	/*   %31 = load i32* %arrayidx65, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop4_1_ii_state == 1'd0) & loop4_1_valid_bit_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   %33 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   %35 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_38)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add93, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add94, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add96, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %1 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %3 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %5 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %7 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %9 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %11 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %13 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   %15 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %1, i32* %arrayidx1.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %3, i32* %arrayidx1.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %5, i32* %arrayidx1.5, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %7, i32* %arrayidx1.7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %9, i32* %arrayidx1.9, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %11, i32* %arrayidx1.11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %13, i32* %arrayidx1.13, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %15, i32* %arrayidx1.15, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.body4*/
	/*   %20 = load i32* %arrayidx7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.body4*/
	/*   %22 = load i32* %arrayidx12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.end17*/
	/*   %24 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.end17*/
	/*   %26 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.end17*/
	/*   %27 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_27)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.body20*/
	/*   %29 = load i32* %arrayidx24, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !7, !legup.pipeline.stage !6
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.body35*/
	/*   %30 = load i32* %arrayidx43, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.body76*/
	/*   %32 = load i32* %arrayidx84, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   %34 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_37)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   %36 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_38)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   %37 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add95, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add97, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %1 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a + (4 * 32'd1));
	end
	/* sha_transform: %entry*/
	/*   %3 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_2)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a + (4 * 32'd3));
	end
	/* sha_transform: %entry*/
	/*   %5 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a + (4 * 32'd5));
	end
	/* sha_transform: %entry*/
	/*   %7 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a + (4 * 32'd7));
	end
	/* sha_transform: %entry*/
	/*   %9 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a + (4 * 32'd9));
	end
	/* sha_transform: %entry*/
	/*   %11 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a + (4 * 32'd11));
	end
	/* sha_transform: %entry*/
	/*   %13 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a + (4 * 32'd13));
	end
	/* sha_transform: %entry*/
	/*   %15 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a + (4 * 32'd15));
	end
	/* sha_transform: %entry*/
	/*   store i32 %1, i32* %arrayidx1.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_address_b = sha_transform_entry_arrayidx11_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %3, i32* %arrayidx1.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_address_b = sha_transform_entry_arrayidx13_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %5, i32* %arrayidx1.5, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_address_b = sha_transform_entry_arrayidx15_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %7, i32* %arrayidx1.7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_address_b = sha_transform_entry_arrayidx17_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %9, i32* %arrayidx1.9, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_address_b = sha_transform_entry_arrayidx19_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %11, i32* %arrayidx1.11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_address_b = sha_transform_entry_arrayidx111_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %13, i32* %arrayidx1.13, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_address_b = sha_transform_entry_arrayidx113_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %15, i32* %arrayidx1.15, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_address_b = sha_transform_entry_arrayidx115_reg;
	end
	/* sha_transform: %for.body4*/
	/*   %20 = load i32* %arrayidx7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		memory_controller_address_b = sha_transform_forbody4_arrayidx7;
	end
	/* sha_transform: %for.body4*/
	/*   %22 = load i32* %arrayidx12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_20)) begin
		memory_controller_address_b = sha_transform_forbody4_arrayidx12_reg;
	end
	/* sha_transform: %for.end17*/
	/*   %24 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_25)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* sha_transform: %for.end17*/
	/*   %26 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_26)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* sha_transform: %for.end17*/
	/*   %27 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_27)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest4_a;
	end
	/* sha_transform: %for.body20*/
	/*   %29 = load i32* %arrayidx24, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !7, !legup.pipeline.stage !6
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0)) begin
		memory_controller_address_b = sha_transform_forbody20_arrayidx24;
	end
	/* sha_transform: %for.body35*/
	/*   %30 = load i32* %arrayidx43, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_2)) begin
		memory_controller_address_b = sha_transform_forbody35_arrayidx43;
	end
	/* sha_transform: %for.body76*/
	/*   %32 = load i32* %arrayidx84, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_2)) begin
		memory_controller_address_b = sha_transform_forbody76_arrayidx84;
	end
	/* sha_transform: %for.end92*/
	/*   %34 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_37)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* sha_transform: %for.end92*/
	/*   %36 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_38)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* sha_transform: %for.end92*/
	/*   %37 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest4_a;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add95, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest2_a;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add97, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest4_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %1 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %3 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %5 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %7 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %9 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %11 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %13 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %15 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   store i32 %1, i32* %arrayidx1.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %3, i32* %arrayidx1.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %5, i32* %arrayidx1.5, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %7, i32* %arrayidx1.7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %9, i32* %arrayidx1.9, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %11, i32* %arrayidx1.11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %13, i32* %arrayidx1.13, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %entry*/
	/*   store i32 %15, i32* %arrayidx1.15, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %for.body4*/
	/*   %20 = load i32* %arrayidx7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.body4*/
	/*   %22 = load i32* %arrayidx12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.end17*/
	/*   %24 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_25)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.end17*/
	/*   %26 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_26)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.end17*/
	/*   %27 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_27)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.body20*/
	/*   %29 = load i32* %arrayidx24, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !7, !legup.pipeline.stage !6
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.body35*/
	/*   %30 = load i32* %arrayidx43, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.body76*/
	/*   %32 = load i32* %arrayidx84, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.end92*/
	/*   %34 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_37)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.end92*/
	/*   %36 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_38)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.end92*/
	/*   %37 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add95, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add97, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   store i32 %1, i32* %arrayidx1.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_in_b = sha_transform_entry_1_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %3, i32* %arrayidx1.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_in_b = sha_transform_entry_3_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %5, i32* %arrayidx1.5, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_in_b = sha_transform_entry_5_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %7, i32* %arrayidx1.7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_in_b = sha_transform_entry_7_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %9, i32* %arrayidx1.9, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_in_b = sha_transform_entry_9_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %11, i32* %arrayidx1.11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_in_b = sha_transform_entry_11_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %13, i32* %arrayidx1.13, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_in_b = sha_transform_entry_13_reg;
	end
	/* sha_transform: %entry*/
	/*   store i32 %15, i32* %arrayidx1.15, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_in_b = sha_transform_entry_15_reg;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add95, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_in_b = sha_transform_forend92_add95;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add97, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_in_b = sha_transform_forend92_add97;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* sha_transform: %entry*/
	/*   %1 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %3 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %5 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %7 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %9 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %11 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %13 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   %15 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %1, i32* %arrayidx1.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %3, i32* %arrayidx1.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_10)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %5, i32* %arrayidx1.5, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_11)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %7, i32* %arrayidx1.7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_12)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %9, i32* %arrayidx1.9, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_13)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %11, i32* %arrayidx1.11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_14)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %13, i32* %arrayidx1.13, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_15)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %entry*/
	/*   store i32 %15, i32* %arrayidx1.15, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_entry_16)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.body4*/
	/*   %20 = load i32* %arrayidx7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_19)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.body4*/
	/*   %22 = load i32* %arrayidx12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forbody4_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.end17*/
	/*   %24 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.end17*/
	/*   %26 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.end17*/
	/*   %27 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend17_27)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.body20*/
	/*   %29 = load i32* %arrayidx24, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !7, !legup.pipeline.stage !6
	start_time: 0 avail_time: 2 stage: 0 II: 2 start_ii_state = 0 % 2 = 0 avail_ii_state = 2 % 2 = 0*/
	if (((loop2_1_ii_state == 1'd0) & loop2_1_valid_bit_0)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.body35*/
	/*   %30 = load i32* %arrayidx43, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop3_1_ii_state == 1'd0) & loop3_1_valid_bit_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.body76*/
	/*   %32 = load i32* %arrayidx84, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !10, !legup.pipeline.stage !8
	start_time: 2 avail_time: 4 stage: 1 II: 2 start_ii_state = 2 % 2 = 0 avail_ii_state = 4 % 2 = 0*/
	if (((loop5_1_ii_state == 1'd0) & loop5_1_valid_bit_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   %34 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_37)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   %36 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_38)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   %37 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add95, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* sha_transform: %for.end92*/
	/*   store i32 %add97, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_sha_transform_BB_forend92_41)) begin
		memory_controller_size_b = 2'd2;
	end
end

endmodule 
`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_F_main_BB_ifendi_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB_ifendi_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB_ifendi_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB_ifendi_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB_whilebodyipreheaderi_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB_whilebodyii_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB_whilebodyii_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB_whilebodyii_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB_whilebodyii_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB_whilebodyii_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB_whilebodyii_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB_ifendi6_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB_whilebodyipreheaderi9_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB_whilebodyii30_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB_whilebodyii30_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB_whilebodyii30_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB_whilebodyii30_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB_whilebodyii30_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB_whilebodyii30_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti34_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB_memcpyexiti34_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB_whilebody4i22preheaderi_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB_whilebody4i22preheaderi_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB_whilebody4i22i_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB_whilebody4i22i_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB_whilebody4i22i_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_36 = 6'd36;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_37 = 6'd37;
parameter [5:0] LEGUP_F_main_BB_sha_finalexit_38 = 6'd38;
parameter [5:0] LEGUP_F_main_BB_ifthen_39 = 6'd39;
parameter [5:0] LEGUP_F_main_BB_ifelse_40 = 6'd40;
parameter [5:0] LEGUP_F_main_BB_ifend_41 = 6'd41;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};
parameter [5:0] LEGUP_function_call_13 = 6'd13;
parameter [5:0] LEGUP_function_call_24 = 6'd24;
parameter [5:0] LEGUP_function_call_33 = 6'd33;

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_whilebodyipreheaderi_indvar10;
reg [31:0] main_whilebodyipreheaderi_indvar10_reg;
reg [31:0] main_whilebodyipreheaderi_0;
reg [31:0] main_whilebodyipreheaderi_0_reg;
reg [31:0] main_whilebodyipreheaderi_1;
reg [31:0] main_whilebodyipreheaderi_1_reg;
reg [31:0] main_whilebodyipreheaderi_2;
reg [31:0] main_whilebodyipreheaderi_2_reg;
reg [31:0] main_whilebodyipreheaderi_3;
reg [31:0] main_whilebodyipreheaderi_3_reg;
reg [31:0] main_whilebodyii_indvar7;
reg [31:0] main_whilebodyii_indvar7_reg;
reg [31:0] main_whilebodyii_4;
reg [31:0] main_whilebodyii_4_reg;
reg [31:0] main_whilebodyii_5;
reg [31:0] main_whilebodyii_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii_incdecptrii;
reg [31:0] main_whilebodyii_6;
reg [31:0] main_whilebodyii_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii_p2026ii;
reg [31:0] main_whilebodyii_7;
reg [31:0] main_whilebodyii_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii_incdecptr2ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii_incdecptr2ii_reg;
reg [31:0] main_whilebodyii_8;
reg [31:0] main_whilebodyii_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii_incdecptr6ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii_p1027ii;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii_p1027ii_reg;
reg [7:0] main_whilebodyii_9;
reg [31:0] main_whilebodyii_convii;
reg [7:0] main_whilebodyii_10;
reg [31:0] main_whilebodyii_conv3ii;
reg [31:0] main_whilebodyii_shlii;
reg [31:0] main_whilebodyii_or5ii;
reg [31:0] main_whilebodyii_or5ii_reg;
reg [7:0] main_whilebodyii_11;
reg [31:0] main_whilebodyii_conv7ii;
reg [31:0] main_whilebodyii_shl9ii;
reg [31:0] main_whilebodyii_or10ii;
reg [7:0] main_whilebodyii_12;
reg [31:0] main_whilebodyii_conv12ii;
reg [31:0] main_whilebodyii_shl14ii;
reg [31:0] main_whilebodyii_or15ii;
reg [31:0] main_whilebodyii_indvarnext8;
reg [31:0] main_whilebodyii_indvarnext8_reg;
reg  main_whilebodyii_exitcond9;
reg  main_whilebodyii_exitcond9_reg;
reg [31:0] main_memcpyexiti_indvarnext11;
reg [31:0] main_memcpyexiti_indvarnext11_reg;
reg  main_memcpyexiti_exitcond12;
reg  main_memcpyexiti_exitcond12_reg;
reg [31:0] main_whilebodyipreheaderi9_indvar4;
reg [31:0] main_whilebodyipreheaderi9_indvar4_reg;
reg [31:0] main_whilebodyipreheaderi9_13;
reg [31:0] main_whilebodyipreheaderi9_13_reg;
reg [31:0] main_whilebodyipreheaderi9_14;
reg [31:0] main_whilebodyipreheaderi9_14_reg;
reg [31:0] main_whilebodyipreheaderi9_15;
reg [31:0] main_whilebodyipreheaderi9_15_reg;
reg [31:0] main_whilebodyipreheaderi9_16;
reg [31:0] main_whilebodyipreheaderi9_16_reg;
reg [31:0] main_whilebodyii30_indvar1;
reg [31:0] main_whilebodyii30_indvar1_reg;
reg [31:0] main_whilebodyii30_17;
reg [31:0] main_whilebodyii30_17_reg;
reg [31:0] main_whilebodyii30_18;
reg [31:0] main_whilebodyii30_18_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii30_incdecptrii14;
reg [31:0] main_whilebodyii30_19;
reg [31:0] main_whilebodyii30_19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii30_p2026ii12;
reg [31:0] main_whilebodyii30_20;
reg [31:0] main_whilebodyii30_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii30_incdecptr2ii16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii30_incdecptr2ii16_reg;
reg [31:0] main_whilebodyii30_21;
reg [31:0] main_whilebodyii30_21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii30_incdecptr6ii20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii30_p1027ii11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebodyii30_p1027ii11_reg;
reg [7:0] main_whilebodyii30_22;
reg [31:0] main_whilebodyii30_convii15;
reg [7:0] main_whilebodyii30_23;
reg [31:0] main_whilebodyii30_conv3ii17;
reg [31:0] main_whilebodyii30_shlii18;
reg [31:0] main_whilebodyii30_or5ii19;
reg [31:0] main_whilebodyii30_or5ii19_reg;
reg [7:0] main_whilebodyii30_24;
reg [31:0] main_whilebodyii30_conv7ii21;
reg [31:0] main_whilebodyii30_shl9ii22;
reg [31:0] main_whilebodyii30_or10ii23;
reg [7:0] main_whilebodyii30_25;
reg [31:0] main_whilebodyii30_conv12ii25;
reg [31:0] main_whilebodyii30_shl14ii26;
reg [31:0] main_whilebodyii30_or15ii27;
reg [31:0] main_whilebodyii30_indvarnext2;
reg [31:0] main_whilebodyii30_indvarnext2_reg;
reg  main_whilebodyii30_exitcond3;
reg  main_whilebodyii30_exitcond3_reg;
reg [31:0] main_memcpyexiti34_indvarnext5;
reg [31:0] main_memcpyexiti34_indvarnext5_reg;
reg  main_memcpyexiti34_exitcond6;
reg  main_memcpyexiti34_exitcond6_reg;
reg [31:0] main_whilebody4i22i_indvar;
reg [31:0] main_whilebody4i22i_indvar_reg;
reg [31:0] main_whilebody4i22i_26;
reg [31:0] main_whilebody4i22i_26_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_whilebody4i22i_p19i18i;
reg [31:0] main_whilebody4i22i_indvarnext;
reg [31:0] main_whilebody4i22i_indvarnext_reg;
reg  main_whilebody4i22i_exitcond;
reg  main_whilebody4i22i_exitcond_reg;
reg [31:0] main_sha_finalexit_27;
reg  main_sha_finalexit_cmp2;
reg [31:0] main_sha_finalexit_conv;
reg [31:0] main_sha_finalexit_28;
reg  main_sha_finalexit_cmp21;
reg [31:0] main_sha_finalexit_conv1;
reg [31:0] main_sha_finalexit_add1;
reg [31:0] main_sha_finalexit_add1_reg;
reg [31:0] main_sha_finalexit_29;
reg  main_sha_finalexit_cmp22;
reg [31:0] main_sha_finalexit_conv2;
reg [31:0] main_sha_finalexit_add2;
reg [31:0] main_sha_finalexit_30;
reg  main_sha_finalexit_cmp23;
reg [31:0] main_sha_finalexit_conv3;
reg [31:0] main_sha_finalexit_add3;
reg [31:0] main_sha_finalexit_add3_reg;
reg [31:0] main_sha_finalexit_31;
reg  main_sha_finalexit_cmp24;
reg [31:0] main_sha_finalexit_conv4;
reg [31:0] main_sha_finalexit_add4;
reg [31:0] main_sha_finalexit_add4_reg;
reg  main_sha_finalexit_cmp3;
reg  sha_transform_start;
wire  sha_transform_memory_controller_enable_a;
wire  sha_transform_memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_memory_controller_address_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_in_a;
wire [1:0] sha_transform_memory_controller_size_a;
wire  sha_transform_memory_controller_enable_b;
wire  sha_transform_memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] sha_transform_memory_controller_address_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] sha_transform_memory_controller_in_b;
wire [1:0] sha_transform_memory_controller_size_b;
reg  sha_transform_finish_final;
reg  sha_transform_finish_reg;
wire  sha_transform_finish;


sha_transform sha_transform (
	.memory_controller_waitrequest (memory_controller_waitrequest),
	.memory_controller_enable_a (sha_transform_memory_controller_enable_a),
	.memory_controller_address_a (sha_transform_memory_controller_address_a),
	.memory_controller_write_enable_a (sha_transform_memory_controller_write_enable_a),
	.memory_controller_in_a (sha_transform_memory_controller_in_a),
	.memory_controller_size_a (sha_transform_memory_controller_size_a),
	.memory_controller_out_a (memory_controller_out_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.memory_controller_enable_b (sha_transform_memory_controller_enable_b),
	.memory_controller_address_b (sha_transform_memory_controller_address_b),
	.memory_controller_write_enable_b (sha_transform_memory_controller_write_enable_b),
	.memory_controller_in_b (sha_transform_memory_controller_in_b),
	.memory_controller_size_b (sha_transform_memory_controller_size_b),
	.memory_controller_out_b (memory_controller_out_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0]),
	.clk (clk),
	.clk2x (clk2x),
	.clk1x_follower (clk1x_follower),
	.reset (reset),
	.start (sha_transform_start),
	.finish (sha_transform_finish)
);

defparam
	sha_transform.tag_offset = tag_offset;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %sha_final.exit*/
	/*   %call = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str2, i32 0, i32 0), i32 %add.4) #2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_38)) begin
		$write("Result: %d\n", $signed(main_sha_finalexit_add4));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_sha_finalexit_add4) === 1'bX) finish <= 0;
	end
	/* main: %if.then*/
	/*   %call5 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_ifthen_39)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %if.else*/
	/*   %call6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str4, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB_ifelse_40)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB_ifendi_1;
LEGUP_F_main_BB_ifelse_40:
		next_state = LEGUP_F_main_BB_ifend_41;
LEGUP_F_main_BB_ifend_41:
		next_state = LEGUP_0;
LEGUP_F_main_BB_ifendi6_15:
		next_state = LEGUP_F_main_BB_whilebodyipreheaderi9_16;
LEGUP_F_main_BB_ifendi_1:
		next_state = LEGUP_F_main_BB_ifendi_2;
LEGUP_F_main_BB_ifendi_2:
		next_state = LEGUP_F_main_BB_ifendi_3;
LEGUP_F_main_BB_ifendi_3:
		next_state = LEGUP_F_main_BB_ifendi_4;
LEGUP_F_main_BB_ifendi_4:
		next_state = LEGUP_F_main_BB_whilebodyipreheaderi_5;
LEGUP_F_main_BB_ifthen_39:
		next_state = LEGUP_F_main_BB_ifend_41;
LEGUP_F_main_BB_memcpyexiti34_23:
		next_state = LEGUP_function_call_24;
LEGUP_F_main_BB_memcpyexiti34_25:
	if ((main_memcpyexiti34_exitcond6_reg == 1'd1))
		next_state = LEGUP_F_main_BB_whilebody4i22preheaderi_26;
	else if ((main_memcpyexiti34_exitcond6_reg == 1'd0))
		next_state = LEGUP_F_main_BB_whilebodyipreheaderi9_16;
LEGUP_F_main_BB_memcpyexiti_12:
		next_state = LEGUP_function_call_13;
LEGUP_F_main_BB_memcpyexiti_14:
	if ((main_memcpyexiti_exitcond12_reg == 1'd1))
		next_state = LEGUP_F_main_BB_ifendi6_15;
	else if ((main_memcpyexiti_exitcond12_reg == 1'd0))
		next_state = LEGUP_F_main_BB_whilebodyipreheaderi_5;
LEGUP_F_main_BB_sha_finalexit_31:
		next_state = LEGUP_F_main_BB_sha_finalexit_32;
LEGUP_F_main_BB_sha_finalexit_32:
		next_state = LEGUP_function_call_33;
LEGUP_F_main_BB_sha_finalexit_34:
		next_state = LEGUP_F_main_BB_sha_finalexit_35;
LEGUP_F_main_BB_sha_finalexit_35:
		next_state = LEGUP_F_main_BB_sha_finalexit_36;
LEGUP_F_main_BB_sha_finalexit_36:
		next_state = LEGUP_F_main_BB_sha_finalexit_37;
LEGUP_F_main_BB_sha_finalexit_37:
		next_state = LEGUP_F_main_BB_sha_finalexit_38;
LEGUP_F_main_BB_sha_finalexit_38:
	if ((main_sha_finalexit_cmp3 == 1'd1))
		next_state = LEGUP_F_main_BB_ifthen_39;
	else if ((main_sha_finalexit_cmp3 == 1'd0))
		next_state = LEGUP_F_main_BB_ifelse_40;
LEGUP_F_main_BB_whilebody4i22i_28:
		next_state = LEGUP_F_main_BB_whilebody4i22i_29;
LEGUP_F_main_BB_whilebody4i22i_29:
		next_state = LEGUP_F_main_BB_whilebody4i22i_30;
LEGUP_F_main_BB_whilebody4i22i_30:
	if ((main_whilebody4i22i_exitcond_reg == 1'd1))
		next_state = LEGUP_F_main_BB_sha_finalexit_31;
	else if ((main_whilebody4i22i_exitcond_reg == 1'd0))
		next_state = LEGUP_F_main_BB_whilebody4i22i_28;
LEGUP_F_main_BB_whilebody4i22preheaderi_26:
		next_state = LEGUP_F_main_BB_whilebody4i22preheaderi_27;
LEGUP_F_main_BB_whilebody4i22preheaderi_27:
		next_state = LEGUP_F_main_BB_whilebody4i22i_28;
LEGUP_F_main_BB_whilebodyii30_17:
		next_state = LEGUP_F_main_BB_whilebodyii30_18;
LEGUP_F_main_BB_whilebodyii30_18:
		next_state = LEGUP_F_main_BB_whilebodyii30_19;
LEGUP_F_main_BB_whilebodyii30_19:
		next_state = LEGUP_F_main_BB_whilebodyii30_20;
LEGUP_F_main_BB_whilebodyii30_20:
		next_state = LEGUP_F_main_BB_whilebodyii30_21;
LEGUP_F_main_BB_whilebodyii30_21:
		next_state = LEGUP_F_main_BB_whilebodyii30_22;
LEGUP_F_main_BB_whilebodyii30_22:
	if ((main_whilebodyii30_exitcond3_reg == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti34_23;
	else if ((main_whilebodyii30_exitcond3_reg == 1'd0))
		next_state = LEGUP_F_main_BB_whilebodyii30_17;
LEGUP_F_main_BB_whilebodyii_10:
		next_state = LEGUP_F_main_BB_whilebodyii_11;
LEGUP_F_main_BB_whilebodyii_11:
	if ((main_whilebodyii_exitcond9_reg == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti_12;
	else if ((main_whilebodyii_exitcond9_reg == 1'd0))
		next_state = LEGUP_F_main_BB_whilebodyii_6;
LEGUP_F_main_BB_whilebodyii_6:
		next_state = LEGUP_F_main_BB_whilebodyii_7;
LEGUP_F_main_BB_whilebodyii_7:
		next_state = LEGUP_F_main_BB_whilebodyii_8;
LEGUP_F_main_BB_whilebodyii_8:
		next_state = LEGUP_F_main_BB_whilebodyii_9;
LEGUP_F_main_BB_whilebodyii_9:
		next_state = LEGUP_F_main_BB_whilebodyii_10;
LEGUP_F_main_BB_whilebodyipreheaderi9_16:
		next_state = LEGUP_F_main_BB_whilebodyii30_17;
LEGUP_F_main_BB_whilebodyipreheaderi_5:
		next_state = LEGUP_F_main_BB_whilebodyii_6;
LEGUP_function_call_13:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti_14;
LEGUP_function_call_24:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_memcpyexiti34_25;
LEGUP_function_call_33:
	if ((sha_transform_finish_final == 1'd1))
		next_state = LEGUP_F_main_BB_sha_finalexit_34;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %while.body.i.preheader.i*/
	/*   %indvar10 = phi i32 [ %indvar.next11, %memcpy.exit.i ], [ 0, %if.end.i ]*/
	if (((cur_state == LEGUP_F_main_BB_ifendi_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebodyipreheaderi_indvar10 = 32'd0;
	end
	/* main: %while.body.i.preheader.i*/
	/*   %indvar10 = phi i32 [ %indvar.next11, %memcpy.exit.i ], [ 0, %if.end.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_memcpyexiti_14) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti_exitcond12_reg == 1'd0))) */ begin
		main_whilebodyipreheaderi_indvar10 = main_memcpyexiti_indvarnext11_reg;
	end
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i*/
	/*   %indvar10 = phi i32 [ %indvar.next11, %memcpy.exit.i ], [ 0, %if.end.i ]*/
	if (((cur_state == LEGUP_F_main_BB_ifendi_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebodyipreheaderi_indvar10_reg <= main_whilebodyipreheaderi_indvar10;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi_indvar10_reg"); $finish; end
	end
	/* main: %while.body.i.preheader.i*/
	/*   %indvar10 = phi i32 [ %indvar.next11, %memcpy.exit.i ], [ 0, %if.end.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_memcpyexiti_14) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti_exitcond12_reg == 1'd0))) begin
		main_whilebodyipreheaderi_indvar10_reg <= main_whilebodyipreheaderi_indvar10;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi_indvar10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi_indvar10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.preheader.i*/
	/*   %0 = shl i32 %indvar10, 6*/
		main_whilebodyipreheaderi_0 = (main_whilebodyipreheaderi_indvar10_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i*/
	/*   %0 = shl i32 %indvar10, 6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi_5)) begin
		main_whilebodyipreheaderi_0_reg <= main_whilebodyipreheaderi_0;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi_0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.preheader.i*/
	/*   %1 = or i32 %0, 1*/
		main_whilebodyipreheaderi_1 = (main_whilebodyipreheaderi_0 | 32'd1);
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i*/
	/*   %1 = or i32 %0, 1*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi_5)) begin
		main_whilebodyipreheaderi_1_reg <= main_whilebodyipreheaderi_1;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.preheader.i*/
	/*   %2 = or i32 %0, 2*/
		main_whilebodyipreheaderi_2 = (main_whilebodyipreheaderi_0 | 32'd2);
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i*/
	/*   %2 = or i32 %0, 2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi_5)) begin
		main_whilebodyipreheaderi_2_reg <= main_whilebodyipreheaderi_2;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.preheader.i*/
	/*   %3 = or i32 %0, 3*/
		main_whilebodyipreheaderi_3 = (main_whilebodyipreheaderi_0 | 32'd3);
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i*/
	/*   %3 = or i32 %0, 3*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi_5)) begin
		main_whilebodyipreheaderi_3_reg <= main_whilebodyipreheaderi_3;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %indvar7 = phi i32 [ %indvar.next8, %while.body.i.i ], [ 0, %while.body.i.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebodyii_indvar7 = 32'd0;
	end
	/* main: %while.body.i.i*/
	/*   %indvar7 = phi i32 [ %indvar.next8, %while.body.i.i ], [ 0, %while.body.i.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_whilebodyii_11) & (memory_controller_waitrequest == 1'd0)) & (main_whilebodyii_exitcond9_reg == 1'd0))) */ begin
		main_whilebodyii_indvar7 = main_whilebodyii_indvarnext8_reg;
	end
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %indvar7 = phi i32 [ %indvar.next8, %while.body.i.i ], [ 0, %while.body.i.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebodyii_indvar7_reg <= main_whilebodyii_indvar7;
		if (start == 1'b0 && ^(main_whilebodyii_indvar7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_indvar7_reg"); $finish; end
	end
	/* main: %while.body.i.i*/
	/*   %indvar7 = phi i32 [ %indvar.next8, %while.body.i.i ], [ 0, %while.body.i.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_whilebodyii_11) & (memory_controller_waitrequest == 1'd0)) & (main_whilebodyii_exitcond9_reg == 1'd0))) begin
		main_whilebodyii_indvar7_reg <= main_whilebodyii_indvar7;
		if (start == 1'b0 && ^(main_whilebodyii_indvar7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_indvar7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %4 = shl i32 %indvar7, 2*/
		main_whilebodyii_4 = (main_whilebodyii_indvar7_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %4 = shl i32 %indvar7, 2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_6)) begin
		main_whilebodyii_4_reg <= main_whilebodyii_4;
		if (start == 1'b0 && ^(main_whilebodyii_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %5 = add i32 %1, %4*/
		main_whilebodyii_5 = (main_whilebodyipreheaderi_1_reg + main_whilebodyii_4);
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %5 = add i32 %1, %4*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_6)) begin
		main_whilebodyii_5_reg <= main_whilebodyii_5;
		if (start == 1'b0 && ^(main_whilebodyii_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %incdec.ptr.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %5*/
		main_whilebodyii_incdecptrii = (`TAG_g_indata_a + (1 * main_whilebodyii_5_reg));
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %6 = add i32 %0, %4*/
		main_whilebodyii_6 = (main_whilebodyipreheaderi_0_reg + main_whilebodyii_4);
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %6 = add i32 %0, %4*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_6)) begin
		main_whilebodyii_6_reg <= main_whilebodyii_6;
		if (start == 1'b0 && ^(main_whilebodyii_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %p2.026.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %6*/
		main_whilebodyii_p2026ii = (`TAG_g_indata_a + (1 * main_whilebodyii_6_reg));
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %7 = add i32 %2, %4*/
		main_whilebodyii_7 = (main_whilebodyipreheaderi_2_reg + main_whilebodyii_4);
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %7 = add i32 %2, %4*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_6)) begin
		main_whilebodyii_7_reg <= main_whilebodyii_7;
		if (start == 1'b0 && ^(main_whilebodyii_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %incdec.ptr2.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %7*/
		main_whilebodyii_incdecptr2ii = (`TAG_g_indata_a + (1 * main_whilebodyii_7_reg));
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %incdec.ptr2.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %7*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		main_whilebodyii_incdecptr2ii_reg <= main_whilebodyii_incdecptr2ii;
		if (start == 1'b0 && ^(main_whilebodyii_incdecptr2ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_incdecptr2ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %8 = add i32 %3, %4*/
		main_whilebodyii_8 = (main_whilebodyipreheaderi_3_reg + main_whilebodyii_4_reg);
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %8 = add i32 %3, %4*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		main_whilebodyii_8_reg <= main_whilebodyii_8;
		if (start == 1'b0 && ^(main_whilebodyii_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %incdec.ptr6.i.i = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 %8*/
		main_whilebodyii_incdecptr6ii = (`TAG_g_indata_a + (1 * main_whilebodyii_8_reg));
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %p1.027.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar7*/
		main_whilebodyii_p1027ii = (`TAG_g_sha_info_data_a + (4 * main_whilebodyii_indvar7_reg));
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %p1.027.i.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar7*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_6)) begin
		main_whilebodyii_p1027ii_reg <= main_whilebodyii_p1027ii;
		if (start == 1'b0 && ^(main_whilebodyii_p1027ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_p1027ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %9 = load i8* %p2.026.i.i, align 1, !tbaa !6*/
		main_whilebodyii_9 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %conv.i.i = zext i8 %9 to i32*/
		main_whilebodyii_convii = main_whilebodyii_9;
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %10 = load i8* %incdec.ptr.i.i, align 1, !tbaa !6*/
		main_whilebodyii_10 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %conv3.i.i = zext i8 %10 to i32*/
		main_whilebodyii_conv3ii = main_whilebodyii_10;
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %shl.i.i = shl nuw nsw i32 %conv3.i.i, 8*/
		main_whilebodyii_shlii = (main_whilebodyii_conv3ii <<< (32'd8 % 32));
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %or5.i.i = or i32 %shl.i.i, %conv.i.i*/
		main_whilebodyii_or5ii = (main_whilebodyii_shlii | main_whilebodyii_convii);
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %or5.i.i = or i32 %shl.i.i, %conv.i.i*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_9)) begin
		main_whilebodyii_or5ii_reg <= main_whilebodyii_or5ii;
		if (start == 1'b0 && ^(main_whilebodyii_or5ii) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_or5ii_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %11 = load i8* %incdec.ptr2.i.i, align 1, !tbaa !6*/
		main_whilebodyii_11 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %conv7.i.i = zext i8 %11 to i32*/
		main_whilebodyii_conv7ii = main_whilebodyii_11;
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %shl9.i.i = shl nuw nsw i32 %conv7.i.i, 16*/
		main_whilebodyii_shl9ii = (main_whilebodyii_conv7ii <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %or10.i.i = or i32 %or5.i.i, %shl9.i.i*/
		main_whilebodyii_or10ii = (main_whilebodyii_or5ii_reg | main_whilebodyii_shl9ii);
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %12 = load i8* %incdec.ptr6.i.i, align 1, !tbaa !6*/
		main_whilebodyii_12 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %conv12.i.i = zext i8 %12 to i32*/
		main_whilebodyii_conv12ii = main_whilebodyii_12;
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %shl14.i.i = shl nuw i32 %conv12.i.i, 24*/
		main_whilebodyii_shl14ii = (main_whilebodyii_conv12ii <<< (32'd24 % 32));
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %or15.i.i = or i32 %or10.i.i, %shl14.i.i*/
		main_whilebodyii_or15ii = (main_whilebodyii_or10ii | main_whilebodyii_shl14ii);
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %indvar.next8 = add i32 %indvar7, 1*/
		main_whilebodyii_indvarnext8 = (main_whilebodyii_indvar7_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %indvar.next8 = add i32 %indvar7, 1*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		main_whilebodyii_indvarnext8_reg <= main_whilebodyii_indvarnext8;
		if (start == 1'b0 && ^(main_whilebodyii_indvarnext8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_indvarnext8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i*/
	/*   %exitcond9 = icmp eq i32 %indvar.next8, 16*/
		main_whilebodyii_exitcond9 = (main_whilebodyii_indvarnext8 == 32'd16);
end
always @(posedge clk) begin
	/* main: %while.body.i.i*/
	/*   %exitcond9 = icmp eq i32 %indvar.next8, 16*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		main_whilebodyii_exitcond9_reg <= main_whilebodyii_exitcond9;
		if (start == 1'b0 && ^(main_whilebodyii_exitcond9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii_exitcond9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
		main_memcpyexiti_indvarnext11 = (main_whilebodyipreheaderi_indvar10_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i*/
	/*   %indvar.next11 = add i32 %indvar10, 1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti_12)) begin
		main_memcpyexiti_indvarnext11_reg <= main_memcpyexiti_indvarnext11;
		if (start == 1'b0 && ^(main_memcpyexiti_indvarnext11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti_indvarnext11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i*/
	/*   %exitcond12 = icmp eq i32 %indvar.next11, 128*/
		main_memcpyexiti_exitcond12 = (main_memcpyexiti_indvarnext11 == 32'd128);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i*/
	/*   %exitcond12 = icmp eq i32 %indvar.next11, 128*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti_12)) begin
		main_memcpyexiti_exitcond12_reg <= main_memcpyexiti_exitcond12;
		if (start == 1'b0 && ^(main_memcpyexiti_exitcond12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti_exitcond12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %memcpy.exit.i34 ], [ 0, %if.end.i6 ]*/
	if (((cur_state == LEGUP_F_main_BB_ifendi6_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebodyipreheaderi9_indvar4 = 32'd0;
	end
	/* main: %while.body.i.preheader.i9*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %memcpy.exit.i34 ], [ 0, %if.end.i6 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_memcpyexiti34_25) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti34_exitcond6_reg == 1'd0))) */ begin
		main_whilebodyipreheaderi9_indvar4 = main_memcpyexiti34_indvarnext5_reg;
	end
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %memcpy.exit.i34 ], [ 0, %if.end.i6 ]*/
	if (((cur_state == LEGUP_F_main_BB_ifendi6_15) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebodyipreheaderi9_indvar4_reg <= main_whilebodyipreheaderi9_indvar4;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi9_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi9_indvar4_reg"); $finish; end
	end
	/* main: %while.body.i.preheader.i9*/
	/*   %indvar4 = phi i32 [ %indvar.next5, %memcpy.exit.i34 ], [ 0, %if.end.i6 ]*/
	if ((((cur_state == LEGUP_F_main_BB_memcpyexiti34_25) & (memory_controller_waitrequest == 1'd0)) & (main_memcpyexiti34_exitcond6_reg == 1'd0))) begin
		main_whilebodyipreheaderi9_indvar4_reg <= main_whilebodyipreheaderi9_indvar4;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi9_indvar4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi9_indvar4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %13 = shl i32 %indvar4, 6*/
		main_whilebodyipreheaderi9_13 = (main_whilebodyipreheaderi9_indvar4_reg <<< (32'd6 % 32));
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %13 = shl i32 %indvar4, 6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi9_16)) begin
		main_whilebodyipreheaderi9_13_reg <= main_whilebodyipreheaderi9_13;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi9_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi9_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %14 = or i32 %13, 1*/
		main_whilebodyipreheaderi9_14 = (main_whilebodyipreheaderi9_13 | 32'd1);
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %14 = or i32 %13, 1*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi9_16)) begin
		main_whilebodyipreheaderi9_14_reg <= main_whilebodyipreheaderi9_14;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi9_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi9_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %15 = or i32 %13, 2*/
		main_whilebodyipreheaderi9_15 = (main_whilebodyipreheaderi9_13 | 32'd2);
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %15 = or i32 %13, 2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi9_16)) begin
		main_whilebodyipreheaderi9_15_reg <= main_whilebodyipreheaderi9_15;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi9_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi9_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %16 = or i32 %13, 3*/
		main_whilebodyipreheaderi9_16 = (main_whilebodyipreheaderi9_13 | 32'd3);
end
always @(posedge clk) begin
	/* main: %while.body.i.preheader.i9*/
	/*   %16 = or i32 %13, 3*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi9_16)) begin
		main_whilebodyipreheaderi9_16_reg <= main_whilebodyipreheaderi9_16;
		if (start == 1'b0 && ^(main_whilebodyipreheaderi9_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyipreheaderi9_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %while.body.i.i30 ], [ 0, %while.body.i.preheader.i9 ]*/
	if (((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi9_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebodyii30_indvar1 = 32'd0;
	end
	/* main: %while.body.i.i30*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %while.body.i.i30 ], [ 0, %while.body.i.preheader.i9 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_whilebodyii30_22) & (memory_controller_waitrequest == 1'd0)) & (main_whilebodyii30_exitcond3_reg == 1'd0))) */ begin
		main_whilebodyii30_indvar1 = main_whilebodyii30_indvarnext2_reg;
	end
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %while.body.i.i30 ], [ 0, %while.body.i.preheader.i9 ]*/
	if (((cur_state == LEGUP_F_main_BB_whilebodyipreheaderi9_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebodyii30_indvar1_reg <= main_whilebodyii30_indvar1;
		if (start == 1'b0 && ^(main_whilebodyii30_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_indvar1_reg"); $finish; end
	end
	/* main: %while.body.i.i30*/
	/*   %indvar1 = phi i32 [ %indvar.next2, %while.body.i.i30 ], [ 0, %while.body.i.preheader.i9 ]*/
	if ((((cur_state == LEGUP_F_main_BB_whilebodyii30_22) & (memory_controller_waitrequest == 1'd0)) & (main_whilebodyii30_exitcond3_reg == 1'd0))) begin
		main_whilebodyii30_indvar1_reg <= main_whilebodyii30_indvar1;
		if (start == 1'b0 && ^(main_whilebodyii30_indvar1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_indvar1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %17 = shl i32 %indvar1, 2*/
		main_whilebodyii30_17 = (main_whilebodyii30_indvar1_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %17 = shl i32 %indvar1, 2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_17)) begin
		main_whilebodyii30_17_reg <= main_whilebodyii30_17;
		if (start == 1'b0 && ^(main_whilebodyii30_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %18 = add i32 %14, %17*/
		main_whilebodyii30_18 = (main_whilebodyipreheaderi9_14_reg + main_whilebodyii30_17);
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %18 = add i32 %14, %17*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_17)) begin
		main_whilebodyii30_18_reg <= main_whilebodyii30_18;
		if (start == 1'b0 && ^(main_whilebodyii30_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %incdec.ptr.i.i14 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %18*/
		main_whilebodyii30_incdecptrii14 = (`TAG_g_indata_a + ((8192 * 32'd1) + (1 * main_whilebodyii30_18_reg)));
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %19 = add i32 %13, %17*/
		main_whilebodyii30_19 = (main_whilebodyipreheaderi9_13_reg + main_whilebodyii30_17);
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %19 = add i32 %13, %17*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_17)) begin
		main_whilebodyii30_19_reg <= main_whilebodyii30_19;
		if (start == 1'b0 && ^(main_whilebodyii30_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %p2.026.i.i12 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %19*/
		main_whilebodyii30_p2026ii12 = (`TAG_g_indata_a + ((8192 * 32'd1) + (1 * main_whilebodyii30_19_reg)));
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %20 = add i32 %15, %17*/
		main_whilebodyii30_20 = (main_whilebodyipreheaderi9_15_reg + main_whilebodyii30_17);
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %20 = add i32 %15, %17*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_17)) begin
		main_whilebodyii30_20_reg <= main_whilebodyii30_20;
		if (start == 1'b0 && ^(main_whilebodyii30_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %incdec.ptr2.i.i16 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %20*/
		main_whilebodyii30_incdecptr2ii16 = (`TAG_g_indata_a + ((8192 * 32'd1) + (1 * main_whilebodyii30_20_reg)));
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %incdec.ptr2.i.i16 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %20*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		main_whilebodyii30_incdecptr2ii16_reg <= main_whilebodyii30_incdecptr2ii16;
		if (start == 1'b0 && ^(main_whilebodyii30_incdecptr2ii16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_incdecptr2ii16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %21 = add i32 %16, %17*/
		main_whilebodyii30_21 = (main_whilebodyipreheaderi9_16_reg + main_whilebodyii30_17_reg);
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %21 = add i32 %16, %17*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		main_whilebodyii30_21_reg <= main_whilebodyii30_21;
		if (start == 1'b0 && ^(main_whilebodyii30_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %incdec.ptr6.i.i20 = getelementptr [2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 %21*/
		main_whilebodyii30_incdecptr6ii20 = (`TAG_g_indata_a + ((8192 * 32'd1) + (1 * main_whilebodyii30_21_reg)));
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %p1.027.i.i11 = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar1*/
		main_whilebodyii30_p1027ii11 = (`TAG_g_sha_info_data_a + (4 * main_whilebodyii30_indvar1_reg));
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %p1.027.i.i11 = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %indvar1*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_17)) begin
		main_whilebodyii30_p1027ii11_reg <= main_whilebodyii30_p1027ii11;
		if (start == 1'b0 && ^(main_whilebodyii30_p1027ii11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_p1027ii11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %22 = load i8* %p2.026.i.i12, align 1, !tbaa !6*/
		main_whilebodyii30_22 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %conv.i.i15 = zext i8 %22 to i32*/
		main_whilebodyii30_convii15 = main_whilebodyii30_22;
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %23 = load i8* %incdec.ptr.i.i14, align 1, !tbaa !6*/
		main_whilebodyii30_23 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %conv3.i.i17 = zext i8 %23 to i32*/
		main_whilebodyii30_conv3ii17 = main_whilebodyii30_23;
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %shl.i.i18 = shl nuw nsw i32 %conv3.i.i17, 8*/
		main_whilebodyii30_shlii18 = (main_whilebodyii30_conv3ii17 <<< (32'd8 % 32));
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %or5.i.i19 = or i32 %shl.i.i18, %conv.i.i15*/
		main_whilebodyii30_or5ii19 = (main_whilebodyii30_shlii18 | main_whilebodyii30_convii15);
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %or5.i.i19 = or i32 %shl.i.i18, %conv.i.i15*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_20)) begin
		main_whilebodyii30_or5ii19_reg <= main_whilebodyii30_or5ii19;
		if (start == 1'b0 && ^(main_whilebodyii30_or5ii19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_or5ii19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %24 = load i8* %incdec.ptr2.i.i16, align 1, !tbaa !6*/
		main_whilebodyii30_24 = memory_controller_out_a[7:0];
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %conv7.i.i21 = zext i8 %24 to i32*/
		main_whilebodyii30_conv7ii21 = main_whilebodyii30_24;
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %shl9.i.i22 = shl nuw nsw i32 %conv7.i.i21, 16*/
		main_whilebodyii30_shl9ii22 = (main_whilebodyii30_conv7ii21 <<< (32'd16 % 32));
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %or10.i.i23 = or i32 %or5.i.i19, %shl9.i.i22*/
		main_whilebodyii30_or10ii23 = (main_whilebodyii30_or5ii19_reg | main_whilebodyii30_shl9ii22);
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %25 = load i8* %incdec.ptr6.i.i20, align 1, !tbaa !6*/
		main_whilebodyii30_25 = memory_controller_out_b[7:0];
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %conv12.i.i25 = zext i8 %25 to i32*/
		main_whilebodyii30_conv12ii25 = main_whilebodyii30_25;
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %shl14.i.i26 = shl nuw i32 %conv12.i.i25, 24*/
		main_whilebodyii30_shl14ii26 = (main_whilebodyii30_conv12ii25 <<< (32'd24 % 32));
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %or15.i.i27 = or i32 %or10.i.i23, %shl14.i.i26*/
		main_whilebodyii30_or15ii27 = (main_whilebodyii30_or10ii23 | main_whilebodyii30_shl14ii26);
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
		main_whilebodyii30_indvarnext2 = (main_whilebodyii30_indvar1_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %indvar.next2 = add i32 %indvar1, 1*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		main_whilebodyii30_indvarnext2_reg <= main_whilebodyii30_indvarnext2;
		if (start == 1'b0 && ^(main_whilebodyii30_indvarnext2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_indvarnext2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body.i.i30*/
	/*   %exitcond3 = icmp eq i32 %indvar.next2, 16*/
		main_whilebodyii30_exitcond3 = (main_whilebodyii30_indvarnext2 == 32'd16);
end
always @(posedge clk) begin
	/* main: %while.body.i.i30*/
	/*   %exitcond3 = icmp eq i32 %indvar.next2, 16*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		main_whilebodyii30_exitcond3_reg <= main_whilebodyii30_exitcond3;
		if (start == 1'b0 && ^(main_whilebodyii30_exitcond3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebodyii30_exitcond3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i34*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
		main_memcpyexiti34_indvarnext5 = (main_whilebodyipreheaderi9_indvar4_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i34*/
	/*   %indvar.next5 = add i32 %indvar4, 1*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti34_23)) begin
		main_memcpyexiti34_indvarnext5_reg <= main_memcpyexiti34_indvarnext5;
		if (start == 1'b0 && ^(main_memcpyexiti34_indvarnext5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti34_indvarnext5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %memcpy.exit.i34*/
	/*   %exitcond6 = icmp eq i32 %indvar.next5, 128*/
		main_memcpyexiti34_exitcond6 = (main_memcpyexiti34_indvarnext5 == 32'd128);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i34*/
	/*   %exitcond6 = icmp eq i32 %indvar.next5, 128*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti34_23)) begin
		main_memcpyexiti34_exitcond6_reg <= main_memcpyexiti34_exitcond6;
		if (start == 1'b0 && ^(main_memcpyexiti34_exitcond6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_memcpyexiti34_exitcond6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body4.i22.i*/
	/*   %indvar = phi i32 [ %indvar.next, %while.body4.i22.i ], [ 0, %while.body4.i22.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_whilebody4i22preheaderi_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebody4i22i_indvar = 32'd0;
	end
	/* main: %while.body4.i22.i*/
	/*   %indvar = phi i32 [ %indvar.next, %while.body4.i22.i ], [ 0, %while.body4.i22.preheader.i ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB_whilebody4i22i_30) & (memory_controller_waitrequest == 1'd0)) & (main_whilebody4i22i_exitcond_reg == 1'd0))) */ begin
		main_whilebody4i22i_indvar = main_whilebody4i22i_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %while.body4.i22.i*/
	/*   %indvar = phi i32 [ %indvar.next, %while.body4.i22.i ], [ 0, %while.body4.i22.preheader.i ]*/
	if (((cur_state == LEGUP_F_main_BB_whilebody4i22preheaderi_27) & (memory_controller_waitrequest == 1'd0))) begin
		main_whilebody4i22i_indvar_reg <= main_whilebody4i22i_indvar;
		if (start == 1'b0 && ^(main_whilebody4i22i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebody4i22i_indvar_reg"); $finish; end
	end
	/* main: %while.body4.i22.i*/
	/*   %indvar = phi i32 [ %indvar.next, %while.body4.i22.i ], [ 0, %while.body4.i22.preheader.i ]*/
	if ((((cur_state == LEGUP_F_main_BB_whilebody4i22i_30) & (memory_controller_waitrequest == 1'd0)) & (main_whilebody4i22i_exitcond_reg == 1'd0))) begin
		main_whilebody4i22i_indvar_reg <= main_whilebody4i22i_indvar;
		if (start == 1'b0 && ^(main_whilebody4i22i_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebody4i22i_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body4.i22.i*/
	/*   %26 = add i32 %indvar, 1*/
		main_whilebody4i22i_26 = (main_whilebody4i22i_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %while.body4.i22.i*/
	/*   %26 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22i_28)) begin
		main_whilebody4i22i_26_reg <= main_whilebody4i22i_26;
		if (start == 1'b0 && ^(main_whilebody4i22i_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebody4i22i_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body4.i22.i*/
	/*   %p.19.i18.i = getelementptr [16 x i32]* @sha_info_data, i32 0, i32 %26*/
		main_whilebody4i22i_p19i18i = (`TAG_g_sha_info_data_a + (4 * main_whilebody4i22i_26_reg));
end
always @(*) begin
	/* main: %while.body4.i22.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_whilebody4i22i_indvarnext = (main_whilebody4i22i_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %while.body4.i22.i*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22i_28)) begin
		main_whilebody4i22i_indvarnext_reg <= main_whilebody4i22i_indvarnext;
		if (start == 1'b0 && ^(main_whilebody4i22i_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebody4i22i_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %while.body4.i22.i*/
	/*   %exitcond = icmp eq i32 %indvar.next, 13*/
		main_whilebody4i22i_exitcond = (main_whilebody4i22i_indvarnext == 32'd13);
end
always @(posedge clk) begin
	/* main: %while.body4.i22.i*/
	/*   %exitcond = icmp eq i32 %indvar.next, 13*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22i_28)) begin
		main_whilebody4i22i_exitcond_reg <= main_whilebody4i22i_exitcond;
		if (start == 1'b0 && ^(main_whilebody4i22i_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_whilebody4i22i_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %27 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
		main_sha_finalexit_27 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %cmp2 = icmp eq i32 %27, 6969911*/
		main_sha_finalexit_cmp2 = (main_sha_finalexit_27 == 32'd6969911);
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %conv = zext i1 %cmp2 to i32*/
		main_sha_finalexit_conv = main_sha_finalexit_cmp2;
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %28 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
		main_sha_finalexit_28 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %cmp2.1 = icmp eq i32 %28, -1814260603*/
		main_sha_finalexit_cmp21 = (main_sha_finalexit_28 == -32'd1814260603);
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %conv.1 = zext i1 %cmp2.1 to i32*/
		main_sha_finalexit_conv1 = main_sha_finalexit_cmp21;
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %add.1 = add nuw nsw i32 %conv.1, %conv*/
		main_sha_finalexit_add1 = (main_sha_finalexit_conv1 + main_sha_finalexit_conv);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %add.1 = add nuw nsw i32 %conv.1, %conv*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		main_sha_finalexit_add1_reg <= main_sha_finalexit_add1;
		if (start == 1'b0 && ^(main_sha_finalexit_add1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_add1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %29 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
		main_sha_finalexit_29 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %cmp2.2 = icmp eq i32 %29, 742465810*/
		main_sha_finalexit_cmp22 = (main_sha_finalexit_29 == 32'd742465810);
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %conv.2 = zext i1 %cmp2.2 to i32*/
		main_sha_finalexit_conv2 = main_sha_finalexit_cmp22;
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %add.2 = add nuw nsw i32 %conv.2, %add.1*/
		main_sha_finalexit_add2 = (main_sha_finalexit_conv2 + main_sha_finalexit_add1_reg);
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %30 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
		main_sha_finalexit_30 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %cmp2.3 = icmp eq i32 %30, 1677179459*/
		main_sha_finalexit_cmp23 = (main_sha_finalexit_30 == 32'd1677179459);
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %conv.3 = zext i1 %cmp2.3 to i32*/
		main_sha_finalexit_conv3 = main_sha_finalexit_cmp23;
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %add.3 = add nuw nsw i32 %conv.3, %add.2*/
		main_sha_finalexit_add3 = (main_sha_finalexit_conv3 + main_sha_finalexit_add2);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %add.3 = add nuw nsw i32 %conv.3, %add.2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_37)) begin
		main_sha_finalexit_add3_reg <= main_sha_finalexit_add3;
		if (start == 1'b0 && ^(main_sha_finalexit_add3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_add3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %31 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
		main_sha_finalexit_31 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %cmp2.4 = icmp eq i32 %31, -1384908510*/
		main_sha_finalexit_cmp24 = (main_sha_finalexit_31 == -32'd1384908510);
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %conv.4 = zext i1 %cmp2.4 to i32*/
		main_sha_finalexit_conv4 = main_sha_finalexit_cmp24;
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %add.4 = add nuw nsw i32 %conv.4, %add.3*/
		main_sha_finalexit_add4 = (main_sha_finalexit_conv4 + main_sha_finalexit_add3_reg);
end
always @(posedge clk) begin
	/* main: %sha_final.exit*/
	/*   %add.4 = add nuw nsw i32 %conv.4, %add.3*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_38)) begin
		main_sha_finalexit_add4_reg <= main_sha_finalexit_add4;
		if (start == 1'b0 && ^(main_sha_finalexit_add4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_sha_finalexit_add4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %sha_final.exit*/
	/*   %cmp3 = icmp eq i32 %add.4, 5*/
		main_sha_finalexit_cmp3 = (main_sha_finalexit_add4 == 32'd5);
end
always @(posedge clk) begin
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti_12)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_13)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_F_main_BB_memcpyexiti34_23)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_32)) begin
		sha_transform_start <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
	if ((cur_state == LEGUP_function_call_33)) begin
		sha_transform_start <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_start"); $finish; end
	end
end
always @(*) begin
	sha_transform_finish_final = sha_transform_finish_reg;
end
always @(posedge clk) begin
	if ((reset | (cur_state == LEGUP_F_main_BB_memcpyexiti_12))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_memcpyexiti34_23))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if ((reset | (cur_state == LEGUP_F_main_BB_sha_finalexit_32))) begin
		sha_transform_finish_reg <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
	if (sha_transform_finish) begin
		sha_transform_finish_reg <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to sha_transform_finish_reg"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %if.end*/
	/*   ret i32 %add.4*/
	if ((cur_state == LEGUP_F_main_BB_ifend_41)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_a = sha_transform_memory_controller_enable_a;
	end
	/* main: %if.end.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %if.end.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %if.end.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %while.body.i.i*/
	/*   %9 = load i8* %p2.026.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %while.body.i.i*/
	/*   %11 = load i8* %incdec.ptr2.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %while.body.i.i*/
	/*   store i32 %or15.i.i, i32* %p1.027.i.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_10)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %while.body.i.i30*/
	/*   %22 = load i8* %p2.026.i.i12, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %while.body.i.i30*/
	/*   %24 = load i8* %incdec.ptr2.i.i16, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_19)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %while.body4.i22.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22preheaderi_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %while.body4.i22.i*/
	/*   store i32 0, i32* %p.19.i18.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22i_29)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %27 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %29 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_a;
	end
	/* main: %if.end.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* main: %if.end.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
	/* main: %if.end.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_3)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest4_a;
	end
	/* main: %while.body.i.i*/
	/*   %9 = load i8* %p2.026.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		memory_controller_address_a = main_whilebodyii_p2026ii;
	end
	/* main: %while.body.i.i*/
	/*   %11 = load i8* %incdec.ptr2.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_8)) begin
		memory_controller_address_a = main_whilebodyii_incdecptr2ii_reg;
	end
	/* main: %while.body.i.i*/
	/*   store i32 %or15.i.i, i32* %p1.027.i.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_10)) begin
		memory_controller_address_a = main_whilebodyii_p1027ii_reg;
	end
	/* main: %while.body.i.i30*/
	/*   %22 = load i8* %p2.026.i.i12, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		memory_controller_address_a = main_whilebodyii30_p2026ii12;
	end
	/* main: %while.body.i.i30*/
	/*   %24 = load i8* %incdec.ptr2.i.i16, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_19)) begin
		memory_controller_address_a = main_whilebodyii30_incdecptr2ii16_reg;
	end
	/* main: %while.body4.i22.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22preheaderi_26)) begin
		memory_controller_address_a = `TAG_g_sha_info_data_a;
	end
	/* main: %while.body4.i22.i*/
	/*   store i32 0, i32* %p.19.i18.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22i_29)) begin
		memory_controller_address_a = main_whilebody4i22i_p19i18i;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_address_a = (`TAG_g_sha_info_data_a + (4 * 32'd14));
	end
	/* main: %sha_final.exit*/
	/*   %27 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest0_a;
	end
	/* main: %sha_final.exit*/
	/*   %29 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		memory_controller_address_a = `TAG_g_sha_info_digest2_a;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_a = sha_transform_memory_controller_write_enable_a;
	end
	/* main: %if.end.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %if.end.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %if.end.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %while.body.i.i*/
	/*   %9 = load i8* %p2.026.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %while.body.i.i*/
	/*   %11 = load i8* %incdec.ptr2.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %while.body.i.i*/
	/*   store i32 %or15.i.i, i32* %p1.027.i.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_10)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %while.body.i.i30*/
	/*   %22 = load i8* %p2.026.i.i12, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %while.body.i.i30*/
	/*   %24 = load i8* %incdec.ptr2.i.i16, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_19)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %while.body4.i22.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22preheaderi_26)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %while.body4.i22.i*/
	/*   store i32 0, i32* %p.19.i18.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22i_29)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %27 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %sha_final.exit*/
	/*   %29 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_a[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_a;
	end
	/* main: %if.end.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_in_a = 32'd1732584193;
	end
	/* main: %if.end.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_in_a = -32'd1732584194;
	end
	/* main: %if.end.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_3)) begin
		memory_controller_in_a = -32'd1009589776;
	end
	/* main: %while.body.i.i*/
	/*   store i32 %or15.i.i, i32* %p1.027.i.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_10)) begin
		memory_controller_in_a = main_whilebodyii_or15ii;
	end
	/* main: %while.body4.i22.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22preheaderi_26)) begin
		memory_controller_in_a = 32'd128;
	end
	/* main: %while.body4.i22.i*/
	/*   store i32 0, i32* %p.19.i18.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22i_29)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_in_a = 32'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_a[1:0] = sha_transform_memory_controller_size_a;
	end
	/* main: %if.end.i*/
	/*   store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %if.end.i*/
	/*   store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %if.end.i*/
	/*   store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %while.body.i.i*/
	/*   %9 = load i8* %p2.026.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %while.body.i.i*/
	/*   %11 = load i8* %incdec.ptr2.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_8)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %while.body.i.i*/
	/*   store i32 %or15.i.i, i32* %p1.027.i.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_10)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %while.body.i.i30*/
	/*   %22 = load i8* %p2.026.i.i12, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %while.body.i.i30*/
	/*   %24 = load i8* %incdec.ptr2.i.i16, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_19)) begin
		memory_controller_size_a = 2'd0;
	end
	/* main: %while.body4.i22.preheader.i*/
	/*   store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22preheaderi_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %while.body4.i22.i*/
	/*   store i32 0, i32* %p.19.i18.i, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebody4i22i_29)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %27 = load i32* @sha_info_digest.0, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %29 = load i32* @sha_info_digest.2, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_enable_b = sha_transform_memory_controller_enable_b;
	end
	/* main: %if.end.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %if.end.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %while.body.i.i*/
	/*   %10 = load i8* %incdec.ptr.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %while.body.i.i*/
	/*   %12 = load i8* %incdec.ptr6.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %while.body.i.i30*/
	/*   %23 = load i8* %incdec.ptr.i.i14, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %while.body.i.i30*/
	/*   %25 = load i8* %incdec.ptr6.i.i20, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %while.body.i.i30*/
	/*   store i32 %or15.i.i27, i32* %p1.027.i.i11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %28 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %30 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %31 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:0] = sha_transform_memory_controller_address_b;
	end
	/* main: %if.end.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* main: %if.end.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* main: %while.body.i.i*/
	/*   %10 = load i8* %incdec.ptr.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		memory_controller_address_b = main_whilebodyii_incdecptrii;
	end
	/* main: %while.body.i.i*/
	/*   %12 = load i8* %incdec.ptr6.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_8)) begin
		memory_controller_address_b = main_whilebodyii_incdecptr6ii;
	end
	/* main: %while.body.i.i30*/
	/*   %23 = load i8* %incdec.ptr.i.i14, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		memory_controller_address_b = main_whilebodyii30_incdecptrii14;
	end
	/* main: %while.body.i.i30*/
	/*   %25 = load i8* %incdec.ptr6.i.i20, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_19)) begin
		memory_controller_address_b = main_whilebodyii30_incdecptr6ii20;
	end
	/* main: %while.body.i.i30*/
	/*   store i32 %or15.i.i27, i32* %p1.027.i.i11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_21)) begin
		memory_controller_address_b = main_whilebodyii30_p1027ii11_reg;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_address_b = (`TAG_g_sha_info_data_a + (4 * 32'd15));
	end
	/* main: %sha_final.exit*/
	/*   %28 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest1_a;
	end
	/* main: %sha_final.exit*/
	/*   %30 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest3_a;
	end
	/* main: %sha_final.exit*/
	/*   %31 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		memory_controller_address_b = `TAG_g_sha_info_digest4_a;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_write_enable_b = sha_transform_memory_controller_write_enable_b;
	end
	/* main: %if.end.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %if.end.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %while.body.i.i*/
	/*   %10 = load i8* %incdec.ptr.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %while.body.i.i*/
	/*   %12 = load i8* %incdec.ptr6.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %while.body.i.i30*/
	/*   %23 = load i8* %incdec.ptr.i.i14, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %while.body.i.i30*/
	/*   %25 = load i8* %incdec.ptr6.i.i20, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_19)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %while.body.i.i30*/
	/*   store i32 %or15.i.i27, i32* %p1.027.i.i11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_21)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %sha_final.exit*/
	/*   %28 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %sha_final.exit*/
	/*   %30 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %sha_final.exit*/
	/*   %31 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_in_b[`MEMORY_CONTROLLER_DATA_SIZE-1:0] = sha_transform_memory_controller_in_b;
	end
	/* main: %if.end.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_in_b = -32'd271733879;
	end
	/* main: %if.end.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_in_b = 32'd271733878;
	end
	/* main: %while.body.i.i30*/
	/*   store i32 %or15.i.i27, i32* %p1.027.i.i11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_21)) begin
		memory_controller_in_b = main_whilebodyii30_or15ii27;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_in_b = 32'd131072;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %memcpy.exit.i*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_13)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %memcpy.exit.i34*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_24)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %sha_final.exit*/
	/*   tail call fastcc void @sha_transform() #2*/
	if ((cur_state == LEGUP_function_call_33)) begin
		memory_controller_size_b[1:0] = sha_transform_memory_controller_size_b;
	end
	/* main: %if.end.i*/
	/*   store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %if.end.i*/
	/*   store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_ifendi_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %while.body.i.i*/
	/*   %10 = load i8* %incdec.ptr.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_7)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %while.body.i.i*/
	/*   %12 = load i8* %incdec.ptr6.i.i, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii_8)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %while.body.i.i30*/
	/*   %23 = load i8* %incdec.ptr.i.i14, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_18)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %while.body.i.i30*/
	/*   %25 = load i8* %incdec.ptr6.i.i20, align 1, !tbaa !6*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_19)) begin
		memory_controller_size_b = 2'd0;
	end
	/* main: %while.body.i.i30*/
	/*   store i32 %or15.i.i27, i32* %p1.027.i.i11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_whilebodyii30_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_31)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %28 = load i32* @sha_info_digest.1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_34)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %30 = load i32* @sha_info_digest.3, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %sha_final.exit*/
	/*   %31 = load i32* @sha_info_digest.4, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_sha_finalexit_36)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %if.end*/
	/*   ret i32 %add.4*/
	if ((cur_state == LEGUP_F_main_BB_ifend_41)) begin
		return_val <= main_sha_finalexit_add4_reg;
		if (start == 1'b0 && ^(main_sha_finalexit_add4_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
