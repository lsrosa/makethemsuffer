; ModuleID = 'sha_driver.postlto.6.bc'
target datalayout = "e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128"
target triple = "i386-unknown-linux-gnu"

%union.double_complex = type { { double, double } }
%union.float_complex = type { { float, float } }
%union.ieee_double_shape_type = type { double }
%struct.anon = type { i32, i32 }
%union.ieee_float_shape_type = type { float }

@indata = internal unnamed_addr constant [2 x [8192 x i8]] [[8192 x i8] c"KurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonneguKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworryKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonneguKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthattsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefutureKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepoweraKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonneguKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryou", [8192 x i8] c"thuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthattsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefutureKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepoweraKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonneguKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthattsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefutureKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatKurtVonnegutsCommencementAddressatMITLadiesandgentlemenoftheclassof97WearsunscreenIfIcouldofferyouonlyonetipforthefuturesunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatsunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatndbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatsunscreenwouldbeitThelongtermbenefitsofsunscreenhavebeenprovedbyscientistswhereastherestofmyadvicehasnobasismorereliablethanmyownmeanderingexperienceIwilldispensethisadvicenowEnjoythepowerandbeautyofyouryouthOhnevermindYouwillnotunderstandthepowerandbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoulllookbackatphotosofyourselfandrecallinawayyoucantgraspnowhowmuchpossibilitylaybeforeyouandhowfabulousyoureallylookedYouarenotasfatasyouimagineDontworryaboutthefutureOrworrybutknowthatndbeautyofyouryouthuntiltheyvefadedButtrustmein20yearsyoullloo"], align 1
@sha_info_digest.0 = internal unnamed_addr global i32 0
@sha_info_digest.1 = internal unnamed_addr global i32 0
@sha_info_digest.2 = internal unnamed_addr global i32 0
@sha_info_digest.3 = internal unnamed_addr global i32 0
@sha_info_digest.4 = internal unnamed_addr global i32 0
@sha_info_data = internal unnamed_addr global [16 x i32] zeroinitializer, align 4
@.str = private unnamed_addr constant [6 x i8] c"loop6\00", align 1
@.str1 = private unnamed_addr constant [6 x i8] c"loop7\00", align 1
@.str2 = private unnamed_addr constant [12 x i8] c"Result: %d\0A\00", align 1
@.str3 = private unnamed_addr constant [14 x i8] c"RESULT: PASS\0A\00", align 1
@.str4 = private unnamed_addr constant [14 x i8] c"RESULT: FAIL\0A\00", align 1
@.str5 = private unnamed_addr constant [6 x i8] c"loop0\00", align 1
@.str6 = private unnamed_addr constant [6 x i8] c"loop1\00", align 1
@.str7 = private unnamed_addr constant [6 x i8] c"loop2\00", align 1
@.str8 = private unnamed_addr constant [6 x i8] c"loop3\00", align 1
@.str9 = private unnamed_addr constant [6 x i8] c"loop4\00", align 1
@.str10 = private unnamed_addr constant [6 x i8] c"loop5\00", align 1
@ln2HI = internal constant [2 x double] [double 0x3FE62E42FEE00000, double 0xBFE62E42FEE00000], align 8
@ln2LO = internal constant [2 x double] [double 0x3DEA39EF35793C76, double 0xBDEA39EF35793C76], align 8
@halF = internal constant [2 x double] [double 5.000000e-01, double -5.000000e-01], align 8
@ln2HI31 = internal constant [2 x float] [float 0x3FE62E3000000000, float 0xBFE62E3000000000], align 4
@ln2LO32 = internal constant [2 x float] [float 0x3EE2FEFA20000000, float 0xBEE2FEFA20000000], align 4
@halF33 = internal constant [2 x float] [float 5.000000e-01, float -5.000000e-01], align 4
@Zero = internal constant [2 x float] [float 0.000000e+00, float -0.000000e+00], align 4
@qR8 = internal constant [6 x float] [float 0.000000e+00, float 0x3FB2C00000000000, float 0x4027895260000000, float 0x40816D6320000000, float 0x40C14D9940000000, float 0x40E212D400000000], align 4
@qS8 = internal constant [6 x float] [float 0x406478D540000000, float 0x40BFA25840000000, float 0x4101665260000000, float 0x412883DA80000000, float 0x4129A66B20000000, float 0xC114FD6D20000000], align 4
@qR5 = internal constant [6 x float] [float 0x3DB43D8F20000000, float 0x3FB2BFFFE0000000, float 0x401757B0C0000000, float 0x4060E39200000000, float 0x40900CF9A0000000, float 0x409F17E960000000], align 4
@qS5 = internal constant [6 x float] [float 0x4054B1B400000000, float 0x40A03BA0E0000000, float 0x40D267D280000000, float 0x40EBB5E3A0000000, float 0x40E1911820000000, float 0xC0B4EA57C0000000], align 4
@qR3 = internal constant [6 x float] [float 0x3E32CD0360000000, float 0x3FB2BFEE00000000, float 0x400AC0FC60000000, float 0x40454F98A0000000, float 0x406559DBE0000000, float 0x4064D77C80000000], align 4
@qS3 = internal constant [6 x float] [float 0x40486122C0000000, float 0x40862D8380000000, float 0x40ACF04BE0000000, float 0x40B93C6CE0000000, float 0x40A3A8AAE0000000, float 0xC062A7EB20000000], align 4
@qR2 = internal constant [6 x float] [float 0x3E84313B60000000, float 0x3FB2BEC540000000, float 0x3FFFF897E0000000, float 0x402CFDBFA0000000, float 0x403FAA8E20000000, float 0x403040B180000000], align 4
@qS2 = internal constant [6 x float] [float 0x403E5D9700000000, float 0x4070D591E0000000, float 0x408A664520000000, float 0x408B977CA0000000, float 0x406A955300000000, float 0xC0153E6B00000000], align 4
@pR8 = internal constant [6 x float] [float 0.000000e+00, float -7.031250e-02, float 0xC02029D0C0000000, float 0xC070110280000000, float 0xC0A36A6EC0000000, float 0xC0B4850B40000000], align 4
@pS8 = internal constant [5 x float] [float 0x405D223300000000, float 0x40ADF37D60000000, float 0x40E3D2BB60000000, float 0x40FC810F80000000, float 0x40E7417740000000], align 4
@pR5 = internal constant [6 x float] [float 0xBDA918B140000000, float 0xBFB1FFFFE0000000, float 0xC010A37100000000, float 0xC050EB2F60000000, float 0xC074B3B360000000, float 0xC075A6EF20000000], align 4
@pS5 = internal constant [5 x float] [float 0x404E608100000000, float 0x40906D0260000000, float 0x40B75AF880000000, float 0x40C2CCB900000000, float 0x40A2CC1DC0000000], align 4
@pR3 = internal constant [6 x float] [float 0xBE25E10360000000, float 0xBFB1FFF700000000, float 0xC00345B2A0000000, float 0xC035F74A40000000, float 0xC04D0A2240000000, float 0xC03F72ACA0000000], align 4
@pS3 = internal constant [5 x float] [float 0x4041ED9280000000, float 0x4076983940000000, float 0x4092A66E60000000, float 0x40919FFCC0000000, float 0x4065B29700000000], align 4
@pR2 = internal constant [6 x float] [float 0xBE77D316E0000000, float 0xBFB1FF6240000000, float 0xBFF7363980000000, float 0xC01E8AF3E0000000, float 0xC02662E6C0000000, float 0xC009DE81A0000000], align 4
@pS2 = internal constant [5 x float] [float 0x40363865A0000000, float 0x4061069E00000000, float 0x4070E78640000000, float 0x40633C0340000000, float 0x402D50B340000000], align 4
@U0 = internal constant [5 x float] [float 0xBFC9186620000000, float 0x3FA9D3C780000000, float 0xBF5F55E540000000, float 0x3EF8AB0380000000, float 0xBE78AC0060000000], align 4
@V0 = internal constant [5 x float] [float 0x3F94650D40000000, float 0x3F2A8C8960000000, float 0x3EB6C05A80000000, float 0x3E3ABF1D60000000, float 0x3DB25039E0000000], align 4
@qr8 = internal constant [6 x float] [float 0.000000e+00, float 0xBFBA400000000000, float 0xC0304591A0000000, float 0xC087BCD060000000, float 0xC0C724E740000000, float 0xC0E7A6D060000000], align 4
@qs8 = internal constant [6 x float] [float 0x40642CA6E0000000, float 0x40BE9162E0000000, float 0x4100579AC0000000, float 0x4125F65380000000, float 0x412457D280000000, float 0xC111F96900000000], align 4
@qr5 = internal constant [6 x float] [float 0xBDB6FA4320000000, float 0xBFBA3FFFC0000000, float 0xC0201CE6C0000000, float 0xC066F56D60000000, float 0xC09574C660000000, float 0xC0A468E380000000], align 4
@qs5 = internal constant [6 x float] [float 0x405451B300000000, float 0x409F1F31E0000000, float 0x40D10F1F00000000, float 0x40E8576DA0000000, float 0x40DB4B04C0000000, float 0xC0B26F2F00000000], align 4
@qr3 = internal constant [6 x float] [float 0xBE35CFA9E0000000, float 0xBFBA3FEB60000000, float 0xC01270C240000000, float 0xC04CEC71C0000000, float 0xC06C87D340000000, float 0xC06B66B960000000], align 4
@qs3 = internal constant [6 x float] [float 0x4047D523C0000000, float 0x40850EEBC0000000, float 0x40AA684E40000000, float 0x40B5ABBAA0000000, float 0x409DBC7A00000000, float 0xC060E67020000000], align 4
@qr2 = internal constant [6 x float] [float 0xBE87F12640000000, float 0xBFBA3E8EA0000000, float 0xC006048460000000, float 0xC033A9E2C0000000, float 0xC04529A3E0000000, float 0xC0355F3640000000], align 4
@qs2 = internal constant [6 x float] [float 0x403D888A80000000, float 0x406F9F68E0000000, float 0x4087AC05C0000000, float 0x40871B2540000000, float 0x40637E5E40000000, float 0xC013D686E0000000], align 4
@pr8 = internal constant [6 x float] [float 0.000000e+00, float 1.171875e-01, float 0x402A7A9D40000000, float 0x4079C0D460000000, float 0x40AE457DA0000000, float 0x40BEEA7AC0000000], align 4
@ps8 = internal constant [5 x float] [float 0x405C8D4580000000, float 0x40AC85DCA0000000, float 0x40E20B86A0000000, float 0x40F7D42CC0000000, float 0x40DE151160000000], align 4
@pr5 = internal constant [6 x float] [float 0x3DAD0667E0000000, float 0x3FBDFFFFE0000000, float 0x401B360460000000, float 0x405B13B940000000, float 0x40802D16E0000000, float 0x408085B8C0000000], align 4
@ps5 = internal constant [5 x float] [float 0x404DA3EAA0000000, float 0x408EFB3620000000, float 0x40B4E94460000000, float 0x40BEA4B0C0000000, float 0x4097803000000000], align 4
@pr3 = internal constant [6 x float] [float 0x3E29FC21A0000000, float 0x3FBDFFF560000000, float 0x400F76BCE0000000, float 0x40418F48A0000000, float 0x4056C38540000000, float 0x4048478F80000000], align 4
@ps3 = internal constant [5 x float] [float 0x40416549A0000000, float 0x40750C3300000000, float 0x40905B7C60000000, float 0x408BD67DA0000000, float 0x4059F26D80000000], align 4
@pr2 = internal constant [6 x float] [float 0x3E7CE9D500000000, float 0x3FBDFF42C0000000, float 0x4002F2B800000000, float 0x40287C3780000000, float 0x4031B1A820000000, float 0x40144B49A0000000], align 4
@ps2 = internal constant [5 x float] [float 0x40356FBD80000000, float 0x405F529320000000, float 0x406D08D8E0000000, float 0x405D6B7AE0000000, float 0x4020BAB200000000], align 4
@Zero38 = internal constant [2 x double] [double 0.000000e+00, double -0.000000e+00], align 8
@.str11 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@bp = internal constant [2 x float] [float 1.000000e+00, float 1.500000e+00], align 4
@dp_l = internal constant [2 x float] [float 0.000000e+00, float 0x3EBA39FB80000000], align 4
@dp_h = internal constant [2 x float] [float 0.000000e+00, float 0x3FE2B80000000000], align 4
@npio2_hw = internal constant [32 x i32] [i32 1070141184, i32 1078529792, i32 1083624192, i32 1086918400, i32 1090212608, i32 1092012800, i32 1093659904, i32 1095307008, i32 1096954112, i32 1098601216, i32 1099577856, i32 1100401408, i32 1101224960, i32 1102048512, i32 1102872064, i32 1103695616, i32 1104519168, i32 1105342720, i32 1106166272, i32 1106989824, i32 1107554816, i32 1107966464, i32 1108378368, i32 1108790016, i32 1109201920, i32 1109613568, i32 1110025472, i32 1110437120, i32 1110849024, i32 1111260672, i32 1111672576, i32 1112084224], align 4
@two_over_pi = internal constant [198 x i32] [i32 162, i32 249, i32 131, i32 110, i32 78, i32 68, i32 21, i32 41, i32 252, i32 39, i32 87, i32 209, i32 245, i32 52, i32 221, i32 192, i32 219, i32 98, i32 149, i32 153, i32 60, i32 67, i32 144, i32 65, i32 254, i32 81, i32 99, i32 171, i32 222, i32 187, i32 197, i32 97, i32 183, i32 36, i32 110, i32 58, i32 66, i32 77, i32 210, i32 224, i32 6, i32 73, i32 46, i32 234, i32 9, i32 209, i32 146, i32 28, i32 254, i32 29, i32 235, i32 28, i32 177, i32 41, i32 167, i32 62, i32 232, i32 130, i32 53, i32 245, i32 46, i32 187, i32 68, i32 132, i32 233, i32 156, i32 112, i32 38, i32 180, i32 95, i32 126, i32 65, i32 57, i32 145, i32 214, i32 57, i32 131, i32 83, i32 57, i32 244, i32 156, i32 132, i32 95, i32 139, i32 189, i32 249, i32 40, i32 59, i32 31, i32 248, i32 151, i32 255, i32 222, i32 5, i32 152, i32 15, i32 239, i32 47, i32 17, i32 139, i32 90, i32 10, i32 109, i32 31, i32 109, i32 54, i32 126, i32 207, i32 39, i32 203, i32 9, i32 183, i32 79, i32 70, i32 63, i32 102, i32 158, i32 95, i32 234, i32 45, i32 117, i32 39, i32 186, i32 199, i32 235, i32 229, i32 241, i32 123, i32 61, i32 7, i32 57, i32 247, i32 138, i32 82, i32 146, i32 234, i32 107, i32 251, i32 95, i32 177, i32 31, i32 141, i32 93, i32 8, i32 86, i32 3, i32 48, i32 70, i32 252, i32 123, i32 107, i32 171, i32 240, i32 207, i32 188, i32 32, i32 154, i32 244, i32 54, i32 29, i32 169, i32 227, i32 145, i32 97, i32 94, i32 230, i32 27, i32 8, i32 101, i32 153, i32 133, i32 95, i32 20, i32 160, i32 104, i32 64, i32 141, i32 255, i32 216, i32 128, i32 77, i32 115, i32 39, i32 49, i32 6, i32 6, i32 21, i32 86, i32 202, i32 115, i32 168, i32 201, i32 96, i32 226, i32 123, i32 192, i32 140, i32 107], align 4
@qR841 = internal constant [6 x double] [double 0.000000e+00, double 0x3FB2BFFFFFFFFE2C, double 0x402789525BB334D6, double 0x40816D6315301825, double 0x40C14D993E18F46D, double 0x40E212D40E901566], align 8
@qS842 = internal constant [6 x double] [double 0x406478D5365B39BC, double 0x40BFA2584E6B0563, double 0x4101665254D38C3F, double 0x412883DA83A52B43, double 0x4129A66B28DE0B3D, double 0xC114FD6D2C9530C5], align 8
@qR543 = internal constant [6 x double] [double 0x3DB43D8F29CC8CD9, double 0x3FB2BFFFD172B04C, double 0x401757B0B9953DD3, double 0x4060E3920A8788E9, double 0x40900CF99DC8C481, double 0x409F17E953C6E3A6], align 8
@qS544 = internal constant [6 x double] [double 0x4054B1B3FB5E1543, double 0x40A03BA0DA21C0CE, double 0x40D267D27B591E6D, double 0x40EBB5E397E02372, double 0x40E191181F7A54A0, double 0xC0B4EA57BEDBC609], align 8
@qR345 = internal constant [6 x double] [double 0x3E32CD036ADECB82, double 0x3FB2BFEE0E8D0842, double 0x400AC0FC61149CF5, double 0x40454F98962DAEDD, double 0x406559DBE25EFD1F, double 0x4064D77C81FA21E0], align 8
@qS346 = internal constant [6 x double] [double 0x40486122BFE343A6, double 0x40862D8386544EB3, double 0x40ACF04BE44DFC63, double 0x40B93C6CD7C76A28, double 0x40A3A8AAD94FB1C0, double 0xC062A7EB201CF40F], align 8
@qR247 = internal constant [6 x double] [double 0x3E84313B54F76BDB, double 0x3FB2BEC53E883E34, double 0x3FFFF897E727779C, double 0x402CFDBFAAF96FE5, double 0x403FAA8E29FBDC4A, double 0x403040B171814BB4], align 8
@qS248 = internal constant [6 x double] [double 0x403E5D96F7C07AED, double 0x4070D591E4D14B40, double 0x408A664522B3BF22, double 0x408B977C9C5CC214, double 0x406A95530E001365, double 0xC0153E6AF8B32931], align 8
@pR849 = internal constant [6 x double] [double 0.000000e+00, double 0xBFB1FFFFFFFFFD32, double 0xC02029D0B44FA779, double 0xC07011027B19E863, double 0xC0A36A6ECD4DCAFC, double 0xC0B4850B36CC643D], align 8
@pS850 = internal constant [5 x double] [double 0x405D223307A96751, double 0x40ADF37D50596938, double 0x40E3D2BB6EB6B05F, double 0x40FC810F8F9FA9BD, double 0x40E741774F2C49DC], align 8
@pR551 = internal constant [6 x double] [double 0xBDA918B147E495CC, double 0xBFB1FFFFE69AFBC6, double 0xC010A370F90C6BBF, double 0xC050EB2F5A7D1783, double 0xC074B3B36742CC63, double 0xC075A6EF28A38BD7], align 8
@pS552 = internal constant [5 x double] [double 0x404E60810C98C5DE, double 0x40906D025C7E2864, double 0x40B75AF88FBE1D60, double 0x40C2CCB8FA76FA38, double 0x40A2CC1DC70BE864], align 8
@pR353 = internal constant [6 x double] [double 0xBE25E1036FE1AA86, double 0xBFB1FFF6F7C0E24B, double 0xC00345B2AEA48074, double 0xC035F74A4CB94E14, double 0xC04D0A22420A1A45, double 0xC03F72ACA892D80F], align 8
@pS354 = internal constant [5 x double] [double 0x4041ED9284077DD3, double 0x40769839464A7C0E, double 0x4092A66E6D1061D6, double 0x40919FFCB8C39B7E, double 0x4065B296FC379081], align 8
@pR255 = internal constant [6 x double] [double 0xBE77D316E927026D, double 0xBFB1FF62495E1E42, double 0xBFF736398A24A843, double 0xC01E8AF3EDAFA7F3, double 0xC02662E6C5246303, double 0xC009DE81AF8FE70F], align 8
@pS256 = internal constant [5 x double] [double 0x40363865908B5959, double 0x4061069E0EE8878F, double 0x4070E78642EA079B, double 0x40633C033AB6FAFF, double 0x402D50B344391809], align 8
@U057 = internal constant [5 x double] [double 0xBFC91866143CBC8A, double 0x3FA9D3C776292CD1, double 0xBF5F55E54844F50F, double 0x3EF8AB038FA6B88E, double 0xBE78AC00569105B8], align 8
@V058 = internal constant [5 x double] [double 0x3F94650D3F4DA9F0, double 0x3F2A8C896C257764, double 0x3EB6C05A894E8CA6, double 0x3E3ABF1D5BA69A86, double 0x3DB25039DACA772A], align 8
@qr859 = internal constant [6 x double] [double 0.000000e+00, double 0xBFBA3FFFFFFFFDF3, double 0xC0304591A26779F7, double 0xC087BCD053E4B576, double 0xC0C724E740F87415, double 0xC0E7A6D065D09C6A], align 8
@qs860 = internal constant [6 x double] [double 0x40642CA6DE5BCDE5, double 0x40BE9162D0D88419, double 0x4100579AB0B75E98, double 0x4125F65372869C19, double 0x412457D27719AD5C, double 0xC111F9690EA5AA18], align 8
@qr561 = internal constant [6 x double] [double 0xBDB6FA431AA1A098, double 0xBFBA3FFFCB597FEF, double 0xC0201CE6CA03AD4B, double 0xC066F56D6CA7B9B0, double 0xC09574C66931734F, double 0xC0A468E388FDA79D], align 8
@qs562 = internal constant [6 x double] [double 0x405451B2FF5A11B2, double 0x409F1F31E77BF839, double 0x40D10F1F0D64CE29, double 0x40E8576DAABAD197, double 0x40DB4B04CF7C364B, double 0xC0B26F2EFCFFA004], align 8
@qr363 = internal constant [6 x double] [double 0xBE35CFA9D38FC84F, double 0xBFBA3FEB51AEED54, double 0xC01270C23302D9FF, double 0xC04CEC71C25D16DA, double 0xC06C87D34718D55F, double 0xC06B66B95F5C1BF6], align 8
@qs364 = internal constant [6 x double] [double 0x4047D523CCD367E4, double 0x40850EEBC031EE3E, double 0x40AA684E448E7C9A, double 0x40B5ABBAA61D54A6, double 0x409DBC7A0DD4DF4B, double 0xC060E670290A311F], align 8
@qr265 = internal constant [6 x double] [double 0xBE87F12644C626D2, double 0xBFBA3E8E9148B010, double 0xC006048469BB4EDA, double 0xC033A9E2C168907F, double 0xC04529A3DE104AAA, double 0xC0355F3639CF6E52], align 8
@qs266 = internal constant [6 x double] [double 0x403D888A78AE64FF, double 0x406F9F68DB821CBA, double 0x4087AC05CE49A0F7, double 0x40871B2548D4C029, double 0x40637E5E3C3ED8D4, double 0xC013D686E71BE86B], align 8
@pr867 = internal constant [6 x double] [double 0.000000e+00, double 0x3FBDFFFFFFFFFCCE, double 0x402A7A9D357F7FCE, double 0x4079C0D4652EA590, double 0x40AE457DA3A532CC, double 0x40BEEA7AC32782DD], align 8
@ps868 = internal constant [5 x double] [double 0x405C8D458E656CAC, double 0x40AC85DC964D274F, double 0x40E20B8697C5BB7F, double 0x40F7D42CB28F17BB, double 0x40DE1511697A0B2D], align 8
@pr569 = internal constant [6 x double] [double 0x3DAD0667DAE1CA7D, double 0x3FBDFFFFE2C10043, double 0x401B36046E6315E3, double 0x405B13B9452602ED, double 0x40802D16D052D649, double 0x408085B8BB7E0CB7], align 8
@ps570 = internal constant [5 x double] [double 0x404DA3EAA8AF633D, double 0x408EFB361B066701, double 0x40B4E9445706B6FB, double 0x40BEA4B0B8A5BB15, double 0x40978030036F5E51], align 8
@pr371 = internal constant [6 x double] [double 0x3E29FC21A7AD9EDD, double 0x3FBDFFF55B21D17B, double 0x400F76BCE85EAD8A, double 0x40418F489DA6D129, double 0x4056C3854D2C1837, double 0x4048478F8EA83EE5], align 8
@ps372 = internal constant [5 x double] [double 0x40416549A134069C, double 0x40750C3307F1A75F, double 0x40905B7C5037D523, double 0x408BD67DA32E31E9, double 0x4059F26D7C2EED53], align 8
@pr273 = internal constant [6 x double] [double 0x3E7CE9D4F65544F4, double 0x3FBDFF42BE760D83, double 0x4002F2B7F98FAEC0, double 0x40287C377F71A964, double 0x4031B1A8177F8EE2, double 0x40144B49A574C1FE], align 8
@ps274 = internal constant [5 x double] [double 0x40356FBD8AD5ECDC, double 0x405F529314F92CD5, double 0x406D08D8D5A2DBD9, double 0x405D6B7ADA1884A9, double 0x4020BAB1F44E5192], align 8
@.str77 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@bp78 = internal constant [2 x double] [double 1.000000e+00, double 1.500000e+00], align 8
@dp_l79 = internal constant [2 x double] [double 0.000000e+00, double 0x3E4CFDEB43CFD006], align 8
@dp_h80 = internal constant [2 x double] [double 0.000000e+00, double 0x3FE2B80340000000], align 8
@npio2_hw81 = internal constant [32 x i32] [i32 1073291771, i32 1074340347, i32 1074977148, i32 1075388923, i32 1075800698, i32 1076025724, i32 1076231611, i32 1076437499, i32 1076643386, i32 1076849274, i32 1076971356, i32 1077074300, i32 1077177244, i32 1077280187, i32 1077383131, i32 1077486075, i32 1077589019, i32 1077691962, i32 1077794906, i32 1077897850, i32 1077968460, i32 1078019932, i32 1078071404, i32 1078122876, i32 1078174348, i32 1078225820, i32 1078277292, i32 1078328763, i32 1078380235, i32 1078431707, i32 1078483179, i32 1078534651], align 4
@two_over_pi82 = internal constant [66 x i32] [i32 10680707, i32 7228996, i32 1387004, i32 2578385, i32 16069853, i32 12639074, i32 9804092, i32 4427841, i32 16666979, i32 11263675, i32 12935607, i32 2387514, i32 4345298, i32 14681673, i32 3074569, i32 13734428, i32 16653803, i32 1880361, i32 10960616, i32 8533493, i32 3062596, i32 8710556, i32 7349940, i32 6258241, i32 3772886, i32 3769171, i32 3798172, i32 8675211, i32 12450088, i32 3874808, i32 9961438, i32 366607, i32 15675153, i32 9132554, i32 7151469, i32 3571407, i32 2607881, i32 12013382, i32 4155038, i32 6285869, i32 7677882, i32 13102053, i32 15825725, i32 473591, i32 9065106, i32 15363067, i32 6271263, i32 9264392, i32 5636912, i32 4652155, i32 7056368, i32 13614112, i32 10155062, i32 1944035, i32 9527646, i32 15080200, i32 6658437, i32 6231200, i32 6832269, i32 16767104, i32 5075751, i32 3212806, i32 1398474, i32 7579849, i32 6349435, i32 12618859], align 4
@init_jk = internal constant [3 x i32] [i32 4, i32 7, i32 9], align 4
@PIo2 = internal constant [11 x float] [float 0x3FF9200000000000, float 0x3F3E000000000000, float 0x3EFB400000000000, float 0x3E74400000000000, float 0x3DD0800000000000, float 0x3D6A000000000000, float 0x3CF8400000000000, float 0x3C5A000000000000, float 0x3BF8800000000000, float 0x3B78C00000000000, float 0x3AE8800000000000], align 4
@T = internal constant [13 x float] [float 0x3FD5555560000000, float 0x3FC1111120000000, float 0x3FABA1BA20000000, float 0x3F9664F480000000, float 0x3F8226E3E0000000, float 0x3F6D6D22C0000000, float 0x3F57DBC900000000, float 0x3F4344D900000000, float 0x3F3026F720000000, float 0x3F147E88A0000000, float 0x3F12B80F40000000, float 0xBEF375CBE0000000, float 0x3EFB2A7080000000], align 4
@init_jk97 = internal constant [4 x i32] [i32 2, i32 3, i32 4, i32 6], align 4
@PIo298 = internal constant [8 x double] [double 0x3FF921FB40000000, double 0x3E74442D00000000, double 0x3CF8469880000000, double 0x3B78CC5160000000, double 0x39F01B8380000000, double 0x387A252040000000, double 0x36E3822280000000, double 0x3569F31D00000000], align 8
@T103 = internal constant [13 x double] [double 0x3FD5555555555563, double 0x3FC111111110FE7A, double 0x3FABA1BA1BB341FE, double 0x3F9664F48406D637, double 0x3F8226E3E96E8493, double 0x3F6D6D22C9560328, double 0x3F57DBC8FEE08315, double 0x3F4344D8F2F26501, double 0x3F3026F71A8D1068, double 0x3F147E88A03792A6, double 0x3F12B80F32F0A7E9, double 0xBEF375CBDB605373, double 0x3EFB2A7074BF7AD4], align 8
@atanhi = internal constant [4 x double] [double 0x3FDDAC670561BB4F, double 0x3FE921FB54442D18, double 0x3FEF730BD281F69B, double 0x3FF921FB54442D18], align 8
@atanlo = internal constant [4 x double] [double 0x3C7A2B7F222F65E2, double 0x3C81A62633145C07, double 0x3C7007887AF0CBBD, double 0x3C91A62633145C07], align 8
@aT = internal constant [11 x double] [double 0x3FD555555555550D, double 0xBFC999999998EBC4, double 0x3FC24924920083FF, double 0xBFBC71C6FE231671, double 0x3FB745CDC54C206E, double 0xBFB3B0F2AF749A6D, double 0x3FB10D66A0D03D51, double 0xBFADDE2D52DEFD9A, double 0x3FA97B4B24760DEB, double 0xBFA2B4442C6A6C2F, double 0x3F90AD3AE322DA11], align 8
@atanhi112 = internal constant [4 x float] [float 0x3FDDAC6700000000, float 0x3FE921FB40000000, float 0x3FEF730BC0000000, float 0x3FF921FB40000000], align 4
@atanlo113 = internal constant [4 x float] [float 0x3E3586ED20000000, float 0x3E64442D00000000, float 0x3E6281F680000000, float 0x3E74442D00000000], align 4
@aT114 = internal constant [11 x float] [float 0x3FD5555560000000, float 0xBFC99999A0000000, float 0x3FC24924A0000000, float 0xBFBC71C700000000, float 0x3FB745CDC0000000, float 0xBFB3B0F2A0000000, float 0x3FB10D66A0000000, float 0xBFADDE2D60000000, float 0x3FA97B4B20000000, float 0xBFA2B44420000000, float 0x3F90AD3AE0000000], align 4
@TWO23 = internal constant [2 x float] [float 8.388608e+06, float -8.388608e+06], align 4
@TWO52 = internal constant [2 x double] [double 0x4330000000000000, double 0xC330000000000000], align 8

declare void @__legup_label(i8*) #0

; Function Attrs: nounwind
define i32 @main() #1 {
if.end.i:
  store i32 1732584193, i32* @sha_info_digest.0, align 4, !tbaa !1
  store i32 -271733879, i32* @sha_info_digest.1, align 4, !tbaa !1
  store i32 -1732584194, i32* @sha_info_digest.2, align 4, !tbaa !1
  store i32 271733878, i32* @sha_info_digest.3, align 4, !tbaa !1
  store i32 -1009589776, i32* @sha_info_digest.4, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0)) #4
  br label %while.body.i.preheader.i

while.body.i.preheader.i:                         ; preds = %memcpy.exit.i, %if.end.i
  %count.addr.035.i = phi i32 [ 8192, %if.end.i ], [ %sub.i, %memcpy.exit.i ]
  %buffer.addr.034.i = phi i8* [ getelementptr inbounds ([2 x [8192 x i8]]* @indata, i32 0, i32 0, i32 0), %if.end.i ], [ %add.ptr.i, %memcpy.exit.i ]
  br label %while.body.i.i

while.body.i.i:                                   ; preds = %while.body.i.i, %while.body.i.preheader.i
  %m.028.i.i = phi i32 [ %dec.i.i, %while.body.i.i ], [ 16, %while.body.i.preheader.i ]
  %p1.027.i.i = phi i32* [ %incdec.ptr16.i.i, %while.body.i.i ], [ getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), %while.body.i.preheader.i ]
  %p2.026.i.i = phi i8* [ %incdec.ptr11.i.i, %while.body.i.i ], [ %buffer.addr.034.i, %while.body.i.preheader.i ]
  %dec.i.i = add nsw i32 %m.028.i.i, -1
  %incdec.ptr.i.i = getelementptr inbounds i8* %p2.026.i.i, i32 1
  %0 = load i8* %p2.026.i.i, align 1, !tbaa !5
  %conv.i.i = zext i8 %0 to i32
  %incdec.ptr2.i.i = getelementptr inbounds i8* %p2.026.i.i, i32 2
  %1 = load i8* %incdec.ptr.i.i, align 1, !tbaa !5
  %conv3.i.i = zext i8 %1 to i32
  %shl.i.i = shl nuw nsw i32 %conv3.i.i, 8
  %or5.i.i = or i32 %shl.i.i, %conv.i.i
  %incdec.ptr6.i.i = getelementptr inbounds i8* %p2.026.i.i, i32 3
  %2 = load i8* %incdec.ptr2.i.i, align 1, !tbaa !5
  %conv7.i.i = zext i8 %2 to i32
  %shl9.i.i = shl nuw nsw i32 %conv7.i.i, 16
  %or10.i.i = or i32 %or5.i.i, %shl9.i.i
  %incdec.ptr11.i.i = getelementptr inbounds i8* %p2.026.i.i, i32 4
  %3 = load i8* %incdec.ptr6.i.i, align 1, !tbaa !5
  %conv12.i.i = zext i8 %3 to i32
  %shl14.i.i = shl nuw i32 %conv12.i.i, 24
  %or15.i.i = or i32 %or10.i.i, %shl14.i.i
  store i32 %or15.i.i, i32* %p1.027.i.i, align 4, !tbaa !1
  %incdec.ptr16.i.i = getelementptr inbounds i32* %p1.027.i.i, i32 1
  %cmp.i.i = icmp sgt i32 %dec.i.i, 0
  br i1 %cmp.i.i, label %while.body.i.i, label %memcpy.exit.i

memcpy.exit.i:                                    ; preds = %while.body.i.i
  tail call fastcc void @sha_transform() #4
  %add.ptr.i = getelementptr inbounds i8* %buffer.addr.034.i, i32 64
  %sub.i = add nsw i32 %count.addr.035.i, -64
  %cmp4.i = icmp sgt i32 %sub.i, 63
  br i1 %cmp4.i, label %while.body.i.preheader.i, label %if.end.i6

if.end.i6:                                        ; preds = %memcpy.exit.i
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str, i32 0, i32 0)) #4
  br label %while.body.i.preheader.i9

while.body.i.preheader.i9:                        ; preds = %memcpy.exit.i34, %if.end.i6
  %count.addr.035.i7 = phi i32 [ 8192, %if.end.i6 ], [ %sub.i32, %memcpy.exit.i34 ]
  %buffer.addr.034.i8 = phi i8* [ getelementptr inbounds ([2 x [8192 x i8]]* @indata, i32 0, i32 1, i32 0), %if.end.i6 ], [ %add.ptr.i31, %memcpy.exit.i34 ]
  br label %while.body.i.i30

while.body.i.i30:                                 ; preds = %while.body.i.i30, %while.body.i.preheader.i9
  %m.028.i.i10 = phi i32 [ %dec.i.i13, %while.body.i.i30 ], [ 16, %while.body.i.preheader.i9 ]
  %p1.027.i.i11 = phi i32* [ %incdec.ptr16.i.i28, %while.body.i.i30 ], [ getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), %while.body.i.preheader.i9 ]
  %p2.026.i.i12 = phi i8* [ %incdec.ptr11.i.i24, %while.body.i.i30 ], [ %buffer.addr.034.i8, %while.body.i.preheader.i9 ]
  %dec.i.i13 = add nsw i32 %m.028.i.i10, -1
  %incdec.ptr.i.i14 = getelementptr inbounds i8* %p2.026.i.i12, i32 1
  %4 = load i8* %p2.026.i.i12, align 1, !tbaa !5
  %conv.i.i15 = zext i8 %4 to i32
  %incdec.ptr2.i.i16 = getelementptr inbounds i8* %p2.026.i.i12, i32 2
  %5 = load i8* %incdec.ptr.i.i14, align 1, !tbaa !5
  %conv3.i.i17 = zext i8 %5 to i32
  %shl.i.i18 = shl nuw nsw i32 %conv3.i.i17, 8
  %or5.i.i19 = or i32 %shl.i.i18, %conv.i.i15
  %incdec.ptr6.i.i20 = getelementptr inbounds i8* %p2.026.i.i12, i32 3
  %6 = load i8* %incdec.ptr2.i.i16, align 1, !tbaa !5
  %conv7.i.i21 = zext i8 %6 to i32
  %shl9.i.i22 = shl nuw nsw i32 %conv7.i.i21, 16
  %or10.i.i23 = or i32 %or5.i.i19, %shl9.i.i22
  %incdec.ptr11.i.i24 = getelementptr inbounds i8* %p2.026.i.i12, i32 4
  %7 = load i8* %incdec.ptr6.i.i20, align 1, !tbaa !5
  %conv12.i.i25 = zext i8 %7 to i32
  %shl14.i.i26 = shl nuw i32 %conv12.i.i25, 24
  %or15.i.i27 = or i32 %or10.i.i23, %shl14.i.i26
  store i32 %or15.i.i27, i32* %p1.027.i.i11, align 4, !tbaa !1
  %incdec.ptr16.i.i28 = getelementptr inbounds i32* %p1.027.i.i11, i32 1
  %cmp.i.i29 = icmp sgt i32 %dec.i.i13, 0
  br i1 %cmp.i.i29, label %while.body.i.i30, label %memcpy.exit.i34

memcpy.exit.i34:                                  ; preds = %while.body.i.i30
  tail call fastcc void @sha_transform() #4
  %add.ptr.i31 = getelementptr inbounds i8* %buffer.addr.034.i8, i32 64
  %sub.i32 = add nsw i32 %count.addr.035.i7, -64
  %cmp4.i33 = icmp sgt i32 %sub.i32, 63
  br i1 %cmp4.i33, label %while.body.i.preheader.i9, label %while.body4.i22.preheader.i

while.body4.i22.preheader.i:                      ; preds = %memcpy.exit.i34
  store i32 128, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1
  br label %while.body4.i22.i

while.body4.i22.i:                                ; preds = %while.body4.i22.i, %while.body4.i22.preheader.i
  %m.010.i17.i = phi i32 [ %dec2.i19.i, %while.body4.i22.i ], [ 13, %while.body4.i22.preheader.i ]
  %p.19.i18.i = phi i32* [ %incdec.ptr5.i20.i, %while.body4.i22.i ], [ getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), %while.body4.i22.preheader.i ]
  %dec2.i19.i = add nsw i32 %m.010.i17.i, -1
  %incdec.ptr5.i20.i = getelementptr inbounds i32* %p.19.i18.i, i32 1
  store i32 0, i32* %p.19.i18.i, align 4, !tbaa !1
  %cmp3.i21.i = icmp sgt i32 %dec2.i19.i, 0
  br i1 %cmp3.i21.i, label %while.body4.i22.i, label %sha_final.exit

sha_final.exit:                                   ; preds = %while.body4.i22.i
  store i32 0, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1
  store i32 131072, i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1
  tail call fastcc void @sha_transform() #4
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0)) #4
  %8 = load i32* @sha_info_digest.0, align 4, !tbaa !1
  %cmp2 = icmp eq i32 %8, 6969911
  %conv = zext i1 %cmp2 to i32
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0)) #4
  %9 = load i32* @sha_info_digest.1, align 4, !tbaa !1
  %cmp2.1 = icmp eq i32 %9, -1814260603
  %conv.1 = zext i1 %cmp2.1 to i32
  %add.1 = add nuw nsw i32 %conv.1, %conv
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0)) #4
  %10 = load i32* @sha_info_digest.2, align 4, !tbaa !1
  %cmp2.2 = icmp eq i32 %10, 742465810
  %conv.2 = zext i1 %cmp2.2 to i32
  %add.2 = add nuw nsw i32 %conv.2, %add.1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0)) #4
  %11 = load i32* @sha_info_digest.3, align 4, !tbaa !1
  %cmp2.3 = icmp eq i32 %11, 1677179459
  %conv.3 = zext i1 %cmp2.3 to i32
  %add.3 = add nuw nsw i32 %conv.3, %add.2
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str1, i32 0, i32 0)) #4
  %12 = load i32* @sha_info_digest.4, align 4, !tbaa !1
  %cmp2.4 = icmp eq i32 %12, -1384908510
  %conv.4 = zext i1 %cmp2.4 to i32
  %add.4 = add nuw nsw i32 %conv.4, %add.3
  %call = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str2, i32 0, i32 0), i32 %add.4) #4
  %cmp3 = icmp eq i32 %add.4, 5
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %sha_final.exit
  %call5 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str3, i32 0, i32 0)) #4
  br label %if.end

if.else:                                          ; preds = %sha_final.exit
  %call6 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str4, i32 0, i32 0)) #4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret i32 %add.4
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) #1

; Function Attrs: nounwind
define internal fastcc void @sha_transform() #1 {
entry:
  %W = alloca [80 x i32], align 4
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %0 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 0), align 4, !tbaa !1
  %arrayidx1 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 0
  store i32 %0, i32* %arrayidx1, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %1 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 1), align 4, !tbaa !1
  %arrayidx1.1 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 1
  store i32 %1, i32* %arrayidx1.1, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %2 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 2), align 4, !tbaa !1
  %arrayidx1.2 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 2
  store i32 %2, i32* %arrayidx1.2, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %3 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 3), align 4, !tbaa !1
  %arrayidx1.3 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 3
  store i32 %3, i32* %arrayidx1.3, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %4 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 4), align 4, !tbaa !1
  %arrayidx1.4 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 4
  store i32 %4, i32* %arrayidx1.4, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %5 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 5), align 4, !tbaa !1
  %arrayidx1.5 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 5
  store i32 %5, i32* %arrayidx1.5, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %6 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 6), align 4, !tbaa !1
  %arrayidx1.6 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 6
  store i32 %6, i32* %arrayidx1.6, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %7 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 7), align 4, !tbaa !1
  %arrayidx1.7 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 7
  store i32 %7, i32* %arrayidx1.7, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %8 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 8), align 4, !tbaa !1
  %arrayidx1.8 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 8
  store i32 %8, i32* %arrayidx1.8, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %9 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 9), align 4, !tbaa !1
  %arrayidx1.9 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 9
  store i32 %9, i32* %arrayidx1.9, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %10 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 10), align 4, !tbaa !1
  %arrayidx1.10 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 10
  store i32 %10, i32* %arrayidx1.10, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %11 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 11), align 4, !tbaa !1
  %arrayidx1.11 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 11
  store i32 %11, i32* %arrayidx1.11, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %12 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 12), align 4, !tbaa !1
  %arrayidx1.12 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 12
  store i32 %12, i32* %arrayidx1.12, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %13 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 13), align 4, !tbaa !1
  %arrayidx1.13 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 13
  store i32 %13, i32* %arrayidx1.13, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %14 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 14), align 4, !tbaa !1
  %arrayidx1.14 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 14
  store i32 %14, i32* %arrayidx1.14, align 4, !tbaa !1
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str5, i32 0, i32 0)) #4
  %15 = load i32* getelementptr inbounds ([16 x i32]* @sha_info_data, i32 0, i32 15), align 4, !tbaa !1
  %arrayidx1.15 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 15
  store i32 %15, i32* %arrayidx1.15, align 4, !tbaa !1
  br label %for.body4

for.body4:                                        ; preds = %for.body4.for.body4_crit_edge, %entry
  %i.1196 = phi i32 [ 16, %entry ], [ %inc16, %for.body4.for.body4_crit_edge ]
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str6, i32 0, i32 0)) #4
  %sub = add nsw i32 %i.1196, -3
  %arrayidx5 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 %sub
  %16 = load i32* %arrayidx5, align 4, !tbaa !1
  %sub6 = add nsw i32 %i.1196, -8
  %arrayidx7 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 %sub6
  %17 = load i32* %arrayidx7, align 4, !tbaa !1
  %xor = xor i32 %17, %16
  %sub8 = add nsw i32 %i.1196, -14
  %arrayidx9 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 %sub8
  %18 = load i32* %arrayidx9, align 4, !tbaa !1
  %xor10 = xor i32 %xor, %18
  %sub11 = add nsw i32 %i.1196, -16
  %arrayidx12 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 %sub11
  %19 = load i32* %arrayidx12, align 4, !tbaa !1
  %xor13 = xor i32 %xor10, %19
  %arrayidx14 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 %i.1196
  store i32 %xor13, i32* %arrayidx14, align 4, !tbaa !1
  %exitcond201 = icmp eq i32 %i.1196, 79
  br i1 %exitcond201, label %for.end17, label %for.body4.for.body4_crit_edge

for.body4.for.body4_crit_edge:                    ; preds = %for.body4
  %inc16 = add nsw i32 %i.1196, 1
  br label %for.body4

for.end17:                                        ; preds = %for.body4
  %20 = bitcast [80 x i32]* %W to i8*
  %21 = load i32* @sha_info_digest.0, align 4, !tbaa !1
  %22 = load i32* @sha_info_digest.1, align 4, !tbaa !1
  %23 = load i32* @sha_info_digest.2, align 4, !tbaa !1
  %24 = load i32* @sha_info_digest.3, align 4, !tbaa !1
  %25 = load i32* @sha_info_digest.4, align 4, !tbaa !1
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.end17
  %E.0195 = phi i32 [ %25, %for.end17 ], [ %D.0194, %for.body20 ]
  %D.0194 = phi i32 [ %24, %for.end17 ], [ %C.0193, %for.body20 ]
  %C.0193 = phi i32 [ %23, %for.end17 ], [ %or29, %for.body20 ]
  %B.0192 = phi i32 [ %22, %for.end17 ], [ %A.0191, %for.body20 ]
  %A.0191 = phi i32 [ %21, %for.end17 ], [ %add26, %for.body20 ]
  %i.2190 = phi i32 [ 0, %for.end17 ], [ %inc31, %for.body20 ]
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str7, i32 0, i32 0)) #4
  %shl = shl i32 %A.0191, 5
  %shr = lshr i32 %A.0191, 27
  %or = or i32 %shl, %shr
  %and = and i32 %C.0193, %B.0192
  %neg = xor i32 %B.0192, -1
  %and21 = and i32 %D.0194, %neg
  %or22 = or i32 %and21, %and
  %arrayidx24 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 %i.2190
  %26 = load i32* %arrayidx24, align 4, !tbaa !1
  %add = add i32 %or, 1518500249
  %add23 = add i32 %add, %E.0195
  %add25 = add i32 %add23, %or22
  %add26 = add i32 %add25, %26
  %shl27 = shl i32 %B.0192, 30
  %shr28 = lshr i32 %B.0192, 2
  %or29 = or i32 %shl27, %shr28
  %inc31 = add nsw i32 %i.2190, 1
  %exitcond200 = icmp eq i32 %i.2190, 19
  br i1 %exitcond200, label %for.body35, label %for.body20

for.body35:                                       ; preds = %for.body35, %for.body20
  %E.1189 = phi i32 [ %D.1188, %for.body35 ], [ %D.0194, %for.body20 ]
  %D.1188 = phi i32 [ %C.1187, %for.body35 ], [ %C.0193, %for.body20 ]
  %C.1187 = phi i32 [ %or48, %for.body35 ], [ %or29, %for.body20 ]
  %B.1186 = phi i32 [ %A.1185, %for.body35 ], [ %A.0191, %for.body20 ]
  %A.1185 = phi i32 [ %add45, %for.body35 ], [ %add26, %for.body20 ]
  %i.3184 = phi i32 [ %inc50, %for.body35 ], [ 20, %for.body20 ]
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str8, i32 0, i32 0)) #4
  %shl36 = shl i32 %A.1185, 5
  %shr37 = lshr i32 %A.1185, 27
  %or38 = or i32 %shl36, %shr37
  %xor39 = xor i32 %C.1187, %B.1186
  %xor40 = xor i32 %xor39, %D.1188
  %arrayidx43 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 %i.3184
  %27 = load i32* %arrayidx43, align 4, !tbaa !1
  %add41 = add i32 %or38, 1859775393
  %add42 = add i32 %add41, %xor40
  %add44 = add i32 %add42, %E.1189
  %add45 = add i32 %add44, %27
  %shl46 = shl i32 %B.1186, 30
  %shr47 = lshr i32 %B.1186, 2
  %or48 = or i32 %shl46, %shr47
  %inc50 = add nsw i32 %i.3184, 1
  %exitcond199 = icmp eq i32 %i.3184, 39
  br i1 %exitcond199, label %for.body54, label %for.body35

for.body54:                                       ; preds = %for.body54, %for.body35
  %E.2183 = phi i32 [ %D.2182, %for.body54 ], [ %D.1188, %for.body35 ]
  %D.2182 = phi i32 [ %C.2181, %for.body54 ], [ %C.1187, %for.body35 ]
  %C.2181 = phi i32 [ %or70, %for.body54 ], [ %or48, %for.body35 ]
  %B.2180 = phi i32 [ %A.2179, %for.body54 ], [ %A.1185, %for.body35 ]
  %A.2179 = phi i32 [ %add67, %for.body54 ], [ %add45, %for.body35 ]
  %i.4178 = phi i32 [ %inc72, %for.body54 ], [ 40, %for.body35 ]
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str9, i32 0, i32 0)) #4
  %shl55 = shl i32 %A.2179, 5
  %shr56 = lshr i32 %A.2179, 27
  %or57 = or i32 %shl55, %shr56
  %and59171 = or i32 %D.2182, %C.2181
  %or60 = and i32 %and59171, %B.2180
  %and61 = and i32 %D.2182, %C.2181
  %or62 = or i32 %or60, %and61
  %arrayidx65 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 %i.4178
  %28 = load i32* %arrayidx65, align 4, !tbaa !1
  %add63 = add i32 %or57, -1894007588
  %add64 = add i32 %add63, %E.2183
  %add66 = add i32 %add64, %or62
  %add67 = add i32 %add66, %28
  %shl68 = shl i32 %B.2180, 30
  %shr69 = lshr i32 %B.2180, 2
  %or70 = or i32 %shl68, %shr69
  %inc72 = add nsw i32 %i.4178, 1
  %exitcond198 = icmp eq i32 %i.4178, 59
  br i1 %exitcond198, label %for.body76, label %for.body54

for.body76:                                       ; preds = %for.body76, %for.body54
  %E.3177 = phi i32 [ %D.3176, %for.body76 ], [ %D.2182, %for.body54 ]
  %D.3176 = phi i32 [ %C.3175, %for.body76 ], [ %C.2181, %for.body54 ]
  %C.3175 = phi i32 [ %or89, %for.body76 ], [ %or70, %for.body54 ]
  %B.3174 = phi i32 [ %A.3173, %for.body76 ], [ %A.2179, %for.body54 ]
  %A.3173 = phi i32 [ %add86, %for.body76 ], [ %add67, %for.body54 ]
  %i.5172 = phi i32 [ %inc91, %for.body76 ], [ 60, %for.body54 ]
  tail call void @__legup_label(i8* getelementptr inbounds ([6 x i8]* @.str10, i32 0, i32 0)) #4
  %shl77 = shl i32 %A.3173, 5
  %shr78 = lshr i32 %A.3173, 27
  %or79 = or i32 %shl77, %shr78
  %xor80 = xor i32 %C.3175, %B.3174
  %xor81 = xor i32 %xor80, %D.3176
  %arrayidx84 = getelementptr inbounds [80 x i32]* %W, i32 0, i32 %i.5172
  %29 = load i32* %arrayidx84, align 4, !tbaa !1
  %add82 = add i32 %or79, -899497514
  %add83 = add i32 %add82, %xor81
  %add85 = add i32 %add83, %E.3177
  %add86 = add i32 %add85, %29
  %shl87 = shl i32 %B.3174, 30
  %shr88 = lshr i32 %B.3174, 2
  %or89 = or i32 %shl87, %shr88
  %inc91 = add nsw i32 %i.5172, 1
  %exitcond = icmp eq i32 %i.5172, 79
  br i1 %exitcond, label %for.end92, label %for.body76

for.end92:                                        ; preds = %for.body76
  %or89.lcssa = phi i32 [ %or89, %for.body76 ]
  %add86.lcssa = phi i32 [ %add86, %for.body76 ]
  %A.3173.lcssa = phi i32 [ %A.3173, %for.body76 ]
  %C.3175.lcssa = phi i32 [ %C.3175, %for.body76 ]
  %D.3176.lcssa = phi i32 [ %D.3176, %for.body76 ]
  %30 = load i32* @sha_info_digest.0, align 4, !tbaa !1
  %add93 = add i32 %30, %add86.lcssa
  store i32 %add93, i32* @sha_info_digest.0, align 4, !tbaa !1
  %31 = load i32* @sha_info_digest.1, align 4, !tbaa !1
  %add94 = add i32 %31, %A.3173.lcssa
  store i32 %add94, i32* @sha_info_digest.1, align 4, !tbaa !1
  %32 = load i32* @sha_info_digest.2, align 4, !tbaa !1
  %add95 = add i32 %32, %or89.lcssa
  store i32 %add95, i32* @sha_info_digest.2, align 4, !tbaa !1
  %33 = load i32* @sha_info_digest.3, align 4, !tbaa !1
  %add96 = add i32 %33, %C.3175.lcssa
  store i32 %add96, i32* @sha_info_digest.3, align 4, !tbaa !1
  %34 = load i32* @sha_info_digest.4, align 4, !tbaa !1
  %add97 = add i32 %34, %D.3176.lcssa
  store i32 %add97, i32* @sha_info_digest.4, align 4, !tbaa !1
  ret void
}

; Function Attrs: nounwind
define void @legup_memcpy_1(i8* %d, i8* %s, i32 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %dt = alloca i8*, align 4
  %st = alloca i8*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8** %d.addr, align 4
  store i8* %0, i8** %dt, align 4
  %1 = load i8** %s.addr, align 4
  store i8* %1, i8** %st, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32* %n.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8** %st, align 4
  %incdec.ptr = getelementptr inbounds i8* %3, i32 1
  store i8* %incdec.ptr, i8** %st, align 4
  %4 = load i8* %3, align 1
  %5 = load i8** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i8* %5, i32 1
  store i8* %incdec.ptr1, i8** %dt, align 4
  store i8 %4, i8* %5, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memcpy_1_i64(i8* %d, i8* %s, i64 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i64, align 8
  %dt = alloca i8*, align 4
  %st = alloca i8*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %d.addr, align 4
  store i8* %0, i8** %dt, align 4
  %1 = load i8** %s.addr, align 4
  store i8* %1, i8** %st, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64* %n.addr, align 8
  %dec = add i64 %2, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8** %st, align 4
  %incdec.ptr = getelementptr inbounds i8* %3, i32 1
  store i8* %incdec.ptr, i8** %st, align 4
  %4 = load i8* %3, align 1
  %5 = load i8** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i8* %5, i32 1
  store i8* %incdec.ptr1, i8** %dt, align 4
  store i8 %4, i8* %5, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memcpy_2(i8* %d, i8* %s, i32 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %dt = alloca i16*, align 4
  %st = alloca i16*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8** %d.addr, align 4
  %1 = bitcast i8* %0 to i16*
  store i16* %1, i16** %dt, align 4
  %2 = load i8** %s.addr, align 4
  %3 = bitcast i8* %2 to i16*
  store i16* %3, i16** %st, align 4
  %4 = load i32* %n.addr, align 4
  %shr = lshr i32 %4, 1
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i32* %n.addr, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i16** %st, align 4
  %incdec.ptr = getelementptr inbounds i16* %6, i32 1
  store i16* %incdec.ptr, i16** %st, align 4
  %7 = load i16* %6, align 2
  %8 = load i16** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i16* %8, i32 1
  store i16* %incdec.ptr1, i16** %dt, align 4
  store i16 %7, i16* %8, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memcpy_2_i64(i8* %d, i8* %s, i64 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i64, align 8
  %dt = alloca i16*, align 4
  %st = alloca i16*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %d.addr, align 4
  %1 = bitcast i8* %0 to i16*
  store i16* %1, i16** %dt, align 4
  %2 = load i8** %s.addr, align 4
  %3 = bitcast i8* %2 to i16*
  store i16* %3, i16** %st, align 4
  %4 = load i64* %n.addr, align 8
  %shr = lshr i64 %4, 1
  store i64 %shr, i64* %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i64* %n.addr, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i16** %st, align 4
  %incdec.ptr = getelementptr inbounds i16* %6, i32 1
  store i16* %incdec.ptr, i16** %st, align 4
  %7 = load i16* %6, align 2
  %8 = load i16** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i16* %8, i32 1
  store i16* %incdec.ptr1, i16** %dt, align 4
  store i16 %7, i16* %8, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memcpy_4(i8* %d, i8* %s, i32 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %dt = alloca i32*, align 4
  %st = alloca i32*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8** %d.addr, align 4
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %dt, align 4
  %2 = load i8** %s.addr, align 4
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %st, align 4
  %4 = load i32* %n.addr, align 4
  %shr = lshr i32 %4, 2
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i32* %n.addr, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32** %st, align 4
  %incdec.ptr = getelementptr inbounds i32* %6, i32 1
  store i32* %incdec.ptr, i32** %st, align 4
  %7 = load i32* %6, align 4
  %8 = load i32** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i32* %8, i32 1
  store i32* %incdec.ptr1, i32** %dt, align 4
  store i32 %7, i32* %8, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memcpy_4_i64(i8* %d, i8* %s, i64 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i64, align 8
  %dt = alloca i32*, align 4
  %st = alloca i32*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %d.addr, align 4
  %1 = bitcast i8* %0 to i32*
  store i32* %1, i32** %dt, align 4
  %2 = load i8** %s.addr, align 4
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %st, align 4
  %4 = load i64* %n.addr, align 8
  %shr = lshr i64 %4, 2
  store i64 %shr, i64* %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i64* %n.addr, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i32** %st, align 4
  %incdec.ptr = getelementptr inbounds i32* %6, i32 1
  store i32* %incdec.ptr, i32** %st, align 4
  %7 = load i32* %6, align 4
  %8 = load i32** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i32* %8, i32 1
  store i32* %incdec.ptr1, i32** %dt, align 4
  store i32 %7, i32* %8, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memcpy_8(i8* %d, i8* %s, i32 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %dt = alloca i64*, align 4
  %st = alloca i64*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8** %d.addr, align 4
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %dt, align 4
  %2 = load i8** %s.addr, align 4
  %3 = bitcast i8* %2 to i64*
  store i64* %3, i64** %st, align 4
  %4 = load i32* %n.addr, align 4
  %shr = lshr i32 %4, 3
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i32* %n.addr, align 4
  %dec = add i32 %5, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64** %st, align 4
  %incdec.ptr = getelementptr inbounds i64* %6, i32 1
  store i64* %incdec.ptr, i64** %st, align 4
  %7 = load i64* %6, align 4
  %8 = load i64** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i64* %8, i32 1
  store i64* %incdec.ptr1, i64** %dt, align 4
  store i64 %7, i64* %8, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memcpy_8_i64(i8* %d, i8* %s, i64 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i64, align 8
  %dt = alloca i64*, align 4
  %st = alloca i64*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %d.addr, align 4
  %1 = bitcast i8* %0 to i64*
  store i64* %1, i64** %dt, align 4
  %2 = load i8** %s.addr, align 4
  %3 = bitcast i8* %2 to i64*
  store i64* %3, i64** %st, align 4
  %4 = load i64* %n.addr, align 8
  %shr = lshr i64 %4, 3
  store i64 %shr, i64* %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %5 = load i64* %n.addr, align 8
  %dec = add i64 %5, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %5, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %6 = load i64** %st, align 4
  %incdec.ptr = getelementptr inbounds i64* %6, i32 1
  store i64* %incdec.ptr, i64** %st, align 4
  %7 = load i64* %6, align 4
  %8 = load i64** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i64* %8, i32 1
  store i64* %incdec.ptr1, i64** %dt, align 4
  store i64 %7, i64* %8, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memmove_1(i8* %d, i8* %s, i32 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %dt = alloca i8*, align 4
  %st = alloca i8*, align 4
  %dt4 = alloca i8*, align 4
  %st5 = alloca i8*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8** %d.addr, align 4
  %1 = load i8** %s.addr, align 4
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8** %d.addr, align 4
  store i8* %2, i8** %dt, align 4
  %3 = load i8** %s.addr, align 4
  store i8* %3, i8** %st, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load i32* %n.addr, align 4
  %dec = add i32 %4, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8** %st, align 4
  %incdec.ptr = getelementptr inbounds i8* %5, i32 1
  store i8* %incdec.ptr, i8** %st, align 4
  %6 = load i8* %5, align 1
  %7 = load i8** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i8* %7, i32 1
  store i8* %incdec.ptr1, i8** %dt, align 4
  store i8 %6, i8* %7, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end14

if.else:                                          ; preds = %entry
  %8 = load i8** %d.addr, align 4
  %9 = load i8** %s.addr, align 4
  %cmp2 = icmp ugt i8* %8, %9
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %10 = load i8** %d.addr, align 4
  %11 = load i32* %n.addr, align 4
  %add.ptr = getelementptr inbounds i8* %10, i32 %11
  store i8* %add.ptr, i8** %dt4, align 4
  %12 = load i8** %s.addr, align 4
  %13 = load i32* %n.addr, align 4
  %add.ptr6 = getelementptr inbounds i8* %12, i32 %13
  store i8* %add.ptr6, i8** %st5, align 4
  br label %while.cond7

while.cond7:                                      ; preds = %while.body10, %if.then3
  %14 = load i32* %n.addr, align 4
  %dec8 = add i32 %14, -1
  store i32 %dec8, i32* %n.addr, align 4
  %tobool9 = icmp ne i32 %14, 0
  br i1 %tobool9, label %while.body10, label %while.end13

while.body10:                                     ; preds = %while.cond7
  %15 = load i8** %st5, align 4
  %incdec.ptr11 = getelementptr inbounds i8* %15, i32 -1
  store i8* %incdec.ptr11, i8** %st5, align 4
  %16 = load i8* %incdec.ptr11, align 1
  %17 = load i8** %dt4, align 4
  %incdec.ptr12 = getelementptr inbounds i8* %17, i32 -1
  store i8* %incdec.ptr12, i8** %dt4, align 4
  store i8 %16, i8* %incdec.ptr12, align 1
  br label %while.cond7

while.end13:                                      ; preds = %while.cond7
  br label %if.end

if.end:                                           ; preds = %while.end13, %if.else
  br label %if.end14

if.end14:                                         ; preds = %if.end, %while.end
  ret void
}

; Function Attrs: nounwind
define void @legup_memmove_1_i64(i8* %d, i8* %s, i64 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i64, align 8
  %dt = alloca i8*, align 4
  %st = alloca i8*, align 4
  %dt4 = alloca i8*, align 4
  %st5 = alloca i8*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %d.addr, align 4
  %1 = load i8** %s.addr, align 4
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8** %d.addr, align 4
  store i8* %2, i8** %dt, align 4
  %3 = load i8** %s.addr, align 4
  store i8* %3, i8** %st, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %4 = load i64* %n.addr, align 8
  %dec = add i64 %4, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %4, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %5 = load i8** %st, align 4
  %incdec.ptr = getelementptr inbounds i8* %5, i32 1
  store i8* %incdec.ptr, i8** %st, align 4
  %6 = load i8* %5, align 1
  %7 = load i8** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i8* %7, i32 1
  store i8* %incdec.ptr1, i8** %dt, align 4
  store i8 %6, i8* %7, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end15

if.else:                                          ; preds = %entry
  %8 = load i8** %d.addr, align 4
  %9 = load i8** %s.addr, align 4
  %cmp2 = icmp ugt i8* %8, %9
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %10 = load i8** %d.addr, align 4
  %11 = load i64* %n.addr, align 8
  %idx.ext = trunc i64 %11 to i32
  %add.ptr = getelementptr inbounds i8* %10, i32 %idx.ext
  store i8* %add.ptr, i8** %dt4, align 4
  %12 = load i8** %s.addr, align 4
  %13 = load i64* %n.addr, align 8
  %idx.ext6 = trunc i64 %13 to i32
  %add.ptr7 = getelementptr inbounds i8* %12, i32 %idx.ext6
  store i8* %add.ptr7, i8** %st5, align 4
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.then3
  %14 = load i64* %n.addr, align 8
  %dec9 = add i64 %14, -1
  store i64 %dec9, i64* %n.addr, align 8
  %tobool10 = icmp ne i64 %14, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %15 = load i8** %st5, align 4
  %incdec.ptr12 = getelementptr inbounds i8* %15, i32 -1
  store i8* %incdec.ptr12, i8** %st5, align 4
  %16 = load i8* %incdec.ptr12, align 1
  %17 = load i8** %dt4, align 4
  %incdec.ptr13 = getelementptr inbounds i8* %17, i32 -1
  store i8* %incdec.ptr13, i8** %dt4, align 4
  store i8 %16, i8* %incdec.ptr13, align 1
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  br label %if.end

if.end:                                           ; preds = %while.end14, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %while.end
  ret void
}

; Function Attrs: nounwind
define void @legup_memmove_2(i8* %d, i8* %s, i32 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %dt = alloca i16*, align 4
  %st = alloca i16*, align 4
  %dt5 = alloca i16*, align 4
  %st6 = alloca i16*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8** %d.addr, align 4
  %1 = load i8** %s.addr, align 4
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8** %d.addr, align 4
  %3 = bitcast i8* %2 to i16*
  store i16* %3, i16** %dt, align 4
  %4 = load i8** %s.addr, align 4
  %5 = bitcast i8* %4 to i16*
  store i16* %5, i16** %st, align 4
  %6 = load i32* %n.addr, align 4
  %shr = lshr i32 %6, 1
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i32* %n.addr, align 4
  %dec = add i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i16** %st, align 4
  %incdec.ptr = getelementptr inbounds i16* %8, i32 1
  store i16* %incdec.ptr, i16** %st, align 4
  %9 = load i16* %8, align 2
  %10 = load i16** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i16* %10, i32 1
  store i16* %incdec.ptr1, i16** %dt, align 4
  store i16 %9, i16* %10, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end15

if.else:                                          ; preds = %entry
  %11 = load i8** %d.addr, align 4
  %12 = load i8** %s.addr, align 4
  %cmp2 = icmp ugt i8* %11, %12
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %13 = load i32* %n.addr, align 4
  %shr4 = lshr i32 %13, 1
  store i32 %shr4, i32* %n.addr, align 4
  %14 = load i8** %d.addr, align 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i32* %n.addr, align 4
  %add.ptr = getelementptr inbounds i16* %15, i32 %16
  store i16* %add.ptr, i16** %dt5, align 4
  %17 = load i8** %s.addr, align 4
  %18 = bitcast i8* %17 to i16*
  %19 = load i32* %n.addr, align 4
  %add.ptr7 = getelementptr inbounds i16* %18, i32 %19
  store i16* %add.ptr7, i16** %st6, align 4
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.then3
  %20 = load i32* %n.addr, align 4
  %dec9 = add i32 %20, -1
  store i32 %dec9, i32* %n.addr, align 4
  %tobool10 = icmp ne i32 %20, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %21 = load i16** %st6, align 4
  %incdec.ptr12 = getelementptr inbounds i16* %21, i32 -1
  store i16* %incdec.ptr12, i16** %st6, align 4
  %22 = load i16* %incdec.ptr12, align 2
  %23 = load i16** %dt5, align 4
  %incdec.ptr13 = getelementptr inbounds i16* %23, i32 -1
  store i16* %incdec.ptr13, i16** %dt5, align 4
  store i16 %22, i16* %incdec.ptr13, align 2
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  br label %if.end

if.end:                                           ; preds = %while.end14, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %while.end
  ret void
}

; Function Attrs: nounwind
define void @legup_memmove_2_i64(i8* %d, i8* %s, i64 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i64, align 8
  %dt = alloca i16*, align 4
  %st = alloca i16*, align 4
  %dt5 = alloca i16*, align 4
  %st6 = alloca i16*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %d.addr, align 4
  %1 = load i8** %s.addr, align 4
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8** %d.addr, align 4
  %3 = bitcast i8* %2 to i16*
  store i16* %3, i16** %dt, align 4
  %4 = load i8** %s.addr, align 4
  %5 = bitcast i8* %4 to i16*
  store i16* %5, i16** %st, align 4
  %6 = load i64* %n.addr, align 8
  %shr = lshr i64 %6, 1
  store i64 %shr, i64* %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %n.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i16** %st, align 4
  %incdec.ptr = getelementptr inbounds i16* %8, i32 1
  store i16* %incdec.ptr, i16** %st, align 4
  %9 = load i16* %8, align 2
  %10 = load i16** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i16* %10, i32 1
  store i16* %incdec.ptr1, i16** %dt, align 4
  store i16 %9, i16* %10, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end16

if.else:                                          ; preds = %entry
  %11 = load i8** %d.addr, align 4
  %12 = load i8** %s.addr, align 4
  %cmp2 = icmp ugt i8* %11, %12
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %13 = load i64* %n.addr, align 8
  %shr4 = lshr i64 %13, 1
  store i64 %shr4, i64* %n.addr, align 8
  %14 = load i8** %d.addr, align 4
  %15 = bitcast i8* %14 to i16*
  %16 = load i64* %n.addr, align 8
  %idx.ext = trunc i64 %16 to i32
  %add.ptr = getelementptr inbounds i16* %15, i32 %idx.ext
  store i16* %add.ptr, i16** %dt5, align 4
  %17 = load i8** %s.addr, align 4
  %18 = bitcast i8* %17 to i16*
  %19 = load i64* %n.addr, align 8
  %idx.ext7 = trunc i64 %19 to i32
  %add.ptr8 = getelementptr inbounds i16* %18, i32 %idx.ext7
  store i16* %add.ptr8, i16** %st6, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %if.then3
  %20 = load i64* %n.addr, align 8
  %dec10 = add i64 %20, -1
  store i64 %dec10, i64* %n.addr, align 8
  %tobool11 = icmp ne i64 %20, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %21 = load i16** %st6, align 4
  %incdec.ptr13 = getelementptr inbounds i16* %21, i32 -1
  store i16* %incdec.ptr13, i16** %st6, align 4
  %22 = load i16* %incdec.ptr13, align 2
  %23 = load i16** %dt5, align 4
  %incdec.ptr14 = getelementptr inbounds i16* %23, i32 -1
  store i16* %incdec.ptr14, i16** %dt5, align 4
  store i16 %22, i16* %incdec.ptr14, align 2
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  br label %if.end

if.end:                                           ; preds = %while.end15, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end, %while.end
  ret void
}

; Function Attrs: nounwind
define void @legup_memmove_4(i8* %d, i8* %s, i32 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %dt = alloca i32*, align 4
  %st = alloca i32*, align 4
  %dt5 = alloca i32*, align 4
  %st6 = alloca i32*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8** %d.addr, align 4
  %1 = load i8** %s.addr, align 4
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8** %d.addr, align 4
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %dt, align 4
  %4 = load i8** %s.addr, align 4
  %5 = bitcast i8* %4 to i32*
  store i32* %5, i32** %st, align 4
  %6 = load i32* %n.addr, align 4
  %shr = lshr i32 %6, 2
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i32* %n.addr, align 4
  %dec = add i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32** %st, align 4
  %incdec.ptr = getelementptr inbounds i32* %8, i32 1
  store i32* %incdec.ptr, i32** %st, align 4
  %9 = load i32* %8, align 4
  %10 = load i32** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i32* %10, i32 1
  store i32* %incdec.ptr1, i32** %dt, align 4
  store i32 %9, i32* %10, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end15

if.else:                                          ; preds = %entry
  %11 = load i8** %d.addr, align 4
  %12 = load i8** %s.addr, align 4
  %cmp2 = icmp ugt i8* %11, %12
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %13 = load i32* %n.addr, align 4
  %shr4 = lshr i32 %13, 2
  store i32 %shr4, i32* %n.addr, align 4
  %14 = load i8** %d.addr, align 4
  %15 = bitcast i8* %14 to i32*
  %16 = load i32* %n.addr, align 4
  %add.ptr = getelementptr inbounds i32* %15, i32 %16
  store i32* %add.ptr, i32** %dt5, align 4
  %17 = load i8** %s.addr, align 4
  %18 = bitcast i8* %17 to i32*
  %19 = load i32* %n.addr, align 4
  %add.ptr7 = getelementptr inbounds i32* %18, i32 %19
  store i32* %add.ptr7, i32** %st6, align 4
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.then3
  %20 = load i32* %n.addr, align 4
  %dec9 = add i32 %20, -1
  store i32 %dec9, i32* %n.addr, align 4
  %tobool10 = icmp ne i32 %20, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %21 = load i32** %st6, align 4
  %incdec.ptr12 = getelementptr inbounds i32* %21, i32 -1
  store i32* %incdec.ptr12, i32** %st6, align 4
  %22 = load i32* %incdec.ptr12, align 4
  %23 = load i32** %dt5, align 4
  %incdec.ptr13 = getelementptr inbounds i32* %23, i32 -1
  store i32* %incdec.ptr13, i32** %dt5, align 4
  store i32 %22, i32* %incdec.ptr13, align 4
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  br label %if.end

if.end:                                           ; preds = %while.end14, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %while.end
  ret void
}

; Function Attrs: nounwind
define void @legup_memmove_4_i64(i8* %d, i8* %s, i64 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i64, align 8
  %dt = alloca i32*, align 4
  %st = alloca i32*, align 4
  %dt5 = alloca i32*, align 4
  %st6 = alloca i32*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %d.addr, align 4
  %1 = load i8** %s.addr, align 4
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8** %d.addr, align 4
  %3 = bitcast i8* %2 to i32*
  store i32* %3, i32** %dt, align 4
  %4 = load i8** %s.addr, align 4
  %5 = bitcast i8* %4 to i32*
  store i32* %5, i32** %st, align 4
  %6 = load i64* %n.addr, align 8
  %shr = lshr i64 %6, 2
  store i64 %shr, i64* %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %n.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i32** %st, align 4
  %incdec.ptr = getelementptr inbounds i32* %8, i32 1
  store i32* %incdec.ptr, i32** %st, align 4
  %9 = load i32* %8, align 4
  %10 = load i32** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i32* %10, i32 1
  store i32* %incdec.ptr1, i32** %dt, align 4
  store i32 %9, i32* %10, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end16

if.else:                                          ; preds = %entry
  %11 = load i8** %d.addr, align 4
  %12 = load i8** %s.addr, align 4
  %cmp2 = icmp ugt i8* %11, %12
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %13 = load i64* %n.addr, align 8
  %shr4 = lshr i64 %13, 2
  store i64 %shr4, i64* %n.addr, align 8
  %14 = load i8** %d.addr, align 4
  %15 = bitcast i8* %14 to i32*
  %16 = load i64* %n.addr, align 8
  %idx.ext = trunc i64 %16 to i32
  %add.ptr = getelementptr inbounds i32* %15, i32 %idx.ext
  store i32* %add.ptr, i32** %dt5, align 4
  %17 = load i8** %s.addr, align 4
  %18 = bitcast i8* %17 to i32*
  %19 = load i64* %n.addr, align 8
  %idx.ext7 = trunc i64 %19 to i32
  %add.ptr8 = getelementptr inbounds i32* %18, i32 %idx.ext7
  store i32* %add.ptr8, i32** %st6, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %if.then3
  %20 = load i64* %n.addr, align 8
  %dec10 = add i64 %20, -1
  store i64 %dec10, i64* %n.addr, align 8
  %tobool11 = icmp ne i64 %20, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %21 = load i32** %st6, align 4
  %incdec.ptr13 = getelementptr inbounds i32* %21, i32 -1
  store i32* %incdec.ptr13, i32** %st6, align 4
  %22 = load i32* %incdec.ptr13, align 4
  %23 = load i32** %dt5, align 4
  %incdec.ptr14 = getelementptr inbounds i32* %23, i32 -1
  store i32* %incdec.ptr14, i32** %dt5, align 4
  store i32 %22, i32* %incdec.ptr14, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  br label %if.end

if.end:                                           ; preds = %while.end15, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end, %while.end
  ret void
}

; Function Attrs: nounwind
define void @legup_memmove_8(i8* %d, i8* %s, i32 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i32, align 4
  %dt = alloca i64*, align 4
  %st = alloca i64*, align 4
  %dt5 = alloca i64*, align 4
  %st6 = alloca i64*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8** %d.addr, align 4
  %1 = load i8** %s.addr, align 4
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8** %d.addr, align 4
  %3 = bitcast i8* %2 to i64*
  store i64* %3, i64** %dt, align 4
  %4 = load i8** %s.addr, align 4
  %5 = bitcast i8* %4 to i64*
  store i64* %5, i64** %st, align 4
  %6 = load i32* %n.addr, align 4
  %shr = lshr i32 %6, 3
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i32* %n.addr, align 4
  %dec = add i32 %7, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %7, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i64** %st, align 4
  %incdec.ptr = getelementptr inbounds i64* %8, i32 1
  store i64* %incdec.ptr, i64** %st, align 4
  %9 = load i64* %8, align 4
  %10 = load i64** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i64* %10, i32 1
  store i64* %incdec.ptr1, i64** %dt, align 4
  store i64 %9, i64* %10, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end15

if.else:                                          ; preds = %entry
  %11 = load i8** %d.addr, align 4
  %12 = load i8** %s.addr, align 4
  %cmp2 = icmp ugt i8* %11, %12
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %13 = load i32* %n.addr, align 4
  %shr4 = lshr i32 %13, 3
  store i32 %shr4, i32* %n.addr, align 4
  %14 = load i8** %d.addr, align 4
  %15 = bitcast i8* %14 to i64*
  %16 = load i32* %n.addr, align 4
  %add.ptr = getelementptr inbounds i64* %15, i32 %16
  store i64* %add.ptr, i64** %dt5, align 4
  %17 = load i8** %s.addr, align 4
  %18 = bitcast i8* %17 to i64*
  %19 = load i32* %n.addr, align 4
  %add.ptr7 = getelementptr inbounds i64* %18, i32 %19
  store i64* %add.ptr7, i64** %st6, align 4
  br label %while.cond8

while.cond8:                                      ; preds = %while.body11, %if.then3
  %20 = load i32* %n.addr, align 4
  %dec9 = add i32 %20, -1
  store i32 %dec9, i32* %n.addr, align 4
  %tobool10 = icmp ne i32 %20, 0
  br i1 %tobool10, label %while.body11, label %while.end14

while.body11:                                     ; preds = %while.cond8
  %21 = load i64** %st6, align 4
  %incdec.ptr12 = getelementptr inbounds i64* %21, i32 -1
  store i64* %incdec.ptr12, i64** %st6, align 4
  %22 = load i64* %incdec.ptr12, align 4
  %23 = load i64** %dt5, align 4
  %incdec.ptr13 = getelementptr inbounds i64* %23, i32 -1
  store i64* %incdec.ptr13, i64** %dt5, align 4
  store i64 %22, i64* %incdec.ptr13, align 4
  br label %while.cond8

while.end14:                                      ; preds = %while.cond8
  br label %if.end

if.end:                                           ; preds = %while.end14, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end, %while.end
  ret void
}

; Function Attrs: nounwind
define void @legup_memmove_8_i64(i8* %d, i8* %s, i64 %n) #2 {
entry:
  %d.addr = alloca i8*, align 4
  %s.addr = alloca i8*, align 4
  %n.addr = alloca i64, align 8
  %dt = alloca i64*, align 4
  %st = alloca i64*, align 4
  %dt5 = alloca i64*, align 4
  %st6 = alloca i64*, align 4
  store i8* %d, i8** %d.addr, align 4
  store i8* %s, i8** %s.addr, align 4
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8** %d.addr, align 4
  %1 = load i8** %s.addr, align 4
  %cmp = icmp ult i8* %0, %1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load i8** %d.addr, align 4
  %3 = bitcast i8* %2 to i64*
  store i64* %3, i64** %dt, align 4
  %4 = load i8** %s.addr, align 4
  %5 = bitcast i8* %4 to i64*
  store i64* %5, i64** %st, align 4
  %6 = load i64* %n.addr, align 8
  %shr = lshr i64 %6, 3
  store i64 %shr, i64* %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then
  %7 = load i64* %n.addr, align 8
  %dec = add i64 %7, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %7, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %8 = load i64** %st, align 4
  %incdec.ptr = getelementptr inbounds i64* %8, i32 1
  store i64* %incdec.ptr, i64** %st, align 4
  %9 = load i64* %8, align 4
  %10 = load i64** %dt, align 4
  %incdec.ptr1 = getelementptr inbounds i64* %10, i32 1
  store i64* %incdec.ptr1, i64** %dt, align 4
  store i64 %9, i64* %10, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end16

if.else:                                          ; preds = %entry
  %11 = load i8** %d.addr, align 4
  %12 = load i8** %s.addr, align 4
  %cmp2 = icmp ugt i8* %11, %12
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.else
  %13 = load i64* %n.addr, align 8
  %shr4 = lshr i64 %13, 3
  store i64 %shr4, i64* %n.addr, align 8
  %14 = load i8** %d.addr, align 4
  %15 = bitcast i8* %14 to i64*
  %16 = load i64* %n.addr, align 8
  %idx.ext = trunc i64 %16 to i32
  %add.ptr = getelementptr inbounds i64* %15, i32 %idx.ext
  store i64* %add.ptr, i64** %dt5, align 4
  %17 = load i8** %s.addr, align 4
  %18 = bitcast i8* %17 to i64*
  %19 = load i64* %n.addr, align 8
  %idx.ext7 = trunc i64 %19 to i32
  %add.ptr8 = getelementptr inbounds i64* %18, i32 %idx.ext7
  store i64* %add.ptr8, i64** %st6, align 4
  br label %while.cond9

while.cond9:                                      ; preds = %while.body12, %if.then3
  %20 = load i64* %n.addr, align 8
  %dec10 = add i64 %20, -1
  store i64 %dec10, i64* %n.addr, align 8
  %tobool11 = icmp ne i64 %20, 0
  br i1 %tobool11, label %while.body12, label %while.end15

while.body12:                                     ; preds = %while.cond9
  %21 = load i64** %st6, align 4
  %incdec.ptr13 = getelementptr inbounds i64* %21, i32 -1
  store i64* %incdec.ptr13, i64** %st6, align 4
  %22 = load i64* %incdec.ptr13, align 4
  %23 = load i64** %dt5, align 4
  %incdec.ptr14 = getelementptr inbounds i64* %23, i32 -1
  store i64* %incdec.ptr14, i64** %dt5, align 4
  store i64 %22, i64* %incdec.ptr14, align 4
  br label %while.cond9

while.end15:                                      ; preds = %while.cond9
  br label %if.end

if.end:                                           ; preds = %while.end15, %if.else
  br label %if.end16

if.end16:                                         ; preds = %if.end, %while.end
  ret void
}

; Function Attrs: nounwind
define void @legup_memset_1(i8* %m, i8 zeroext %c1, i32 %n) #2 {
entry:
  %m.addr = alloca i8*, align 4
  %c1.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  %c = alloca i8, align 1
  %s = alloca i8*, align 4
  store i8* %m, i8** %m.addr, align 4
  store i8 %c1, i8* %c1.addr, align 1
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8* %c1.addr, align 1
  store i8 %0, i8* %c, align 1
  %1 = load i8** %m.addr, align 4
  store i8* %1, i8** %s, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i32* %n.addr, align 4
  %dec = add i32 %2, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8* %c, align 1
  %4 = load i8** %s, align 4
  %incdec.ptr = getelementptr inbounds i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s, align 4
  store i8 %3, i8* %4, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memset_1_i64(i8* %m, i8 zeroext %c1, i64 %n) #2 {
entry:
  %m.addr = alloca i8*, align 4
  %c1.addr = alloca i8, align 1
  %n.addr = alloca i64, align 8
  %c = alloca i8, align 1
  %s = alloca i8*, align 4
  store i8* %m, i8** %m.addr, align 4
  store i8 %c1, i8* %c1.addr, align 1
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8* %c1.addr, align 1
  store i8 %0, i8* %c, align 1
  %1 = load i8** %m.addr, align 4
  store i8* %1, i8** %s, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i64* %n.addr, align 8
  %dec = add i64 %2, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %2, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %3 = load i8* %c, align 1
  %4 = load i8** %s, align 4
  %incdec.ptr = getelementptr inbounds i8* %4, i32 1
  store i8* %incdec.ptr, i8** %s, align 4
  store i8 %3, i8* %4, align 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memset_2(i8* %m, i8 zeroext %c1, i32 %n) #2 {
entry:
  %m.addr = alloca i8*, align 4
  %c1.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  %c = alloca i16, align 2
  %s = alloca i16*, align 4
  store i8* %m, i8** %m.addr, align 4
  store i8 %c1, i8* %c1.addr, align 1
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8* %c1.addr, align 1
  %conv = zext i8 %0 to i16
  store i16 %conv, i16* %c, align 2
  %1 = load i16* %c, align 2
  %conv1 = zext i16 %1 to i32
  %shl = shl i32 %conv1, 8
  %2 = load i16* %c, align 2
  %conv2 = zext i16 %2 to i32
  %or = or i32 %conv2, %shl
  %conv3 = trunc i32 %or to i16
  store i16 %conv3, i16* %c, align 2
  %3 = load i8** %m.addr, align 4
  %4 = bitcast i8* %3 to i16*
  store i16* %4, i16** %s, align 4
  %5 = load i32* %n.addr, align 4
  %shr = lshr i32 %5, 1
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i32* %n.addr, align 4
  %dec = add i32 %6, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %6, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i16* %c, align 2
  %8 = load i16** %s, align 4
  %incdec.ptr = getelementptr inbounds i16* %8, i32 1
  store i16* %incdec.ptr, i16** %s, align 4
  store i16 %7, i16* %8, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memset_2_i64(i8* %m, i8 zeroext %c1, i64 %n) #2 {
entry:
  %m.addr = alloca i8*, align 4
  %c1.addr = alloca i8, align 1
  %n.addr = alloca i64, align 8
  %c = alloca i16, align 2
  %s = alloca i16*, align 4
  store i8* %m, i8** %m.addr, align 4
  store i8 %c1, i8* %c1.addr, align 1
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8* %c1.addr, align 1
  %conv = zext i8 %0 to i16
  store i16 %conv, i16* %c, align 2
  %1 = load i16* %c, align 2
  %conv1 = zext i16 %1 to i32
  %shl = shl i32 %conv1, 8
  %2 = load i16* %c, align 2
  %conv2 = zext i16 %2 to i32
  %or = or i32 %conv2, %shl
  %conv3 = trunc i32 %or to i16
  store i16 %conv3, i16* %c, align 2
  %3 = load i8** %m.addr, align 4
  %4 = bitcast i8* %3 to i16*
  store i16* %4, i16** %s, align 4
  %5 = load i64* %n.addr, align 8
  %shr = lshr i64 %5, 1
  store i64 %shr, i64* %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %6 = load i64* %n.addr, align 8
  %dec = add i64 %6, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %6, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %7 = load i16* %c, align 2
  %8 = load i16** %s, align 4
  %incdec.ptr = getelementptr inbounds i16* %8, i32 1
  store i16* %incdec.ptr, i16** %s, align 4
  store i16 %7, i16* %8, align 2
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memset_4(i8* %m, i8 zeroext %c1, i32 %n) #2 {
entry:
  %m.addr = alloca i8*, align 4
  %c1.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  %c = alloca i32, align 4
  %s = alloca i32*, align 4
  store i8* %m, i8** %m.addr, align 4
  store i8 %c1, i8* %c1.addr, align 1
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8* %c1.addr, align 1
  %conv = zext i8 %0 to i32
  store i32 %conv, i32* %c, align 4
  %1 = load i32* %c, align 4
  %shl = shl i32 %1, 8
  %2 = load i32* %c, align 4
  %or = or i32 %2, %shl
  store i32 %or, i32* %c, align 4
  %3 = load i32* %c, align 4
  %shl1 = shl i32 %3, 16
  %4 = load i32* %c, align 4
  %or2 = or i32 %4, %shl1
  store i32 %or2, i32* %c, align 4
  %5 = load i8** %m.addr, align 4
  %6 = bitcast i8* %5 to i32*
  store i32* %6, i32** %s, align 4
  %7 = load i32* %n.addr, align 4
  %shr = lshr i32 %7, 2
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %8 = load i32* %n.addr, align 4
  %dec = add i32 %8, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %8, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i32* %c, align 4
  %10 = load i32** %s, align 4
  %incdec.ptr = getelementptr inbounds i32* %10, i32 1
  store i32* %incdec.ptr, i32** %s, align 4
  store i32 %9, i32* %10, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memset_4_i64(i8* %m, i8 zeroext %c1, i64 %n) #2 {
entry:
  %m.addr = alloca i8*, align 4
  %c1.addr = alloca i8, align 1
  %n.addr = alloca i64, align 8
  %c = alloca i32, align 4
  %s = alloca i32*, align 4
  store i8* %m, i8** %m.addr, align 4
  store i8 %c1, i8* %c1.addr, align 1
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8* %c1.addr, align 1
  %conv = zext i8 %0 to i32
  store i32 %conv, i32* %c, align 4
  %1 = load i32* %c, align 4
  %shl = shl i32 %1, 8
  %2 = load i32* %c, align 4
  %or = or i32 %2, %shl
  store i32 %or, i32* %c, align 4
  %3 = load i32* %c, align 4
  %shl1 = shl i32 %3, 16
  %4 = load i32* %c, align 4
  %or2 = or i32 %4, %shl1
  store i32 %or2, i32* %c, align 4
  %5 = load i8** %m.addr, align 4
  %6 = bitcast i8* %5 to i32*
  store i32* %6, i32** %s, align 4
  %7 = load i64* %n.addr, align 8
  %shr = lshr i64 %7, 2
  store i64 %shr, i64* %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %8 = load i64* %n.addr, align 8
  %dec = add i64 %8, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %8, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %9 = load i32* %c, align 4
  %10 = load i32** %s, align 4
  %incdec.ptr = getelementptr inbounds i32* %10, i32 1
  store i32* %incdec.ptr, i32** %s, align 4
  store i32 %9, i32* %10, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memset_8(i8* %m, i8 zeroext %c1, i32 %n) #2 {
entry:
  %m.addr = alloca i8*, align 4
  %c1.addr = alloca i8, align 1
  %n.addr = alloca i32, align 4
  %c = alloca i64, align 8
  %s = alloca i64*, align 4
  store i8* %m, i8** %m.addr, align 4
  store i8 %c1, i8* %c1.addr, align 1
  store i32 %n, i32* %n.addr, align 4
  %0 = load i8* %c1.addr, align 1
  %conv = zext i8 %0 to i64
  store i64 %conv, i64* %c, align 8
  %1 = load i64* %c, align 8
  %shl = shl i64 %1, 8
  %2 = load i64* %c, align 8
  %or = or i64 %2, %shl
  store i64 %or, i64* %c, align 8
  %3 = load i64* %c, align 8
  %shl1 = shl i64 %3, 16
  %4 = load i64* %c, align 8
  %or2 = or i64 %4, %shl1
  store i64 %or2, i64* %c, align 8
  %5 = load i64* %c, align 8
  %shl3 = shl i64 %5, 32
  %6 = load i64* %c, align 8
  %or4 = or i64 %6, %shl3
  store i64 %or4, i64* %c, align 8
  %7 = load i8** %m.addr, align 4
  %8 = bitcast i8* %7 to i64*
  store i64* %8, i64** %s, align 4
  %9 = load i32* %n.addr, align 4
  %shr = lshr i32 %9, 3
  store i32 %shr, i32* %n.addr, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %10 = load i32* %n.addr, align 4
  %dec = add i32 %10, -1
  store i32 %dec, i32* %n.addr, align 4
  %tobool = icmp ne i32 %10, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i64* %c, align 8
  %12 = load i64** %s, align 4
  %incdec.ptr = getelementptr inbounds i64* %12, i32 1
  store i64* %incdec.ptr, i64** %s, align 4
  store i64 %11, i64* %12, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define void @legup_memset_8_i64(i8* %m, i8 zeroext %c1, i64 %n) #2 {
entry:
  %m.addr = alloca i8*, align 4
  %c1.addr = alloca i8, align 1
  %n.addr = alloca i64, align 8
  %c = alloca i64, align 8
  %s = alloca i64*, align 4
  store i8* %m, i8** %m.addr, align 4
  store i8 %c1, i8* %c1.addr, align 1
  store i64 %n, i64* %n.addr, align 8
  %0 = load i8* %c1.addr, align 1
  %conv = zext i8 %0 to i64
  store i64 %conv, i64* %c, align 8
  %1 = load i64* %c, align 8
  %shl = shl i64 %1, 8
  %2 = load i64* %c, align 8
  %or = or i64 %2, %shl
  store i64 %or, i64* %c, align 8
  %3 = load i64* %c, align 8
  %shl1 = shl i64 %3, 16
  %4 = load i64* %c, align 8
  %or2 = or i64 %4, %shl1
  store i64 %or2, i64* %c, align 8
  %5 = load i64* %c, align 8
  %shl3 = shl i64 %5, 32
  %6 = load i64* %c, align 8
  %or4 = or i64 %6, %shl3
  store i64 %or4, i64* %c, align 8
  %7 = load i8** %m.addr, align 4
  %8 = bitcast i8* %7 to i64*
  store i64* %8, i64** %s, align 4
  %9 = load i64* %n.addr, align 8
  %shr = lshr i64 %9, 3
  store i64 %shr, i64* %n.addr, align 8
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %10 = load i64* %n.addr, align 8
  %dec = add i64 %10, -1
  store i64 %dec, i64* %n.addr, align 8
  %tobool = icmp ne i64 %10, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %11 = load i64* %c, align 8
  %12 = load i64** %s, align 4
  %incdec.ptr = getelementptr inbounds i64* %12, i32 1
  store i64* %incdec.ptr, i64** %s, align 4
  store i64 %11, i64* %12, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: nounwind
define double @cabs({ double, double }* byval align 4 %z) #2 {
entry:
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @cimag({ double, double }* byval align 4 %tmp5) #4
  %call9 = call double @hypot(double %call, double %call8) #4
  ret double %call9
}

; Function Attrs: nounwind
define float @cabsf({ float, float }* byval align 4 %z) #2 {
entry:
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @cimagf({ float, float }* byval align 4 %tmp5) #4
  %call9 = call float @hypotf(float %call, float %call8) #4
  ret float %call9
}

; Function Attrs: nounwind
define void @cacos({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %tmp0 = alloca { double, double }, align 8
  %tmp1 = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 4
  %tmp2 = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %tmp14 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp2, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp2, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  call void @casin({ double, double }* sret %tmp, { double, double }* byval align 4 %tmp2) #4
  %tmp.realp = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double* %tmp.realp, align 4
  %tmp.imagp = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double* %tmp.imagp, align 4
  %real3 = getelementptr inbounds { double, double }* %tmp0, i32 0, i32 0
  %imag4 = getelementptr inbounds { double, double }* %tmp0, i32 0, i32 1
  store double %tmp.real, double* %real3, align 8
  store double %tmp.imag, double* %imag4, align 4
  %tmp0.realp = getelementptr inbounds { double, double }* %tmp0, i32 0, i32 0
  %tmp0.real = load double* %tmp0.realp, align 8
  %tmp0.imagp = getelementptr inbounds { double, double }* %tmp0, i32 0, i32 1
  %tmp0.imag = load double* %tmp0.imagp, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %tmp0.real, double* %real6, align 4
  store double %tmp0.imag, double* %imag7, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp5) #4
  %sub = fsub double 0x3FF921FB54442D18, %call
  %real8 = getelementptr inbounds { double, double }* %tmp1, i32 0, i32 0
  %imag9 = getelementptr inbounds { double, double }* %tmp1, i32 0, i32 1
  store double %sub, double* %real8, align 8
  store double 0.000000e+00, double* %imag9, align 4
  %tmp1.realp = getelementptr inbounds { double, double }* %tmp1, i32 0, i32 0
  %tmp1.real = load double* %tmp1.realp, align 8
  %tmp1.imagp = getelementptr inbounds { double, double }* %tmp1, i32 0, i32 1
  %tmp1.imag = load double* %tmp1.imagp, align 4
  %tmp0.realp10 = getelementptr inbounds { double, double }* %tmp0, i32 0, i32 0
  %tmp0.real11 = load double* %tmp0.realp10, align 8
  %tmp0.imagp12 = getelementptr inbounds { double, double }* %tmp0, i32 0, i32 1
  %tmp0.imag13 = load double* %tmp0.imagp12, align 4
  %real15 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 0
  %imag16 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 1
  store double %tmp0.real11, double* %real15, align 4
  store double %tmp0.imag13, double* %imag16, align 4
  %call17 = call double @cimag({ double, double }* byval align 4 %tmp14) #4
  %mul.rl = fmul double %call17, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %call17, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %sub.r = fsub double %tmp1.real, %mul.r
  %sub.i = fsub double %tmp1.imag, %mul.i
  %real18 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag19 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %sub.r, double* %real18, align 8
  store double %sub.i, double* %imag19, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real20 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag21 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real20, align 4
  store double %w.imag, double* %imag21, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real22 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag23 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real22, align 4
  store double %agg.result.imag, double* %imag23, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @cacosf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %tmp = alloca { float, float }, align 4
  %coerce = alloca { float, float }, align 4
  %tmp3 = alloca { float, float }, align 4
  %tmp11 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call i64 @casinf({ float, float }* byval align 4 %tmp) #4
  %0 = bitcast { float, float }* %coerce to i64*
  store i64 %call, i64* %0, align 1
  %coerce.realp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 0
  %coerce.real = load float* %coerce.realp, align 4
  %coerce.imagp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 1
  %coerce.imag = load float* %coerce.imagp, align 4
  %real1 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag2 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %coerce.real, float* %real1, align 4
  store float %coerce.imag, float* %imag2, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real4 = getelementptr inbounds { float, float }* %tmp3, i32 0, i32 0
  %imag5 = getelementptr inbounds { float, float }* %tmp3, i32 0, i32 1
  store float %w.real, float* %real4, align 4
  store float %w.imag, float* %imag5, align 4
  %call6 = call float @crealf({ float, float }* byval align 4 %tmp3) #4
  %sub = fsub float 0x3FF921FB60000000, %call6
  %w.realp7 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real8 = load float* %w.realp7, align 4
  %w.imagp9 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag10 = load float* %w.imagp9, align 4
  %real12 = getelementptr inbounds { float, float }* %tmp11, i32 0, i32 0
  %imag13 = getelementptr inbounds { float, float }* %tmp11, i32 0, i32 1
  store float %w.real8, float* %real12, align 4
  store float %w.imag10, float* %imag13, align 4
  %call14 = call float @cimagf({ float, float }* byval align 4 %tmp11) #4
  %mul.rl = fmul float %call14, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %call14, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %sub.r = fsub float %sub, %mul.r
  %sub.i = fsub float 0.000000e+00, %mul.i
  %real15 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag16 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %sub.r, float* %real15, align 4
  store float %sub.i, float* %imag16, align 4
  %w.realp17 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real18 = load float* %w.realp17, align 4
  %w.imagp19 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag20 = load float* %w.imagp19, align 4
  %real21 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag22 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real18, float* %real21, align 4
  store float %w.imag20, float* %imag22, align 4
  %1 = bitcast { float, float }* %retval to i64*
  %2 = load i64* %1, align 1
  ret i64 %2
}

; Function Attrs: nounwind
define void @cacosh({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %tmp10 = alloca { double, double }, align 4
  %tmp11 = alloca { double, double }, align 4
  %tmp16 = alloca { double, double }, align 4
  %tmp17 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %add.r = fadd double %z.real2, 1.000000e+00
  %add.i = fadd double %z.imag4, 0.000000e+00
  %real = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %add.r, double* %real, align 4
  store double %add.i, double* %imag, align 4
  call void @csqrt({ double, double }* sret %tmp, { double, double }* byval align 4 %tmp5) #4
  %tmp.realp = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double* %tmp.realp, align 4
  %tmp.imagp = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double* %tmp.imagp, align 4
  %z.realp6 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real7 = load double* %z.realp6, align 8
  %z.imagp8 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag9 = load double* %z.imagp8, align 4
  %sub.r = fsub double %z.real7, 1.000000e+00
  %sub.i = fsub double %z.imag9, 0.000000e+00
  %real12 = getelementptr inbounds { double, double }* %tmp11, i32 0, i32 0
  %imag13 = getelementptr inbounds { double, double }* %tmp11, i32 0, i32 1
  store double %sub.r, double* %real12, align 4
  store double %sub.i, double* %imag13, align 4
  call void @csqrt({ double, double }* sret %tmp10, { double, double }* byval align 4 %tmp11) #4
  %tmp10.realp = getelementptr inbounds { double, double }* %tmp10, i32 0, i32 0
  %tmp10.real = load double* %tmp10.realp, align 4
  %tmp10.imagp = getelementptr inbounds { double, double }* %tmp10, i32 0, i32 1
  %tmp10.imag = load double* %tmp10.imagp, align 4
  %mul.rl = fmul double %tmp.real, %tmp10.real
  %mul.rr = fmul double %tmp.imag, %tmp10.imag
  %mul.r = fsub double %mul.rl, %mul.rr
  %mul.il = fmul double %tmp.imag, %tmp10.real
  %mul.ir = fmul double %tmp.real, %tmp10.imag
  %mul.i = fadd double %mul.il, %mul.ir
  %add.r14 = fadd double %z.real, %mul.r
  %add.i15 = fadd double %z.imag, %mul.i
  %real18 = getelementptr inbounds { double, double }* %tmp17, i32 0, i32 0
  %imag19 = getelementptr inbounds { double, double }* %tmp17, i32 0, i32 1
  store double %add.r14, double* %real18, align 4
  store double %add.i15, double* %imag19, align 4
  call void @clog({ double, double }* sret %tmp16, { double, double }* byval align 4 %tmp17) #4
  %tmp16.realp = getelementptr inbounds { double, double }* %tmp16, i32 0, i32 0
  %tmp16.real = load double* %tmp16.realp, align 4
  %tmp16.imagp = getelementptr inbounds { double, double }* %tmp16, i32 0, i32 1
  %tmp16.imag = load double* %tmp16.imagp, align 4
  %real20 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag21 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %tmp16.real, double* %real20, align 8
  store double %tmp16.imag, double* %imag21, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real22 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag23 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real22, align 4
  store double %w.imag, double* %imag23, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real24 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag25 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real24, align 4
  store double %agg.result.imag, double* %imag25, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @cacoshf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %tmp = alloca { float, float }, align 4
  %coerce = alloca { float, float }, align 4
  %tmp9 = alloca { float, float }, align 4
  %coerce13 = alloca { float, float }, align 4
  %tmp16 = alloca { float, float }, align 4
  %coerce20 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %add.r = fadd float %z.real2, 1.000000e+00
  %add.i = fadd float %z.imag4, 0.000000e+00
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %add.r, float* %real, align 4
  store float %add.i, float* %imag, align 4
  %call = call i64 @csqrtf({ float, float }* byval align 4 %tmp) #4
  %0 = bitcast { float, float }* %coerce to i64*
  store i64 %call, i64* %0, align 1
  %coerce.realp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 0
  %coerce.real = load float* %coerce.realp, align 4
  %coerce.imagp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 1
  %coerce.imag = load float* %coerce.imagp, align 4
  %z.realp5 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real6 = load float* %z.realp5, align 4
  %z.imagp7 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag8 = load float* %z.imagp7, align 4
  %sub.r = fsub float %z.real6, 1.000000e+00
  %sub.i = fsub float %z.imag8, 0.000000e+00
  %real10 = getelementptr inbounds { float, float }* %tmp9, i32 0, i32 0
  %imag11 = getelementptr inbounds { float, float }* %tmp9, i32 0, i32 1
  store float %sub.r, float* %real10, align 4
  store float %sub.i, float* %imag11, align 4
  %call12 = call i64 @csqrtf({ float, float }* byval align 4 %tmp9) #4
  %1 = bitcast { float, float }* %coerce13 to i64*
  store i64 %call12, i64* %1, align 1
  %coerce13.realp = getelementptr inbounds { float, float }* %coerce13, i32 0, i32 0
  %coerce13.real = load float* %coerce13.realp, align 4
  %coerce13.imagp = getelementptr inbounds { float, float }* %coerce13, i32 0, i32 1
  %coerce13.imag = load float* %coerce13.imagp, align 4
  %mul.rl = fmul float %coerce.real, %coerce13.real
  %mul.rr = fmul float %coerce.imag, %coerce13.imag
  %mul.r = fsub float %mul.rl, %mul.rr
  %mul.il = fmul float %coerce.imag, %coerce13.real
  %mul.ir = fmul float %coerce.real, %coerce13.imag
  %mul.i = fadd float %mul.il, %mul.ir
  %add.r14 = fadd float %z.real, %mul.r
  %add.i15 = fadd float %z.imag, %mul.i
  %real17 = getelementptr inbounds { float, float }* %tmp16, i32 0, i32 0
  %imag18 = getelementptr inbounds { float, float }* %tmp16, i32 0, i32 1
  store float %add.r14, float* %real17, align 4
  store float %add.i15, float* %imag18, align 4
  %call19 = call i64 @clogf({ float, float }* byval align 4 %tmp16) #4
  %2 = bitcast { float, float }* %coerce20 to i64*
  store i64 %call19, i64* %2, align 1
  %coerce20.realp = getelementptr inbounds { float, float }* %coerce20, i32 0, i32 0
  %coerce20.real = load float* %coerce20.realp, align 4
  %coerce20.imagp = getelementptr inbounds { float, float }* %coerce20, i32 0, i32 1
  %coerce20.imag = load float* %coerce20.imagp, align 4
  %real21 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag22 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %coerce20.real, float* %real21, align 4
  store float %coerce20.imag, float* %imag22, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real23 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag24 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real23, align 4
  store float %w.imag, float* %imag24, align 4
  %3 = bitcast { float, float }* %retval to i64*
  %4 = load i64* %3, align 1
  ret i64 %4
}

; Function Attrs: nounwind
define double @carg({ double, double }* byval align 4 %z) #2 {
entry:
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @cimag({ double, double }* byval align 4 %tmp) #4
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @creal({ double, double }* byval align 4 %tmp5) #4
  %call9 = call double @atan2(double %call, double %call8) #4
  ret double %call9
}

; Function Attrs: nounwind
define float @cargf({ float, float }* byval align 4 %z) #2 {
entry:
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @cimagf({ float, float }* byval align 4 %tmp) #4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @crealf({ float, float }* byval align 4 %tmp5) #4
  %call9 = call float @atan2f(float %call, float %call8) #4
  ret float %call9
}

; Function Attrs: nounwind
define void @casin({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %ca = alloca { double, double }, align 8
  %ct = alloca { double, double }, align 8
  %zz = alloca { double, double }, align 8
  %z2 = alloca { double, double }, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %tmp27 = alloca { double, double }, align 4
  %tmp36 = alloca { double, double }, align 4
  %tmp50 = alloca { double, double }, align 4
  %tmp51 = alloca { double, double }, align 4
  %tmp64 = alloca { double, double }, align 4
  %tmp65 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  store double %call, double* %x, align 8
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @cimag({ double, double }* byval align 4 %tmp5) #4
  store double %call8, double* %y, align 8
  %0 = load double* %x, align 8
  %1 = load double* %y, align 8
  %mul.rl = fmul double %1, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %1, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %0, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real9 = getelementptr inbounds { double, double }* %ca, i32 0, i32 0
  %imag10 = getelementptr inbounds { double, double }* %ca, i32 0, i32 1
  store double %add.r, double* %real9, align 8
  store double %add.i, double* %imag10, align 4
  %ca.realp = getelementptr inbounds { double, double }* %ca, i32 0, i32 0
  %ca.real = load double* %ca.realp, align 8
  %ca.imagp = getelementptr inbounds { double, double }* %ca, i32 0, i32 1
  %ca.imag = load double* %ca.imagp, align 4
  %mul.rl11 = fmul double %ca.real, 0.000000e+00
  %mul.rr = fmul double %ca.imag, 1.000000e+00
  %mul.r12 = fsub double %mul.rl11, %mul.rr
  %mul.il = fmul double %ca.imag, 0.000000e+00
  %mul.ir13 = fmul double %ca.real, 1.000000e+00
  %mul.i14 = fadd double %mul.il, %mul.ir13
  %real15 = getelementptr inbounds { double, double }* %ct, i32 0, i32 0
  %imag16 = getelementptr inbounds { double, double }* %ct, i32 0, i32 1
  store double %mul.r12, double* %real15, align 8
  store double %mul.i14, double* %imag16, align 4
  %2 = load double* %x, align 8
  %3 = load double* %y, align 8
  %sub = fsub double %2, %3
  %4 = load double* %x, align 8
  %5 = load double* %y, align 8
  %add = fadd double %4, %5
  %mul = fmul double %sub, %add
  %6 = load double* %x, align 8
  %mul17 = fmul double 2.000000e+00, %6
  %7 = load double* %y, align 8
  %mul18 = fmul double %mul17, %7
  %mul.rl19 = fmul double %mul18, 0.000000e+00
  %mul.r20 = fsub double %mul.rl19, 0.000000e+00
  %mul.ir21 = fmul double %mul18, 1.000000e+00
  %mul.i22 = fadd double 0.000000e+00, %mul.ir21
  %add.r23 = fadd double %mul, %mul.r20
  %add.i24 = fadd double 0.000000e+00, %mul.i22
  %real25 = getelementptr inbounds { double, double }* %zz, i32 0, i32 0
  %imag26 = getelementptr inbounds { double, double }* %zz, i32 0, i32 1
  store double %add.r23, double* %real25, align 8
  store double %add.i24, double* %imag26, align 4
  %zz.realp = getelementptr inbounds { double, double }* %zz, i32 0, i32 0
  %zz.real = load double* %zz.realp, align 8
  %zz.imagp = getelementptr inbounds { double, double }* %zz, i32 0, i32 1
  %zz.imag = load double* %zz.imagp, align 4
  %real28 = getelementptr inbounds { double, double }* %tmp27, i32 0, i32 0
  %imag29 = getelementptr inbounds { double, double }* %tmp27, i32 0, i32 1
  store double %zz.real, double* %real28, align 4
  store double %zz.imag, double* %imag29, align 4
  %call30 = call double @creal({ double, double }* byval align 4 %tmp27) #4
  %sub31 = fsub double 1.000000e+00, %call30
  %zz.realp32 = getelementptr inbounds { double, double }* %zz, i32 0, i32 0
  %zz.real33 = load double* %zz.realp32, align 8
  %zz.imagp34 = getelementptr inbounds { double, double }* %zz, i32 0, i32 1
  %zz.imag35 = load double* %zz.imagp34, align 4
  %real37 = getelementptr inbounds { double, double }* %tmp36, i32 0, i32 0
  %imag38 = getelementptr inbounds { double, double }* %tmp36, i32 0, i32 1
  store double %zz.real33, double* %real37, align 4
  store double %zz.imag35, double* %imag38, align 4
  %call39 = call double @cimag({ double, double }* byval align 4 %tmp36) #4
  %mul.rl40 = fmul double %call39, 0.000000e+00
  %mul.r41 = fsub double %mul.rl40, 0.000000e+00
  %mul.ir42 = fmul double %call39, 1.000000e+00
  %mul.i43 = fadd double 0.000000e+00, %mul.ir42
  %sub.r = fsub double %sub31, %mul.r41
  %sub.i = fsub double 0.000000e+00, %mul.i43
  %real44 = getelementptr inbounds { double, double }* %zz, i32 0, i32 0
  %imag45 = getelementptr inbounds { double, double }* %zz, i32 0, i32 1
  store double %sub.r, double* %real44, align 8
  store double %sub.i, double* %imag45, align 4
  %zz.realp46 = getelementptr inbounds { double, double }* %zz, i32 0, i32 0
  %zz.real47 = load double* %zz.realp46, align 8
  %zz.imagp48 = getelementptr inbounds { double, double }* %zz, i32 0, i32 1
  %zz.imag49 = load double* %zz.imagp48, align 4
  %real52 = getelementptr inbounds { double, double }* %tmp51, i32 0, i32 0
  %imag53 = getelementptr inbounds { double, double }* %tmp51, i32 0, i32 1
  store double %zz.real47, double* %real52, align 4
  store double %zz.imag49, double* %imag53, align 4
  call void @csqrt({ double, double }* sret %tmp50, { double, double }* byval align 4 %tmp51) #4
  %tmp50.realp = getelementptr inbounds { double, double }* %tmp50, i32 0, i32 0
  %tmp50.real = load double* %tmp50.realp, align 4
  %tmp50.imagp = getelementptr inbounds { double, double }* %tmp50, i32 0, i32 1
  %tmp50.imag = load double* %tmp50.imagp, align 4
  %real54 = getelementptr inbounds { double, double }* %z2, i32 0, i32 0
  %imag55 = getelementptr inbounds { double, double }* %z2, i32 0, i32 1
  store double %tmp50.real, double* %real54, align 8
  store double %tmp50.imag, double* %imag55, align 4
  %ct.realp = getelementptr inbounds { double, double }* %ct, i32 0, i32 0
  %ct.real = load double* %ct.realp, align 8
  %ct.imagp = getelementptr inbounds { double, double }* %ct, i32 0, i32 1
  %ct.imag = load double* %ct.imagp, align 4
  %z2.realp = getelementptr inbounds { double, double }* %z2, i32 0, i32 0
  %z2.real = load double* %z2.realp, align 8
  %z2.imagp = getelementptr inbounds { double, double }* %z2, i32 0, i32 1
  %z2.imag = load double* %z2.imagp, align 4
  %add.r56 = fadd double %ct.real, %z2.real
  %add.i57 = fadd double %ct.imag, %z2.imag
  %real58 = getelementptr inbounds { double, double }* %zz, i32 0, i32 0
  %imag59 = getelementptr inbounds { double, double }* %zz, i32 0, i32 1
  store double %add.r56, double* %real58, align 8
  store double %add.i57, double* %imag59, align 4
  %zz.realp60 = getelementptr inbounds { double, double }* %zz, i32 0, i32 0
  %zz.real61 = load double* %zz.realp60, align 8
  %zz.imagp62 = getelementptr inbounds { double, double }* %zz, i32 0, i32 1
  %zz.imag63 = load double* %zz.imagp62, align 4
  %real66 = getelementptr inbounds { double, double }* %tmp65, i32 0, i32 0
  %imag67 = getelementptr inbounds { double, double }* %tmp65, i32 0, i32 1
  store double %zz.real61, double* %real66, align 4
  store double %zz.imag63, double* %imag67, align 4
  call void @clog({ double, double }* sret %tmp64, { double, double }* byval align 4 %tmp65) #4
  %tmp64.realp = getelementptr inbounds { double, double }* %tmp64, i32 0, i32 0
  %tmp64.real = load double* %tmp64.realp, align 4
  %tmp64.imagp = getelementptr inbounds { double, double }* %tmp64, i32 0, i32 1
  %tmp64.imag = load double* %tmp64.imagp, align 4
  %real68 = getelementptr inbounds { double, double }* %zz, i32 0, i32 0
  %imag69 = getelementptr inbounds { double, double }* %zz, i32 0, i32 1
  store double %tmp64.real, double* %real68, align 8
  store double %tmp64.imag, double* %imag69, align 4
  %zz.realp70 = getelementptr inbounds { double, double }* %zz, i32 0, i32 0
  %zz.real71 = load double* %zz.realp70, align 8
  %zz.imagp72 = getelementptr inbounds { double, double }* %zz, i32 0, i32 1
  %zz.imag73 = load double* %zz.imagp72, align 4
  %mul.rl74 = fmul double %zz.real71, -0.000000e+00
  %mul.rr75 = fmul double %zz.imag73, -1.000000e+00
  %mul.r76 = fsub double %mul.rl74, %mul.rr75
  %mul.il77 = fmul double %zz.imag73, -0.000000e+00
  %mul.ir78 = fmul double %zz.real71, -1.000000e+00
  %mul.i79 = fadd double %mul.il77, %mul.ir78
  %real80 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag81 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %mul.r76, double* %real80, align 8
  store double %mul.i79, double* %imag81, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real82 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag83 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real82, align 4
  store double %w.imag, double* %imag83, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real84 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag85 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real84, align 4
  store double %agg.result.imag, double* %imag85, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @casinf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %ca = alloca { float, float }, align 4
  %ct = alloca { float, float }, align 4
  %zz = alloca { float, float }, align 4
  %z2 = alloca { float, float }, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %tmp27 = alloca { float, float }, align 4
  %tmp36 = alloca { float, float }, align 4
  %tmp50 = alloca { float, float }, align 4
  %coerce = alloca { float, float }, align 4
  %tmp64 = alloca { float, float }, align 4
  %coerce68 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  store float %call, float* %x, align 4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @cimagf({ float, float }* byval align 4 %tmp5) #4
  store float %call8, float* %y, align 4
  %0 = load float* %x, align 4
  %1 = load float* %y, align 4
  %mul.rl = fmul float %1, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %1, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %0, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real9 = getelementptr inbounds { float, float }* %ca, i32 0, i32 0
  %imag10 = getelementptr inbounds { float, float }* %ca, i32 0, i32 1
  store float %add.r, float* %real9, align 4
  store float %add.i, float* %imag10, align 4
  %ca.realp = getelementptr inbounds { float, float }* %ca, i32 0, i32 0
  %ca.real = load float* %ca.realp, align 4
  %ca.imagp = getelementptr inbounds { float, float }* %ca, i32 0, i32 1
  %ca.imag = load float* %ca.imagp, align 4
  %mul.rl11 = fmul float %ca.real, 0.000000e+00
  %mul.rr = fmul float %ca.imag, 1.000000e+00
  %mul.r12 = fsub float %mul.rl11, %mul.rr
  %mul.il = fmul float %ca.imag, 0.000000e+00
  %mul.ir13 = fmul float %ca.real, 1.000000e+00
  %mul.i14 = fadd float %mul.il, %mul.ir13
  %real15 = getelementptr inbounds { float, float }* %ct, i32 0, i32 0
  %imag16 = getelementptr inbounds { float, float }* %ct, i32 0, i32 1
  store float %mul.r12, float* %real15, align 4
  store float %mul.i14, float* %imag16, align 4
  %2 = load float* %x, align 4
  %3 = load float* %y, align 4
  %sub = fsub float %2, %3
  %4 = load float* %x, align 4
  %5 = load float* %y, align 4
  %add = fadd float %4, %5
  %mul = fmul float %sub, %add
  %6 = load float* %x, align 4
  %mul17 = fmul float 2.000000e+00, %6
  %7 = load float* %y, align 4
  %mul18 = fmul float %mul17, %7
  %mul.rl19 = fmul float %mul18, 0.000000e+00
  %mul.r20 = fsub float %mul.rl19, 0.000000e+00
  %mul.ir21 = fmul float %mul18, 1.000000e+00
  %mul.i22 = fadd float 0.000000e+00, %mul.ir21
  %add.r23 = fadd float %mul, %mul.r20
  %add.i24 = fadd float 0.000000e+00, %mul.i22
  %real25 = getelementptr inbounds { float, float }* %zz, i32 0, i32 0
  %imag26 = getelementptr inbounds { float, float }* %zz, i32 0, i32 1
  store float %add.r23, float* %real25, align 4
  store float %add.i24, float* %imag26, align 4
  %zz.realp = getelementptr inbounds { float, float }* %zz, i32 0, i32 0
  %zz.real = load float* %zz.realp, align 4
  %zz.imagp = getelementptr inbounds { float, float }* %zz, i32 0, i32 1
  %zz.imag = load float* %zz.imagp, align 4
  %real28 = getelementptr inbounds { float, float }* %tmp27, i32 0, i32 0
  %imag29 = getelementptr inbounds { float, float }* %tmp27, i32 0, i32 1
  store float %zz.real, float* %real28, align 4
  store float %zz.imag, float* %imag29, align 4
  %call30 = call float @crealf({ float, float }* byval align 4 %tmp27) #4
  %sub31 = fsub float 1.000000e+00, %call30
  %zz.realp32 = getelementptr inbounds { float, float }* %zz, i32 0, i32 0
  %zz.real33 = load float* %zz.realp32, align 4
  %zz.imagp34 = getelementptr inbounds { float, float }* %zz, i32 0, i32 1
  %zz.imag35 = load float* %zz.imagp34, align 4
  %real37 = getelementptr inbounds { float, float }* %tmp36, i32 0, i32 0
  %imag38 = getelementptr inbounds { float, float }* %tmp36, i32 0, i32 1
  store float %zz.real33, float* %real37, align 4
  store float %zz.imag35, float* %imag38, align 4
  %call39 = call float @cimagf({ float, float }* byval align 4 %tmp36) #4
  %mul.rl40 = fmul float %call39, 0.000000e+00
  %mul.r41 = fsub float %mul.rl40, 0.000000e+00
  %mul.ir42 = fmul float %call39, 1.000000e+00
  %mul.i43 = fadd float 0.000000e+00, %mul.ir42
  %sub.r = fsub float %sub31, %mul.r41
  %sub.i = fsub float 0.000000e+00, %mul.i43
  %real44 = getelementptr inbounds { float, float }* %zz, i32 0, i32 0
  %imag45 = getelementptr inbounds { float, float }* %zz, i32 0, i32 1
  store float %sub.r, float* %real44, align 4
  store float %sub.i, float* %imag45, align 4
  %zz.realp46 = getelementptr inbounds { float, float }* %zz, i32 0, i32 0
  %zz.real47 = load float* %zz.realp46, align 4
  %zz.imagp48 = getelementptr inbounds { float, float }* %zz, i32 0, i32 1
  %zz.imag49 = load float* %zz.imagp48, align 4
  %real51 = getelementptr inbounds { float, float }* %tmp50, i32 0, i32 0
  %imag52 = getelementptr inbounds { float, float }* %tmp50, i32 0, i32 1
  store float %zz.real47, float* %real51, align 4
  store float %zz.imag49, float* %imag52, align 4
  %call53 = call i64 @csqrtf({ float, float }* byval align 4 %tmp50) #4
  %8 = bitcast { float, float }* %coerce to i64*
  store i64 %call53, i64* %8, align 1
  %coerce.realp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 0
  %coerce.real = load float* %coerce.realp, align 4
  %coerce.imagp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 1
  %coerce.imag = load float* %coerce.imagp, align 4
  %real54 = getelementptr inbounds { float, float }* %z2, i32 0, i32 0
  %imag55 = getelementptr inbounds { float, float }* %z2, i32 0, i32 1
  store float %coerce.real, float* %real54, align 4
  store float %coerce.imag, float* %imag55, align 4
  %ct.realp = getelementptr inbounds { float, float }* %ct, i32 0, i32 0
  %ct.real = load float* %ct.realp, align 4
  %ct.imagp = getelementptr inbounds { float, float }* %ct, i32 0, i32 1
  %ct.imag = load float* %ct.imagp, align 4
  %z2.realp = getelementptr inbounds { float, float }* %z2, i32 0, i32 0
  %z2.real = load float* %z2.realp, align 4
  %z2.imagp = getelementptr inbounds { float, float }* %z2, i32 0, i32 1
  %z2.imag = load float* %z2.imagp, align 4
  %add.r56 = fadd float %ct.real, %z2.real
  %add.i57 = fadd float %ct.imag, %z2.imag
  %real58 = getelementptr inbounds { float, float }* %zz, i32 0, i32 0
  %imag59 = getelementptr inbounds { float, float }* %zz, i32 0, i32 1
  store float %add.r56, float* %real58, align 4
  store float %add.i57, float* %imag59, align 4
  %zz.realp60 = getelementptr inbounds { float, float }* %zz, i32 0, i32 0
  %zz.real61 = load float* %zz.realp60, align 4
  %zz.imagp62 = getelementptr inbounds { float, float }* %zz, i32 0, i32 1
  %zz.imag63 = load float* %zz.imagp62, align 4
  %real65 = getelementptr inbounds { float, float }* %tmp64, i32 0, i32 0
  %imag66 = getelementptr inbounds { float, float }* %tmp64, i32 0, i32 1
  store float %zz.real61, float* %real65, align 4
  store float %zz.imag63, float* %imag66, align 4
  %call67 = call i64 @clogf({ float, float }* byval align 4 %tmp64) #4
  %9 = bitcast { float, float }* %coerce68 to i64*
  store i64 %call67, i64* %9, align 1
  %coerce68.realp = getelementptr inbounds { float, float }* %coerce68, i32 0, i32 0
  %coerce68.real = load float* %coerce68.realp, align 4
  %coerce68.imagp = getelementptr inbounds { float, float }* %coerce68, i32 0, i32 1
  %coerce68.imag = load float* %coerce68.imagp, align 4
  %real69 = getelementptr inbounds { float, float }* %zz, i32 0, i32 0
  %imag70 = getelementptr inbounds { float, float }* %zz, i32 0, i32 1
  store float %coerce68.real, float* %real69, align 4
  store float %coerce68.imag, float* %imag70, align 4
  %zz.realp71 = getelementptr inbounds { float, float }* %zz, i32 0, i32 0
  %zz.real72 = load float* %zz.realp71, align 4
  %zz.imagp73 = getelementptr inbounds { float, float }* %zz, i32 0, i32 1
  %zz.imag74 = load float* %zz.imagp73, align 4
  %mul.rl75 = fmul float %zz.real72, -0.000000e+00
  %mul.rr76 = fmul float %zz.imag74, -1.000000e+00
  %mul.r77 = fsub float %mul.rl75, %mul.rr76
  %mul.il78 = fmul float %zz.imag74, -0.000000e+00
  %mul.ir79 = fmul float %zz.real72, -1.000000e+00
  %mul.i80 = fadd float %mul.il78, %mul.ir79
  %real81 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag82 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %mul.r77, float* %real81, align 4
  store float %mul.i80, float* %imag82, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real83 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag84 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real83, align 4
  store float %w.imag, float* %imag84, align 4
  %10 = bitcast { float, float }* %retval to i64*
  %11 = load i64* %10, align 1
  ret i64 %11
}

; Function Attrs: nounwind
define void @casinh({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 4
  %tmp1 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %mul.rl = fmul double %z.real, 0.000000e+00
  %mul.rr = fmul double %z.imag, 1.000000e+00
  %mul.r = fsub double %mul.rl, %mul.rr
  %mul.il = fmul double %z.imag, 0.000000e+00
  %mul.ir = fmul double %z.real, 1.000000e+00
  %mul.i = fadd double %mul.il, %mul.ir
  %real = getelementptr inbounds { double, double }* %tmp1, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp1, i32 0, i32 1
  store double %mul.r, double* %real, align 4
  store double %mul.i, double* %imag, align 4
  call void @casin({ double, double }* sret %tmp, { double, double }* byval align 4 %tmp1) #4
  %tmp.realp = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double* %tmp.realp, align 4
  %tmp.imagp = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double* %tmp.imagp, align 4
  %mul.rl2 = fmul double -0.000000e+00, %tmp.real
  %mul.rr3 = fmul double -1.000000e+00, %tmp.imag
  %mul.r4 = fsub double %mul.rl2, %mul.rr3
  %mul.il5 = fmul double -1.000000e+00, %tmp.real
  %mul.ir6 = fmul double -0.000000e+00, %tmp.imag
  %mul.i7 = fadd double %mul.il5, %mul.ir6
  %real8 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag9 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %mul.r4, double* %real8, align 8
  store double %mul.i7, double* %imag9, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real10 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag11 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real10, align 4
  store double %w.imag, double* %imag11, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real12 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag13 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real12, align 4
  store double %agg.result.imag, double* %imag13, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @casinhf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %tmp = alloca { float, float }, align 4
  %coerce = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %mul.rl = fmul float %z.real, 0.000000e+00
  %mul.rr = fmul float %z.imag, 1.000000e+00
  %mul.r = fsub float %mul.rl, %mul.rr
  %mul.il = fmul float %z.imag, 0.000000e+00
  %mul.ir = fmul float %z.real, 1.000000e+00
  %mul.i = fadd float %mul.il, %mul.ir
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %mul.r, float* %real, align 4
  store float %mul.i, float* %imag, align 4
  %call = call i64 @casinf({ float, float }* byval align 4 %tmp) #4
  %0 = bitcast { float, float }* %coerce to i64*
  store i64 %call, i64* %0, align 1
  %coerce.realp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 0
  %coerce.real = load float* %coerce.realp, align 4
  %coerce.imagp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 1
  %coerce.imag = load float* %coerce.imagp, align 4
  %mul.rl1 = fmul float -0.000000e+00, %coerce.real
  %mul.rr2 = fmul float -1.000000e+00, %coerce.imag
  %mul.r3 = fsub float %mul.rl1, %mul.rr2
  %mul.il4 = fmul float -1.000000e+00, %coerce.real
  %mul.ir5 = fmul float -0.000000e+00, %coerce.imag
  %mul.i6 = fadd float %mul.il4, %mul.ir5
  %real7 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag8 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %mul.r3, float* %real7, align 4
  store float %mul.i6, float* %imag8, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real9 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag10 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real9, align 4
  store float %w.imag, float* %imag10, align 4
  %1 = bitcast { float, float }* %retval to i64*
  %2 = load i64* %1, align 1
  ret i64 %2
}

; Function Attrs: nounwind
define void @catan({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %a = alloca double, align 8
  %t = alloca double, align 8
  %x = alloca double, align 8
  %x2 = alloca double, align 8
  %y = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  store double %call, double* %x, align 8
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @cimag({ double, double }* byval align 4 %tmp5) #4
  store double %call8, double* %y, align 8
  %0 = load double* %x, align 8
  %cmp = fcmp oeq double %0, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load double* %y, align 8
  %cmp9 = fcmp ogt double %1, 1.000000e+00
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %ovrf

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load double* %x, align 8
  %3 = load double* %x, align 8
  %mul = fmul double %2, %3
  store double %mul, double* %x2, align 8
  %4 = load double* %x2, align 8
  %sub = fsub double 1.000000e+00, %4
  %5 = load double* %y, align 8
  %6 = load double* %y, align 8
  %mul10 = fmul double %5, %6
  %sub11 = fsub double %sub, %mul10
  store double %sub11, double* %a, align 8
  %7 = load double* %a, align 8
  %cmp12 = fcmp oeq double %7, 0.000000e+00
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  br label %ovrf

if.end14:                                         ; preds = %if.end
  %8 = load double* %x, align 8
  %mul15 = fmul double 2.000000e+00, %8
  %9 = load double* %a, align 8
  %call16 = call double @atan2(double %mul15, double %9) #4
  %mul17 = fmul double 5.000000e-01, %call16
  store double %mul17, double* %t, align 8
  %10 = load double* %t, align 8
  %call18 = call double @_redupi(double %10) #5
  %real19 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag20 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %call18, double* %real19, align 8
  store double 0.000000e+00, double* %imag20, align 4
  %11 = load double* %y, align 8
  %sub21 = fsub double %11, 1.000000e+00
  store double %sub21, double* %t, align 8
  %12 = load double* %x2, align 8
  %13 = load double* %t, align 8
  %14 = load double* %t, align 8
  %mul22 = fmul double %13, %14
  %add = fadd double %12, %mul22
  store double %add, double* %a, align 8
  %15 = load double* %a, align 8
  %cmp23 = fcmp oeq double %15, 0.000000e+00
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end14
  br label %ovrf

if.end25:                                         ; preds = %if.end14
  %16 = load double* %y, align 8
  %add26 = fadd double %16, 1.000000e+00
  store double %add26, double* %t, align 8
  %17 = load double* %x2, align 8
  %18 = load double* %t, align 8
  %19 = load double* %t, align 8
  %mul27 = fmul double %18, %19
  %add28 = fadd double %17, %mul27
  %20 = load double* %a, align 8
  %div = fdiv double %add28, %20
  store double %div, double* %a, align 8
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %21 = load double* %a, align 8
  %call29 = call double @log(double %21) #4
  %mul30 = fmul double 2.500000e-01, %call29
  %mul.rl = fmul double %mul30, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %mul30, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %w.real, %mul.r
  %add.i = fadd double %w.imag, %mul.i
  %real31 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag32 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real31, align 8
  store double %add.i, double* %imag32, align 4
  %w.realp33 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real34 = load double* %w.realp33, align 8
  %w.imagp35 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag36 = load double* %w.imagp35, align 4
  %real37 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag38 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real34, double* %real37, align 4
  store double %w.imag36, double* %imag38, align 4
  br label %return

ovrf:                                             ; preds = %if.then24, %if.then13, %if.then
  %real39 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag40 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double 0x7FF8000000000000, double* %real39, align 8
  store double 0x7FF0000000000000, double* %imag40, align 4
  %w.realp41 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real42 = load double* %w.realp41, align 8
  %w.imagp43 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag44 = load double* %w.imagp43, align 4
  %real45 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag46 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real42, double* %real45, align 4
  store double %w.imag44, double* %imag46, align 4
  br label %return

return:                                           ; preds = %ovrf, %if.end25
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real47 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag48 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real47, align 4
  store double %agg.result.imag, double* %imag48, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @catanf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %a = alloca float, align 4
  %t = alloca float, align 4
  %x = alloca float, align 4
  %x2 = alloca float, align 4
  %y = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  store float %call, float* %x, align 4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @cimagf({ float, float }* byval align 4 %tmp5) #4
  store float %call8, float* %y, align 4
  %0 = load float* %x, align 4
  %cmp = fcmp oeq float %0, 0.000000e+00
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %1 = load float* %y, align 4
  %cmp9 = fcmp ogt float %1, 1.000000e+00
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %ovrf

if.end:                                           ; preds = %land.lhs.true, %entry
  %2 = load float* %x, align 4
  %3 = load float* %x, align 4
  %mul = fmul float %2, %3
  store float %mul, float* %x2, align 4
  %4 = load float* %x2, align 4
  %sub = fsub float 1.000000e+00, %4
  %5 = load float* %y, align 4
  %6 = load float* %y, align 4
  %mul10 = fmul float %5, %6
  %sub11 = fsub float %sub, %mul10
  store float %sub11, float* %a, align 4
  %7 = load float* %a, align 4
  %cmp12 = fcmp oeq float %7, 0.000000e+00
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  br label %ovrf

if.end14:                                         ; preds = %if.end
  %8 = load float* %x, align 4
  %mul15 = fmul float 2.000000e+00, %8
  %9 = load float* %a, align 4
  %call16 = call float @atan2f(float %mul15, float %9) #4
  %mul17 = fmul float 5.000000e-01, %call16
  store float %mul17, float* %t, align 4
  %10 = load float* %t, align 4
  %call18 = call float @_redupif(float %10) #5
  %real19 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag20 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %call18, float* %real19, align 4
  store float 0.000000e+00, float* %imag20, align 4
  %11 = load float* %y, align 4
  %sub21 = fsub float %11, 1.000000e+00
  store float %sub21, float* %t, align 4
  %12 = load float* %x2, align 4
  %13 = load float* %t, align 4
  %14 = load float* %t, align 4
  %mul22 = fmul float %13, %14
  %add = fadd float %12, %mul22
  store float %add, float* %a, align 4
  %15 = load float* %a, align 4
  %cmp23 = fcmp oeq float %15, 0.000000e+00
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.end14
  br label %ovrf

if.end25:                                         ; preds = %if.end14
  %16 = load float* %y, align 4
  %add26 = fadd float %16, 1.000000e+00
  store float %add26, float* %t, align 4
  %17 = load float* %x2, align 4
  %18 = load float* %t, align 4
  %19 = load float* %t, align 4
  %mul27 = fmul float %18, %19
  %add28 = fadd float %17, %mul27
  %20 = load float* %a, align 4
  %div = fdiv float %add28, %20
  store float %div, float* %a, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %21 = load float* %a, align 4
  %call29 = call float @logf(float %21) #4
  %mul30 = fmul float 2.500000e-01, %call29
  %mul.rl = fmul float %mul30, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %mul30, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %w.real, %mul.r
  %add.i = fadd float %w.imag, %mul.i
  %real31 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag32 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real31, align 4
  store float %add.i, float* %imag32, align 4
  %w.realp33 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real34 = load float* %w.realp33, align 4
  %w.imagp35 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag36 = load float* %w.imagp35, align 4
  %real37 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag38 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real34, float* %real37, align 4
  store float %w.imag36, float* %imag38, align 4
  br label %return

ovrf:                                             ; preds = %if.then24, %if.then13, %if.then
  %real39 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag40 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float 0x7FF8000000000000, float* %real39, align 4
  store float 0x7FF0000000000000, float* %imag40, align 4
  %w.realp41 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real42 = load float* %w.realp41, align 4
  %w.imagp43 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag44 = load float* %w.imagp43, align 4
  %real45 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag46 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real42, float* %real45, align 4
  store float %w.imag44, float* %imag46, align 4
  br label %return

return:                                           ; preds = %ovrf, %if.end25
  %22 = bitcast { float, float }* %retval to i64*
  %23 = load i64* %22, align 1
  ret i64 %23
}

; Function Attrs: nounwind
define void @catanh({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %tmp = alloca { double, double }, align 4
  %tmp1 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %mul.rl = fmul double %z.real, 0.000000e+00
  %mul.rr = fmul double %z.imag, 1.000000e+00
  %mul.r = fsub double %mul.rl, %mul.rr
  %mul.il = fmul double %z.imag, 0.000000e+00
  %mul.ir = fmul double %z.real, 1.000000e+00
  %mul.i = fadd double %mul.il, %mul.ir
  %real = getelementptr inbounds { double, double }* %tmp1, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp1, i32 0, i32 1
  store double %mul.r, double* %real, align 4
  store double %mul.i, double* %imag, align 4
  call void @catan({ double, double }* sret %tmp, { double, double }* byval align 4 %tmp1) #4
  %tmp.realp = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %tmp.real = load double* %tmp.realp, align 4
  %tmp.imagp = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  %tmp.imag = load double* %tmp.imagp, align 4
  %mul.rl2 = fmul double -0.000000e+00, %tmp.real
  %mul.rr3 = fmul double -1.000000e+00, %tmp.imag
  %mul.r4 = fsub double %mul.rl2, %mul.rr3
  %mul.il5 = fmul double -1.000000e+00, %tmp.real
  %mul.ir6 = fmul double -0.000000e+00, %tmp.imag
  %mul.i7 = fadd double %mul.il5, %mul.ir6
  %real8 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag9 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %mul.r4, double* %real8, align 8
  store double %mul.i7, double* %imag9, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real10 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag11 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real10, align 4
  store double %w.imag, double* %imag11, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real12 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag13 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real12, align 4
  store double %agg.result.imag, double* %imag13, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @catanhf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %tmp = alloca { float, float }, align 4
  %coerce = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %mul.rl = fmul float %z.real, 0.000000e+00
  %mul.rr = fmul float %z.imag, 1.000000e+00
  %mul.r = fsub float %mul.rl, %mul.rr
  %mul.il = fmul float %z.imag, 0.000000e+00
  %mul.ir = fmul float %z.real, 1.000000e+00
  %mul.i = fadd float %mul.il, %mul.ir
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %mul.r, float* %real, align 4
  store float %mul.i, float* %imag, align 4
  %call = call i64 @catanf({ float, float }* byval align 4 %tmp) #4
  %0 = bitcast { float, float }* %coerce to i64*
  store i64 %call, i64* %0, align 1
  %coerce.realp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 0
  %coerce.real = load float* %coerce.realp, align 4
  %coerce.imagp = getelementptr inbounds { float, float }* %coerce, i32 0, i32 1
  %coerce.imag = load float* %coerce.imagp, align 4
  %mul.rl1 = fmul float -0.000000e+00, %coerce.real
  %mul.rr2 = fmul float -1.000000e+00, %coerce.imag
  %mul.r3 = fsub float %mul.rl1, %mul.rr2
  %mul.il4 = fmul float -1.000000e+00, %coerce.real
  %mul.ir5 = fmul float -0.000000e+00, %coerce.imag
  %mul.i6 = fadd float %mul.il4, %mul.ir5
  %real7 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag8 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %mul.r3, float* %real7, align 4
  store float %mul.i6, float* %imag8, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real9 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag10 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real9, align 4
  store float %w.imag, float* %imag10, align 4
  %1 = bitcast { float, float }* %retval to i64*
  %2 = load i64* %1, align 1
  ret i64 %2
}

; Function Attrs: nounwind
define void @ccos({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %ch = alloca double, align 8
  %sh = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %tmp14 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @cimag({ double, double }* byval align 4 %tmp) #4
  call void @_cchsh(double %call, double* %ch, double* %sh) #5
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @creal({ double, double }* byval align 4 %tmp5) #4
  %call9 = call double @cos(double %call8) #4
  %0 = load double* %ch, align 8
  %mul = fmul double %call9, %0
  %z.realp10 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real11 = load double* %z.realp10, align 8
  %z.imagp12 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag13 = load double* %z.imagp12, align 4
  %real15 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 0
  %imag16 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 1
  store double %z.real11, double* %real15, align 4
  store double %z.imag13, double* %imag16, align 4
  %call17 = call double @creal({ double, double }* byval align 4 %tmp14) #4
  %call18 = call double @sin(double %call17) #4
  %1 = load double* %sh, align 8
  %mul19 = fmul double %call18, %1
  %mul.rl = fmul double %mul19, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %mul19, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %sub.r = fsub double %mul, %mul.r
  %sub.i = fsub double 0.000000e+00, %mul.i
  %real20 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag21 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %sub.r, double* %real20, align 8
  store double %sub.i, double* %imag21, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real22 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag23 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real22, align 4
  store double %w.imag, double* %imag23, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real24 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag25 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real24, align 4
  store double %agg.result.imag, double* %imag25, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @ccosf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %ch = alloca float, align 4
  %sh = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %tmp14 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @cimagf({ float, float }* byval align 4 %tmp) #4
  call void @_cchshf(float %call, float* %ch, float* %sh) #5
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @crealf({ float, float }* byval align 4 %tmp5) #4
  %call9 = call float @cosf(float %call8) #4
  %0 = load float* %ch, align 4
  %mul = fmul float %call9, %0
  %z.realp10 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real11 = load float* %z.realp10, align 4
  %z.imagp12 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag13 = load float* %z.imagp12, align 4
  %real15 = getelementptr inbounds { float, float }* %tmp14, i32 0, i32 0
  %imag16 = getelementptr inbounds { float, float }* %tmp14, i32 0, i32 1
  store float %z.real11, float* %real15, align 4
  store float %z.imag13, float* %imag16, align 4
  %call17 = call float @crealf({ float, float }* byval align 4 %tmp14) #4
  %call18 = call float @sinf(float %call17) #4
  %1 = load float* %sh, align 4
  %mul19 = fmul float %call18, %1
  %mul.rl = fmul float %mul19, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %mul19, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %sub.r = fsub float %mul, %mul.r
  %sub.i = fsub float 0.000000e+00, %mul.i
  %real20 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag21 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %sub.r, float* %real20, align 4
  store float %sub.i, float* %imag21, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real22 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag23 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real22, align 4
  store float %w.imag, float* %imag23, align 4
  %2 = bitcast { float, float }* %retval to i64*
  %3 = load i64* %2, align 1
  ret i64 %3
}

; Function Attrs: nounwind
define void @ccosh({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  store double %call, double* %x, align 8
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @cimag({ double, double }* byval align 4 %tmp5) #4
  store double %call8, double* %y, align 8
  %0 = load double* %x, align 8
  %call9 = call double @cosh(double %0) #4
  %1 = load double* %y, align 8
  %call10 = call double @cos(double %1) #4
  %mul = fmul double %call9, %call10
  %2 = load double* %x, align 8
  %call11 = call double @sinh(double %2) #4
  %3 = load double* %y, align 8
  %call12 = call double @sin(double %3) #4
  %mul13 = fmul double %call11, %call12
  %mul.rl = fmul double %mul13, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %mul13, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %mul, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real14 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag15 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real14, align 8
  store double %add.i, double* %imag15, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real16 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag17 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real16, align 4
  store double %w.imag, double* %imag17, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real18 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag19 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real18, align 4
  store double %agg.result.imag, double* %imag19, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @ccoshf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  store float %call, float* %x, align 4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @cimagf({ float, float }* byval align 4 %tmp5) #4
  store float %call8, float* %y, align 4
  %0 = load float* %x, align 4
  %call9 = call float @coshf(float %0) #4
  %1 = load float* %y, align 4
  %call10 = call float @cosf(float %1) #4
  %mul = fmul float %call9, %call10
  %2 = load float* %x, align 4
  %call11 = call float @sinhf(float %2) #4
  %3 = load float* %y, align 4
  %call12 = call float @sinf(float %3) #4
  %mul13 = fmul float %call11, %call12
  %mul.rl = fmul float %mul13, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %mul13, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %mul, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real14 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag15 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real14, align 4
  store float %add.i, float* %imag15, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real16 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag17 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real16, align 4
  store float %w.imag, float* %imag17, align 4
  %4 = bitcast { float, float }* %retval to i64*
  %5 = load i64* %4, align 1
  ret i64 %5
}

; Function Attrs: nounwind
define void @_cchsh(double %x, double* %c, double* %s) #2 {
entry:
  %x.addr = alloca double, align 8
  %c.addr = alloca double*, align 4
  %s.addr = alloca double*, align 4
  %e = alloca double, align 8
  %ei = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double* %c, double** %c.addr, align 4
  store double* %s, double** %s.addr, align 4
  %0 = load double* %x.addr, align 8
  %call = call double @fabs(double %0) #6
  %cmp = fcmp ole double %call, 5.000000e-01
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load double* %x.addr, align 8
  %call1 = call double @cosh(double %1) #4
  %2 = load double** %c.addr, align 4
  store double %call1, double* %2, align 4
  %3 = load double* %x.addr, align 8
  %call2 = call double @sinh(double %3) #4
  %4 = load double** %s.addr, align 4
  store double %call2, double* %4, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load double* %x.addr, align 8
  %call3 = call double @exp(double %5) #4
  store double %call3, double* %e, align 8
  %6 = load double* %e, align 8
  %div = fdiv double 5.000000e-01, %6
  store double %div, double* %ei, align 8
  %7 = load double* %e, align 8
  %mul = fmul double 5.000000e-01, %7
  store double %mul, double* %e, align 8
  %8 = load double* %e, align 8
  %9 = load double* %ei, align 8
  %sub = fsub double %8, %9
  %10 = load double** %s.addr, align 4
  store double %sub, double* %10, align 4
  %11 = load double* %e, align 8
  %12 = load double* %ei, align 8
  %add = fadd double %11, %12
  %13 = load double** %c.addr, align 4
  store double %add, double* %13, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind
define double @_redupi(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  %t = alloca double, align 8
  %i = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %div = fdiv double %0, 0x400921FB54442D18
  store double %div, double* %t, align 8
  %1 = load double* %t, align 8
  %cmp = fcmp oge double %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load double* %t, align 8
  %add = fadd double %2, 5.000000e-01
  store double %add, double* %t, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load double* %t, align 8
  %sub = fsub double %3, 5.000000e-01
  store double %sub, double* %t, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load double* %t, align 8
  %conv = fptosi double %4 to i32
  store i32 %conv, i32* %i, align 4
  %5 = load i32* %i, align 4
  %conv1 = sitofp i32 %5 to double
  store double %conv1, double* %t, align 8
  %6 = load double* %x.addr, align 8
  %7 = load double* %t, align 8
  %mul = fmul double %7, 0x400921FB54000000
  %sub2 = fsub double %6, %mul
  %8 = load double* %t, align 8
  %mul3 = fmul double %8, 0x3E210B4610000000
  %sub4 = fsub double %sub2, %mul3
  %9 = load double* %t, align 8
  %mul5 = fmul double %9, 0x3C6A62633145C06E
  %sub6 = fsub double %sub4, %mul5
  store double %sub6, double* %t, align 8
  %10 = load double* %t, align 8
  ret double %10
}

; Function Attrs: nounwind
define double @_ctans({ double, double }* byval align 4 %z) #2 {
entry:
  %f = alloca double, align 8
  %x = alloca double, align 8
  %x2 = alloca double, align 8
  %y = alloca double, align 8
  %y2 = alloca double, align 8
  %rn = alloca double, align 8
  %t = alloca double, align 8
  %d = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp6 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  %mul = fmul double 2.000000e+00, %call
  %call1 = call double @fabs(double %mul) #6
  store double %call1, double* %x, align 8
  %z.realp2 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real3 = load double* %z.realp2, align 8
  %z.imagp4 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag5 = load double* %z.imagp4, align 4
  %real7 = getelementptr inbounds { double, double }* %tmp6, i32 0, i32 0
  %imag8 = getelementptr inbounds { double, double }* %tmp6, i32 0, i32 1
  store double %z.real3, double* %real7, align 4
  store double %z.imag5, double* %imag8, align 4
  %call9 = call double @cimag({ double, double }* byval align 4 %tmp6) #4
  %mul10 = fmul double 2.000000e+00, %call9
  %call11 = call double @fabs(double %mul10) #6
  store double %call11, double* %y, align 8
  %0 = load double* %x, align 8
  %call12 = call double @_redupi(double %0) #5
  store double %call12, double* %x, align 8
  %1 = load double* %x, align 8
  %2 = load double* %x, align 8
  %mul13 = fmul double %1, %2
  store double %mul13, double* %x, align 8
  %3 = load double* %y, align 8
  %4 = load double* %y, align 8
  %mul14 = fmul double %3, %4
  store double %mul14, double* %y, align 8
  store double 1.000000e+00, double* %x2, align 8
  store double 1.000000e+00, double* %y2, align 8
  store double 1.000000e+00, double* %f, align 8
  store double 0.000000e+00, double* %rn, align 8
  store double 0.000000e+00, double* %d, align 8
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %5 = load double* %rn, align 8
  %add = fadd double %5, 1.000000e+00
  store double %add, double* %rn, align 8
  %6 = load double* %rn, align 8
  %7 = load double* %f, align 8
  %mul15 = fmul double %7, %6
  store double %mul15, double* %f, align 8
  %8 = load double* %rn, align 8
  %add16 = fadd double %8, 1.000000e+00
  store double %add16, double* %rn, align 8
  %9 = load double* %rn, align 8
  %10 = load double* %f, align 8
  %mul17 = fmul double %10, %9
  store double %mul17, double* %f, align 8
  %11 = load double* %x, align 8
  %12 = load double* %x2, align 8
  %mul18 = fmul double %12, %11
  store double %mul18, double* %x2, align 8
  %13 = load double* %y, align 8
  %14 = load double* %y2, align 8
  %mul19 = fmul double %14, %13
  store double %mul19, double* %y2, align 8
  %15 = load double* %y2, align 8
  %16 = load double* %x2, align 8
  %add20 = fadd double %15, %16
  store double %add20, double* %t, align 8
  %17 = load double* %f, align 8
  %18 = load double* %t, align 8
  %div = fdiv double %18, %17
  store double %div, double* %t, align 8
  %19 = load double* %t, align 8
  %20 = load double* %d, align 8
  %add21 = fadd double %20, %19
  store double %add21, double* %d, align 8
  %21 = load double* %rn, align 8
  %add22 = fadd double %21, 1.000000e+00
  store double %add22, double* %rn, align 8
  %22 = load double* %rn, align 8
  %23 = load double* %f, align 8
  %mul23 = fmul double %23, %22
  store double %mul23, double* %f, align 8
  %24 = load double* %rn, align 8
  %add24 = fadd double %24, 1.000000e+00
  store double %add24, double* %rn, align 8
  %25 = load double* %rn, align 8
  %26 = load double* %f, align 8
  %mul25 = fmul double %26, %25
  store double %mul25, double* %f, align 8
  %27 = load double* %x, align 8
  %28 = load double* %x2, align 8
  %mul26 = fmul double %28, %27
  store double %mul26, double* %x2, align 8
  %29 = load double* %y, align 8
  %30 = load double* %y2, align 8
  %mul27 = fmul double %30, %29
  store double %mul27, double* %y2, align 8
  %31 = load double* %y2, align 8
  %32 = load double* %x2, align 8
  %sub = fsub double %31, %32
  store double %sub, double* %t, align 8
  %33 = load double* %f, align 8
  %34 = load double* %t, align 8
  %div28 = fdiv double %34, %33
  store double %div28, double* %t, align 8
  %35 = load double* %t, align 8
  %36 = load double* %d, align 8
  %add29 = fadd double %36, %35
  store double %add29, double* %d, align 8
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %37 = load double* %t, align 8
  %38 = load double* %d, align 8
  %div30 = fdiv double %37, %38
  %call31 = call double @fabs(double %div30) #6
  %cmp = fcmp ogt double %call31, 1.100000e-16
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %39 = load double* %d, align 8
  ret double %39
}

; Function Attrs: nounwind
define void @_cchshf(float %x, float* %c, float* %s) #2 {
entry:
  %x.addr = alloca float, align 4
  %c.addr = alloca float*, align 4
  %s.addr = alloca float*, align 4
  %e = alloca float, align 4
  %ei = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float* %c, float** %c.addr, align 4
  store float* %s, float** %s.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @fabsf(float %0) #6
  %cmp = fcmp ole float %call, 5.000000e-01
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %1 = load float* %x.addr, align 4
  %call1 = call float @coshf(float %1) #4
  %2 = load float** %c.addr, align 4
  store float %call1, float* %2, align 4
  %3 = load float* %x.addr, align 4
  %call2 = call float @sinhf(float %3) #4
  %4 = load float** %s.addr, align 4
  store float %call2, float* %4, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %5 = load float* %x.addr, align 4
  %call3 = call float @expf(float %5) #4
  store float %call3, float* %e, align 4
  %6 = load float* %e, align 4
  %div = fdiv float 5.000000e-01, %6
  store float %div, float* %ei, align 4
  %7 = load float* %e, align 4
  %mul = fmul float 5.000000e-01, %7
  store float %mul, float* %e, align 4
  %8 = load float* %e, align 4
  %9 = load float* %ei, align 4
  %sub = fsub float %8, %9
  %10 = load float** %s.addr, align 4
  store float %sub, float* %10, align 4
  %11 = load float* %e, align 4
  %12 = load float* %ei, align 4
  %add = fadd float %11, %12
  %13 = load float** %c.addr, align 4
  store float %add, float* %13, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: nounwind
define float @_redupif(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  %t = alloca float, align 4
  %i = alloca i32, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %div = fdiv float %0, 0x400921FB60000000
  store float %div, float* %t, align 4
  %1 = load float* %t, align 4
  %cmp = fcmp oge float %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %2 = load float* %t, align 4
  %add = fadd float %2, 5.000000e-01
  store float %add, float* %t, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %3 = load float* %t, align 4
  %sub = fsub float %3, 5.000000e-01
  store float %sub, float* %t, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %4 = load float* %t, align 4
  %conv = fptosi float %4 to i32
  store i32 %conv, i32* %i, align 4
  %5 = load i32* %i, align 4
  %conv1 = sitofp i32 %5 to float
  store float %conv1, float* %t, align 4
  %6 = load float* %x.addr, align 4
  %conv2 = fpext float %6 to double
  %7 = load float* %t, align 4
  %conv3 = fpext float %7 to double
  %mul = fmul double %conv3, 3.140625e+00
  %sub4 = fsub double %conv2, %mul
  %8 = load float* %t, align 4
  %conv5 = fpext float %8 to double
  %mul6 = fmul double %conv5, 0x3F4FB40000000000
  %sub7 = fsub double %sub4, %mul6
  %9 = load float* %t, align 4
  %conv8 = fpext float %9 to double
  %mul9 = fmul double %conv8, 0x3E84442D18469899
  %sub10 = fsub double %sub7, %mul9
  %conv11 = fptrunc double %sub10 to float
  store float %conv11, float* %t, align 4
  %10 = load float* %t, align 4
  ret float %10
}

; Function Attrs: nounwind
define float @_ctansf({ float, float }* byval align 4 %z) #2 {
entry:
  %f = alloca float, align 4
  %x = alloca float, align 4
  %x2 = alloca float, align 4
  %y = alloca float, align 4
  %y2 = alloca float, align 4
  %rn = alloca float, align 4
  %t = alloca float, align 4
  %d = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp6 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  %mul = fmul float 2.000000e+00, %call
  %call1 = call float @fabsf(float %mul) #6
  store float %call1, float* %x, align 4
  %z.realp2 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real3 = load float* %z.realp2, align 4
  %z.imagp4 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag5 = load float* %z.imagp4, align 4
  %real7 = getelementptr inbounds { float, float }* %tmp6, i32 0, i32 0
  %imag8 = getelementptr inbounds { float, float }* %tmp6, i32 0, i32 1
  store float %z.real3, float* %real7, align 4
  store float %z.imag5, float* %imag8, align 4
  %call9 = call float @cimagf({ float, float }* byval align 4 %tmp6) #4
  %mul10 = fmul float 2.000000e+00, %call9
  %call11 = call float @fabsf(float %mul10) #6
  store float %call11, float* %y, align 4
  %0 = load float* %x, align 4
  %call12 = call float @_redupif(float %0) #5
  store float %call12, float* %x, align 4
  %1 = load float* %x, align 4
  %2 = load float* %x, align 4
  %mul13 = fmul float %1, %2
  store float %mul13, float* %x, align 4
  %3 = load float* %y, align 4
  %4 = load float* %y, align 4
  %mul14 = fmul float %3, %4
  store float %mul14, float* %y, align 4
  store float 1.000000e+00, float* %x2, align 4
  store float 1.000000e+00, float* %y2, align 4
  store float 1.000000e+00, float* %f, align 4
  store float 0.000000e+00, float* %rn, align 4
  store float 0.000000e+00, float* %d, align 4
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %5 = load float* %rn, align 4
  %add = fadd float %5, 1.000000e+00
  store float %add, float* %rn, align 4
  %6 = load float* %rn, align 4
  %7 = load float* %f, align 4
  %mul15 = fmul float %7, %6
  store float %mul15, float* %f, align 4
  %8 = load float* %rn, align 4
  %add16 = fadd float %8, 1.000000e+00
  store float %add16, float* %rn, align 4
  %9 = load float* %rn, align 4
  %10 = load float* %f, align 4
  %mul17 = fmul float %10, %9
  store float %mul17, float* %f, align 4
  %11 = load float* %x, align 4
  %12 = load float* %x2, align 4
  %mul18 = fmul float %12, %11
  store float %mul18, float* %x2, align 4
  %13 = load float* %y, align 4
  %14 = load float* %y2, align 4
  %mul19 = fmul float %14, %13
  store float %mul19, float* %y2, align 4
  %15 = load float* %y2, align 4
  %16 = load float* %x2, align 4
  %add20 = fadd float %15, %16
  store float %add20, float* %t, align 4
  %17 = load float* %f, align 4
  %18 = load float* %t, align 4
  %div = fdiv float %18, %17
  store float %div, float* %t, align 4
  %19 = load float* %t, align 4
  %20 = load float* %d, align 4
  %add21 = fadd float %20, %19
  store float %add21, float* %d, align 4
  %21 = load float* %rn, align 4
  %add22 = fadd float %21, 1.000000e+00
  store float %add22, float* %rn, align 4
  %22 = load float* %rn, align 4
  %23 = load float* %f, align 4
  %mul23 = fmul float %23, %22
  store float %mul23, float* %f, align 4
  %24 = load float* %rn, align 4
  %add24 = fadd float %24, 1.000000e+00
  store float %add24, float* %rn, align 4
  %25 = load float* %rn, align 4
  %26 = load float* %f, align 4
  %mul25 = fmul float %26, %25
  store float %mul25, float* %f, align 4
  %27 = load float* %x, align 4
  %28 = load float* %x2, align 4
  %mul26 = fmul float %28, %27
  store float %mul26, float* %x2, align 4
  %29 = load float* %y, align 4
  %30 = load float* %y2, align 4
  %mul27 = fmul float %30, %29
  store float %mul27, float* %y2, align 4
  %31 = load float* %y2, align 4
  %32 = load float* %x2, align 4
  %sub = fsub float %31, %32
  store float %sub, float* %t, align 4
  %33 = load float* %f, align 4
  %34 = load float* %t, align 4
  %div28 = fdiv float %34, %33
  store float %div28, float* %t, align 4
  %35 = load float* %t, align 4
  %36 = load float* %d, align 4
  %add29 = fadd float %36, %35
  store float %add29, float* %d, align 4
  br label %do.cond

do.cond:                                          ; preds = %do.body
  %37 = load float* %t, align 4
  %38 = load float* %d, align 4
  %div30 = fdiv float %37, %38
  %call31 = call float @fabsf(float %div30) #6
  %conv = fpext float %call31 to double
  %cmp = fcmp ogt double %conv, 3.000000e-08
  br i1 %cmp, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  %39 = load float* %d, align 4
  ret float %39
}

; Function Attrs: nounwind
define void @cexp({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %r = alloca double, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  store double %call, double* %x, align 8
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @cimag({ double, double }* byval align 4 %tmp5) #4
  store double %call8, double* %y, align 8
  %0 = load double* %x, align 8
  %call9 = call double @exp(double %0) #4
  store double %call9, double* %r, align 8
  %1 = load double* %r, align 8
  %2 = load double* %y, align 8
  %call10 = call double @cos(double %2) #4
  %mul = fmul double %1, %call10
  %3 = load double* %r, align 8
  %4 = load double* %y, align 8
  %call11 = call double @sin(double %4) #4
  %mul12 = fmul double %3, %call11
  %mul.rl = fmul double %mul12, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %mul12, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %mul, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real13 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag14 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real13, align 8
  store double %add.i, double* %imag14, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real15 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag16 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real15, align 4
  store double %w.imag, double* %imag16, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real17 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag18 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real17, align 4
  store double %agg.result.imag, double* %imag18, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @cexpf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %r = alloca float, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  store float %call, float* %x, align 4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @cimagf({ float, float }* byval align 4 %tmp5) #4
  store float %call8, float* %y, align 4
  %0 = load float* %x, align 4
  %call9 = call float @expf(float %0) #4
  store float %call9, float* %r, align 4
  %1 = load float* %r, align 4
  %2 = load float* %y, align 4
  %call10 = call float @cosf(float %2) #4
  %mul = fmul float %1, %call10
  %3 = load float* %r, align 4
  %4 = load float* %y, align 4
  %call11 = call float @sinf(float %4) #4
  %mul12 = fmul float %3, %call11
  %mul.rl = fmul float %mul12, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %mul12, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %mul, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real13 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag14 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real13, align 4
  store float %add.i, float* %imag14, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real15 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag16 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real15, align 4
  store float %w.imag, float* %imag16, align 4
  %5 = bitcast { float, float }* %retval to i64*
  %6 = load i64* %5, align 1
  ret i64 %6
}

; Function Attrs: nounwind
define double @cimag({ double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca %union.double_complex, align 4
  %z1 = bitcast %union.double_complex* %w to { double, double }*
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %z1, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %z1, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %parts = bitcast %union.double_complex* %w to [2 x double]*
  %arrayidx = getelementptr inbounds [2 x double]* %parts, i32 0, i32 1
  %0 = load double* %arrayidx, align 4
  ret double %0
}

; Function Attrs: nounwind
define float @cimagf({ float, float }* byval align 4 %z) #2 {
entry:
  %w = alloca %union.float_complex, align 4
  %z1 = bitcast %union.float_complex* %w to { float, float }*
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %z1, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %z1, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %parts = bitcast %union.float_complex* %w to [2 x float]*
  %arrayidx = getelementptr inbounds [2 x float]* %parts, i32 0, i32 1
  %0 = load float* %arrayidx, align 4
  ret float %0
}

; Function Attrs: nounwind
define void @clog({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %p = alloca double, align 8
  %rr = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp6 = alloca { double, double }, align 4
  %tmp14 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @cabs({ double, double }* byval align 4 %tmp) #4
  store double %call, double* %rr, align 8
  %0 = load double* %rr, align 8
  %call1 = call double @log(double %0) #4
  store double %call1, double* %p, align 8
  %z.realp2 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real3 = load double* %z.realp2, align 8
  %z.imagp4 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag5 = load double* %z.imagp4, align 4
  %real7 = getelementptr inbounds { double, double }* %tmp6, i32 0, i32 0
  %imag8 = getelementptr inbounds { double, double }* %tmp6, i32 0, i32 1
  store double %z.real3, double* %real7, align 4
  store double %z.imag5, double* %imag8, align 4
  %call9 = call double @cimag({ double, double }* byval align 4 %tmp6) #4
  %z.realp10 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real11 = load double* %z.realp10, align 8
  %z.imagp12 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag13 = load double* %z.imagp12, align 4
  %real15 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 0
  %imag16 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 1
  store double %z.real11, double* %real15, align 4
  store double %z.imag13, double* %imag16, align 4
  %call17 = call double @creal({ double, double }* byval align 4 %tmp14) #4
  %call18 = call double @atan2(double %call9, double %call17) #4
  store double %call18, double* %rr, align 8
  %1 = load double* %p, align 8
  %2 = load double* %rr, align 8
  %mul.rl = fmul double %2, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %2, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %1, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real19 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag20 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real19, align 8
  store double %add.i, double* %imag20, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real21 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag22 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real21, align 4
  store double %w.imag, double* %imag22, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real23 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag24 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real23, align 4
  store double %agg.result.imag, double* %imag24, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @clogf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %p = alloca float, align 4
  %rr = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp6 = alloca { float, float }, align 4
  %tmp14 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @cabsf({ float, float }* byval align 4 %tmp) #4
  store float %call, float* %rr, align 4
  %0 = load float* %rr, align 4
  %call1 = call float @logf(float %0) #4
  store float %call1, float* %p, align 4
  %z.realp2 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real3 = load float* %z.realp2, align 4
  %z.imagp4 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag5 = load float* %z.imagp4, align 4
  %real7 = getelementptr inbounds { float, float }* %tmp6, i32 0, i32 0
  %imag8 = getelementptr inbounds { float, float }* %tmp6, i32 0, i32 1
  store float %z.real3, float* %real7, align 4
  store float %z.imag5, float* %imag8, align 4
  %call9 = call float @cimagf({ float, float }* byval align 4 %tmp6) #4
  %z.realp10 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real11 = load float* %z.realp10, align 4
  %z.imagp12 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag13 = load float* %z.imagp12, align 4
  %real15 = getelementptr inbounds { float, float }* %tmp14, i32 0, i32 0
  %imag16 = getelementptr inbounds { float, float }* %tmp14, i32 0, i32 1
  store float %z.real11, float* %real15, align 4
  store float %z.imag13, float* %imag16, align 4
  %call17 = call float @crealf({ float, float }* byval align 4 %tmp14) #4
  %call18 = call float @atan2f(float %call9, float %call17) #4
  store float %call18, float* %rr, align 4
  %1 = load float* %p, align 4
  %2 = load float* %rr, align 4
  %mul.rl = fmul float %2, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %2, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %1, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real19 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag20 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real19, align 4
  store float %add.i, float* %imag20, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real21 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag22 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real21, align 4
  store float %w.imag, float* %imag22, align 4
  %3 = bitcast { float, float }* %retval to i64*
  %4 = load i64* %3, align 1
  ret i64 %4
}

; Function Attrs: nounwind
define void @conj({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca %union.double_complex, align 4
  %z1 = bitcast %union.double_complex* %w to { double, double }*
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %z1, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %z1, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %parts = bitcast %union.double_complex* %w to [2 x double]*
  %arrayidx = getelementptr inbounds [2 x double]* %parts, i32 0, i32 1
  %0 = load double* %arrayidx, align 4
  %sub = fsub double -0.000000e+00, %0
  %parts2 = bitcast %union.double_complex* %w to [2 x double]*
  %arrayidx3 = getelementptr inbounds [2 x double]* %parts2, i32 0, i32 1
  store double %sub, double* %arrayidx3, align 4
  %z4 = bitcast %union.double_complex* %w to { double, double }*
  %z4.realp = getelementptr inbounds { double, double }* %z4, i32 0, i32 0
  %z4.real = load double* %z4.realp, align 4
  %z4.imagp = getelementptr inbounds { double, double }* %z4, i32 0, i32 1
  %z4.imag = load double* %z4.imagp, align 4
  %real5 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag6 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %z4.real, double* %real5, align 4
  store double %z4.imag, double* %imag6, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real7 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag8 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real7, align 4
  store double %agg.result.imag, double* %imag8, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @conjf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca %union.float_complex, align 4
  %z1 = bitcast %union.float_complex* %w to { float, float }*
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %z1, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %z1, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %parts = bitcast %union.float_complex* %w to [2 x float]*
  %arrayidx = getelementptr inbounds [2 x float]* %parts, i32 0, i32 1
  %0 = load float* %arrayidx, align 4
  %sub = fsub float -0.000000e+00, %0
  %parts2 = bitcast %union.float_complex* %w to [2 x float]*
  %arrayidx3 = getelementptr inbounds [2 x float]* %parts2, i32 0, i32 1
  store float %sub, float* %arrayidx3, align 4
  %z4 = bitcast %union.float_complex* %w to { float, float }*
  %z4.realp = getelementptr inbounds { float, float }* %z4, i32 0, i32 0
  %z4.real = load float* %z4.realp, align 4
  %z4.imagp = getelementptr inbounds { float, float }* %z4, i32 0, i32 1
  %z4.imag = load float* %z4.imagp, align 4
  %real5 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag6 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %z4.real, float* %real5, align 4
  store float %z4.imag, float* %imag6, align 4
  %1 = bitcast { float, float }* %retval to i64*
  %2 = load i64* %1, align 1
  ret i64 %2
}

; Function Attrs: nounwind
define void @cpow({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %a, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %r = alloca double, align 8
  %theta = alloca double, align 8
  %absa = alloca double, align 8
  %arga = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %tmp9 = alloca { double, double }, align 4
  %tmp19 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  store double %call, double* %x, align 8
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @cimag({ double, double }* byval align 4 %tmp5) #4
  store double %call8, double* %y, align 8
  %a.realp = getelementptr inbounds { double, double }* %a, i32 0, i32 0
  %a.real = load double* %a.realp, align 8
  %a.imagp = getelementptr inbounds { double, double }* %a, i32 0, i32 1
  %a.imag = load double* %a.imagp, align 4
  %real10 = getelementptr inbounds { double, double }* %tmp9, i32 0, i32 0
  %imag11 = getelementptr inbounds { double, double }* %tmp9, i32 0, i32 1
  store double %a.real, double* %real10, align 4
  store double %a.imag, double* %imag11, align 4
  %call12 = call double @cabs({ double, double }* byval align 4 %tmp9) #4
  store double %call12, double* %absa, align 8
  %0 = load double* %absa, align 8
  %cmp = fcmp oeq double %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %real13 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag14 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double 0.000000e+00, double* %real13, align 4
  store double 0.000000e+00, double* %imag14, align 4
  br label %return

if.end:                                           ; preds = %entry
  %a.realp15 = getelementptr inbounds { double, double }* %a, i32 0, i32 0
  %a.real16 = load double* %a.realp15, align 8
  %a.imagp17 = getelementptr inbounds { double, double }* %a, i32 0, i32 1
  %a.imag18 = load double* %a.imagp17, align 4
  %real20 = getelementptr inbounds { double, double }* %tmp19, i32 0, i32 0
  %imag21 = getelementptr inbounds { double, double }* %tmp19, i32 0, i32 1
  store double %a.real16, double* %real20, align 4
  store double %a.imag18, double* %imag21, align 4
  %call22 = call double @carg({ double, double }* byval align 4 %tmp19) #4
  store double %call22, double* %arga, align 8
  %1 = load double* %absa, align 8
  %2 = load double* %x, align 8
  %call23 = call double @pow(double %1, double %2) #4
  store double %call23, double* %r, align 8
  %3 = load double* %x, align 8
  %4 = load double* %arga, align 8
  %mul = fmul double %3, %4
  store double %mul, double* %theta, align 8
  %5 = load double* %y, align 8
  %cmp24 = fcmp une double %5, 0.000000e+00
  br i1 %cmp24, label %if.then25, label %if.end31

if.then25:                                        ; preds = %if.end
  %6 = load double* %r, align 8
  %7 = load double* %y, align 8
  %sub = fsub double -0.000000e+00, %7
  %8 = load double* %arga, align 8
  %mul26 = fmul double %sub, %8
  %call27 = call double @exp(double %mul26) #4
  %mul28 = fmul double %6, %call27
  store double %mul28, double* %r, align 8
  %9 = load double* %theta, align 8
  %10 = load double* %y, align 8
  %11 = load double* %absa, align 8
  %call29 = call double @log(double %11) #4
  %mul30 = fmul double %10, %call29
  %add = fadd double %9, %mul30
  store double %add, double* %theta, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.then25, %if.end
  %12 = load double* %r, align 8
  %13 = load double* %theta, align 8
  %call32 = call double @cos(double %13) #4
  %mul33 = fmul double %12, %call32
  %14 = load double* %r, align 8
  %15 = load double* %theta, align 8
  %call34 = call double @sin(double %15) #4
  %mul35 = fmul double %14, %call34
  %mul.rl = fmul double %mul35, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %mul35, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %mul33, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real36 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag37 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real36, align 8
  store double %add.i, double* %imag37, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real38 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag39 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real38, align 4
  store double %w.imag, double* %imag39, align 4
  br label %return

return:                                           ; preds = %if.end31, %if.then
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real40 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag41 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real40, align 4
  store double %agg.result.imag, double* %imag41, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @cpowf({ float, float }* byval align 4 %a, { float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %r = alloca float, align 4
  %theta = alloca float, align 4
  %absa = alloca float, align 4
  %arga = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %tmp9 = alloca { float, float }, align 4
  %tmp19 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  store float %call, float* %x, align 4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @cimagf({ float, float }* byval align 4 %tmp5) #4
  store float %call8, float* %y, align 4
  %a.realp = getelementptr inbounds { float, float }* %a, i32 0, i32 0
  %a.real = load float* %a.realp, align 4
  %a.imagp = getelementptr inbounds { float, float }* %a, i32 0, i32 1
  %a.imag = load float* %a.imagp, align 4
  %real10 = getelementptr inbounds { float, float }* %tmp9, i32 0, i32 0
  %imag11 = getelementptr inbounds { float, float }* %tmp9, i32 0, i32 1
  store float %a.real, float* %real10, align 4
  store float %a.imag, float* %imag11, align 4
  %call12 = call float @cabsf({ float, float }* byval align 4 %tmp9) #4
  store float %call12, float* %absa, align 4
  %0 = load float* %absa, align 4
  %cmp = fcmp oeq float %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %real13 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag14 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float 0.000000e+00, float* %real13, align 4
  store float 0.000000e+00, float* %imag14, align 4
  br label %return

if.end:                                           ; preds = %entry
  %a.realp15 = getelementptr inbounds { float, float }* %a, i32 0, i32 0
  %a.real16 = load float* %a.realp15, align 4
  %a.imagp17 = getelementptr inbounds { float, float }* %a, i32 0, i32 1
  %a.imag18 = load float* %a.imagp17, align 4
  %real20 = getelementptr inbounds { float, float }* %tmp19, i32 0, i32 0
  %imag21 = getelementptr inbounds { float, float }* %tmp19, i32 0, i32 1
  store float %a.real16, float* %real20, align 4
  store float %a.imag18, float* %imag21, align 4
  %call22 = call float @cargf({ float, float }* byval align 4 %tmp19) #4
  store float %call22, float* %arga, align 4
  %1 = load float* %absa, align 4
  %2 = load float* %x, align 4
  %call23 = call float @powf(float %1, float %2) #4
  store float %call23, float* %r, align 4
  %3 = load float* %x, align 4
  %4 = load float* %arga, align 4
  %mul = fmul float %3, %4
  store float %mul, float* %theta, align 4
  %5 = load float* %y, align 4
  %cmp24 = fcmp une float %5, 0.000000e+00
  br i1 %cmp24, label %if.then25, label %if.end31

if.then25:                                        ; preds = %if.end
  %6 = load float* %r, align 4
  %7 = load float* %y, align 4
  %sub = fsub float -0.000000e+00, %7
  %8 = load float* %arga, align 4
  %mul26 = fmul float %sub, %8
  %call27 = call float @expf(float %mul26) #4
  %mul28 = fmul float %6, %call27
  store float %mul28, float* %r, align 4
  %9 = load float* %theta, align 4
  %10 = load float* %y, align 4
  %11 = load float* %absa, align 4
  %call29 = call float @logf(float %11) #4
  %mul30 = fmul float %10, %call29
  %add = fadd float %9, %mul30
  store float %add, float* %theta, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then25, %if.end
  %12 = load float* %r, align 4
  %13 = load float* %theta, align 4
  %call32 = call float @cosf(float %13) #4
  %mul33 = fmul float %12, %call32
  %14 = load float* %r, align 4
  %15 = load float* %theta, align 4
  %call34 = call float @sinf(float %15) #4
  %mul35 = fmul float %14, %call34
  %mul.rl = fmul float %mul35, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %mul35, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %mul33, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real36 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag37 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real36, align 4
  store float %add.i, float* %imag37, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real38 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag39 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real38, align 4
  store float %w.imag, float* %imag39, align 4
  br label %return

return:                                           ; preds = %if.end31, %if.then
  %16 = bitcast { float, float }* %retval to i64*
  %17 = load i64* %16, align 1
  ret i64 %17
}

; Function Attrs: nounwind
define void @cproj({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca %union.double_complex, align 4
  %tmp = alloca { double, double }, align 4
  %tmp14 = alloca { double, double }, align 4
  %tmp25 = alloca { double, double }, align 4
  %tmp37 = alloca { double, double }, align 4
  %tmp50 = alloca { double, double }, align 4
  %tmp61 = alloca { double, double }, align 4
  %tmp72 = alloca { double, double }, align 4
  %z1 = bitcast %union.double_complex* %w to { double, double }*
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %z1, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %z1, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %z.realp2 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real3 = load double* %z.realp2, align 8
  %z.imagp4 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag5 = load double* %z.imagp4, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real3, double* %real6, align 4
  store double %z.imag5, double* %imag7, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  %conv = fptrunc double %call to float
  %call8 = call i32 @__isinff(float %conv) #6
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

cond.false:                                       ; preds = %entry
  br i1 true, label %cond.true9, label %cond.false20

cond.true9:                                       ; preds = %cond.false
  %z.realp10 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real11 = load double* %z.realp10, align 8
  %z.imagp12 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag13 = load double* %z.imagp12, align 4
  %real15 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 0
  %imag16 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 1
  store double %z.real11, double* %real15, align 4
  store double %z.imag13, double* %imag16, align 4
  %call17 = call double @creal({ double, double }* byval align 4 %tmp14) #4
  %call18 = call i32 @__isinf(double %call17) #6
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then, label %lor.lhs.false

cond.false20:                                     ; preds = %cond.false
  %z.realp21 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real22 = load double* %z.realp21, align 8
  %z.imagp23 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag24 = load double* %z.imagp23, align 4
  %real26 = getelementptr inbounds { double, double }* %tmp25, i32 0, i32 0
  %imag27 = getelementptr inbounds { double, double }* %tmp25, i32 0, i32 1
  store double %z.real22, double* %real26, align 4
  store double %z.imag24, double* %imag27, align 4
  %call28 = call double @creal({ double, double }* byval align 4 %tmp25) #4
  %conv29 = fpext double %call28 to x86_fp80
  %call30 = call i32 @__isinfl(x86_fp80 %conv29) #6
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false20, %cond.true9, %cond.true
  br i1 false, label %cond.true32, label %cond.false44

cond.true32:                                      ; preds = %lor.lhs.false
  %z.realp33 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real34 = load double* %z.realp33, align 8
  %z.imagp35 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag36 = load double* %z.imagp35, align 4
  %real38 = getelementptr inbounds { double, double }* %tmp37, i32 0, i32 0
  %imag39 = getelementptr inbounds { double, double }* %tmp37, i32 0, i32 1
  store double %z.real34, double* %real38, align 4
  store double %z.imag36, double* %imag39, align 4
  %call40 = call double @cimag({ double, double }* byval align 4 %tmp37) #4
  %conv41 = fptrunc double %call40 to float
  %call42 = call i32 @__isinff(float %conv41) #6
  %tobool43 = icmp ne i32 %call42, 0
  br i1 %tobool43, label %if.then, label %if.end

cond.false44:                                     ; preds = %lor.lhs.false
  br i1 true, label %cond.true45, label %cond.false56

cond.true45:                                      ; preds = %cond.false44
  %z.realp46 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real47 = load double* %z.realp46, align 8
  %z.imagp48 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag49 = load double* %z.imagp48, align 4
  %real51 = getelementptr inbounds { double, double }* %tmp50, i32 0, i32 0
  %imag52 = getelementptr inbounds { double, double }* %tmp50, i32 0, i32 1
  store double %z.real47, double* %real51, align 4
  store double %z.imag49, double* %imag52, align 4
  %call53 = call double @cimag({ double, double }* byval align 4 %tmp50) #4
  %call54 = call i32 @__isinf(double %call53) #6
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.then, label %if.end

cond.false56:                                     ; preds = %cond.false44
  %z.realp57 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real58 = load double* %z.realp57, align 8
  %z.imagp59 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag60 = load double* %z.imagp59, align 4
  %real62 = getelementptr inbounds { double, double }* %tmp61, i32 0, i32 0
  %imag63 = getelementptr inbounds { double, double }* %tmp61, i32 0, i32 1
  store double %z.real58, double* %real62, align 4
  store double %z.imag60, double* %imag63, align 4
  %call64 = call double @cimag({ double, double }* byval align 4 %tmp61) #4
  %conv65 = fpext double %call64 to x86_fp80
  %call66 = call i32 @__isinfl(x86_fp80 %conv65) #6
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false56, %cond.true45, %cond.true32, %cond.false20, %cond.true9, %cond.true
  %parts = bitcast %union.double_complex* %w to [2 x double]*
  %arrayidx = getelementptr inbounds [2 x double]* %parts, i32 0, i32 0
  store double 0x7FF0000000000000, double* %arrayidx, align 4
  %z.realp68 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real69 = load double* %z.realp68, align 8
  %z.imagp70 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag71 = load double* %z.imagp70, align 4
  %real73 = getelementptr inbounds { double, double }* %tmp72, i32 0, i32 0
  %imag74 = getelementptr inbounds { double, double }* %tmp72, i32 0, i32 1
  store double %z.real69, double* %real73, align 4
  store double %z.imag71, double* %imag74, align 4
  %call75 = call double @cimag({ double, double }* byval align 4 %tmp72) #4
  %call76 = call double @copysign(double 0.000000e+00, double %call75) #6
  %parts77 = bitcast %union.double_complex* %w to [2 x double]*
  %arrayidx78 = getelementptr inbounds [2 x double]* %parts77, i32 0, i32 1
  store double %call76, double* %arrayidx78, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false56, %cond.true45, %cond.true32
  %z79 = bitcast %union.double_complex* %w to { double, double }*
  %z79.realp = getelementptr inbounds { double, double }* %z79, i32 0, i32 0
  %z79.real = load double* %z79.realp, align 4
  %z79.imagp = getelementptr inbounds { double, double }* %z79, i32 0, i32 1
  %z79.imag = load double* %z79.imagp, align 4
  %real80 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag81 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %z79.real, double* %real80, align 4
  store double %z79.imag, double* %imag81, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real82 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag83 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real82, align 4
  store double %agg.result.imag, double* %imag83, align 4
  ret void
}

; Function Attrs: nounwind readnone
declare i32 @__isinfl(x86_fp80) #3

; Function Attrs: nounwind readnone
declare double @copysign(double, double) #3

; Function Attrs: nounwind
define i64 @cprojf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca %union.float_complex, align 4
  %tmp = alloca { float, float }, align 4
  %tmp14 = alloca { float, float }, align 4
  %tmp25 = alloca { float, float }, align 4
  %tmp37 = alloca { float, float }, align 4
  %tmp49 = alloca { float, float }, align 4
  %tmp61 = alloca { float, float }, align 4
  %tmp72 = alloca { float, float }, align 4
  %z1 = bitcast %union.float_complex* %w to { float, float }*
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %z1, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %z1, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %z.realp2 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real3 = load float* %z.realp2, align 4
  %z.imagp4 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag5 = load float* %z.imagp4, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real3, float* %real6, align 4
  store float %z.imag5, float* %imag7, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  %call8 = call i32 @__isinff(float %call) #6
  %tobool = icmp ne i32 %call8, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

cond.false:                                       ; preds = %entry
  br i1 false, label %cond.true9, label %cond.false20

cond.true9:                                       ; preds = %cond.false
  %z.realp10 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real11 = load float* %z.realp10, align 4
  %z.imagp12 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag13 = load float* %z.imagp12, align 4
  %real15 = getelementptr inbounds { float, float }* %tmp14, i32 0, i32 0
  %imag16 = getelementptr inbounds { float, float }* %tmp14, i32 0, i32 1
  store float %z.real11, float* %real15, align 4
  store float %z.imag13, float* %imag16, align 4
  %call17 = call float @crealf({ float, float }* byval align 4 %tmp14) #4
  %conv = fpext float %call17 to double
  %call18 = call i32 @__isinf(double %conv) #6
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then, label %lor.lhs.false

cond.false20:                                     ; preds = %cond.false
  %z.realp21 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real22 = load float* %z.realp21, align 4
  %z.imagp23 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag24 = load float* %z.imagp23, align 4
  %real26 = getelementptr inbounds { float, float }* %tmp25, i32 0, i32 0
  %imag27 = getelementptr inbounds { float, float }* %tmp25, i32 0, i32 1
  store float %z.real22, float* %real26, align 4
  store float %z.imag24, float* %imag27, align 4
  %call28 = call float @crealf({ float, float }* byval align 4 %tmp25) #4
  %conv29 = fpext float %call28 to x86_fp80
  %call30 = call i32 @__isinfl(x86_fp80 %conv29) #6
  %tobool31 = icmp ne i32 %call30, 0
  br i1 %tobool31, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false20, %cond.true9, %cond.true
  br i1 true, label %cond.true32, label %cond.false43

cond.true32:                                      ; preds = %lor.lhs.false
  %z.realp33 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real34 = load float* %z.realp33, align 4
  %z.imagp35 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag36 = load float* %z.imagp35, align 4
  %real38 = getelementptr inbounds { float, float }* %tmp37, i32 0, i32 0
  %imag39 = getelementptr inbounds { float, float }* %tmp37, i32 0, i32 1
  store float %z.real34, float* %real38, align 4
  store float %z.imag36, float* %imag39, align 4
  %call40 = call float @cimagf({ float, float }* byval align 4 %tmp37) #4
  %call41 = call i32 @__isinff(float %call40) #6
  %tobool42 = icmp ne i32 %call41, 0
  br i1 %tobool42, label %if.then, label %if.end

cond.false43:                                     ; preds = %lor.lhs.false
  br i1 false, label %cond.true44, label %cond.false56

cond.true44:                                      ; preds = %cond.false43
  %z.realp45 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real46 = load float* %z.realp45, align 4
  %z.imagp47 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag48 = load float* %z.imagp47, align 4
  %real50 = getelementptr inbounds { float, float }* %tmp49, i32 0, i32 0
  %imag51 = getelementptr inbounds { float, float }* %tmp49, i32 0, i32 1
  store float %z.real46, float* %real50, align 4
  store float %z.imag48, float* %imag51, align 4
  %call52 = call float @cimagf({ float, float }* byval align 4 %tmp49) #4
  %conv53 = fpext float %call52 to double
  %call54 = call i32 @__isinf(double %conv53) #6
  %tobool55 = icmp ne i32 %call54, 0
  br i1 %tobool55, label %if.then, label %if.end

cond.false56:                                     ; preds = %cond.false43
  %z.realp57 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real58 = load float* %z.realp57, align 4
  %z.imagp59 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag60 = load float* %z.imagp59, align 4
  %real62 = getelementptr inbounds { float, float }* %tmp61, i32 0, i32 0
  %imag63 = getelementptr inbounds { float, float }* %tmp61, i32 0, i32 1
  store float %z.real58, float* %real62, align 4
  store float %z.imag60, float* %imag63, align 4
  %call64 = call float @cimagf({ float, float }* byval align 4 %tmp61) #4
  %conv65 = fpext float %call64 to x86_fp80
  %call66 = call i32 @__isinfl(x86_fp80 %conv65) #6
  %tobool67 = icmp ne i32 %call66, 0
  br i1 %tobool67, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false56, %cond.true44, %cond.true32, %cond.false20, %cond.true9, %cond.true
  %parts = bitcast %union.float_complex* %w to [2 x float]*
  %arrayidx = getelementptr inbounds [2 x float]* %parts, i32 0, i32 0
  store float 0x7FF0000000000000, float* %arrayidx, align 4
  %z.realp68 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real69 = load float* %z.realp68, align 4
  %z.imagp70 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag71 = load float* %z.imagp70, align 4
  %real73 = getelementptr inbounds { float, float }* %tmp72, i32 0, i32 0
  %imag74 = getelementptr inbounds { float, float }* %tmp72, i32 0, i32 1
  store float %z.real69, float* %real73, align 4
  store float %z.imag71, float* %imag74, align 4
  %call75 = call float @cimagf({ float, float }* byval align 4 %tmp72) #4
  %call76 = call float @copysignf(float 0.000000e+00, float %call75) #6
  %parts77 = bitcast %union.float_complex* %w to [2 x float]*
  %arrayidx78 = getelementptr inbounds [2 x float]* %parts77, i32 0, i32 1
  store float %call76, float* %arrayidx78, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.false56, %cond.true44, %cond.true32
  %z79 = bitcast %union.float_complex* %w to { float, float }*
  %z79.realp = getelementptr inbounds { float, float }* %z79, i32 0, i32 0
  %z79.real = load float* %z79.realp, align 4
  %z79.imagp = getelementptr inbounds { float, float }* %z79, i32 0, i32 1
  %z79.imag = load float* %z79.imagp, align 4
  %real80 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag81 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %z79.real, float* %real80, align 4
  store float %z79.imag, float* %imag81, align 4
  %0 = bitcast { float, float }* %retval to i64*
  %1 = load i64* %0, align 1
  ret i64 %1
}

; Function Attrs: nounwind readnone
declare float @copysignf(float, float) #3

; Function Attrs: nounwind
define double @creal({ double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca %union.double_complex, align 4
  %z1 = bitcast %union.double_complex* %w to { double, double }*
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %z1, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %z1, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %parts = bitcast %union.double_complex* %w to [2 x double]*
  %arrayidx = getelementptr inbounds [2 x double]* %parts, i32 0, i32 0
  %0 = load double* %arrayidx, align 4
  ret double %0
}

; Function Attrs: nounwind
define float @crealf({ float, float }* byval align 4 %z) #2 {
entry:
  %w = alloca %union.float_complex, align 4
  %z1 = bitcast %union.float_complex* %w to { float, float }*
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %z1, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %z1, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %parts = bitcast %union.float_complex* %w to [2 x float]*
  %arrayidx = getelementptr inbounds [2 x float]* %parts, i32 0, i32 0
  %0 = load float* %arrayidx, align 4
  ret float %0
}

; Function Attrs: nounwind
define void @csin({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %ch = alloca double, align 8
  %sh = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %tmp14 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @cimag({ double, double }* byval align 4 %tmp) #4
  call void @_cchsh(double %call, double* %ch, double* %sh) #5
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @creal({ double, double }* byval align 4 %tmp5) #4
  %call9 = call double @sin(double %call8) #4
  %0 = load double* %ch, align 8
  %mul = fmul double %call9, %0
  %z.realp10 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real11 = load double* %z.realp10, align 8
  %z.imagp12 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag13 = load double* %z.imagp12, align 4
  %real15 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 0
  %imag16 = getelementptr inbounds { double, double }* %tmp14, i32 0, i32 1
  store double %z.real11, double* %real15, align 4
  store double %z.imag13, double* %imag16, align 4
  %call17 = call double @creal({ double, double }* byval align 4 %tmp14) #4
  %call18 = call double @cos(double %call17) #4
  %1 = load double* %sh, align 8
  %mul19 = fmul double %call18, %1
  %mul.rl = fmul double %mul19, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %mul19, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %mul, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real20 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag21 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real20, align 8
  store double %add.i, double* %imag21, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real22 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag23 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real22, align 4
  store double %w.imag, double* %imag23, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real24 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag25 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real24, align 4
  store double %agg.result.imag, double* %imag25, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @csinf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %ch = alloca float, align 4
  %sh = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %tmp14 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @cimagf({ float, float }* byval align 4 %tmp) #4
  call void @_cchshf(float %call, float* %ch, float* %sh) #5
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @crealf({ float, float }* byval align 4 %tmp5) #4
  %call9 = call float @sinf(float %call8) #4
  %0 = load float* %ch, align 4
  %mul = fmul float %call9, %0
  %z.realp10 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real11 = load float* %z.realp10, align 4
  %z.imagp12 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag13 = load float* %z.imagp12, align 4
  %real15 = getelementptr inbounds { float, float }* %tmp14, i32 0, i32 0
  %imag16 = getelementptr inbounds { float, float }* %tmp14, i32 0, i32 1
  store float %z.real11, float* %real15, align 4
  store float %z.imag13, float* %imag16, align 4
  %call17 = call float @crealf({ float, float }* byval align 4 %tmp14) #4
  %call18 = call float @cosf(float %call17) #4
  %1 = load float* %sh, align 4
  %mul19 = fmul float %call18, %1
  %mul.rl = fmul float %mul19, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %mul19, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %mul, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real20 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag21 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real20, align 4
  store float %add.i, float* %imag21, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real22 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag23 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real22, align 4
  store float %w.imag, float* %imag23, align 4
  %2 = bitcast { float, float }* %retval to i64*
  %3 = load i64* %2, align 1
  ret i64 %3
}

; Function Attrs: nounwind
define void @csinh({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  store double %call, double* %x, align 8
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @cimag({ double, double }* byval align 4 %tmp5) #4
  store double %call8, double* %y, align 8
  %0 = load double* %x, align 8
  %call9 = call double @sinh(double %0) #4
  %1 = load double* %y, align 8
  %call10 = call double @cos(double %1) #4
  %mul = fmul double %call9, %call10
  %2 = load double* %x, align 8
  %call11 = call double @cosh(double %2) #4
  %3 = load double* %y, align 8
  %call12 = call double @sin(double %3) #4
  %mul13 = fmul double %call11, %call12
  %mul.rl = fmul double %mul13, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %mul13, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %mul, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real14 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag15 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real14, align 8
  store double %add.i, double* %imag15, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real16 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag17 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real16, align 4
  store double %w.imag, double* %imag17, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real18 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag19 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real18, align 4
  store double %agg.result.imag, double* %imag19, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @csinhf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  store float %call, float* %x, align 4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @cimagf({ float, float }* byval align 4 %tmp5) #4
  store float %call8, float* %y, align 4
  %0 = load float* %x, align 4
  %call9 = call float @sinhf(float %0) #4
  %1 = load float* %y, align 4
  %call10 = call float @cosf(float %1) #4
  %mul = fmul float %call9, %call10
  %2 = load float* %x, align 4
  %call11 = call float @coshf(float %2) #4
  %3 = load float* %y, align 4
  %call12 = call float @sinf(float %3) #4
  %mul13 = fmul float %call11, %call12
  %mul.rl = fmul float %mul13, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %mul13, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %mul, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real14 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag15 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real14, align 4
  store float %add.i, float* %imag15, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real16 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag17 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real16, align 4
  store float %w.imag, float* %imag17, align 4
  %4 = bitcast { float, float }* %retval to i64*
  %5 = load i64* %4, align 1
  ret i64 %5
}

; Function Attrs: nounwind
define void @csqrt({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %r = alloca double, align 8
  %t = alloca double, align 8
  %scale = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %tmp90 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  store double %call, double* %x, align 8
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @cimag({ double, double }* byval align 4 %tmp5) #4
  store double %call8, double* %y, align 8
  %0 = load double* %y, align 8
  %cmp = fcmp oeq double %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end37

if.then:                                          ; preds = %entry
  %1 = load double* %x, align 8
  %cmp9 = fcmp oeq double %1, 0.000000e+00
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.then
  %2 = load double* %y, align 8
  %mul.rl = fmul double %2, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %2, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double 0.000000e+00, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real11 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag12 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real11, align 8
  store double %add.i, double* %imag12, align 4
  br label %if.end34

if.else:                                          ; preds = %if.then
  %3 = load double* %x, align 8
  %call13 = call double @fabs(double %3) #6
  store double %call13, double* %r, align 8
  %4 = load double* %r, align 8
  %call14 = call double @sqrt(double %4) #4
  store double %call14, double* %r, align 8
  %5 = load double* %x, align 8
  %cmp15 = fcmp olt double %5, 0.000000e+00
  br i1 %cmp15, label %if.then16, label %if.else25

if.then16:                                        ; preds = %if.else
  %6 = load double* %r, align 8
  %mul.rl17 = fmul double %6, 0.000000e+00
  %mul.r18 = fsub double %mul.rl17, 0.000000e+00
  %mul.ir19 = fmul double %6, 1.000000e+00
  %mul.i20 = fadd double 0.000000e+00, %mul.ir19
  %add.r21 = fadd double 0.000000e+00, %mul.r18
  %add.i22 = fadd double 0.000000e+00, %mul.i20
  %real23 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag24 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r21, double* %real23, align 8
  store double %add.i22, double* %imag24, align 4
  br label %if.end

if.else25:                                        ; preds = %if.else
  %7 = load double* %r, align 8
  %8 = load double* %y, align 8
  %mul.rl26 = fmul double %8, 0.000000e+00
  %mul.r27 = fsub double %mul.rl26, 0.000000e+00
  %mul.ir28 = fmul double %8, 1.000000e+00
  %mul.i29 = fadd double 0.000000e+00, %mul.ir28
  %add.r30 = fadd double %7, %mul.r27
  %add.i31 = fadd double 0.000000e+00, %mul.i29
  %real32 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag33 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r30, double* %real32, align 8
  store double %add.i31, double* %imag33, align 4
  br label %if.end

if.end:                                           ; preds = %if.else25, %if.then16
  br label %if.end34

if.end34:                                         ; preds = %if.end, %if.then10
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real35 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag36 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real35, align 4
  store double %w.imag, double* %imag36, align 4
  br label %return

if.end37:                                         ; preds = %entry
  %9 = load double* %x, align 8
  %cmp38 = fcmp oeq double %9, 0.000000e+00
  br i1 %cmp38, label %if.then39, label %if.end66

if.then39:                                        ; preds = %if.end37
  %10 = load double* %y, align 8
  %call40 = call double @fabs(double %10) #6
  store double %call40, double* %r, align 8
  %11 = load double* %r, align 8
  %mul = fmul double 5.000000e-01, %11
  %call41 = call double @sqrt(double %mul) #4
  store double %call41, double* %r, align 8
  %12 = load double* %y, align 8
  %cmp42 = fcmp ogt double %12, 0.000000e+00
  br i1 %cmp42, label %if.then43, label %if.else52

if.then43:                                        ; preds = %if.then39
  %13 = load double* %r, align 8
  %14 = load double* %r, align 8
  %mul.rl44 = fmul double %14, 0.000000e+00
  %mul.r45 = fsub double %mul.rl44, 0.000000e+00
  %mul.ir46 = fmul double %14, 1.000000e+00
  %mul.i47 = fadd double 0.000000e+00, %mul.ir46
  %add.r48 = fadd double %13, %mul.r45
  %add.i49 = fadd double 0.000000e+00, %mul.i47
  %real50 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag51 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r48, double* %real50, align 8
  store double %add.i49, double* %imag51, align 4
  br label %if.end59

if.else52:                                        ; preds = %if.then39
  %15 = load double* %r, align 8
  %16 = load double* %r, align 8
  %mul.rl53 = fmul double %16, 0.000000e+00
  %mul.r54 = fsub double %mul.rl53, 0.000000e+00
  %mul.ir55 = fmul double %16, 1.000000e+00
  %mul.i56 = fadd double 0.000000e+00, %mul.ir55
  %sub.r = fsub double %15, %mul.r54
  %sub.i = fsub double 0.000000e+00, %mul.i56
  %real57 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag58 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %sub.r, double* %real57, align 8
  store double %sub.i, double* %imag58, align 4
  br label %if.end59

if.end59:                                         ; preds = %if.else52, %if.then43
  %w.realp60 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real61 = load double* %w.realp60, align 8
  %w.imagp62 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag63 = load double* %w.imagp62, align 4
  %real64 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag65 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real61, double* %real64, align 4
  store double %w.imag63, double* %imag65, align 4
  br label %return

if.end66:                                         ; preds = %if.end37
  %17 = load double* %x, align 8
  %call67 = call double @fabs(double %17) #6
  %cmp68 = fcmp ogt double %call67, 4.000000e+00
  br i1 %cmp68, label %if.then71, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end66
  %18 = load double* %y, align 8
  %call69 = call double @fabs(double %18) #6
  %cmp70 = fcmp ogt double %call69, 4.000000e+00
  br i1 %cmp70, label %if.then71, label %if.else74

if.then71:                                        ; preds = %lor.lhs.false, %if.end66
  %19 = load double* %x, align 8
  %mul72 = fmul double %19, 2.500000e-01
  store double %mul72, double* %x, align 8
  %20 = load double* %y, align 8
  %mul73 = fmul double %20, 2.500000e-01
  store double %mul73, double* %y, align 8
  store double 2.000000e+00, double* %scale, align 8
  br label %if.end77

if.else74:                                        ; preds = %lor.lhs.false
  %21 = load double* %x, align 8
  %mul75 = fmul double %21, 0x4350000000000000
  store double %mul75, double* %x, align 8
  %22 = load double* %y, align 8
  %mul76 = fmul double %22, 0x4350000000000000
  store double %mul76, double* %y, align 8
  store double 0x3E40000000000000, double* %scale, align 8
  br label %if.end77

if.end77:                                         ; preds = %if.else74, %if.then71
  %23 = load double* %x, align 8
  %24 = load double* %y, align 8
  %mul.rl78 = fmul double %24, 0.000000e+00
  %mul.r79 = fsub double %mul.rl78, 0.000000e+00
  %mul.ir80 = fmul double %24, 1.000000e+00
  %mul.i81 = fadd double 0.000000e+00, %mul.ir80
  %add.r82 = fadd double %23, %mul.r79
  %add.i83 = fadd double 0.000000e+00, %mul.i81
  %real84 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag85 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r82, double* %real84, align 8
  store double %add.i83, double* %imag85, align 4
  %w.realp86 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real87 = load double* %w.realp86, align 8
  %w.imagp88 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag89 = load double* %w.imagp88, align 4
  %real91 = getelementptr inbounds { double, double }* %tmp90, i32 0, i32 0
  %imag92 = getelementptr inbounds { double, double }* %tmp90, i32 0, i32 1
  store double %w.real87, double* %real91, align 4
  store double %w.imag89, double* %imag92, align 4
  %call93 = call double @cabs({ double, double }* byval align 4 %tmp90) #4
  store double %call93, double* %r, align 8
  %25 = load double* %x, align 8
  %cmp94 = fcmp ogt double %25, 0.000000e+00
  br i1 %cmp94, label %if.then95, label %if.else103

if.then95:                                        ; preds = %if.end77
  %26 = load double* %r, align 8
  %mul96 = fmul double 5.000000e-01, %26
  %27 = load double* %x, align 8
  %mul97 = fmul double 5.000000e-01, %27
  %add = fadd double %mul96, %mul97
  %call98 = call double @sqrt(double %add) #4
  store double %call98, double* %t, align 8
  %28 = load double* %scale, align 8
  %29 = load double* %y, align 8
  %mul99 = fmul double 5.000000e-01, %29
  %30 = load double* %t, align 8
  %div = fdiv double %mul99, %30
  %call100 = call double @fabs(double %div) #6
  %mul101 = fmul double %28, %call100
  store double %mul101, double* %r, align 8
  %31 = load double* %scale, align 8
  %32 = load double* %t, align 8
  %mul102 = fmul double %32, %31
  store double %mul102, double* %t, align 8
  br label %if.end112

if.else103:                                       ; preds = %if.end77
  %33 = load double* %r, align 8
  %mul104 = fmul double 5.000000e-01, %33
  %34 = load double* %x, align 8
  %mul105 = fmul double 5.000000e-01, %34
  %sub = fsub double %mul104, %mul105
  %call106 = call double @sqrt(double %sub) #4
  store double %call106, double* %r, align 8
  %35 = load double* %scale, align 8
  %36 = load double* %y, align 8
  %mul107 = fmul double 5.000000e-01, %36
  %37 = load double* %r, align 8
  %div108 = fdiv double %mul107, %37
  %call109 = call double @fabs(double %div108) #6
  %mul110 = fmul double %35, %call109
  store double %mul110, double* %t, align 8
  %38 = load double* %scale, align 8
  %39 = load double* %r, align 8
  %mul111 = fmul double %39, %38
  store double %mul111, double* %r, align 8
  br label %if.end112

if.end112:                                        ; preds = %if.else103, %if.then95
  %40 = load double* %y, align 8
  %cmp113 = fcmp olt double %40, 0.000000e+00
  br i1 %cmp113, label %if.then114, label %if.else123

if.then114:                                       ; preds = %if.end112
  %41 = load double* %t, align 8
  %42 = load double* %r, align 8
  %mul.rl115 = fmul double %42, 0.000000e+00
  %mul.r116 = fsub double %mul.rl115, 0.000000e+00
  %mul.ir117 = fmul double %42, 1.000000e+00
  %mul.i118 = fadd double 0.000000e+00, %mul.ir117
  %sub.r119 = fsub double %41, %mul.r116
  %sub.i120 = fsub double 0.000000e+00, %mul.i118
  %real121 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag122 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %sub.r119, double* %real121, align 8
  store double %sub.i120, double* %imag122, align 4
  br label %if.end132

if.else123:                                       ; preds = %if.end112
  %43 = load double* %t, align 8
  %44 = load double* %r, align 8
  %mul.rl124 = fmul double %44, 0.000000e+00
  %mul.r125 = fsub double %mul.rl124, 0.000000e+00
  %mul.ir126 = fmul double %44, 1.000000e+00
  %mul.i127 = fadd double 0.000000e+00, %mul.ir126
  %add.r128 = fadd double %43, %mul.r125
  %add.i129 = fadd double 0.000000e+00, %mul.i127
  %real130 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag131 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r128, double* %real130, align 8
  store double %add.i129, double* %imag131, align 4
  br label %if.end132

if.end132:                                        ; preds = %if.else123, %if.then114
  %w.realp133 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real134 = load double* %w.realp133, align 8
  %w.imagp135 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag136 = load double* %w.imagp135, align 4
  %real137 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag138 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real134, double* %real137, align 4
  store double %w.imag136, double* %imag138, align 4
  br label %return

return:                                           ; preds = %if.end132, %if.end59, %if.end34
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real139 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag140 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real139, align 4
  store double %agg.result.imag, double* %imag140, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @csqrtf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %r = alloca float, align 4
  %t = alloca float, align 4
  %scale = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %tmp94 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  store float %call, float* %x, align 4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @cimagf({ float, float }* byval align 4 %tmp5) #4
  store float %call8, float* %y, align 4
  %0 = load float* %y, align 4
  %cmp = fcmp oeq float %0, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %1 = load float* %x, align 4
  %cmp9 = fcmp olt float %1, 0.000000e+00
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.then
  %2 = load float* %x, align 4
  %sub = fsub float -0.000000e+00, %2
  %call11 = call float @sqrtf(float %sub) #4
  %mul.rl = fmul float %call11, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %call11, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float 0.000000e+00, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real12 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag13 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real12, align 4
  store float %add.i, float* %imag13, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real14 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag15 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real14, align 4
  store float %w.imag, float* %imag15, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %3 = load float* %x, align 4
  %cmp16 = fcmp oeq float %3, 0.000000e+00
  br i1 %cmp16, label %if.then17, label %if.else26

if.then17:                                        ; preds = %if.else
  %4 = load float* %y, align 4
  %mul.rl18 = fmul float %4, 0.000000e+00
  %mul.r19 = fsub float %mul.rl18, 0.000000e+00
  %mul.ir20 = fmul float %4, 1.000000e+00
  %mul.i21 = fadd float 0.000000e+00, %mul.ir20
  %add.r22 = fadd float 0.000000e+00, %mul.r19
  %add.i23 = fadd float 0.000000e+00, %mul.i21
  %real24 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag25 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %add.r22, float* %real24, align 4
  store float %add.i23, float* %imag25, align 4
  br label %return

if.else26:                                        ; preds = %if.else
  %5 = load float* %x, align 4
  %call27 = call float @sqrtf(float %5) #4
  %6 = load float* %y, align 4
  %mul.rl28 = fmul float %6, 0.000000e+00
  %mul.r29 = fsub float %mul.rl28, 0.000000e+00
  %mul.ir30 = fmul float %6, 1.000000e+00
  %mul.i31 = fadd float 0.000000e+00, %mul.ir30
  %add.r32 = fadd float %call27, %mul.r29
  %add.i33 = fadd float 0.000000e+00, %mul.i31
  %real34 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag35 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r32, float* %real34, align 4
  store float %add.i33, float* %imag35, align 4
  %w.realp36 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real37 = load float* %w.realp36, align 4
  %w.imagp38 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag39 = load float* %w.imagp38, align 4
  %real40 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag41 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real37, float* %real40, align 4
  store float %w.imag39, float* %imag41, align 4
  br label %return

if.end:                                           ; preds = %entry
  %7 = load float* %x, align 4
  %cmp42 = fcmp oeq float %7, 0.000000e+00
  br i1 %cmp42, label %if.then43, label %if.end70

if.then43:                                        ; preds = %if.end
  %8 = load float* %y, align 4
  %call44 = call float @fabsf(float %8) #6
  store float %call44, float* %r, align 4
  %9 = load float* %r, align 4
  %mul = fmul float 5.000000e-01, %9
  %call45 = call float @sqrtf(float %mul) #4
  store float %call45, float* %r, align 4
  %10 = load float* %y, align 4
  %cmp46 = fcmp ogt float %10, 0.000000e+00
  br i1 %cmp46, label %if.then47, label %if.else56

if.then47:                                        ; preds = %if.then43
  %11 = load float* %r, align 4
  %12 = load float* %r, align 4
  %mul.rl48 = fmul float %12, 0.000000e+00
  %mul.r49 = fsub float %mul.rl48, 0.000000e+00
  %mul.ir50 = fmul float %12, 1.000000e+00
  %mul.i51 = fadd float 0.000000e+00, %mul.ir50
  %add.r52 = fadd float %11, %mul.r49
  %add.i53 = fadd float 0.000000e+00, %mul.i51
  %real54 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag55 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r52, float* %real54, align 4
  store float %add.i53, float* %imag55, align 4
  br label %if.end63

if.else56:                                        ; preds = %if.then43
  %13 = load float* %r, align 4
  %14 = load float* %r, align 4
  %mul.rl57 = fmul float %14, 0.000000e+00
  %mul.r58 = fsub float %mul.rl57, 0.000000e+00
  %mul.ir59 = fmul float %14, 1.000000e+00
  %mul.i60 = fadd float 0.000000e+00, %mul.ir59
  %sub.r = fsub float %13, %mul.r58
  %sub.i = fsub float 0.000000e+00, %mul.i60
  %real61 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag62 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %sub.r, float* %real61, align 4
  store float %sub.i, float* %imag62, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.else56, %if.then47
  %w.realp64 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real65 = load float* %w.realp64, align 4
  %w.imagp66 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag67 = load float* %w.imagp66, align 4
  %real68 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag69 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real65, float* %real68, align 4
  store float %w.imag67, float* %imag69, align 4
  br label %return

if.end70:                                         ; preds = %if.end
  %15 = load float* %x, align 4
  %call71 = call float @fabsf(float %15) #6
  %cmp72 = fcmp ogt float %call71, 4.000000e+00
  br i1 %cmp72, label %if.then75, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end70
  %16 = load float* %y, align 4
  %call73 = call float @fabsf(float %16) #6
  %cmp74 = fcmp ogt float %call73, 4.000000e+00
  br i1 %cmp74, label %if.then75, label %if.else78

if.then75:                                        ; preds = %lor.lhs.false, %if.end70
  %17 = load float* %x, align 4
  %mul76 = fmul float %17, 2.500000e-01
  store float %mul76, float* %x, align 4
  %18 = load float* %y, align 4
  %mul77 = fmul float %18, 2.500000e-01
  store float %mul77, float* %y, align 4
  store float 2.000000e+00, float* %scale, align 4
  br label %if.end81

if.else78:                                        ; preds = %lor.lhs.false
  %19 = load float* %x, align 4
  %mul79 = fmul float %19, 0x4190000000000000
  store float %mul79, float* %x, align 4
  %20 = load float* %y, align 4
  %mul80 = fmul float %20, 0x4190000000000000
  store float %mul80, float* %y, align 4
  store float 0x3F20000000000000, float* %scale, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.else78, %if.then75
  %21 = load float* %x, align 4
  %22 = load float* %y, align 4
  %mul.rl82 = fmul float %22, 0.000000e+00
  %mul.r83 = fsub float %mul.rl82, 0.000000e+00
  %mul.ir84 = fmul float %22, 1.000000e+00
  %mul.i85 = fadd float 0.000000e+00, %mul.ir84
  %add.r86 = fadd float %21, %mul.r83
  %add.i87 = fadd float 0.000000e+00, %mul.i85
  %real88 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag89 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r86, float* %real88, align 4
  store float %add.i87, float* %imag89, align 4
  %w.realp90 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real91 = load float* %w.realp90, align 4
  %w.imagp92 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag93 = load float* %w.imagp92, align 4
  %real95 = getelementptr inbounds { float, float }* %tmp94, i32 0, i32 0
  %imag96 = getelementptr inbounds { float, float }* %tmp94, i32 0, i32 1
  store float %w.real91, float* %real95, align 4
  store float %w.imag93, float* %imag96, align 4
  %call97 = call float @cabsf({ float, float }* byval align 4 %tmp94) #4
  store float %call97, float* %r, align 4
  %23 = load float* %x, align 4
  %cmp98 = fcmp ogt float %23, 0.000000e+00
  br i1 %cmp98, label %if.then99, label %if.else107

if.then99:                                        ; preds = %if.end81
  %24 = load float* %r, align 4
  %mul100 = fmul float 5.000000e-01, %24
  %25 = load float* %x, align 4
  %mul101 = fmul float 5.000000e-01, %25
  %add = fadd float %mul100, %mul101
  %call102 = call float @sqrtf(float %add) #4
  store float %call102, float* %t, align 4
  %26 = load float* %scale, align 4
  %27 = load float* %y, align 4
  %mul103 = fmul float 5.000000e-01, %27
  %28 = load float* %t, align 4
  %div = fdiv float %mul103, %28
  %call104 = call float @fabsf(float %div) #6
  %mul105 = fmul float %26, %call104
  store float %mul105, float* %r, align 4
  %29 = load float* %scale, align 4
  %30 = load float* %t, align 4
  %mul106 = fmul float %30, %29
  store float %mul106, float* %t, align 4
  br label %if.end117

if.else107:                                       ; preds = %if.end81
  %31 = load float* %r, align 4
  %mul108 = fmul float 5.000000e-01, %31
  %32 = load float* %x, align 4
  %mul109 = fmul float 5.000000e-01, %32
  %sub110 = fsub float %mul108, %mul109
  %call111 = call float @sqrtf(float %sub110) #4
  store float %call111, float* %r, align 4
  %33 = load float* %scale, align 4
  %34 = load float* %y, align 4
  %mul112 = fmul float 5.000000e-01, %34
  %35 = load float* %r, align 4
  %div113 = fdiv float %mul112, %35
  %call114 = call float @fabsf(float %div113) #6
  %mul115 = fmul float %33, %call114
  store float %mul115, float* %t, align 4
  %36 = load float* %scale, align 4
  %37 = load float* %r, align 4
  %mul116 = fmul float %37, %36
  store float %mul116, float* %r, align 4
  br label %if.end117

if.end117:                                        ; preds = %if.else107, %if.then99
  %38 = load float* %y, align 4
  %cmp118 = fcmp olt float %38, 0.000000e+00
  br i1 %cmp118, label %if.then119, label %if.else128

if.then119:                                       ; preds = %if.end117
  %39 = load float* %t, align 4
  %40 = load float* %r, align 4
  %mul.rl120 = fmul float %40, 0.000000e+00
  %mul.r121 = fsub float %mul.rl120, 0.000000e+00
  %mul.ir122 = fmul float %40, 1.000000e+00
  %mul.i123 = fadd float 0.000000e+00, %mul.ir122
  %sub.r124 = fsub float %39, %mul.r121
  %sub.i125 = fsub float 0.000000e+00, %mul.i123
  %real126 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag127 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %sub.r124, float* %real126, align 4
  store float %sub.i125, float* %imag127, align 4
  br label %if.end137

if.else128:                                       ; preds = %if.end117
  %41 = load float* %t, align 4
  %42 = load float* %r, align 4
  %mul.rl129 = fmul float %42, 0.000000e+00
  %mul.r130 = fsub float %mul.rl129, 0.000000e+00
  %mul.ir131 = fmul float %42, 1.000000e+00
  %mul.i132 = fadd float 0.000000e+00, %mul.ir131
  %add.r133 = fadd float %41, %mul.r130
  %add.i134 = fadd float 0.000000e+00, %mul.i132
  %real135 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag136 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r133, float* %real135, align 4
  store float %add.i134, float* %imag136, align 4
  br label %if.end137

if.end137:                                        ; preds = %if.else128, %if.then119
  %w.realp138 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real139 = load float* %w.realp138, align 4
  %w.imagp140 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag141 = load float* %w.imagp140, align 4
  %real142 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag143 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real139, float* %real142, align 4
  store float %w.imag141, float* %imag143, align 4
  br label %return

return:                                           ; preds = %if.end137, %if.end63, %if.else26, %if.then17, %if.then10
  %43 = bitcast { float, float }* %retval to i64*
  %44 = load i64* %43, align 1
  ret i64 %44
}

; Function Attrs: nounwind
define void @ctan({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %d = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp6 = alloca { double, double }, align 4
  %tmp17 = alloca { double, double }, align 4
  %tmp32 = alloca { double, double }, align 4
  %tmp42 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  %mul = fmul double 2.000000e+00, %call
  %call1 = call double @cos(double %mul) #4
  %z.realp2 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real3 = load double* %z.realp2, align 8
  %z.imagp4 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag5 = load double* %z.imagp4, align 4
  %real7 = getelementptr inbounds { double, double }* %tmp6, i32 0, i32 0
  %imag8 = getelementptr inbounds { double, double }* %tmp6, i32 0, i32 1
  store double %z.real3, double* %real7, align 4
  store double %z.imag5, double* %imag8, align 4
  %call9 = call double @cimag({ double, double }* byval align 4 %tmp6) #4
  %mul10 = fmul double 2.000000e+00, %call9
  %call11 = call double @cosh(double %mul10) #4
  %add = fadd double %call1, %call11
  store double %add, double* %d, align 8
  %0 = load double* %d, align 8
  %call12 = call double @fabs(double %0) #6
  %cmp = fcmp olt double %call12, 2.500000e-01
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %z.realp13 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real14 = load double* %z.realp13, align 8
  %z.imagp15 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag16 = load double* %z.imagp15, align 4
  %real18 = getelementptr inbounds { double, double }* %tmp17, i32 0, i32 0
  %imag19 = getelementptr inbounds { double, double }* %tmp17, i32 0, i32 1
  store double %z.real14, double* %real18, align 4
  store double %z.imag16, double* %imag19, align 4
  %call20 = call double @_ctans({ double, double }* byval align 4 %tmp17) #5
  store double %call20, double* %d, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load double* %d, align 8
  %cmp21 = fcmp oeq double %1, 0.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end27

if.then22:                                        ; preds = %if.end
  %real23 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag24 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double 0x7FF8000000000000, double* %real23, align 8
  store double 0x7FF0000000000000, double* %imag24, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real25 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag26 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real25, align 4
  store double %w.imag, double* %imag26, align 4
  br label %return

if.end27:                                         ; preds = %if.end
  %z.realp28 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real29 = load double* %z.realp28, align 8
  %z.imagp30 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag31 = load double* %z.imagp30, align 4
  %real33 = getelementptr inbounds { double, double }* %tmp32, i32 0, i32 0
  %imag34 = getelementptr inbounds { double, double }* %tmp32, i32 0, i32 1
  store double %z.real29, double* %real33, align 4
  store double %z.imag31, double* %imag34, align 4
  %call35 = call double @creal({ double, double }* byval align 4 %tmp32) #4
  %mul36 = fmul double 2.000000e+00, %call35
  %call37 = call double @sin(double %mul36) #4
  %2 = load double* %d, align 8
  %div = fdiv double %call37, %2
  %z.realp38 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real39 = load double* %z.realp38, align 8
  %z.imagp40 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag41 = load double* %z.imagp40, align 4
  %real43 = getelementptr inbounds { double, double }* %tmp42, i32 0, i32 0
  %imag44 = getelementptr inbounds { double, double }* %tmp42, i32 0, i32 1
  store double %z.real39, double* %real43, align 4
  store double %z.imag41, double* %imag44, align 4
  %call45 = call double @cimag({ double, double }* byval align 4 %tmp42) #4
  %mul46 = fmul double 2.000000e+00, %call45
  %call47 = call double @sinh(double %mul46) #4
  %3 = load double* %d, align 8
  %div48 = fdiv double %call47, %3
  %mul.rl = fmul double %div48, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %div48, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %div, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real49 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag50 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real49, align 8
  store double %add.i, double* %imag50, align 4
  %w.realp51 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real52 = load double* %w.realp51, align 8
  %w.imagp53 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag54 = load double* %w.imagp53, align 4
  %real55 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag56 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real52, double* %real55, align 4
  store double %w.imag54, double* %imag56, align 4
  br label %return

return:                                           ; preds = %if.end27, %if.then22
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real57 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag58 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real57, align 4
  store double %agg.result.imag, double* %imag58, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @ctanf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %d = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp6 = alloca { float, float }, align 4
  %tmp17 = alloca { float, float }, align 4
  %tmp32 = alloca { float, float }, align 4
  %tmp42 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  %mul = fmul float 2.000000e+00, %call
  %call1 = call float @cosf(float %mul) #4
  %z.realp2 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real3 = load float* %z.realp2, align 4
  %z.imagp4 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag5 = load float* %z.imagp4, align 4
  %real7 = getelementptr inbounds { float, float }* %tmp6, i32 0, i32 0
  %imag8 = getelementptr inbounds { float, float }* %tmp6, i32 0, i32 1
  store float %z.real3, float* %real7, align 4
  store float %z.imag5, float* %imag8, align 4
  %call9 = call float @cimagf({ float, float }* byval align 4 %tmp6) #4
  %mul10 = fmul float 2.000000e+00, %call9
  %call11 = call float @coshf(float %mul10) #4
  %add = fadd float %call1, %call11
  store float %add, float* %d, align 4
  %0 = load float* %d, align 4
  %call12 = call float @fabsf(float %0) #6
  %cmp = fcmp olt float %call12, 2.500000e-01
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %z.realp13 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real14 = load float* %z.realp13, align 4
  %z.imagp15 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag16 = load float* %z.imagp15, align 4
  %real18 = getelementptr inbounds { float, float }* %tmp17, i32 0, i32 0
  %imag19 = getelementptr inbounds { float, float }* %tmp17, i32 0, i32 1
  store float %z.real14, float* %real18, align 4
  store float %z.imag16, float* %imag19, align 4
  %call20 = call float @_ctansf({ float, float }* byval align 4 %tmp17) #5
  store float %call20, float* %d, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %1 = load float* %d, align 4
  %cmp21 = fcmp oeq float %1, 0.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end27

if.then22:                                        ; preds = %if.end
  %real23 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag24 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float 0x7FF8000000000000, float* %real23, align 4
  store float 0x7FF0000000000000, float* %imag24, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real25 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag26 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real25, align 4
  store float %w.imag, float* %imag26, align 4
  br label %return

if.end27:                                         ; preds = %if.end
  %z.realp28 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real29 = load float* %z.realp28, align 4
  %z.imagp30 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag31 = load float* %z.imagp30, align 4
  %real33 = getelementptr inbounds { float, float }* %tmp32, i32 0, i32 0
  %imag34 = getelementptr inbounds { float, float }* %tmp32, i32 0, i32 1
  store float %z.real29, float* %real33, align 4
  store float %z.imag31, float* %imag34, align 4
  %call35 = call float @crealf({ float, float }* byval align 4 %tmp32) #4
  %mul36 = fmul float 2.000000e+00, %call35
  %call37 = call float @sinf(float %mul36) #4
  %2 = load float* %d, align 4
  %div = fdiv float %call37, %2
  %z.realp38 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real39 = load float* %z.realp38, align 4
  %z.imagp40 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag41 = load float* %z.imagp40, align 4
  %real43 = getelementptr inbounds { float, float }* %tmp42, i32 0, i32 0
  %imag44 = getelementptr inbounds { float, float }* %tmp42, i32 0, i32 1
  store float %z.real39, float* %real43, align 4
  store float %z.imag41, float* %imag44, align 4
  %call45 = call float @cimagf({ float, float }* byval align 4 %tmp42) #4
  %mul46 = fmul float 2.000000e+00, %call45
  %call47 = call float @sinhf(float %mul46) #4
  %3 = load float* %d, align 4
  %div48 = fdiv float %call47, %3
  %mul.rl = fmul float %div48, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %div48, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %div, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real49 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag50 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real49, align 4
  store float %add.i, float* %imag50, align 4
  %w.realp51 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real52 = load float* %w.realp51, align 4
  %w.imagp53 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag54 = load float* %w.imagp53, align 4
  %real55 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag56 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real52, float* %real55, align 4
  store float %w.imag54, float* %imag56, align 4
  br label %return

return:                                           ; preds = %if.end27, %if.then22
  %4 = bitcast { float, float }* %retval to i64*
  %5 = load i64* %4, align 1
  ret i64 %5
}

; Function Attrs: nounwind
define void @ctanh({ double, double }* noalias sret %agg.result, { double, double }* byval align 4 %z) #2 {
entry:
  %w = alloca { double, double }, align 8
  %x = alloca double, align 8
  %y = alloca double, align 8
  %d = alloca double, align 8
  %tmp = alloca { double, double }, align 4
  %tmp5 = alloca { double, double }, align 4
  %z.realp = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real = load double* %z.realp, align 8
  %z.imagp = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag = load double* %z.imagp, align 4
  %real = getelementptr inbounds { double, double }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { double, double }* %tmp, i32 0, i32 1
  store double %z.real, double* %real, align 4
  store double %z.imag, double* %imag, align 4
  %call = call double @creal({ double, double }* byval align 4 %tmp) #4
  store double %call, double* %x, align 8
  %z.realp1 = getelementptr inbounds { double, double }* %z, i32 0, i32 0
  %z.real2 = load double* %z.realp1, align 8
  %z.imagp3 = getelementptr inbounds { double, double }* %z, i32 0, i32 1
  %z.imag4 = load double* %z.imagp3, align 4
  %real6 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { double, double }* %tmp5, i32 0, i32 1
  store double %z.real2, double* %real6, align 4
  store double %z.imag4, double* %imag7, align 4
  %call8 = call double @cimag({ double, double }* byval align 4 %tmp5) #4
  store double %call8, double* %y, align 8
  %0 = load double* %x, align 8
  %mul = fmul double 2.000000e+00, %0
  %call9 = call double @cosh(double %mul) #4
  %1 = load double* %y, align 8
  %mul10 = fmul double 2.000000e+00, %1
  %call11 = call double @cos(double %mul10) #4
  %add = fadd double %call9, %call11
  store double %add, double* %d, align 8
  %2 = load double* %x, align 8
  %mul12 = fmul double 2.000000e+00, %2
  %call13 = call double @sinh(double %mul12) #4
  %3 = load double* %d, align 8
  %div = fdiv double %call13, %3
  %4 = load double* %y, align 8
  %mul14 = fmul double 2.000000e+00, %4
  %call15 = call double @sin(double %mul14) #4
  %5 = load double* %d, align 8
  %div16 = fdiv double %call15, %5
  %mul.rl = fmul double %div16, 0.000000e+00
  %mul.r = fsub double %mul.rl, 0.000000e+00
  %mul.ir = fmul double %div16, 1.000000e+00
  %mul.i = fadd double 0.000000e+00, %mul.ir
  %add.r = fadd double %div, %mul.r
  %add.i = fadd double 0.000000e+00, %mul.i
  %real17 = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %imag18 = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  store double %add.r, double* %real17, align 8
  store double %add.i, double* %imag18, align 4
  %w.realp = getelementptr inbounds { double, double }* %w, i32 0, i32 0
  %w.real = load double* %w.realp, align 8
  %w.imagp = getelementptr inbounds { double, double }* %w, i32 0, i32 1
  %w.imag = load double* %w.imagp, align 4
  %real19 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag20 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %w.real, double* %real19, align 4
  store double %w.imag, double* %imag20, align 4
  %agg.result.realp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %agg.result.real = load double* %agg.result.realp, align 4
  %agg.result.imagp = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  %agg.result.imag = load double* %agg.result.imagp, align 4
  %real21 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 0
  %imag22 = getelementptr inbounds { double, double }* %agg.result, i32 0, i32 1
  store double %agg.result.real, double* %real21, align 4
  store double %agg.result.imag, double* %imag22, align 4
  ret void
}

; Function Attrs: nounwind
define i64 @ctanhf({ float, float }* byval align 4 %z) #2 {
entry:
  %retval = alloca { float, float }, align 4
  %w = alloca { float, float }, align 4
  %x = alloca float, align 4
  %y = alloca float, align 4
  %d = alloca float, align 4
  %tmp = alloca { float, float }, align 4
  %tmp5 = alloca { float, float }, align 4
  %z.realp = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real = load float* %z.realp, align 4
  %z.imagp = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag = load float* %z.imagp, align 4
  %real = getelementptr inbounds { float, float }* %tmp, i32 0, i32 0
  %imag = getelementptr inbounds { float, float }* %tmp, i32 0, i32 1
  store float %z.real, float* %real, align 4
  store float %z.imag, float* %imag, align 4
  %call = call float @crealf({ float, float }* byval align 4 %tmp) #4
  store float %call, float* %x, align 4
  %z.realp1 = getelementptr inbounds { float, float }* %z, i32 0, i32 0
  %z.real2 = load float* %z.realp1, align 4
  %z.imagp3 = getelementptr inbounds { float, float }* %z, i32 0, i32 1
  %z.imag4 = load float* %z.imagp3, align 4
  %real6 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 0
  %imag7 = getelementptr inbounds { float, float }* %tmp5, i32 0, i32 1
  store float %z.real2, float* %real6, align 4
  store float %z.imag4, float* %imag7, align 4
  %call8 = call float @cimagf({ float, float }* byval align 4 %tmp5) #4
  store float %call8, float* %y, align 4
  %0 = load float* %x, align 4
  %mul = fmul float 2.000000e+00, %0
  %call9 = call float @coshf(float %mul) #4
  %1 = load float* %y, align 4
  %mul10 = fmul float 2.000000e+00, %1
  %call11 = call float @cosf(float %mul10) #4
  %add = fadd float %call9, %call11
  store float %add, float* %d, align 4
  %2 = load float* %x, align 4
  %mul12 = fmul float 2.000000e+00, %2
  %call13 = call float @sinhf(float %mul12) #4
  %3 = load float* %d, align 4
  %div = fdiv float %call13, %3
  %4 = load float* %y, align 4
  %mul14 = fmul float 2.000000e+00, %4
  %call15 = call float @sinf(float %mul14) #4
  %5 = load float* %d, align 4
  %div16 = fdiv float %call15, %5
  %mul.rl = fmul float %div16, 0.000000e+00
  %mul.r = fsub float %mul.rl, 0.000000e+00
  %mul.ir = fmul float %div16, 1.000000e+00
  %mul.i = fadd float 0.000000e+00, %mul.ir
  %add.r = fadd float %div, %mul.r
  %add.i = fadd float 0.000000e+00, %mul.i
  %real17 = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %imag18 = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  store float %add.r, float* %real17, align 4
  store float %add.i, float* %imag18, align 4
  %w.realp = getelementptr inbounds { float, float }* %w, i32 0, i32 0
  %w.real = load float* %w.realp, align 4
  %w.imagp = getelementptr inbounds { float, float }* %w, i32 0, i32 1
  %w.imag = load float* %w.imagp, align 4
  %real19 = getelementptr inbounds { float, float }* %retval, i32 0, i32 0
  %imag20 = getelementptr inbounds { float, float }* %retval, i32 0, i32 1
  store float %w.real, float* %real19, align 4
  store float %w.imag, float* %imag20, align 4
  %6 = bitcast { float, float }* %retval to i64*
  %7 = load i64* %6, align 1
  ret i64 %7
}

; Function Attrs: nounwind
define double @__ieee754_acos(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %z = alloca double, align 8
  %p = alloca double, align 8
  %q = alloca double, align 8
  %r = alloca double, align 8
  %w = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %df = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %lx = alloca i32, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  %sl_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1072693248
  br i1 %cmp, label %if.then, label %if.end11

if.then:                                          ; preds = %do.end
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %4 = load double* %x.addr, align 8
  %value2 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %4, double* %value2, align 4
  %parts3 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts3, i32 0, i32 0
  %5 = load i32* %lsw, align 4
  store i32 %5, i32* %lx, align 4
  br label %do.end4

do.end4:                                          ; preds = %do.body1
  %6 = load i32* %ix, align 4
  %sub = sub nsw i32 %6, 1072693248
  %7 = load i32* %lx, align 4
  %or = or i32 %sub, %7
  %cmp5 = icmp eq i32 %or, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %do.end4
  %8 = load i32* %hx, align 4
  %cmp7 = icmp sgt i32 %8, 0
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.then6
  store double 0.000000e+00, double* %retval
  br label %return

if.else:                                          ; preds = %if.then6
  store double 0x400921FB54442D18, double* %retval
  br label %return

if.end:                                           ; preds = %do.end4
  %9 = load double* %x.addr, align 8
  %10 = load double* %x.addr, align 8
  %sub9 = fsub double %9, %10
  %11 = load double* %x.addr, align 8
  %12 = load double* %x.addr, align 8
  %sub10 = fsub double %11, %12
  %div = fdiv double %sub9, %sub10
  store double %div, double* %retval
  br label %return

if.end11:                                         ; preds = %do.end
  %13 = load i32* %ix, align 4
  %cmp12 = icmp slt i32 %13, 1071644672
  br i1 %cmp12, label %if.then13, label %if.else40

if.then13:                                        ; preds = %if.end11
  %14 = load i32* %ix, align 4
  %cmp14 = icmp sle i32 %14, 1012924416
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.then13
  store double 0x3FF921FB54442D18, double* %retval
  br label %return

if.end16:                                         ; preds = %if.then13
  %15 = load double* %x.addr, align 8
  %16 = load double* %x.addr, align 8
  %mul = fmul double %15, %16
  store double %mul, double* %z, align 8
  %17 = load double* %z, align 8
  %18 = load double* %z, align 8
  %19 = load double* %z, align 8
  %20 = load double* %z, align 8
  %21 = load double* %z, align 8
  %22 = load double* %z, align 8
  %mul17 = fmul double %22, 0x3F023DE10DFDF709
  %add = fadd double 0x3F49EFE07501B288, %mul17
  %mul18 = fmul double %21, %add
  %add19 = fadd double 0xBFA48228B5688F3B, %mul18
  %mul20 = fmul double %20, %add19
  %add21 = fadd double 0x3FC9C1550E884455, %mul20
  %mul22 = fmul double %19, %add21
  %add23 = fadd double 0xBFD4D61203EB6F7D, %mul22
  %mul24 = fmul double %18, %add23
  %add25 = fadd double 0x3FC5555555555555, %mul24
  %mul26 = fmul double %17, %add25
  store double %mul26, double* %p, align 8
  %23 = load double* %z, align 8
  %24 = load double* %z, align 8
  %25 = load double* %z, align 8
  %26 = load double* %z, align 8
  %mul27 = fmul double %26, 0x3FB3B8C5B12E9282
  %add28 = fadd double 0xBFE6066C1B8D0159, %mul27
  %mul29 = fmul double %25, %add28
  %add30 = fadd double 0x40002AE59C598AC8, %mul29
  %mul31 = fmul double %24, %add30
  %add32 = fadd double 0xC0033A271C8A2D4B, %mul31
  %mul33 = fmul double %23, %add32
  %add34 = fadd double 1.000000e+00, %mul33
  store double %add34, double* %q, align 8
  %27 = load double* %p, align 8
  %28 = load double* %q, align 8
  %div35 = fdiv double %27, %28
  store double %div35, double* %r, align 8
  %29 = load double* %x.addr, align 8
  %30 = load double* %x.addr, align 8
  %31 = load double* %r, align 8
  %mul36 = fmul double %30, %31
  %sub37 = fsub double 0x3C91A62633145C07, %mul36
  %sub38 = fsub double %29, %sub37
  %sub39 = fsub double 0x3FF921FB54442D18, %sub38
  store double %sub39, double* %retval
  br label %return

if.else40:                                        ; preds = %if.end11
  %32 = load i32* %hx, align 4
  %cmp41 = icmp slt i32 %32, 0
  br i1 %cmp41, label %if.then42, label %if.else70

if.then42:                                        ; preds = %if.else40
  %33 = load double* %x.addr, align 8
  %add43 = fadd double 1.000000e+00, %33
  %mul44 = fmul double %add43, 5.000000e-01
  store double %mul44, double* %z, align 8
  %34 = load double* %z, align 8
  %35 = load double* %z, align 8
  %36 = load double* %z, align 8
  %37 = load double* %z, align 8
  %38 = load double* %z, align 8
  %39 = load double* %z, align 8
  %mul45 = fmul double %39, 0x3F023DE10DFDF709
  %add46 = fadd double 0x3F49EFE07501B288, %mul45
  %mul47 = fmul double %38, %add46
  %add48 = fadd double 0xBFA48228B5688F3B, %mul47
  %mul49 = fmul double %37, %add48
  %add50 = fadd double 0x3FC9C1550E884455, %mul49
  %mul51 = fmul double %36, %add50
  %add52 = fadd double 0xBFD4D61203EB6F7D, %mul51
  %mul53 = fmul double %35, %add52
  %add54 = fadd double 0x3FC5555555555555, %mul53
  %mul55 = fmul double %34, %add54
  store double %mul55, double* %p, align 8
  %40 = load double* %z, align 8
  %41 = load double* %z, align 8
  %42 = load double* %z, align 8
  %43 = load double* %z, align 8
  %mul56 = fmul double %43, 0x3FB3B8C5B12E9282
  %add57 = fadd double 0xBFE6066C1B8D0159, %mul56
  %mul58 = fmul double %42, %add57
  %add59 = fadd double 0x40002AE59C598AC8, %mul58
  %mul60 = fmul double %41, %add59
  %add61 = fadd double 0xC0033A271C8A2D4B, %mul60
  %mul62 = fmul double %40, %add61
  %add63 = fadd double 1.000000e+00, %mul62
  store double %add63, double* %q, align 8
  %44 = load double* %z, align 8
  %call = call double @__ieee754_sqrt(double %44) #5
  store double %call, double* %s, align 8
  %45 = load double* %p, align 8
  %46 = load double* %q, align 8
  %div64 = fdiv double %45, %46
  store double %div64, double* %r, align 8
  %47 = load double* %r, align 8
  %48 = load double* %s, align 8
  %mul65 = fmul double %47, %48
  %sub66 = fsub double %mul65, 0x3C91A62633145C07
  store double %sub66, double* %w, align 8
  %49 = load double* %s, align 8
  %50 = load double* %w, align 8
  %add67 = fadd double %49, %50
  %mul68 = fmul double 2.000000e+00, %add67
  %sub69 = fsub double 0x400921FB54442D18, %mul68
  store double %sub69, double* %retval
  br label %return

if.else70:                                        ; preds = %if.else40
  %51 = load double* %x.addr, align 8
  %sub71 = fsub double 1.000000e+00, %51
  %mul72 = fmul double %sub71, 5.000000e-01
  store double %mul72, double* %z, align 8
  %52 = load double* %z, align 8
  %call73 = call double @__ieee754_sqrt(double %52) #5
  store double %call73, double* %s, align 8
  %53 = load double* %s, align 8
  store double %53, double* %df, align 8
  br label %do.body74

do.body74:                                        ; preds = %if.else70
  %54 = load double* %df, align 8
  %value75 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  store double %54, double* %value75, align 4
  %parts76 = bitcast %union.ieee_double_shape_type* %sl_u to %struct.anon*
  %lsw77 = getelementptr inbounds %struct.anon* %parts76, i32 0, i32 0
  store i32 0, i32* %lsw77, align 4
  %value78 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  %55 = load double* %value78, align 4
  store double %55, double* %df, align 8
  br label %do.end79

do.end79:                                         ; preds = %do.body74
  %56 = load double* %z, align 8
  %57 = load double* %df, align 8
  %58 = load double* %df, align 8
  %mul80 = fmul double %57, %58
  %sub81 = fsub double %56, %mul80
  %59 = load double* %s, align 8
  %60 = load double* %df, align 8
  %add82 = fadd double %59, %60
  %div83 = fdiv double %sub81, %add82
  store double %div83, double* %c, align 8
  %61 = load double* %z, align 8
  %62 = load double* %z, align 8
  %63 = load double* %z, align 8
  %64 = load double* %z, align 8
  %65 = load double* %z, align 8
  %66 = load double* %z, align 8
  %mul84 = fmul double %66, 0x3F023DE10DFDF709
  %add85 = fadd double 0x3F49EFE07501B288, %mul84
  %mul86 = fmul double %65, %add85
  %add87 = fadd double 0xBFA48228B5688F3B, %mul86
  %mul88 = fmul double %64, %add87
  %add89 = fadd double 0x3FC9C1550E884455, %mul88
  %mul90 = fmul double %63, %add89
  %add91 = fadd double 0xBFD4D61203EB6F7D, %mul90
  %mul92 = fmul double %62, %add91
  %add93 = fadd double 0x3FC5555555555555, %mul92
  %mul94 = fmul double %61, %add93
  store double %mul94, double* %p, align 8
  %67 = load double* %z, align 8
  %68 = load double* %z, align 8
  %69 = load double* %z, align 8
  %70 = load double* %z, align 8
  %mul95 = fmul double %70, 0x3FB3B8C5B12E9282
  %add96 = fadd double 0xBFE6066C1B8D0159, %mul95
  %mul97 = fmul double %69, %add96
  %add98 = fadd double 0x40002AE59C598AC8, %mul97
  %mul99 = fmul double %68, %add98
  %add100 = fadd double 0xC0033A271C8A2D4B, %mul99
  %mul101 = fmul double %67, %add100
  %add102 = fadd double 1.000000e+00, %mul101
  store double %add102, double* %q, align 8
  %71 = load double* %p, align 8
  %72 = load double* %q, align 8
  %div103 = fdiv double %71, %72
  store double %div103, double* %r, align 8
  %73 = load double* %r, align 8
  %74 = load double* %s, align 8
  %mul104 = fmul double %73, %74
  %75 = load double* %c, align 8
  %add105 = fadd double %mul104, %75
  store double %add105, double* %w, align 8
  %76 = load double* %df, align 8
  %77 = load double* %w, align 8
  %add106 = fadd double %76, %77
  %mul107 = fmul double 2.000000e+00, %add106
  store double %mul107, double* %retval
  br label %return

return:                                           ; preds = %do.end79, %if.then42, %if.end16, %if.then15, %if.end, %if.else, %if.then8
  %78 = load double* %retval
  ret double %78
}

; Function Attrs: nounwind
define double @__ieee754_acosh(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %t = alloca double, align 8
  %hx = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %cmp = icmp slt i32 %3, 1072693248
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double* %x.addr, align 8
  %sub = fsub double %4, %5
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %sub2 = fsub double %6, %7
  %div = fdiv double %sub, %sub2
  store double %div, double* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %8 = load i32* %hx, align 4
  %cmp3 = icmp sge i32 %8, 1102053376
  br i1 %cmp3, label %if.then4, label %if.else9

if.then4:                                         ; preds = %if.else
  %9 = load i32* %hx, align 4
  %cmp5 = icmp sge i32 %9, 2146435072
  br i1 %cmp5, label %if.then6, label %if.else7

if.then6:                                         ; preds = %if.then4
  %10 = load double* %x.addr, align 8
  %11 = load double* %x.addr, align 8
  %add = fadd double %10, %11
  store double %add, double* %retval
  br label %return

if.else7:                                         ; preds = %if.then4
  %12 = load double* %x.addr, align 8
  %call = call double @__ieee754_log(double %12) #5
  %add8 = fadd double %call, 0x3FE62E42FEFA39EF
  store double %add8, double* %retval
  br label %return

if.else9:                                         ; preds = %if.else
  %13 = load i32* %hx, align 4
  %sub10 = sub nsw i32 %13, 1072693248
  %14 = load i32* %lx, align 4
  %or = or i32 %sub10, %14
  %cmp11 = icmp eq i32 %or, 0
  br i1 %cmp11, label %if.then12, label %if.else13

if.then12:                                        ; preds = %if.else9
  store double 0.000000e+00, double* %retval
  br label %return

if.else13:                                        ; preds = %if.else9
  %15 = load i32* %hx, align 4
  %cmp14 = icmp sgt i32 %15, 1073741824
  br i1 %cmp14, label %if.then15, label %if.else23

if.then15:                                        ; preds = %if.else13
  %16 = load double* %x.addr, align 8
  %17 = load double* %x.addr, align 8
  %mul = fmul double %16, %17
  store double %mul, double* %t, align 8
  %18 = load double* %x.addr, align 8
  %mul16 = fmul double 2.000000e+00, %18
  %19 = load double* %x.addr, align 8
  %20 = load double* %t, align 8
  %sub17 = fsub double %20, 1.000000e+00
  %call18 = call double @__ieee754_sqrt(double %sub17) #5
  %add19 = fadd double %19, %call18
  %div20 = fdiv double 1.000000e+00, %add19
  %sub21 = fsub double %mul16, %div20
  %call22 = call double @__ieee754_log(double %sub21) #5
  store double %call22, double* %retval
  br label %return

if.else23:                                        ; preds = %if.else13
  %21 = load double* %x.addr, align 8
  %sub24 = fsub double %21, 1.000000e+00
  store double %sub24, double* %t, align 8
  %22 = load double* %t, align 8
  %23 = load double* %t, align 8
  %mul25 = fmul double 2.000000e+00, %23
  %24 = load double* %t, align 8
  %25 = load double* %t, align 8
  %mul26 = fmul double %24, %25
  %add27 = fadd double %mul25, %mul26
  %call28 = call double @__ieee754_sqrt(double %add27) #5
  %add29 = fadd double %22, %call28
  %call30 = call double @log1p(double %add29) #4
  store double %call30, double* %retval
  br label %return

return:                                           ; preds = %if.else23, %if.then15, %if.then12, %if.else7, %if.then6, %if.then
  %26 = load double* %retval
  ret double %26
}

; Function Attrs: nounwind
define double @__ieee754_asin(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %t = alloca double, align 8
  %w = alloca double, align 8
  %p = alloca double, align 8
  %q = alloca double, align 8
  %c = alloca double, align 8
  %r = alloca double, align 8
  %s = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %lx = alloca i32, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  %sl_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1072693248
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %4 = load double* %x.addr, align 8
  %value2 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %4, double* %value2, align 4
  %parts3 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts3, i32 0, i32 0
  %5 = load i32* %lsw, align 4
  store i32 %5, i32* %lx, align 4
  br label %do.end4

do.end4:                                          ; preds = %do.body1
  %6 = load i32* %ix, align 4
  %sub = sub nsw i32 %6, 1072693248
  %7 = load i32* %lx, align 4
  %or = or i32 %sub, %7
  %cmp5 = icmp eq i32 %or, 0
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %do.end4
  %8 = load double* %x.addr, align 8
  %mul = fmul double %8, 0x3FF921FB54442D18
  %9 = load double* %x.addr, align 8
  %mul7 = fmul double %9, 0x3C91A62633145C07
  %add = fadd double %mul, %mul7
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %do.end4
  %10 = load double* %x.addr, align 8
  %11 = load double* %x.addr, align 8
  %sub8 = fsub double %10, %11
  %12 = load double* %x.addr, align 8
  %13 = load double* %x.addr, align 8
  %sub9 = fsub double %12, %13
  %div = fdiv double %sub8, %sub9
  store double %div, double* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %14 = load i32* %ix, align 4
  %cmp10 = icmp slt i32 %14, 1071644672
  br i1 %cmp10, label %if.then11, label %if.end43

if.then11:                                        ; preds = %if.else
  %15 = load i32* %ix, align 4
  %cmp12 = icmp slt i32 %15, 1044381696
  br i1 %cmp12, label %if.then13, label %if.else18

if.then13:                                        ; preds = %if.then11
  %16 = load double* %x.addr, align 8
  %add14 = fadd double 1.000000e+300, %16
  %cmp15 = fcmp ogt double %add14, 1.000000e+00
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.then13
  %17 = load double* %x.addr, align 8
  store double %17, double* %retval
  br label %return

if.end17:                                         ; preds = %if.then13
  br label %if.end42

if.else18:                                        ; preds = %if.then11
  %18 = load double* %x.addr, align 8
  %19 = load double* %x.addr, align 8
  %mul19 = fmul double %18, %19
  store double %mul19, double* %t, align 8
  %20 = load double* %t, align 8
  %21 = load double* %t, align 8
  %22 = load double* %t, align 8
  %23 = load double* %t, align 8
  %24 = load double* %t, align 8
  %25 = load double* %t, align 8
  %mul20 = fmul double %25, 0x3F023DE10DFDF709
  %add21 = fadd double 0x3F49EFE07501B288, %mul20
  %mul22 = fmul double %24, %add21
  %add23 = fadd double 0xBFA48228B5688F3B, %mul22
  %mul24 = fmul double %23, %add23
  %add25 = fadd double 0x3FC9C1550E884455, %mul24
  %mul26 = fmul double %22, %add25
  %add27 = fadd double 0xBFD4D61203EB6F7D, %mul26
  %mul28 = fmul double %21, %add27
  %add29 = fadd double 0x3FC5555555555555, %mul28
  %mul30 = fmul double %20, %add29
  store double %mul30, double* %p, align 8
  %26 = load double* %t, align 8
  %27 = load double* %t, align 8
  %28 = load double* %t, align 8
  %29 = load double* %t, align 8
  %mul31 = fmul double %29, 0x3FB3B8C5B12E9282
  %add32 = fadd double 0xBFE6066C1B8D0159, %mul31
  %mul33 = fmul double %28, %add32
  %add34 = fadd double 0x40002AE59C598AC8, %mul33
  %mul35 = fmul double %27, %add34
  %add36 = fadd double 0xC0033A271C8A2D4B, %mul35
  %mul37 = fmul double %26, %add36
  %add38 = fadd double 1.000000e+00, %mul37
  store double %add38, double* %q, align 8
  %30 = load double* %p, align 8
  %31 = load double* %q, align 8
  %div39 = fdiv double %30, %31
  store double %div39, double* %w, align 8
  %32 = load double* %x.addr, align 8
  %33 = load double* %x.addr, align 8
  %34 = load double* %w, align 8
  %mul40 = fmul double %33, %34
  %add41 = fadd double %32, %mul40
  store double %add41, double* %retval
  br label %return

if.end42:                                         ; preds = %if.end17
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43
  %35 = load double* %x.addr, align 8
  %call = call double @fabs(double %35) #6
  %sub45 = fsub double 1.000000e+00, %call
  store double %sub45, double* %w, align 8
  %36 = load double* %w, align 8
  %mul46 = fmul double %36, 5.000000e-01
  store double %mul46, double* %t, align 8
  %37 = load double* %t, align 8
  %38 = load double* %t, align 8
  %39 = load double* %t, align 8
  %40 = load double* %t, align 8
  %41 = load double* %t, align 8
  %42 = load double* %t, align 8
  %mul47 = fmul double %42, 0x3F023DE10DFDF709
  %add48 = fadd double 0x3F49EFE07501B288, %mul47
  %mul49 = fmul double %41, %add48
  %add50 = fadd double 0xBFA48228B5688F3B, %mul49
  %mul51 = fmul double %40, %add50
  %add52 = fadd double 0x3FC9C1550E884455, %mul51
  %mul53 = fmul double %39, %add52
  %add54 = fadd double 0xBFD4D61203EB6F7D, %mul53
  %mul55 = fmul double %38, %add54
  %add56 = fadd double 0x3FC5555555555555, %mul55
  %mul57 = fmul double %37, %add56
  store double %mul57, double* %p, align 8
  %43 = load double* %t, align 8
  %44 = load double* %t, align 8
  %45 = load double* %t, align 8
  %46 = load double* %t, align 8
  %mul58 = fmul double %46, 0x3FB3B8C5B12E9282
  %add59 = fadd double 0xBFE6066C1B8D0159, %mul58
  %mul60 = fmul double %45, %add59
  %add61 = fadd double 0x40002AE59C598AC8, %mul60
  %mul62 = fmul double %44, %add61
  %add63 = fadd double 0xC0033A271C8A2D4B, %mul62
  %mul64 = fmul double %43, %add63
  %add65 = fadd double 1.000000e+00, %mul64
  store double %add65, double* %q, align 8
  %47 = load double* %t, align 8
  %call66 = call double @__ieee754_sqrt(double %47) #5
  store double %call66, double* %s, align 8
  %48 = load i32* %ix, align 4
  %cmp67 = icmp sge i32 %48, 1072640819
  br i1 %cmp67, label %if.then68, label %if.else75

if.then68:                                        ; preds = %if.end44
  %49 = load double* %p, align 8
  %50 = load double* %q, align 8
  %div69 = fdiv double %49, %50
  store double %div69, double* %w, align 8
  %51 = load double* %s, align 8
  %52 = load double* %s, align 8
  %53 = load double* %w, align 8
  %mul70 = fmul double %52, %53
  %add71 = fadd double %51, %mul70
  %mul72 = fmul double 2.000000e+00, %add71
  %sub73 = fsub double %mul72, 0x3C91A62633145C07
  %sub74 = fsub double 0x3FF921FB54442D18, %sub73
  store double %sub74, double* %t, align 8
  br label %if.end96

if.else75:                                        ; preds = %if.end44
  %54 = load double* %s, align 8
  store double %54, double* %w, align 8
  br label %do.body76

do.body76:                                        ; preds = %if.else75
  %55 = load double* %w, align 8
  %value77 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  store double %55, double* %value77, align 4
  %parts78 = bitcast %union.ieee_double_shape_type* %sl_u to %struct.anon*
  %lsw79 = getelementptr inbounds %struct.anon* %parts78, i32 0, i32 0
  store i32 0, i32* %lsw79, align 4
  %value80 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  %56 = load double* %value80, align 4
  store double %56, double* %w, align 8
  br label %do.end81

do.end81:                                         ; preds = %do.body76
  %57 = load double* %t, align 8
  %58 = load double* %w, align 8
  %59 = load double* %w, align 8
  %mul82 = fmul double %58, %59
  %sub83 = fsub double %57, %mul82
  %60 = load double* %s, align 8
  %61 = load double* %w, align 8
  %add84 = fadd double %60, %61
  %div85 = fdiv double %sub83, %add84
  store double %div85, double* %c, align 8
  %62 = load double* %p, align 8
  %63 = load double* %q, align 8
  %div86 = fdiv double %62, %63
  store double %div86, double* %r, align 8
  %64 = load double* %s, align 8
  %mul87 = fmul double 2.000000e+00, %64
  %65 = load double* %r, align 8
  %mul88 = fmul double %mul87, %65
  %66 = load double* %c, align 8
  %mul89 = fmul double 2.000000e+00, %66
  %sub90 = fsub double 0x3C91A62633145C07, %mul89
  %sub91 = fsub double %mul88, %sub90
  store double %sub91, double* %p, align 8
  %67 = load double* %w, align 8
  %mul92 = fmul double 2.000000e+00, %67
  %sub93 = fsub double 0x3FE921FB54442D18, %mul92
  store double %sub93, double* %q, align 8
  %68 = load double* %p, align 8
  %69 = load double* %q, align 8
  %sub94 = fsub double %68, %69
  %sub95 = fsub double 0x3FE921FB54442D18, %sub94
  store double %sub95, double* %t, align 8
  br label %if.end96

if.end96:                                         ; preds = %do.end81, %if.then68
  %70 = load i32* %hx, align 4
  %cmp97 = icmp sgt i32 %70, 0
  br i1 %cmp97, label %if.then98, label %if.else99

if.then98:                                        ; preds = %if.end96
  %71 = load double* %t, align 8
  store double %71, double* %retval
  br label %return

if.else99:                                        ; preds = %if.end96
  %72 = load double* %t, align 8
  %sub100 = fsub double -0.000000e+00, %72
  store double %sub100, double* %retval
  br label %return

return:                                           ; preds = %if.else99, %if.then98, %if.else18, %if.then16, %if.end, %if.then6
  %73 = load double* %retval
  ret double %73
}

; Function Attrs: nounwind
define double @__ieee754_atan2(double %y, double %x) #2 {
entry:
  %retval = alloca double, align 4
  %y.addr = alloca double, align 8
  %x.addr = alloca double, align 8
  %z = alloca double, align 8
  %k = alloca i32, align 4
  %m = alloca i32, align 4
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %ix = alloca i32, align 4
  %iy = alloca i32, align 4
  %lx = alloca i32, align 4
  %ly = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %ew_u3 = alloca %union.ieee_double_shape_type, align 4
  %zh = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  store double %y, double* %y.addr, align 8
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 %3, 2147483647
  store i32 %and, i32* %ix, align 4
  br label %do.body2

do.body2:                                         ; preds = %do.end
  %4 = load double* %y.addr, align 8
  %value4 = bitcast %union.ieee_double_shape_type* %ew_u3 to double*
  store double %4, double* %value4, align 4
  %parts5 = bitcast %union.ieee_double_shape_type* %ew_u3 to %struct.anon*
  %msw6 = getelementptr inbounds %struct.anon* %parts5, i32 0, i32 1
  %5 = load i32* %msw6, align 4
  store i32 %5, i32* %hy, align 4
  %parts7 = bitcast %union.ieee_double_shape_type* %ew_u3 to %struct.anon*
  %lsw8 = getelementptr inbounds %struct.anon* %parts7, i32 0, i32 0
  %6 = load i32* %lsw8, align 4
  store i32 %6, i32* %ly, align 4
  br label %do.end9

do.end9:                                          ; preds = %do.body2
  %7 = load i32* %hy, align 4
  %and10 = and i32 %7, 2147483647
  store i32 %and10, i32* %iy, align 4
  %8 = load i32* %ix, align 4
  %9 = load i32* %lx, align 4
  %10 = load i32* %lx, align 4
  %sub = sub i32 0, %10
  %or = or i32 %9, %sub
  %shr = lshr i32 %or, 31
  %or11 = or i32 %8, %shr
  %cmp = icmp ugt i32 %or11, 2146435072
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end9
  %11 = load i32* %iy, align 4
  %12 = load i32* %ly, align 4
  %13 = load i32* %ly, align 4
  %sub12 = sub i32 0, %13
  %or13 = or i32 %12, %sub12
  %shr14 = lshr i32 %or13, 31
  %or15 = or i32 %11, %shr14
  %cmp16 = icmp ugt i32 %or15, 2146435072
  br i1 %cmp16, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %do.end9
  %14 = load double* %x.addr, align 8
  %15 = load double* %y.addr, align 8
  %add = fadd double %14, %15
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %16 = load i32* %hx, align 4
  %sub17 = sub nsw i32 %16, 1072693248
  %17 = load i32* %lx, align 4
  %or18 = or i32 %sub17, %17
  %cmp19 = icmp eq i32 %or18, 0
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end
  %18 = load double* %y.addr, align 8
  %call = call double @atan(double %18) #4
  store double %call, double* %retval
  br label %return

if.end21:                                         ; preds = %if.end
  %19 = load i32* %hy, align 4
  %shr22 = ashr i32 %19, 31
  %and23 = and i32 %shr22, 1
  %20 = load i32* %hx, align 4
  %shr24 = ashr i32 %20, 30
  %and25 = and i32 %shr24, 2
  %or26 = or i32 %and23, %and25
  store i32 %or26, i32* %m, align 4
  %21 = load i32* %iy, align 4
  %22 = load i32* %ly, align 4
  %or27 = or i32 %21, %22
  %cmp28 = icmp eq i32 %or27, 0
  br i1 %cmp28, label %if.then29, label %if.end32

if.then29:                                        ; preds = %if.end21
  %23 = load i32* %m, align 4
  switch i32 %23, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb30
    i32 3, label %sw.bb31
  ]

sw.bb:                                            ; preds = %if.then29, %if.then29
  %24 = load double* %y.addr, align 8
  store double %24, double* %retval
  br label %return

sw.bb30:                                          ; preds = %if.then29
  store double 0x400921FB54442D18, double* %retval
  br label %return

sw.bb31:                                          ; preds = %if.then29
  store double 0xC00921FB54442D18, double* %retval
  br label %return

sw.epilog:                                        ; preds = %if.then29
  br label %if.end32

if.end32:                                         ; preds = %sw.epilog, %if.end21
  %25 = load i32* %ix, align 4
  %26 = load i32* %lx, align 4
  %or33 = or i32 %25, %26
  %cmp34 = icmp eq i32 %or33, 0
  br i1 %cmp34, label %if.then35, label %if.end37

if.then35:                                        ; preds = %if.end32
  %27 = load i32* %hy, align 4
  %cmp36 = icmp slt i32 %27, 0
  %cond = select i1 %cmp36, double 0xBFF921FB54442D18, double 0x3FF921FB54442D18
  store double %cond, double* %retval
  br label %return

if.end37:                                         ; preds = %if.end32
  %28 = load i32* %ix, align 4
  %cmp38 = icmp eq i32 %28, 2146435072
  br i1 %cmp38, label %if.then39, label %if.end53

if.then39:                                        ; preds = %if.end37
  %29 = load i32* %iy, align 4
  %cmp40 = icmp eq i32 %29, 2146435072
  br i1 %cmp40, label %if.then41, label %if.else

if.then41:                                        ; preds = %if.then39
  %30 = load i32* %m, align 4
  switch i32 %30, label %sw.epilog46 [
    i32 0, label %sw.bb42
    i32 1, label %sw.bb43
    i32 2, label %sw.bb44
    i32 3, label %sw.bb45
  ]

sw.bb42:                                          ; preds = %if.then41
  store double 0x3FE921FB54442D18, double* %retval
  br label %return

sw.bb43:                                          ; preds = %if.then41
  store double 0xBFE921FB54442D18, double* %retval
  br label %return

sw.bb44:                                          ; preds = %if.then41
  store double 0x4002D97C7F3321D2, double* %retval
  br label %return

sw.bb45:                                          ; preds = %if.then41
  store double 0xC002D97C7F3321D2, double* %retval
  br label %return

sw.epilog46:                                      ; preds = %if.then41
  br label %if.end52

if.else:                                          ; preds = %if.then39
  %31 = load i32* %m, align 4
  switch i32 %31, label %sw.epilog51 [
    i32 0, label %sw.bb47
    i32 1, label %sw.bb48
    i32 2, label %sw.bb49
    i32 3, label %sw.bb50
  ]

sw.bb47:                                          ; preds = %if.else
  store double 0.000000e+00, double* %retval
  br label %return

sw.bb48:                                          ; preds = %if.else
  store double -0.000000e+00, double* %retval
  br label %return

sw.bb49:                                          ; preds = %if.else
  store double 0x400921FB54442D18, double* %retval
  br label %return

sw.bb50:                                          ; preds = %if.else
  store double 0xC00921FB54442D18, double* %retval
  br label %return

sw.epilog51:                                      ; preds = %if.else
  br label %if.end52

if.end52:                                         ; preds = %sw.epilog51, %sw.epilog46
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.end37
  %32 = load i32* %iy, align 4
  %cmp54 = icmp eq i32 %32, 2146435072
  br i1 %cmp54, label %if.then55, label %if.end58

if.then55:                                        ; preds = %if.end53
  %33 = load i32* %hy, align 4
  %cmp56 = icmp slt i32 %33, 0
  %cond57 = select i1 %cmp56, double 0xBFF921FB54442D18, double 0x3FF921FB54442D18
  store double %cond57, double* %retval
  br label %return

if.end58:                                         ; preds = %if.end53
  %34 = load i32* %iy, align 4
  %35 = load i32* %ix, align 4
  %sub59 = sub nsw i32 %34, %35
  %shr60 = ashr i32 %sub59, 20
  store i32 %shr60, i32* %k, align 4
  %36 = load i32* %k, align 4
  %cmp61 = icmp sgt i32 %36, 60
  br i1 %cmp61, label %if.then62, label %if.else63

if.then62:                                        ; preds = %if.end58
  store double 0x3FF921FB54442D18, double* %z, align 8
  br label %if.end71

if.else63:                                        ; preds = %if.end58
  %37 = load i32* %hx, align 4
  %cmp64 = icmp slt i32 %37, 0
  br i1 %cmp64, label %land.lhs.true, label %if.else67

land.lhs.true:                                    ; preds = %if.else63
  %38 = load i32* %k, align 4
  %cmp65 = icmp slt i32 %38, -60
  br i1 %cmp65, label %if.then66, label %if.else67

if.then66:                                        ; preds = %land.lhs.true
  store double 0.000000e+00, double* %z, align 8
  br label %if.end70

if.else67:                                        ; preds = %land.lhs.true, %if.else63
  %39 = load double* %y.addr, align 8
  %40 = load double* %x.addr, align 8
  %div = fdiv double %39, %40
  %call68 = call double @fabs(double %div) #6
  %call69 = call double @atan(double %call68) #4
  store double %call69, double* %z, align 8
  br label %if.end70

if.end70:                                         ; preds = %if.else67, %if.then66
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.then62
  %41 = load i32* %m, align 4
  switch i32 %41, label %sw.default [
    i32 0, label %sw.bb72
    i32 1, label %sw.bb73
    i32 2, label %sw.bb85
  ]

sw.bb72:                                          ; preds = %if.end71
  %42 = load double* %z, align 8
  store double %42, double* %retval
  br label %return

sw.bb73:                                          ; preds = %if.end71
  br label %do.body74

do.body74:                                        ; preds = %sw.bb73
  %43 = load double* %z, align 8
  %value75 = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %43, double* %value75, align 4
  %parts76 = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw77 = getelementptr inbounds %struct.anon* %parts76, i32 0, i32 1
  %44 = load i32* %msw77, align 4
  store i32 %44, i32* %zh, align 4
  br label %do.end78

do.end78:                                         ; preds = %do.body74
  br label %do.body79

do.body79:                                        ; preds = %do.end78
  %45 = load double* %z, align 8
  %value80 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %45, double* %value80, align 4
  %46 = load i32* %zh, align 4
  %xor = xor i32 %46, -2147483648
  %parts81 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw82 = getelementptr inbounds %struct.anon* %parts81, i32 0, i32 1
  store i32 %xor, i32* %msw82, align 4
  %value83 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %47 = load double* %value83, align 4
  store double %47, double* %z, align 8
  br label %do.end84

do.end84:                                         ; preds = %do.body79
  %48 = load double* %z, align 8
  store double %48, double* %retval
  br label %return

sw.bb85:                                          ; preds = %if.end71
  %49 = load double* %z, align 8
  %sub86 = fsub double %49, 0x3CA1A62633145C07
  %sub87 = fsub double 0x400921FB54442D18, %sub86
  store double %sub87, double* %retval
  br label %return

sw.default:                                       ; preds = %if.end71
  %50 = load double* %z, align 8
  %sub88 = fsub double %50, 0x3CA1A62633145C07
  %sub89 = fsub double %sub88, 0x400921FB54442D18
  store double %sub89, double* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb85, %do.end84, %sw.bb72, %if.then55, %sw.bb50, %sw.bb49, %sw.bb48, %sw.bb47, %sw.bb45, %sw.bb44, %sw.bb43, %sw.bb42, %if.then35, %sw.bb31, %sw.bb30, %sw.bb, %if.then20, %if.then
  %51 = load double* %retval
  ret double %51
}

; Function Attrs: nounwind
define double @__ieee754_atanh(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %t = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 %3, 2147483647
  store i32 %and, i32* %ix, align 4
  %4 = load i32* %ix, align 4
  %5 = load i32* %lx, align 4
  %6 = load i32* %lx, align 4
  %sub = sub i32 0, %6
  %or = or i32 %5, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %4, %shr
  %cmp = icmp ugt i32 %or2, 1072693248
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %7 = load double* %x.addr, align 8
  %8 = load double* %x.addr, align 8
  %sub3 = fsub double %7, %8
  %9 = load double* %x.addr, align 8
  %10 = load double* %x.addr, align 8
  %sub4 = fsub double %9, %10
  %div = fdiv double %sub3, %sub4
  store double %div, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %11 = load i32* %ix, align 4
  %cmp5 = icmp eq i32 %11, 1072693248
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %if.end
  %12 = load double* %x.addr, align 8
  %div7 = fdiv double %12, 0.000000e+00
  store double %div7, double* %retval
  br label %return

if.end8:                                          ; preds = %if.end
  %13 = load i32* %ix, align 4
  %cmp9 = icmp slt i32 %13, 1043333120
  br i1 %cmp9, label %land.lhs.true, label %if.end12

land.lhs.true:                                    ; preds = %if.end8
  %14 = load double* %x.addr, align 8
  %add = fadd double 1.000000e+300, %14
  %cmp10 = fcmp ogt double %add, 0.000000e+00
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %land.lhs.true
  %15 = load double* %x.addr, align 8
  store double %15, double* %retval
  br label %return

if.end12:                                         ; preds = %land.lhs.true, %if.end8
  br label %do.body13

do.body13:                                        ; preds = %if.end12
  %16 = load double* %x.addr, align 8
  %value14 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %16, double* %value14, align 4
  %17 = load i32* %ix, align 4
  %parts15 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw16 = getelementptr inbounds %struct.anon* %parts15, i32 0, i32 1
  store i32 %17, i32* %msw16, align 4
  %value17 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %18 = load double* %value17, align 4
  store double %18, double* %x.addr, align 8
  br label %do.end18

do.end18:                                         ; preds = %do.body13
  %19 = load i32* %ix, align 4
  %cmp19 = icmp slt i32 %19, 1071644672
  br i1 %cmp19, label %if.then20, label %if.else

if.then20:                                        ; preds = %do.end18
  %20 = load double* %x.addr, align 8
  %21 = load double* %x.addr, align 8
  %add21 = fadd double %20, %21
  store double %add21, double* %t, align 8
  %22 = load double* %t, align 8
  %23 = load double* %t, align 8
  %24 = load double* %x.addr, align 8
  %mul = fmul double %23, %24
  %25 = load double* %x.addr, align 8
  %sub22 = fsub double 1.000000e+00, %25
  %div23 = fdiv double %mul, %sub22
  %add24 = fadd double %22, %div23
  %call = call double @log1p(double %add24) #4
  %mul25 = fmul double 5.000000e-01, %call
  store double %mul25, double* %t, align 8
  br label %if.end31

if.else:                                          ; preds = %do.end18
  %26 = load double* %x.addr, align 8
  %27 = load double* %x.addr, align 8
  %add26 = fadd double %26, %27
  %28 = load double* %x.addr, align 8
  %sub27 = fsub double 1.000000e+00, %28
  %div28 = fdiv double %add26, %sub27
  %call29 = call double @log1p(double %div28) #4
  %mul30 = fmul double 5.000000e-01, %call29
  store double %mul30, double* %t, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.else, %if.then20
  %29 = load i32* %hx, align 4
  %cmp32 = icmp sge i32 %29, 0
  br i1 %cmp32, label %if.then33, label %if.else34

if.then33:                                        ; preds = %if.end31
  %30 = load double* %t, align 8
  store double %30, double* %retval
  br label %return

if.else34:                                        ; preds = %if.end31
  %31 = load double* %t, align 8
  %sub35 = fsub double -0.000000e+00, %31
  store double %sub35, double* %retval
  br label %return

return:                                           ; preds = %if.else34, %if.then33, %if.then11, %if.then6, %if.then
  %32 = load double* %retval
  ret double %32
}

; Function Attrs: nounwind
define double @__ieee754_cosh(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %t = alloca double, align 8
  %w = alloca double, align 8
  %ix = alloca i32, align 4
  %lx = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double* %x.addr, align 8
  %mul = fmul double %4, %5
  store double %mul, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %6, 1071001155
  br i1 %cmp1, label %if.then2, label %if.end10

if.then2:                                         ; preds = %if.end
  %7 = load double* %x.addr, align 8
  %call = call double @fabs(double %7) #6
  %call3 = call double @expm1(double %call) #4
  store double %call3, double* %t, align 8
  %8 = load double* %t, align 8
  %add = fadd double 1.000000e+00, %8
  store double %add, double* %w, align 8
  %9 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %9, 1015021568
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then2
  %10 = load double* %w, align 8
  store double %10, double* %retval
  br label %return

if.end6:                                          ; preds = %if.then2
  %11 = load double* %t, align 8
  %12 = load double* %t, align 8
  %mul7 = fmul double %11, %12
  %13 = load double* %w, align 8
  %14 = load double* %w, align 8
  %add8 = fadd double %13, %14
  %div = fdiv double %mul7, %add8
  %add9 = fadd double 1.000000e+00, %div
  store double %add9, double* %retval
  br label %return

if.end10:                                         ; preds = %if.end
  %15 = load i32* %ix, align 4
  %cmp11 = icmp slt i32 %15, 1077280768
  br i1 %cmp11, label %if.then12, label %if.end18

if.then12:                                        ; preds = %if.end10
  %16 = load double* %x.addr, align 8
  %call13 = call double @fabs(double %16) #6
  %call14 = call double @__ieee754_exp(double %call13) #5
  store double %call14, double* %t, align 8
  %17 = load double* %t, align 8
  %mul15 = fmul double 5.000000e-01, %17
  %18 = load double* %t, align 8
  %div16 = fdiv double 5.000000e-01, %18
  %add17 = fadd double %mul15, %div16
  store double %add17, double* %retval
  br label %return

if.end18:                                         ; preds = %if.end10
  %19 = load i32* %ix, align 4
  %cmp19 = icmp slt i32 %19, 1082535490
  br i1 %cmp19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %if.end18
  %20 = load double* %x.addr, align 8
  %call21 = call double @fabs(double %20) #6
  %call22 = call double @__ieee754_exp(double %call21) #5
  %mul23 = fmul double 5.000000e-01, %call22
  store double %mul23, double* %retval
  br label %return

if.end24:                                         ; preds = %if.end18
  br label %do.body25

do.body25:                                        ; preds = %if.end24
  %21 = load double* %x.addr, align 8
  %value26 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %21, double* %value26, align 4
  %parts27 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts27, i32 0, i32 0
  %22 = load i32* %lsw, align 4
  store i32 %22, i32* %lx, align 4
  br label %do.end28

do.end28:                                         ; preds = %do.body25
  %23 = load i32* %ix, align 4
  %cmp29 = icmp slt i32 %23, 1082536910
  br i1 %cmp29, label %if.then32, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end28
  %24 = load i32* %ix, align 4
  %cmp30 = icmp eq i32 %24, 1082536910
  br i1 %cmp30, label %land.lhs.true, label %if.end38

land.lhs.true:                                    ; preds = %lor.lhs.false
  %25 = load i32* %lx, align 4
  %cmp31 = icmp ule i32 %25, -1883637635
  br i1 %cmp31, label %if.then32, label %if.end38

if.then32:                                        ; preds = %land.lhs.true, %do.end28
  %26 = load double* %x.addr, align 8
  %call33 = call double @fabs(double %26) #6
  %mul34 = fmul double 5.000000e-01, %call33
  %call35 = call double @__ieee754_exp(double %mul34) #5
  store double %call35, double* %w, align 8
  %27 = load double* %w, align 8
  %mul36 = fmul double 5.000000e-01, %27
  store double %mul36, double* %t, align 8
  %28 = load double* %t, align 8
  %29 = load double* %w, align 8
  %mul37 = fmul double %28, %29
  store double %mul37, double* %retval
  br label %return

if.end38:                                         ; preds = %land.lhs.true, %lor.lhs.false
  store double 0x7FF0000000000000, double* %retval
  br label %return

return:                                           ; preds = %if.end38, %if.then32, %if.then20, %if.then12, %if.end6, %if.then5, %if.then
  %30 = load double* %retval
  ret double %30
}

; Function Attrs: nounwind
define double @__ieee754_exp(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y = alloca double, align 8
  %hi = alloca double, align 8
  %lo = alloca double, align 8
  %c = alloca double, align 8
  %t = alloca double, align 8
  %k = alloca i32, align 4
  %xsb = alloca i32, align 4
  %hx = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %lx = alloca i32, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  %hy = alloca i32, align 4
  %gh_u77 = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  %hy90 = alloca i32, align 4
  %gh_u92 = alloca %union.ieee_double_shape_type, align 4
  %sh_u98 = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store i32 0, i32* %k, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %shr = lshr i32 %2, 31
  %and = and i32 %shr, 1
  store i32 %and, i32* %xsb, align 4
  %3 = load i32* %hx, align 4
  %and1 = and i32 %3, 2147483647
  store i32 %and1, i32* %hx, align 4
  %4 = load i32* %hx, align 4
  %cmp = icmp uge i32 %4, 1082535490
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %do.end
  %5 = load i32* %hx, align 4
  %cmp2 = icmp uge i32 %5, 2146435072
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  br label %do.body4

do.body4:                                         ; preds = %if.then3
  %6 = load double* %x.addr, align 8
  %value5 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %6, double* %value5, align 4
  %parts6 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts6, i32 0, i32 0
  %7 = load i32* %lsw, align 4
  store i32 %7, i32* %lx, align 4
  br label %do.end7

do.end7:                                          ; preds = %do.body4
  %8 = load i32* %hx, align 4
  %and8 = and i32 %8, 1048575
  %9 = load i32* %lx, align 4
  %or = or i32 %and8, %9
  %cmp9 = icmp ne i32 %or, 0
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %do.end7
  %10 = load double* %x.addr, align 8
  %11 = load double* %x.addr, align 8
  %add = fadd double %10, %11
  store double %add, double* %retval
  br label %return

if.else:                                          ; preds = %do.end7
  %12 = load i32* %xsb, align 4
  %cmp11 = icmp eq i32 %12, 0
  br i1 %cmp11, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %13 = load double* %x.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %13, %cond.true ], [ 0.000000e+00, %cond.false ]
  store double %cond, double* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %14 = load double* %x.addr, align 8
  %cmp12 = fcmp ogt double %14, 0x40862E42FEFA39EF
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  store double 0x7FF0000000000000, double* %retval
  br label %return

if.end14:                                         ; preds = %if.end
  %15 = load double* %x.addr, align 8
  %cmp15 = fcmp olt double %15, 0xC0874910D52D3051
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end14
  store double 0.000000e+00, double* %retval
  br label %return

if.end17:                                         ; preds = %if.end14
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %do.end
  %16 = load i32* %hx, align 4
  %cmp19 = icmp ugt i32 %16, 1071001154
  br i1 %cmp19, label %if.then20, label %if.else35

if.then20:                                        ; preds = %if.end18
  %17 = load i32* %hx, align 4
  %cmp21 = icmp ult i32 %17, 1072734898
  br i1 %cmp21, label %if.then22, label %if.else26

if.then22:                                        ; preds = %if.then20
  %18 = load double* %x.addr, align 8
  %19 = load i32* %xsb, align 4
  %arrayidx = getelementptr inbounds [2 x double]* @ln2HI, i32 0, i32 %19
  %20 = load double* %arrayidx, align 4
  %sub = fsub double %18, %20
  store double %sub, double* %hi, align 8
  %21 = load i32* %xsb, align 4
  %arrayidx23 = getelementptr inbounds [2 x double]* @ln2LO, i32 0, i32 %21
  %22 = load double* %arrayidx23, align 4
  store double %22, double* %lo, align 8
  %23 = load i32* %xsb, align 4
  %sub24 = sub nsw i32 1, %23
  %24 = load i32* %xsb, align 4
  %sub25 = sub nsw i32 %sub24, %24
  store i32 %sub25, i32* %k, align 4
  br label %if.end33

if.else26:                                        ; preds = %if.then20
  %25 = load double* %x.addr, align 8
  %mul = fmul double 0x3FF71547652B82FE, %25
  %26 = load i32* %xsb, align 4
  %arrayidx27 = getelementptr inbounds [2 x double]* @halF, i32 0, i32 %26
  %27 = load double* %arrayidx27, align 4
  %add28 = fadd double %mul, %27
  %conv = fptosi double %add28 to i32
  store i32 %conv, i32* %k, align 4
  %28 = load i32* %k, align 4
  %conv29 = sitofp i32 %28 to double
  store double %conv29, double* %t, align 8
  %29 = load double* %x.addr, align 8
  %30 = load double* %t, align 8
  %31 = load double* getelementptr inbounds ([2 x double]* @ln2HI, i32 0, i32 0), align 4
  %mul30 = fmul double %30, %31
  %sub31 = fsub double %29, %mul30
  store double %sub31, double* %hi, align 8
  %32 = load double* %t, align 8
  %33 = load double* getelementptr inbounds ([2 x double]* @ln2LO, i32 0, i32 0), align 4
  %mul32 = fmul double %32, %33
  store double %mul32, double* %lo, align 8
  br label %if.end33

if.end33:                                         ; preds = %if.else26, %if.then22
  %34 = load double* %hi, align 8
  %35 = load double* %lo, align 8
  %sub34 = fsub double %34, %35
  store double %sub34, double* %x.addr, align 8
  br label %if.end46

if.else35:                                        ; preds = %if.end18
  %36 = load i32* %hx, align 4
  %cmp36 = icmp ult i32 %36, 1043333120
  br i1 %cmp36, label %if.then38, label %if.end45

if.then38:                                        ; preds = %if.else35
  %37 = load double* %x.addr, align 8
  %add39 = fadd double 1.000000e+300, %37
  %cmp40 = fcmp ogt double %add39, 1.000000e+00
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.then38
  %38 = load double* %x.addr, align 8
  %add43 = fadd double 1.000000e+00, %38
  store double %add43, double* %retval
  br label %return

if.end44:                                         ; preds = %if.then38
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.else35
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end33
  %39 = load double* %x.addr, align 8
  %40 = load double* %x.addr, align 8
  %mul47 = fmul double %39, %40
  store double %mul47, double* %t, align 8
  %41 = load double* %x.addr, align 8
  %42 = load double* %t, align 8
  %43 = load double* %t, align 8
  %44 = load double* %t, align 8
  %45 = load double* %t, align 8
  %46 = load double* %t, align 8
  %mul48 = fmul double %46, 0x3E66376972BEA4D0
  %add49 = fadd double 0xBEBBBD41C5D26BF1, %mul48
  %mul50 = fmul double %45, %add49
  %add51 = fadd double 0x3F11566AAF25DE2C, %mul50
  %mul52 = fmul double %44, %add51
  %add53 = fadd double 0xBF66C16C16BEBD93, %mul52
  %mul54 = fmul double %43, %add53
  %add55 = fadd double 0x3FC555555555553E, %mul54
  %mul56 = fmul double %42, %add55
  %sub57 = fsub double %41, %mul56
  store double %sub57, double* %c, align 8
  %47 = load i32* %k, align 4
  %cmp58 = icmp eq i32 %47, 0
  br i1 %cmp58, label %if.then60, label %if.else65

if.then60:                                        ; preds = %if.end46
  %48 = load double* %x.addr, align 8
  %49 = load double* %c, align 8
  %mul61 = fmul double %48, %49
  %50 = load double* %c, align 8
  %sub62 = fsub double %50, 2.000000e+00
  %div = fdiv double %mul61, %sub62
  %51 = load double* %x.addr, align 8
  %sub63 = fsub double %div, %51
  %sub64 = fsub double 1.000000e+00, %sub63
  store double %sub64, double* %retval
  br label %return

if.else65:                                        ; preds = %if.end46
  %52 = load double* %lo, align 8
  %53 = load double* %x.addr, align 8
  %54 = load double* %c, align 8
  %mul66 = fmul double %53, %54
  %55 = load double* %c, align 8
  %sub67 = fsub double 2.000000e+00, %55
  %div68 = fdiv double %mul66, %sub67
  %sub69 = fsub double %52, %div68
  %56 = load double* %hi, align 8
  %sub70 = fsub double %sub69, %56
  %sub71 = fsub double 1.000000e+00, %sub70
  store double %sub71, double* %y, align 8
  br label %if.end72

if.end72:                                         ; preds = %if.else65
  %57 = load i32* %k, align 4
  %cmp73 = icmp sge i32 %57, -1021
  br i1 %cmp73, label %if.then75, label %if.else89

if.then75:                                        ; preds = %if.end72
  br label %do.body76

do.body76:                                        ; preds = %if.then75
  %58 = load double* %y, align 8
  %value78 = bitcast %union.ieee_double_shape_type* %gh_u77 to double*
  store double %58, double* %value78, align 4
  %parts79 = bitcast %union.ieee_double_shape_type* %gh_u77 to %struct.anon*
  %msw80 = getelementptr inbounds %struct.anon* %parts79, i32 0, i32 1
  %59 = load i32* %msw80, align 4
  store i32 %59, i32* %hy, align 4
  br label %do.end81

do.end81:                                         ; preds = %do.body76
  br label %do.body82

do.body82:                                        ; preds = %do.end81
  %60 = load double* %y, align 8
  %value83 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %60, double* %value83, align 4
  %61 = load i32* %hy, align 4
  %62 = load i32* %k, align 4
  %shl = shl i32 %62, 20
  %add84 = add i32 %61, %shl
  %parts85 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw86 = getelementptr inbounds %struct.anon* %parts85, i32 0, i32 1
  store i32 %add84, i32* %msw86, align 4
  %value87 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %63 = load double* %value87, align 4
  store double %63, double* %y, align 8
  br label %do.end88

do.end88:                                         ; preds = %do.body82
  %64 = load double* %y, align 8
  store double %64, double* %retval
  br label %return

if.else89:                                        ; preds = %if.end72
  br label %do.body91

do.body91:                                        ; preds = %if.else89
  %65 = load double* %y, align 8
  %value93 = bitcast %union.ieee_double_shape_type* %gh_u92 to double*
  store double %65, double* %value93, align 4
  %parts94 = bitcast %union.ieee_double_shape_type* %gh_u92 to %struct.anon*
  %msw95 = getelementptr inbounds %struct.anon* %parts94, i32 0, i32 1
  %66 = load i32* %msw95, align 4
  store i32 %66, i32* %hy90, align 4
  br label %do.end96

do.end96:                                         ; preds = %do.body91
  br label %do.body97

do.body97:                                        ; preds = %do.end96
  %67 = load double* %y, align 8
  %value99 = bitcast %union.ieee_double_shape_type* %sh_u98 to double*
  store double %67, double* %value99, align 4
  %68 = load i32* %hy90, align 4
  %69 = load i32* %k, align 4
  %add100 = add nsw i32 %69, 1000
  %shl101 = shl i32 %add100, 20
  %add102 = add i32 %68, %shl101
  %parts103 = bitcast %union.ieee_double_shape_type* %sh_u98 to %struct.anon*
  %msw104 = getelementptr inbounds %struct.anon* %parts103, i32 0, i32 1
  store i32 %add102, i32* %msw104, align 4
  %value105 = bitcast %union.ieee_double_shape_type* %sh_u98 to double*
  %70 = load double* %value105, align 4
  store double %70, double* %y, align 8
  br label %do.end106

do.end106:                                        ; preds = %do.body97
  %71 = load double* %y, align 8
  %mul107 = fmul double %71, 0x170000000000000
  store double %mul107, double* %retval
  br label %return

return:                                           ; preds = %do.end106, %do.end88, %if.then60, %if.then42, %if.then16, %if.then13, %cond.end, %if.then10
  %72 = load double* %retval
  ret double %72
}

; Function Attrs: nounwind
define float @__ieee754_acosf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %z = alloca float, align 4
  %p = alloca float, align 4
  %q = alloca float, align 4
  %r = alloca float, align 4
  %w = alloca float, align 4
  %s = alloca float, align 4
  %c = alloca float, align 4
  %df = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %idf = alloca i32, align 4
  %gf_u71 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp eq i32 %3, 1065353216
  br i1 %cmp, label %if.then, label %if.else3

if.then:                                          ; preds = %do.end
  %4 = load i32* %hx, align 4
  %cmp1 = icmp sgt i32 %4, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  store float 0.000000e+00, float* %retval
  br label %return

if.else:                                          ; preds = %if.then
  store float 0x400921FB60000000, float* %retval
  br label %return

if.else3:                                         ; preds = %do.end
  %5 = load i32* %ix, align 4
  %cmp4 = icmp sgt i32 %5, 1065353216
  br i1 %cmp4, label %if.then5, label %if.end

if.then5:                                         ; preds = %if.else3
  %6 = load float* %x.addr, align 4
  %7 = load float* %x.addr, align 4
  %sub = fsub float %6, %7
  %8 = load float* %x.addr, align 4
  %9 = load float* %x.addr, align 4
  %sub6 = fsub float %8, %9
  %div = fdiv float %sub, %sub6
  store float %div, float* %retval
  br label %return

if.end:                                           ; preds = %if.else3
  br label %if.end7

if.end7:                                          ; preds = %if.end
  %10 = load i32* %ix, align 4
  %cmp8 = icmp slt i32 %10, 1056964608
  br i1 %cmp8, label %if.then9, label %if.else36

if.then9:                                         ; preds = %if.end7
  %11 = load i32* %ix, align 4
  %cmp10 = icmp sle i32 %11, 587202560
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %if.then9
  store float 0x3FF921FB60000000, float* %retval
  br label %return

if.end12:                                         ; preds = %if.then9
  %12 = load float* %x.addr, align 4
  %13 = load float* %x.addr, align 4
  %mul = fmul float %12, %13
  store float %mul, float* %z, align 4
  %14 = load float* %z, align 4
  %15 = load float* %z, align 4
  %16 = load float* %z, align 4
  %17 = load float* %z, align 4
  %18 = load float* %z, align 4
  %19 = load float* %z, align 4
  %mul13 = fmul float %19, 0x3F023DE100000000
  %add = fadd float 0x3F49EFE080000000, %mul13
  %mul14 = fmul float %18, %add
  %add15 = fadd float 0xBFA48228C0000000, %mul14
  %mul16 = fmul float %17, %add15
  %add17 = fadd float 0x3FC9C15500000000, %mul16
  %mul18 = fmul float %16, %add17
  %add19 = fadd float 0xBFD4D61200000000, %mul18
  %mul20 = fmul float %15, %add19
  %add21 = fadd float 0x3FC5555560000000, %mul20
  %mul22 = fmul float %14, %add21
  store float %mul22, float* %p, align 4
  %20 = load float* %z, align 4
  %21 = load float* %z, align 4
  %22 = load float* %z, align 4
  %23 = load float* %z, align 4
  %mul23 = fmul float %23, 0x3FB3B8C5C0000000
  %add24 = fadd float 0xBFE6066C20000000, %mul23
  %mul25 = fmul float %22, %add24
  %add26 = fadd float 0x40002AE5A0000000, %mul25
  %mul27 = fmul float %21, %add26
  %add28 = fadd float 0xC0033A2720000000, %mul27
  %mul29 = fmul float %20, %add28
  %add30 = fadd float 1.000000e+00, %mul29
  store float %add30, float* %q, align 4
  %24 = load float* %p, align 4
  %25 = load float* %q, align 4
  %div31 = fdiv float %24, %25
  store float %div31, float* %r, align 4
  %26 = load float* %x.addr, align 4
  %27 = load float* %x.addr, align 4
  %28 = load float* %r, align 4
  %mul32 = fmul float %27, %28
  %sub33 = fsub float 0x3E74442D00000000, %mul32
  %sub34 = fsub float %26, %sub33
  %sub35 = fsub float 0x3FF921FB40000000, %sub34
  store float %sub35, float* %retval
  br label %return

if.else36:                                        ; preds = %if.end7
  %29 = load i32* %hx, align 4
  %cmp37 = icmp slt i32 %29, 0
  br i1 %cmp37, label %if.then38, label %if.else66

if.then38:                                        ; preds = %if.else36
  %30 = load float* %x.addr, align 4
  %add39 = fadd float 1.000000e+00, %30
  %mul40 = fmul float %add39, 5.000000e-01
  store float %mul40, float* %z, align 4
  %31 = load float* %z, align 4
  %32 = load float* %z, align 4
  %33 = load float* %z, align 4
  %34 = load float* %z, align 4
  %35 = load float* %z, align 4
  %36 = load float* %z, align 4
  %mul41 = fmul float %36, 0x3F023DE100000000
  %add42 = fadd float 0x3F49EFE080000000, %mul41
  %mul43 = fmul float %35, %add42
  %add44 = fadd float 0xBFA48228C0000000, %mul43
  %mul45 = fmul float %34, %add44
  %add46 = fadd float 0x3FC9C15500000000, %mul45
  %mul47 = fmul float %33, %add46
  %add48 = fadd float 0xBFD4D61200000000, %mul47
  %mul49 = fmul float %32, %add48
  %add50 = fadd float 0x3FC5555560000000, %mul49
  %mul51 = fmul float %31, %add50
  store float %mul51, float* %p, align 4
  %37 = load float* %z, align 4
  %38 = load float* %z, align 4
  %39 = load float* %z, align 4
  %40 = load float* %z, align 4
  %mul52 = fmul float %40, 0x3FB3B8C5C0000000
  %add53 = fadd float 0xBFE6066C20000000, %mul52
  %mul54 = fmul float %39, %add53
  %add55 = fadd float 0x40002AE5A0000000, %mul54
  %mul56 = fmul float %38, %add55
  %add57 = fadd float 0xC0033A2720000000, %mul56
  %mul58 = fmul float %37, %add57
  %add59 = fadd float 1.000000e+00, %mul58
  store float %add59, float* %q, align 4
  %41 = load float* %z, align 4
  %call = call float @__ieee754_sqrtf(float %41) #5
  store float %call, float* %s, align 4
  %42 = load float* %p, align 4
  %43 = load float* %q, align 4
  %div60 = fdiv float %42, %43
  store float %div60, float* %r, align 4
  %44 = load float* %r, align 4
  %45 = load float* %s, align 4
  %mul61 = fmul float %44, %45
  %sub62 = fsub float %mul61, 0x3E74442D00000000
  store float %sub62, float* %w, align 4
  %46 = load float* %s, align 4
  %47 = load float* %w, align 4
  %add63 = fadd float %46, %47
  %mul64 = fmul float 2.000000e+00, %add63
  %sub65 = fsub float 0x400921FB40000000, %mul64
  store float %sub65, float* %retval
  br label %return

if.else66:                                        ; preds = %if.else36
  %48 = load float* %x.addr, align 4
  %sub67 = fsub float 1.000000e+00, %48
  %mul68 = fmul float %sub67, 5.000000e-01
  store float %mul68, float* %z, align 4
  %49 = load float* %z, align 4
  %call69 = call float @__ieee754_sqrtf(float %49) #5
  store float %call69, float* %s, align 4
  %50 = load float* %s, align 4
  store float %50, float* %df, align 4
  br label %do.body70

do.body70:                                        ; preds = %if.else66
  %51 = load float* %df, align 4
  %value72 = bitcast %union.ieee_float_shape_type* %gf_u71 to float*
  store float %51, float* %value72, align 4
  %word73 = bitcast %union.ieee_float_shape_type* %gf_u71 to i32*
  %52 = load i32* %word73, align 4
  store i32 %52, i32* %idf, align 4
  br label %do.end74

do.end74:                                         ; preds = %do.body70
  br label %do.body75

do.body75:                                        ; preds = %do.end74
  %53 = load i32* %idf, align 4
  %and76 = and i32 %53, -4096
  %word77 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %and76, i32* %word77, align 4
  %value78 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %54 = load float* %value78, align 4
  store float %54, float* %df, align 4
  br label %do.end79

do.end79:                                         ; preds = %do.body75
  %55 = load float* %z, align 4
  %56 = load float* %df, align 4
  %57 = load float* %df, align 4
  %mul80 = fmul float %56, %57
  %sub81 = fsub float %55, %mul80
  %58 = load float* %s, align 4
  %59 = load float* %df, align 4
  %add82 = fadd float %58, %59
  %div83 = fdiv float %sub81, %add82
  store float %div83, float* %c, align 4
  %60 = load float* %z, align 4
  %61 = load float* %z, align 4
  %62 = load float* %z, align 4
  %63 = load float* %z, align 4
  %64 = load float* %z, align 4
  %65 = load float* %z, align 4
  %mul84 = fmul float %65, 0x3F023DE100000000
  %add85 = fadd float 0x3F49EFE080000000, %mul84
  %mul86 = fmul float %64, %add85
  %add87 = fadd float 0xBFA48228C0000000, %mul86
  %mul88 = fmul float %63, %add87
  %add89 = fadd float 0x3FC9C15500000000, %mul88
  %mul90 = fmul float %62, %add89
  %add91 = fadd float 0xBFD4D61200000000, %mul90
  %mul92 = fmul float %61, %add91
  %add93 = fadd float 0x3FC5555560000000, %mul92
  %mul94 = fmul float %60, %add93
  store float %mul94, float* %p, align 4
  %66 = load float* %z, align 4
  %67 = load float* %z, align 4
  %68 = load float* %z, align 4
  %69 = load float* %z, align 4
  %mul95 = fmul float %69, 0x3FB3B8C5C0000000
  %add96 = fadd float 0xBFE6066C20000000, %mul95
  %mul97 = fmul float %68, %add96
  %add98 = fadd float 0x40002AE5A0000000, %mul97
  %mul99 = fmul float %67, %add98
  %add100 = fadd float 0xC0033A2720000000, %mul99
  %mul101 = fmul float %66, %add100
  %add102 = fadd float 1.000000e+00, %mul101
  store float %add102, float* %q, align 4
  %70 = load float* %p, align 4
  %71 = load float* %q, align 4
  %div103 = fdiv float %70, %71
  store float %div103, float* %r, align 4
  %72 = load float* %r, align 4
  %73 = load float* %s, align 4
  %mul104 = fmul float %72, %73
  %74 = load float* %c, align 4
  %add105 = fadd float %mul104, %74
  store float %add105, float* %w, align 4
  %75 = load float* %df, align 4
  %76 = load float* %w, align 4
  %add106 = fadd float %75, %76
  %mul107 = fmul float 2.000000e+00, %add106
  store float %mul107, float* %retval
  br label %return

return:                                           ; preds = %do.end79, %if.then38, %if.end12, %if.then11, %if.then5, %if.else, %if.then2
  %77 = load float* %retval
  ret float %77
}

; Function Attrs: nounwind
define float @__ieee754_acoshf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %t = alloca float, align 4
  %hx = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %cmp = icmp slt i32 %2, 1065353216
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %3 = load float* %x.addr, align 4
  %4 = load float* %x.addr, align 4
  %sub = fsub float %3, %4
  %5 = load float* %x.addr, align 4
  %6 = load float* %x.addr, align 4
  %sub1 = fsub float %5, %6
  %div = fdiv float %sub, %sub1
  store float %div, float* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %7 = load i32* %hx, align 4
  %cmp2 = icmp sge i32 %7, 1300234240
  br i1 %cmp2, label %if.then3, label %if.else8

if.then3:                                         ; preds = %if.else
  %8 = load i32* %hx, align 4
  %cmp4 = icmp slt i32 %8, 2139095040
  br i1 %cmp4, label %if.else6, label %if.then5

if.then5:                                         ; preds = %if.then3
  %9 = load float* %x.addr, align 4
  %10 = load float* %x.addr, align 4
  %add = fadd float %9, %10
  store float %add, float* %retval
  br label %return

if.else6:                                         ; preds = %if.then3
  %11 = load float* %x.addr, align 4
  %call = call float @__ieee754_logf(float %11) #5
  %add7 = fadd float %call, 0x3FE62E4300000000
  store float %add7, float* %retval
  br label %return

if.else8:                                         ; preds = %if.else
  %12 = load i32* %hx, align 4
  %cmp9 = icmp eq i32 %12, 1065353216
  br i1 %cmp9, label %if.then10, label %if.else11

if.then10:                                        ; preds = %if.else8
  store float 0.000000e+00, float* %retval
  br label %return

if.else11:                                        ; preds = %if.else8
  %13 = load i32* %hx, align 4
  %cmp12 = icmp sgt i32 %13, 1073741824
  br i1 %cmp12, label %if.then13, label %if.else21

if.then13:                                        ; preds = %if.else11
  %14 = load float* %x.addr, align 4
  %15 = load float* %x.addr, align 4
  %mul = fmul float %14, %15
  store float %mul, float* %t, align 4
  %16 = load float* %x.addr, align 4
  %mul14 = fmul float 2.000000e+00, %16
  %17 = load float* %x.addr, align 4
  %18 = load float* %t, align 4
  %sub15 = fsub float %18, 1.000000e+00
  %call16 = call float @__ieee754_sqrtf(float %sub15) #5
  %add17 = fadd float %17, %call16
  %div18 = fdiv float 1.000000e+00, %add17
  %sub19 = fsub float %mul14, %div18
  %call20 = call float @__ieee754_logf(float %sub19) #5
  store float %call20, float* %retval
  br label %return

if.else21:                                        ; preds = %if.else11
  %19 = load float* %x.addr, align 4
  %sub22 = fsub float %19, 1.000000e+00
  store float %sub22, float* %t, align 4
  %20 = load float* %t, align 4
  %21 = load float* %t, align 4
  %mul23 = fmul float 2.000000e+00, %21
  %22 = load float* %t, align 4
  %23 = load float* %t, align 4
  %mul24 = fmul float %22, %23
  %add25 = fadd float %mul23, %mul24
  %call26 = call float @__ieee754_sqrtf(float %add25) #5
  %add27 = fadd float %20, %call26
  %call28 = call float @log1pf(float %add27) #4
  store float %call28, float* %retval
  br label %return

return:                                           ; preds = %if.else21, %if.then13, %if.then10, %if.else6, %if.then5, %if.then
  %24 = load float* %retval
  ret float %24
}

; Function Attrs: nounwind
define float @__ieee754_asinf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %t = alloca float, align 4
  %w = alloca float, align 4
  %p = alloca float, align 4
  %q = alloca float, align 4
  %c = alloca float, align 4
  %r = alloca float, align 4
  %s = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %iw = alloca i32, align 4
  %gf_u73 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp eq i32 %3, 1065353216
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %mul = fmul float %4, 0x3FF921FB60000000
  %5 = load float* %x.addr, align 4
  %mul1 = fmul float %5, 0xBE6777A5C0000000
  %add = fadd float %mul, %mul1
  store float %add, float* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp2 = icmp sgt i32 %6, 1065353216
  br i1 %cmp2, label %if.then3, label %if.else5

if.then3:                                         ; preds = %if.else
  %7 = load float* %x.addr, align 4
  %8 = load float* %x.addr, align 4
  %sub = fsub float %7, %8
  %9 = load float* %x.addr, align 4
  %10 = load float* %x.addr, align 4
  %sub4 = fsub float %9, %10
  %div = fdiv float %sub, %sub4
  store float %div, float* %retval
  br label %return

if.else5:                                         ; preds = %if.else
  %11 = load i32* %ix, align 4
  %cmp6 = icmp slt i32 %11, 1056964608
  br i1 %cmp6, label %if.then7, label %if.end38

if.then7:                                         ; preds = %if.else5
  %12 = load i32* %ix, align 4
  %cmp8 = icmp slt i32 %12, 838860800
  br i1 %cmp8, label %if.then9, label %if.else13

if.then9:                                         ; preds = %if.then7
  %13 = load float* %x.addr, align 4
  %add10 = fadd float 0x46293E5940000000, %13
  %cmp11 = fcmp ogt float %add10, 1.000000e+00
  br i1 %cmp11, label %if.then12, label %if.end

if.then12:                                        ; preds = %if.then9
  %14 = load float* %x.addr, align 4
  store float %14, float* %retval
  br label %return

if.end:                                           ; preds = %if.then9
  br label %if.end37

if.else13:                                        ; preds = %if.then7
  %15 = load float* %x.addr, align 4
  %16 = load float* %x.addr, align 4
  %mul14 = fmul float %15, %16
  store float %mul14, float* %t, align 4
  %17 = load float* %t, align 4
  %18 = load float* %t, align 4
  %19 = load float* %t, align 4
  %20 = load float* %t, align 4
  %21 = load float* %t, align 4
  %22 = load float* %t, align 4
  %mul15 = fmul float %22, 0x3F023DE100000000
  %add16 = fadd float 0x3F49EFE080000000, %mul15
  %mul17 = fmul float %21, %add16
  %add18 = fadd float 0xBFA48228C0000000, %mul17
  %mul19 = fmul float %20, %add18
  %add20 = fadd float 0x3FC9C15500000000, %mul19
  %mul21 = fmul float %19, %add20
  %add22 = fadd float 0xBFD4D61200000000, %mul21
  %mul23 = fmul float %18, %add22
  %add24 = fadd float 0x3FC5555560000000, %mul23
  %mul25 = fmul float %17, %add24
  store float %mul25, float* %p, align 4
  %23 = load float* %t, align 4
  %24 = load float* %t, align 4
  %25 = load float* %t, align 4
  %26 = load float* %t, align 4
  %mul26 = fmul float %26, 0x3FB3B8C5C0000000
  %add27 = fadd float 0xBFE6066C20000000, %mul26
  %mul28 = fmul float %25, %add27
  %add29 = fadd float 0x40002AE5A0000000, %mul28
  %mul30 = fmul float %24, %add29
  %add31 = fadd float 0xC0033A2720000000, %mul30
  %mul32 = fmul float %23, %add31
  %add33 = fadd float 1.000000e+00, %mul32
  store float %add33, float* %q, align 4
  %27 = load float* %p, align 4
  %28 = load float* %q, align 4
  %div34 = fdiv float %27, %28
  store float %div34, float* %w, align 4
  %29 = load float* %x.addr, align 4
  %30 = load float* %x.addr, align 4
  %31 = load float* %w, align 4
  %mul35 = fmul float %30, %31
  %add36 = fadd float %29, %mul35
  store float %add36, float* %retval
  br label %return

if.end37:                                         ; preds = %if.end
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.else5
  br label %if.end39

if.end39:                                         ; preds = %if.end38
  br label %if.end40

if.end40:                                         ; preds = %if.end39
  %32 = load float* %x.addr, align 4
  %call = call float @fabsf(float %32) #6
  %sub41 = fsub float 1.000000e+00, %call
  store float %sub41, float* %w, align 4
  %33 = load float* %w, align 4
  %mul42 = fmul float %33, 5.000000e-01
  store float %mul42, float* %t, align 4
  %34 = load float* %t, align 4
  %35 = load float* %t, align 4
  %36 = load float* %t, align 4
  %37 = load float* %t, align 4
  %38 = load float* %t, align 4
  %39 = load float* %t, align 4
  %mul43 = fmul float %39, 0x3F023DE100000000
  %add44 = fadd float 0x3F49EFE080000000, %mul43
  %mul45 = fmul float %38, %add44
  %add46 = fadd float 0xBFA48228C0000000, %mul45
  %mul47 = fmul float %37, %add46
  %add48 = fadd float 0x3FC9C15500000000, %mul47
  %mul49 = fmul float %36, %add48
  %add50 = fadd float 0xBFD4D61200000000, %mul49
  %mul51 = fmul float %35, %add50
  %add52 = fadd float 0x3FC5555560000000, %mul51
  %mul53 = fmul float %34, %add52
  store float %mul53, float* %p, align 4
  %40 = load float* %t, align 4
  %41 = load float* %t, align 4
  %42 = load float* %t, align 4
  %43 = load float* %t, align 4
  %mul54 = fmul float %43, 0x3FB3B8C5C0000000
  %add55 = fadd float 0xBFE6066C20000000, %mul54
  %mul56 = fmul float %42, %add55
  %add57 = fadd float 0x40002AE5A0000000, %mul56
  %mul58 = fmul float %41, %add57
  %add59 = fadd float 0xC0033A2720000000, %mul58
  %mul60 = fmul float %40, %add59
  %add61 = fadd float 1.000000e+00, %mul60
  store float %add61, float* %q, align 4
  %44 = load float* %t, align 4
  %call62 = call float @__ieee754_sqrtf(float %44) #5
  store float %call62, float* %s, align 4
  %45 = load i32* %ix, align 4
  %cmp63 = icmp sge i32 %45, 1064933786
  br i1 %cmp63, label %if.then64, label %if.else71

if.then64:                                        ; preds = %if.end40
  %46 = load float* %p, align 4
  %47 = load float* %q, align 4
  %div65 = fdiv float %46, %47
  store float %div65, float* %w, align 4
  %48 = load float* %s, align 4
  %49 = load float* %s, align 4
  %50 = load float* %w, align 4
  %mul66 = fmul float %49, %50
  %add67 = fadd float %48, %mul66
  %mul68 = fmul float 2.000000e+00, %add67
  %sub69 = fsub float %mul68, 0xBE6777A5C0000000
  %sub70 = fsub float 0x3FF921FB60000000, %sub69
  store float %sub70, float* %t, align 4
  br label %if.end96

if.else71:                                        ; preds = %if.end40
  %51 = load float* %s, align 4
  store float %51, float* %w, align 4
  br label %do.body72

do.body72:                                        ; preds = %if.else71
  %52 = load float* %w, align 4
  %value74 = bitcast %union.ieee_float_shape_type* %gf_u73 to float*
  store float %52, float* %value74, align 4
  %word75 = bitcast %union.ieee_float_shape_type* %gf_u73 to i32*
  %53 = load i32* %word75, align 4
  store i32 %53, i32* %iw, align 4
  br label %do.end76

do.end76:                                         ; preds = %do.body72
  br label %do.body77

do.body77:                                        ; preds = %do.end76
  %54 = load i32* %iw, align 4
  %and78 = and i32 %54, -4096
  %word79 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %and78, i32* %word79, align 4
  %value80 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %55 = load float* %value80, align 4
  store float %55, float* %w, align 4
  br label %do.end81

do.end81:                                         ; preds = %do.body77
  %56 = load float* %t, align 4
  %57 = load float* %w, align 4
  %58 = load float* %w, align 4
  %mul82 = fmul float %57, %58
  %sub83 = fsub float %56, %mul82
  %59 = load float* %s, align 4
  %60 = load float* %w, align 4
  %add84 = fadd float %59, %60
  %div85 = fdiv float %sub83, %add84
  store float %div85, float* %c, align 4
  %61 = load float* %p, align 4
  %62 = load float* %q, align 4
  %div86 = fdiv float %61, %62
  store float %div86, float* %r, align 4
  %63 = load float* %s, align 4
  %mul87 = fmul float 2.000000e+00, %63
  %64 = load float* %r, align 4
  %mul88 = fmul float %mul87, %64
  %65 = load float* %c, align 4
  %mul89 = fmul float 2.000000e+00, %65
  %sub90 = fsub float 0xBE6777A5C0000000, %mul89
  %sub91 = fsub float %mul88, %sub90
  store float %sub91, float* %p, align 4
  %66 = load float* %w, align 4
  %mul92 = fmul float 2.000000e+00, %66
  %sub93 = fsub float 0x3FE921FB60000000, %mul92
  store float %sub93, float* %q, align 4
  %67 = load float* %p, align 4
  %68 = load float* %q, align 4
  %sub94 = fsub float %67, %68
  %sub95 = fsub float 0x3FE921FB60000000, %sub94
  store float %sub95, float* %t, align 4
  br label %if.end96

if.end96:                                         ; preds = %do.end81, %if.then64
  %69 = load i32* %hx, align 4
  %cmp97 = icmp sgt i32 %69, 0
  br i1 %cmp97, label %if.then98, label %if.else99

if.then98:                                        ; preds = %if.end96
  %70 = load float* %t, align 4
  store float %70, float* %retval
  br label %return

if.else99:                                        ; preds = %if.end96
  %71 = load float* %t, align 4
  %sub100 = fsub float -0.000000e+00, %71
  store float %sub100, float* %retval
  br label %return

return:                                           ; preds = %if.else99, %if.then98, %if.else13, %if.then12, %if.then3, %if.then
  %72 = load float* %retval
  ret float %72
}

; Function Attrs: nounwind
define float @__ieee754_atan2f(float %y, float %x) #2 {
entry:
  %retval = alloca float, align 4
  %y.addr = alloca float, align 4
  %x.addr = alloca float, align 4
  %z = alloca float, align 4
  %k = alloca i32, align 4
  %m = alloca i32, align 4
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %ix = alloca i32, align 4
  %iy = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u2 = alloca %union.ieee_float_shape_type, align 4
  %zh = alloca i32, align 4
  %gf_u59 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %y, float* %y.addr, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %3 = load float* %y.addr, align 4
  %value3 = bitcast %union.ieee_float_shape_type* %gf_u2 to float*
  store float %3, float* %value3, align 4
  %word4 = bitcast %union.ieee_float_shape_type* %gf_u2 to i32*
  %4 = load i32* %word4, align 4
  store i32 %4, i32* %hy, align 4
  br label %do.end5

do.end5:                                          ; preds = %do.body1
  %5 = load i32* %hy, align 4
  %and6 = and i32 %5, 2147483647
  store i32 %and6, i32* %iy, align 4
  %6 = load i32* %ix, align 4
  %cmp = icmp sgt i32 %6, 2139095040
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end5
  %7 = load i32* %iy, align 4
  %cmp7 = icmp sgt i32 %7, 2139095040
  br i1 %cmp7, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %do.end5
  %8 = load float* %x.addr, align 4
  %9 = load float* %y.addr, align 4
  %add = fadd float %8, %9
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %10 = load i32* %hx, align 4
  %cmp8 = icmp eq i32 %10, 1065353216
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end
  %11 = load float* %y.addr, align 4
  %call = call float @atanf(float %11) #4
  store float %call, float* %retval
  br label %return

if.end10:                                         ; preds = %if.end
  %12 = load i32* %hy, align 4
  %shr = ashr i32 %12, 31
  %and11 = and i32 %shr, 1
  %13 = load i32* %hx, align 4
  %shr12 = ashr i32 %13, 30
  %and13 = and i32 %shr12, 2
  %or = or i32 %and11, %and13
  store i32 %or, i32* %m, align 4
  %14 = load i32* %iy, align 4
  %cmp14 = icmp eq i32 %14, 0
  br i1 %cmp14, label %if.then15, label %if.end18

if.then15:                                        ; preds = %if.end10
  %15 = load i32* %m, align 4
  switch i32 %15, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb16
    i32 3, label %sw.bb17
  ]

sw.bb:                                            ; preds = %if.then15, %if.then15
  %16 = load float* %y.addr, align 4
  store float %16, float* %retval
  br label %return

sw.bb16:                                          ; preds = %if.then15
  store float 0x400921FB60000000, float* %retval
  br label %return

sw.bb17:                                          ; preds = %if.then15
  store float 0xC00921FB60000000, float* %retval
  br label %return

sw.epilog:                                        ; preds = %if.then15
  br label %if.end18

if.end18:                                         ; preds = %sw.epilog, %if.end10
  %17 = load i32* %ix, align 4
  %cmp19 = icmp eq i32 %17, 0
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end18
  %18 = load i32* %hy, align 4
  %cmp21 = icmp slt i32 %18, 0
  %cond = select i1 %cmp21, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  store float %cond, float* %retval
  br label %return

if.end22:                                         ; preds = %if.end18
  %19 = load i32* %ix, align 4
  %cmp23 = icmp eq i32 %19, 2139095040
  br i1 %cmp23, label %if.then24, label %if.end38

if.then24:                                        ; preds = %if.end22
  %20 = load i32* %iy, align 4
  %cmp25 = icmp eq i32 %20, 2139095040
  br i1 %cmp25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then24
  %21 = load i32* %m, align 4
  switch i32 %21, label %sw.epilog31 [
    i32 0, label %sw.bb27
    i32 1, label %sw.bb28
    i32 2, label %sw.bb29
    i32 3, label %sw.bb30
  ]

sw.bb27:                                          ; preds = %if.then26
  store float 0x3FE921FB60000000, float* %retval
  br label %return

sw.bb28:                                          ; preds = %if.then26
  store float 0xBFE921FB60000000, float* %retval
  br label %return

sw.bb29:                                          ; preds = %if.then26
  store float 0x4002D97C80000000, float* %retval
  br label %return

sw.bb30:                                          ; preds = %if.then26
  store float 0xC002D97C80000000, float* %retval
  br label %return

sw.epilog31:                                      ; preds = %if.then26
  br label %if.end37

if.else:                                          ; preds = %if.then24
  %22 = load i32* %m, align 4
  switch i32 %22, label %sw.epilog36 [
    i32 0, label %sw.bb32
    i32 1, label %sw.bb33
    i32 2, label %sw.bb34
    i32 3, label %sw.bb35
  ]

sw.bb32:                                          ; preds = %if.else
  store float 0.000000e+00, float* %retval
  br label %return

sw.bb33:                                          ; preds = %if.else
  store float -0.000000e+00, float* %retval
  br label %return

sw.bb34:                                          ; preds = %if.else
  store float 0x400921FB60000000, float* %retval
  br label %return

sw.bb35:                                          ; preds = %if.else
  store float 0xC00921FB60000000, float* %retval
  br label %return

sw.epilog36:                                      ; preds = %if.else
  br label %if.end37

if.end37:                                         ; preds = %sw.epilog36, %sw.epilog31
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.end22
  %23 = load i32* %iy, align 4
  %cmp39 = icmp eq i32 %23, 2139095040
  br i1 %cmp39, label %if.then40, label %if.end43

if.then40:                                        ; preds = %if.end38
  %24 = load i32* %hy, align 4
  %cmp41 = icmp slt i32 %24, 0
  %cond42 = select i1 %cmp41, float 0xBFF921FB60000000, float 0x3FF921FB60000000
  store float %cond42, float* %retval
  br label %return

if.end43:                                         ; preds = %if.end38
  %25 = load i32* %iy, align 4
  %26 = load i32* %ix, align 4
  %sub = sub nsw i32 %25, %26
  %shr44 = ashr i32 %sub, 23
  store i32 %shr44, i32* %k, align 4
  %27 = load i32* %k, align 4
  %cmp45 = icmp sgt i32 %27, 60
  br i1 %cmp45, label %if.then46, label %if.else47

if.then46:                                        ; preds = %if.end43
  store float 0x3FF921FB60000000, float* %z, align 4
  br label %if.end55

if.else47:                                        ; preds = %if.end43
  %28 = load i32* %hx, align 4
  %cmp48 = icmp slt i32 %28, 0
  br i1 %cmp48, label %land.lhs.true, label %if.else51

land.lhs.true:                                    ; preds = %if.else47
  %29 = load i32* %k, align 4
  %cmp49 = icmp slt i32 %29, -60
  br i1 %cmp49, label %if.then50, label %if.else51

if.then50:                                        ; preds = %land.lhs.true
  store float 0.000000e+00, float* %z, align 4
  br label %if.end54

if.else51:                                        ; preds = %land.lhs.true, %if.else47
  %30 = load float* %y.addr, align 4
  %31 = load float* %x.addr, align 4
  %div = fdiv float %30, %31
  %call52 = call float @fabsf(float %div) #6
  %call53 = call float @atanf(float %call52) #4
  store float %call53, float* %z, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.else51, %if.then50
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.then46
  %32 = load i32* %m, align 4
  switch i32 %32, label %sw.default [
    i32 0, label %sw.bb56
    i32 1, label %sw.bb57
    i32 2, label %sw.bb67
  ]

sw.bb56:                                          ; preds = %if.end55
  %33 = load float* %z, align 4
  store float %33, float* %retval
  br label %return

sw.bb57:                                          ; preds = %if.end55
  br label %do.body58

do.body58:                                        ; preds = %sw.bb57
  %34 = load float* %z, align 4
  %value60 = bitcast %union.ieee_float_shape_type* %gf_u59 to float*
  store float %34, float* %value60, align 4
  %word61 = bitcast %union.ieee_float_shape_type* %gf_u59 to i32*
  %35 = load i32* %word61, align 4
  store i32 %35, i32* %zh, align 4
  br label %do.end62

do.end62:                                         ; preds = %do.body58
  br label %do.body63

do.body63:                                        ; preds = %do.end62
  %36 = load i32* %zh, align 4
  %xor = xor i32 %36, -2147483648
  %word64 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %xor, i32* %word64, align 4
  %value65 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %37 = load float* %value65, align 4
  store float %37, float* %z, align 4
  br label %do.end66

do.end66:                                         ; preds = %do.body63
  %38 = load float* %z, align 4
  store float %38, float* %retval
  br label %return

sw.bb67:                                          ; preds = %if.end55
  %39 = load float* %z, align 4
  %sub68 = fsub float %39, 0xBE7777A5C0000000
  %sub69 = fsub float 0x400921FB60000000, %sub68
  store float %sub69, float* %retval
  br label %return

sw.default:                                       ; preds = %if.end55
  %40 = load float* %z, align 4
  %sub70 = fsub float %40, 0xBE7777A5C0000000
  %sub71 = fsub float %sub70, 0x400921FB60000000
  store float %sub71, float* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb67, %do.end66, %sw.bb56, %if.then40, %sw.bb35, %sw.bb34, %sw.bb33, %sw.bb32, %sw.bb30, %sw.bb29, %sw.bb28, %sw.bb27, %if.then20, %sw.bb17, %sw.bb16, %sw.bb, %if.then9, %if.then
  %41 = load float* %retval
  ret float %41
}

; Function Attrs: nounwind
define float @__ieee754_atanhf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %t = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sgt i32 %3, 1065353216
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %sub = fsub float %4, %5
  %6 = load float* %x.addr, align 4
  %7 = load float* %x.addr, align 4
  %sub1 = fsub float %6, %7
  %div = fdiv float %sub, %sub1
  store float %div, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %8 = load i32* %ix, align 4
  %cmp2 = icmp eq i32 %8, 1065353216
  br i1 %cmp2, label %if.then3, label %if.end5

if.then3:                                         ; preds = %if.end
  %9 = load float* %x.addr, align 4
  %div4 = fdiv float %9, 0.000000e+00
  store float %div4, float* %retval
  br label %return

if.end5:                                          ; preds = %if.end
  %10 = load i32* %ix, align 4
  %cmp6 = icmp slt i32 %10, 830472192
  br i1 %cmp6, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %if.end5
  %11 = load float* %x.addr, align 4
  %add = fadd float 0x46293E5940000000, %11
  %cmp7 = fcmp ogt float %add, 0.000000e+00
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %land.lhs.true
  %12 = load float* %x.addr, align 4
  store float %12, float* %retval
  br label %return

if.end9:                                          ; preds = %land.lhs.true, %if.end5
  br label %do.body10

do.body10:                                        ; preds = %if.end9
  %13 = load i32* %ix, align 4
  %word11 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %13, i32* %word11, align 4
  %value12 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %14 = load float* %value12, align 4
  store float %14, float* %x.addr, align 4
  br label %do.end13

do.end13:                                         ; preds = %do.body10
  %15 = load i32* %ix, align 4
  %cmp14 = icmp slt i32 %15, 1056964608
  br i1 %cmp14, label %if.then15, label %if.else

if.then15:                                        ; preds = %do.end13
  %16 = load float* %x.addr, align 4
  %17 = load float* %x.addr, align 4
  %add16 = fadd float %16, %17
  store float %add16, float* %t, align 4
  %18 = load float* %t, align 4
  %19 = load float* %t, align 4
  %20 = load float* %x.addr, align 4
  %mul = fmul float %19, %20
  %21 = load float* %x.addr, align 4
  %sub17 = fsub float 1.000000e+00, %21
  %div18 = fdiv float %mul, %sub17
  %add19 = fadd float %18, %div18
  %call = call float @log1pf(float %add19) #4
  %mul20 = fmul float 5.000000e-01, %call
  store float %mul20, float* %t, align 4
  br label %if.end26

if.else:                                          ; preds = %do.end13
  %22 = load float* %x.addr, align 4
  %23 = load float* %x.addr, align 4
  %add21 = fadd float %22, %23
  %24 = load float* %x.addr, align 4
  %sub22 = fsub float 1.000000e+00, %24
  %div23 = fdiv float %add21, %sub22
  %call24 = call float @log1pf(float %div23) #4
  %mul25 = fmul float 5.000000e-01, %call24
  store float %mul25, float* %t, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then15
  %25 = load i32* %hx, align 4
  %cmp27 = icmp sge i32 %25, 0
  br i1 %cmp27, label %if.then28, label %if.else29

if.then28:                                        ; preds = %if.end26
  %26 = load float* %t, align 4
  store float %26, float* %retval
  br label %return

if.else29:                                        ; preds = %if.end26
  %27 = load float* %t, align 4
  %sub30 = fsub float -0.000000e+00, %27
  store float %sub30, float* %retval
  br label %return

return:                                           ; preds = %if.else29, %if.then28, %if.then8, %if.then3, %if.then
  %28 = load float* %retval
  ret float %28
}

; Function Attrs: nounwind
define float @__ieee754_coshf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %t = alloca float, align 4
  %w = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %mul = fmul float %4, %5
  store float %mul, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %6, 1051816472
  br i1 %cmp1, label %if.then2, label %if.end10

if.then2:                                         ; preds = %if.end
  %7 = load float* %x.addr, align 4
  %call = call float @fabsf(float %7) #6
  %call3 = call float @expm1f(float %call) #4
  store float %call3, float* %t, align 4
  %8 = load float* %t, align 4
  %add = fadd float 1.000000e+00, %8
  store float %add, float* %w, align 4
  %9 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %9, 603979776
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then2
  %10 = load float* %w, align 4
  store float %10, float* %retval
  br label %return

if.end6:                                          ; preds = %if.then2
  %11 = load float* %t, align 4
  %12 = load float* %t, align 4
  %mul7 = fmul float %11, %12
  %13 = load float* %w, align 4
  %14 = load float* %w, align 4
  %add8 = fadd float %13, %14
  %div = fdiv float %mul7, %add8
  %add9 = fadd float 1.000000e+00, %div
  store float %add9, float* %retval
  br label %return

if.end10:                                         ; preds = %if.end
  %15 = load i32* %ix, align 4
  %cmp11 = icmp slt i32 %15, 1102053376
  br i1 %cmp11, label %if.then12, label %if.end18

if.then12:                                        ; preds = %if.end10
  %16 = load float* %x.addr, align 4
  %call13 = call float @fabsf(float %16) #6
  %call14 = call float @__ieee754_expf(float %call13) #5
  store float %call14, float* %t, align 4
  %17 = load float* %t, align 4
  %mul15 = fmul float 5.000000e-01, %17
  %18 = load float* %t, align 4
  %div16 = fdiv float 5.000000e-01, %18
  %add17 = fadd float %mul15, %div16
  store float %add17, float* %retval
  br label %return

if.end18:                                         ; preds = %if.end10
  %19 = load i32* %ix, align 4
  %cmp19 = icmp sle i32 %19, 1118925335
  br i1 %cmp19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %if.end18
  %20 = load float* %x.addr, align 4
  %call21 = call float @fabsf(float %20) #6
  %call22 = call float @__ieee754_expf(float %call21) #5
  %mul23 = fmul float 5.000000e-01, %call22
  store float %mul23, float* %retval
  br label %return

if.end24:                                         ; preds = %if.end18
  %21 = load i32* %ix, align 4
  %cmp25 = icmp sle i32 %21, 1119016188
  br i1 %cmp25, label %if.then26, label %if.end32

if.then26:                                        ; preds = %if.end24
  %22 = load float* %x.addr, align 4
  %call27 = call float @fabsf(float %22) #6
  %mul28 = fmul float 5.000000e-01, %call27
  %call29 = call float @__ieee754_expf(float %mul28) #5
  store float %call29, float* %w, align 4
  %23 = load float* %w, align 4
  %mul30 = fmul float 5.000000e-01, %23
  store float %mul30, float* %t, align 4
  %24 = load float* %t, align 4
  %25 = load float* %w, align 4
  %mul31 = fmul float %24, %25
  store float %mul31, float* %retval
  br label %return

if.end32:                                         ; preds = %if.end24
  store float 0x7FF0000000000000, float* %retval
  br label %return

return:                                           ; preds = %if.end32, %if.then26, %if.then20, %if.then12, %if.end6, %if.then5, %if.then
  %26 = load float* %retval
  ret float %26
}

; Function Attrs: nounwind
define float @__ieee754_expf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y = alloca float, align 4
  %hi = alloca float, align 4
  %lo = alloca float, align 4
  %c = alloca float, align 4
  %t = alloca float, align 4
  %k = alloca i32, align 4
  %xsb = alloca i32, align 4
  %sx = alloca i32, align 4
  %hx = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %hy = alloca i32, align 4
  %gf_u77 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  %hy87 = alloca i32, align 4
  %gf_u89 = alloca %union.ieee_float_shape_type, align 4
  %sf_u94 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store i32 0, i32* %k, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %sx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %sx, align 4
  %shr = ashr i32 %2, 31
  %and = and i32 %shr, 1
  store i32 %and, i32* %xsb, align 4
  %3 = load i32* %sx, align 4
  %and1 = and i32 %3, 2147483647
  store i32 %and1, i32* %hx, align 4
  %4 = load i32* %hx, align 4
  %cmp = icmp ugt i32 %4, 2139095040
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %5 = load float* %x.addr, align 4
  %6 = load float* %x.addr, align 4
  %add = fadd float %5, %6
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %hx, align 4
  %cmp2 = icmp eq i32 %7, 2139095040
  br i1 %cmp2, label %if.then3, label %if.end6

if.then3:                                         ; preds = %if.end
  %8 = load i32* %xsb, align 4
  %cmp4 = icmp eq i32 %8, 0
  br i1 %cmp4, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then3
  %9 = load float* %x.addr, align 4
  %conv = fpext float %9 to double
  br label %cond.end

cond.false:                                       ; preds = %if.then3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ 0.000000e+00, %cond.false ]
  %conv5 = fptrunc double %cond to float
  store float %conv5, float* %retval
  br label %return

if.end6:                                          ; preds = %if.end
  %10 = load i32* %sx, align 4
  %cmp7 = icmp sgt i32 %10, 1118925335
  br i1 %cmp7, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end6
  store float 0x7FF0000000000000, float* %retval
  br label %return

if.end10:                                         ; preds = %if.end6
  %11 = load i32* %sx, align 4
  %cmp11 = icmp slt i32 %11, 0
  br i1 %cmp11, label %land.lhs.true, label %if.end16

land.lhs.true:                                    ; preds = %if.end10
  %12 = load i32* %hx, align 4
  %cmp13 = icmp ugt i32 %12, 1120924085
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %land.lhs.true
  store float 0.000000e+00, float* %retval
  br label %return

if.end16:                                         ; preds = %land.lhs.true, %if.end10
  %13 = load i32* %hx, align 4
  %cmp17 = icmp ugt i32 %13, 1051816472
  br i1 %cmp17, label %if.then19, label %if.else35

if.then19:                                        ; preds = %if.end16
  %14 = load i32* %hx, align 4
  %cmp20 = icmp ult i32 %14, 1065686418
  br i1 %cmp20, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.then19
  %15 = load float* %x.addr, align 4
  %16 = load i32* %xsb, align 4
  %arrayidx = getelementptr inbounds [2 x float]* @ln2HI31, i32 0, i32 %16
  %17 = load float* %arrayidx, align 4
  %sub = fsub float %15, %17
  store float %sub, float* %hi, align 4
  %18 = load i32* %xsb, align 4
  %arrayidx23 = getelementptr inbounds [2 x float]* @ln2LO32, i32 0, i32 %18
  %19 = load float* %arrayidx23, align 4
  store float %19, float* %lo, align 4
  %20 = load i32* %xsb, align 4
  %sub24 = sub nsw i32 1, %20
  %21 = load i32* %xsb, align 4
  %sub25 = sub nsw i32 %sub24, %21
  store i32 %sub25, i32* %k, align 4
  br label %if.end33

if.else:                                          ; preds = %if.then19
  %22 = load float* %x.addr, align 4
  %mul = fmul float 0x3FF7154760000000, %22
  %23 = load i32* %xsb, align 4
  %arrayidx26 = getelementptr inbounds [2 x float]* @halF33, i32 0, i32 %23
  %24 = load float* %arrayidx26, align 4
  %add27 = fadd float %mul, %24
  %conv28 = fptosi float %add27 to i32
  store i32 %conv28, i32* %k, align 4
  %25 = load i32* %k, align 4
  %conv29 = sitofp i32 %25 to float
  store float %conv29, float* %t, align 4
  %26 = load float* %x.addr, align 4
  %27 = load float* %t, align 4
  %28 = load float* getelementptr inbounds ([2 x float]* @ln2HI31, i32 0, i32 0), align 4
  %mul30 = fmul float %27, %28
  %sub31 = fsub float %26, %mul30
  store float %sub31, float* %hi, align 4
  %29 = load float* %t, align 4
  %30 = load float* getelementptr inbounds ([2 x float]* @ln2LO32, i32 0, i32 0), align 4
  %mul32 = fmul float %29, %30
  store float %mul32, float* %lo, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then22
  %31 = load float* %hi, align 4
  %32 = load float* %lo, align 4
  %sub34 = fsub float %31, %32
  store float %sub34, float* %x.addr, align 4
  br label %if.end46

if.else35:                                        ; preds = %if.end16
  %33 = load i32* %hx, align 4
  %cmp36 = icmp ult i32 %33, 830472192
  br i1 %cmp36, label %if.then38, label %if.end45

if.then38:                                        ; preds = %if.else35
  %34 = load float* %x.addr, align 4
  %add39 = fadd float 0x46293E5940000000, %34
  %cmp40 = fcmp ogt float %add39, 1.000000e+00
  br i1 %cmp40, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.then38
  %35 = load float* %x.addr, align 4
  %add43 = fadd float 1.000000e+00, %35
  store float %add43, float* %retval
  br label %return

if.end44:                                         ; preds = %if.then38
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.else35
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end33
  %36 = load float* %x.addr, align 4
  %37 = load float* %x.addr, align 4
  %mul47 = fmul float %36, %37
  store float %mul47, float* %t, align 4
  %38 = load float* %x.addr, align 4
  %39 = load float* %t, align 4
  %40 = load float* %t, align 4
  %41 = load float* %t, align 4
  %42 = load float* %t, align 4
  %43 = load float* %t, align 4
  %mul48 = fmul float %43, 0x3E66376980000000
  %add49 = fadd float 0xBEBBBD41C0000000, %mul48
  %mul50 = fmul float %42, %add49
  %add51 = fadd float 0x3F11566AA0000000, %mul50
  %mul52 = fmul float %41, %add51
  %add53 = fadd float 0xBF66C16C20000000, %mul52
  %mul54 = fmul float %40, %add53
  %add55 = fadd float 0x3FC5555560000000, %mul54
  %mul56 = fmul float %39, %add55
  %sub57 = fsub float %38, %mul56
  store float %sub57, float* %c, align 4
  %44 = load i32* %k, align 4
  %cmp58 = icmp eq i32 %44, 0
  br i1 %cmp58, label %if.then60, label %if.else65

if.then60:                                        ; preds = %if.end46
  %45 = load float* %x.addr, align 4
  %46 = load float* %c, align 4
  %mul61 = fmul float %45, %46
  %47 = load float* %c, align 4
  %sub62 = fsub float %47, 2.000000e+00
  %div = fdiv float %mul61, %sub62
  %48 = load float* %x.addr, align 4
  %sub63 = fsub float %div, %48
  %sub64 = fsub float 1.000000e+00, %sub63
  store float %sub64, float* %retval
  br label %return

if.else65:                                        ; preds = %if.end46
  %49 = load float* %lo, align 4
  %50 = load float* %x.addr, align 4
  %51 = load float* %c, align 4
  %mul66 = fmul float %50, %51
  %52 = load float* %c, align 4
  %sub67 = fsub float 2.000000e+00, %52
  %div68 = fdiv float %mul66, %sub67
  %sub69 = fsub float %49, %div68
  %53 = load float* %hi, align 4
  %sub70 = fsub float %sub69, %53
  %sub71 = fsub float 1.000000e+00, %sub70
  store float %sub71, float* %y, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.else65
  %54 = load i32* %k, align 4
  %cmp73 = icmp sge i32 %54, -125
  br i1 %cmp73, label %if.then75, label %if.else86

if.then75:                                        ; preds = %if.end72
  br label %do.body76

do.body76:                                        ; preds = %if.then75
  %55 = load float* %y, align 4
  %value78 = bitcast %union.ieee_float_shape_type* %gf_u77 to float*
  store float %55, float* %value78, align 4
  %word79 = bitcast %union.ieee_float_shape_type* %gf_u77 to i32*
  %56 = load i32* %word79, align 4
  store i32 %56, i32* %hy, align 4
  br label %do.end80

do.end80:                                         ; preds = %do.body76
  br label %do.body81

do.body81:                                        ; preds = %do.end80
  %57 = load i32* %hy, align 4
  %58 = load i32* %k, align 4
  %shl = shl i32 %58, 23
  %add82 = add i32 %57, %shl
  %word83 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %add82, i32* %word83, align 4
  %value84 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %59 = load float* %value84, align 4
  store float %59, float* %y, align 4
  br label %do.end85

do.end85:                                         ; preds = %do.body81
  %60 = load float* %y, align 4
  store float %60, float* %retval
  br label %return

if.else86:                                        ; preds = %if.end72
  br label %do.body88

do.body88:                                        ; preds = %if.else86
  %61 = load float* %y, align 4
  %value90 = bitcast %union.ieee_float_shape_type* %gf_u89 to float*
  store float %61, float* %value90, align 4
  %word91 = bitcast %union.ieee_float_shape_type* %gf_u89 to i32*
  %62 = load i32* %word91, align 4
  store i32 %62, i32* %hy87, align 4
  br label %do.end92

do.end92:                                         ; preds = %do.body88
  br label %do.body93

do.body93:                                        ; preds = %do.end92
  %63 = load i32* %hy87, align 4
  %64 = load i32* %k, align 4
  %add95 = add nsw i32 %64, 100
  %shl96 = shl i32 %add95, 23
  %add97 = add i32 %63, %shl96
  %word98 = bitcast %union.ieee_float_shape_type* %sf_u94 to i32*
  store i32 %add97, i32* %word98, align 4
  %value99 = bitcast %union.ieee_float_shape_type* %sf_u94 to float*
  %65 = load float* %value99, align 4
  store float %65, float* %y, align 4
  br label %do.end100

do.end100:                                        ; preds = %do.body93
  %66 = load float* %y, align 4
  %mul101 = fmul float %66, 0x39B0000000000000
  store float %mul101, float* %retval
  br label %return

return:                                           ; preds = %do.end100, %do.end85, %if.then60, %if.then42, %if.then15, %if.then9, %cond.end, %if.then
  %67 = load float* %retval
  ret float %67
}

; Function Attrs: nounwind
define float @__ieee754_fmodf(float %x, float %y) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  %n = alloca i32, align 4
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %ix = alloca i32, align 4
  %iy = alloca i32, align 4
  %sx = alloca i32, align 4
  %i = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u2 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u95 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %2 = load float* %y.addr, align 4
  %value3 = bitcast %union.ieee_float_shape_type* %gf_u2 to float*
  store float %2, float* %value3, align 4
  %word4 = bitcast %union.ieee_float_shape_type* %gf_u2 to i32*
  %3 = load i32* %word4, align 4
  store i32 %3, i32* %hy, align 4
  br label %do.end5

do.end5:                                          ; preds = %do.body1
  %4 = load i32* %hx, align 4
  %and = and i32 %4, -2147483648
  store i32 %and, i32* %sx, align 4
  %5 = load i32* %sx, align 4
  %6 = load i32* %hx, align 4
  %xor = xor i32 %6, %5
  store i32 %xor, i32* %hx, align 4
  %7 = load i32* %hy, align 4
  %and6 = and i32 %7, 2147483647
  store i32 %and6, i32* %hy, align 4
  %8 = load i32* %hy, align 4
  %cmp = icmp eq i32 %8, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end5
  %9 = load i32* %hx, align 4
  %cmp7 = icmp slt i32 %9, 2139095040
  br i1 %cmp7, label %lor.lhs.false8, label %if.then

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %10 = load i32* %hy, align 4
  %cmp9 = icmp sgt i32 %10, 2139095040
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false8, %lor.lhs.false, %do.end5
  %11 = load float* %x.addr, align 4
  %12 = load float* %y.addr, align 4
  %mul = fmul float %11, %12
  %13 = load float* %x.addr, align 4
  %14 = load float* %y.addr, align 4
  %mul10 = fmul float %13, %14
  %div = fdiv float %mul, %mul10
  store float %div, float* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false8
  %15 = load i32* %hx, align 4
  %16 = load i32* %hy, align 4
  %cmp11 = icmp slt i32 %15, %16
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.end
  %17 = load float* %x.addr, align 4
  store float %17, float* %retval
  br label %return

if.end13:                                         ; preds = %if.end
  %18 = load i32* %hx, align 4
  %19 = load i32* %hy, align 4
  %cmp14 = icmp eq i32 %18, %19
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end13
  %20 = load i32* %sx, align 4
  %shr = lshr i32 %20, 31
  %arrayidx = getelementptr inbounds [2 x float]* @Zero, i32 0, i32 %shr
  %21 = load float* %arrayidx, align 4
  store float %21, float* %retval
  br label %return

if.end16:                                         ; preds = %if.end13
  %22 = load i32* %hx, align 4
  %cmp17 = icmp slt i32 %22, 8388608
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.end16
  store i32 -126, i32* %ix, align 4
  %23 = load i32* %hx, align 4
  %shl = shl i32 %23, 8
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then18
  %24 = load i32* %i, align 4
  %cmp19 = icmp sgt i32 %24, 0
  br i1 %cmp19, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load i32* %ix, align 4
  %sub = sub nsw i32 %25, 1
  store i32 %sub, i32* %ix, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %26 = load i32* %i, align 4
  %shl20 = shl i32 %26, 1
  store i32 %shl20, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end23

if.else:                                          ; preds = %if.end16
  %27 = load i32* %hx, align 4
  %shr21 = ashr i32 %27, 23
  %sub22 = sub nsw i32 %shr21, 127
  store i32 %sub22, i32* %ix, align 4
  br label %if.end23

if.end23:                                         ; preds = %if.else, %for.end
  %28 = load i32* %hy, align 4
  %cmp24 = icmp slt i32 %28, 8388608
  br i1 %cmp24, label %if.then25, label %if.else34

if.then25:                                        ; preds = %if.end23
  store i32 -126, i32* %iy, align 4
  %29 = load i32* %hy, align 4
  %shl26 = shl i32 %29, 8
  store i32 %shl26, i32* %i, align 4
  br label %for.cond27

for.cond27:                                       ; preds = %for.inc31, %if.then25
  %30 = load i32* %i, align 4
  %cmp28 = icmp sge i32 %30, 0
  br i1 %cmp28, label %for.body29, label %for.end33

for.body29:                                       ; preds = %for.cond27
  %31 = load i32* %iy, align 4
  %sub30 = sub nsw i32 %31, 1
  store i32 %sub30, i32* %iy, align 4
  br label %for.inc31

for.inc31:                                        ; preds = %for.body29
  %32 = load i32* %i, align 4
  %shl32 = shl i32 %32, 1
  store i32 %shl32, i32* %i, align 4
  br label %for.cond27

for.end33:                                        ; preds = %for.cond27
  br label %if.end37

if.else34:                                        ; preds = %if.end23
  %33 = load i32* %hy, align 4
  %shr35 = ashr i32 %33, 23
  %sub36 = sub nsw i32 %shr35, 127
  store i32 %sub36, i32* %iy, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.else34, %for.end33
  %34 = load i32* %ix, align 4
  %cmp38 = icmp sge i32 %34, -126
  br i1 %cmp38, label %if.then39, label %if.else41

if.then39:                                        ; preds = %if.end37
  %35 = load i32* %hx, align 4
  %and40 = and i32 8388607, %35
  %or = or i32 8388608, %and40
  store i32 %or, i32* %hx, align 4
  br label %if.end44

if.else41:                                        ; preds = %if.end37
  %36 = load i32* %ix, align 4
  %sub42 = sub nsw i32 -126, %36
  store i32 %sub42, i32* %n, align 4
  %37 = load i32* %hx, align 4
  %38 = load i32* %n, align 4
  %shl43 = shl i32 %37, %38
  store i32 %shl43, i32* %hx, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.else41, %if.then39
  %39 = load i32* %iy, align 4
  %cmp45 = icmp sge i32 %39, -126
  br i1 %cmp45, label %if.then46, label %if.else49

if.then46:                                        ; preds = %if.end44
  %40 = load i32* %hy, align 4
  %and47 = and i32 8388607, %40
  %or48 = or i32 8388608, %and47
  store i32 %or48, i32* %hy, align 4
  br label %if.end52

if.else49:                                        ; preds = %if.end44
  %41 = load i32* %iy, align 4
  %sub50 = sub nsw i32 -126, %41
  store i32 %sub50, i32* %n, align 4
  %42 = load i32* %hy, align 4
  %43 = load i32* %n, align 4
  %shl51 = shl i32 %42, %43
  store i32 %shl51, i32* %hy, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.else49, %if.then46
  %44 = load i32* %ix, align 4
  %45 = load i32* %iy, align 4
  %sub53 = sub nsw i32 %44, %45
  store i32 %sub53, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end64, %if.end52
  %46 = load i32* %n, align 4
  %dec = add nsw i32 %46, -1
  store i32 %dec, i32* %n, align 4
  %tobool = icmp ne i32 %46, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %47 = load i32* %hx, align 4
  %48 = load i32* %hy, align 4
  %sub54 = sub nsw i32 %47, %48
  store i32 %sub54, i32* %hz, align 4
  %49 = load i32* %hz, align 4
  %cmp55 = icmp slt i32 %49, 0
  br i1 %cmp55, label %if.then56, label %if.else57

if.then56:                                        ; preds = %while.body
  %50 = load i32* %hx, align 4
  %51 = load i32* %hx, align 4
  %add = add nsw i32 %50, %51
  store i32 %add, i32* %hx, align 4
  br label %if.end64

if.else57:                                        ; preds = %while.body
  %52 = load i32* %hz, align 4
  %cmp58 = icmp eq i32 %52, 0
  br i1 %cmp58, label %if.then59, label %if.end62

if.then59:                                        ; preds = %if.else57
  %53 = load i32* %sx, align 4
  %shr60 = lshr i32 %53, 31
  %arrayidx61 = getelementptr inbounds [2 x float]* @Zero, i32 0, i32 %shr60
  %54 = load float* %arrayidx61, align 4
  store float %54, float* %retval
  br label %return

if.end62:                                         ; preds = %if.else57
  %55 = load i32* %hz, align 4
  %56 = load i32* %hz, align 4
  %add63 = add nsw i32 %55, %56
  store i32 %add63, i32* %hx, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.end62, %if.then56
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %57 = load i32* %hx, align 4
  %58 = load i32* %hy, align 4
  %sub65 = sub nsw i32 %57, %58
  store i32 %sub65, i32* %hz, align 4
  %59 = load i32* %hz, align 4
  %cmp66 = icmp sge i32 %59, 0
  br i1 %cmp66, label %if.then67, label %if.end68

if.then67:                                        ; preds = %while.end
  %60 = load i32* %hz, align 4
  store i32 %60, i32* %hx, align 4
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %while.end
  %61 = load i32* %hx, align 4
  %cmp69 = icmp eq i32 %61, 0
  br i1 %cmp69, label %if.then70, label %if.end73

if.then70:                                        ; preds = %if.end68
  %62 = load i32* %sx, align 4
  %shr71 = lshr i32 %62, 31
  %arrayidx72 = getelementptr inbounds [2 x float]* @Zero, i32 0, i32 %shr71
  %63 = load float* %arrayidx72, align 4
  store float %63, float* %retval
  br label %return

if.end73:                                         ; preds = %if.end68
  br label %while.cond74

while.cond74:                                     ; preds = %while.body76, %if.end73
  %64 = load i32* %hx, align 4
  %cmp75 = icmp slt i32 %64, 8388608
  br i1 %cmp75, label %while.body76, label %while.end79

while.body76:                                     ; preds = %while.cond74
  %65 = load i32* %hx, align 4
  %66 = load i32* %hx, align 4
  %add77 = add nsw i32 %65, %66
  store i32 %add77, i32* %hx, align 4
  %67 = load i32* %iy, align 4
  %sub78 = sub nsw i32 %67, 1
  store i32 %sub78, i32* %iy, align 4
  br label %while.cond74

while.end79:                                      ; preds = %while.cond74
  %68 = load i32* %iy, align 4
  %cmp80 = icmp sge i32 %68, -126
  br i1 %cmp80, label %if.then81, label %if.else91

if.then81:                                        ; preds = %while.end79
  %69 = load i32* %hx, align 4
  %sub82 = sub nsw i32 %69, 8388608
  %70 = load i32* %iy, align 4
  %add83 = add nsw i32 %70, 127
  %shl84 = shl i32 %add83, 23
  %or85 = or i32 %sub82, %shl84
  store i32 %or85, i32* %hx, align 4
  br label %do.body86

do.body86:                                        ; preds = %if.then81
  %71 = load i32* %hx, align 4
  %72 = load i32* %sx, align 4
  %or87 = or i32 %71, %72
  %word88 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %or87, i32* %word88, align 4
  %value89 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %73 = load float* %value89, align 4
  store float %73, float* %x.addr, align 4
  br label %do.end90

do.end90:                                         ; preds = %do.body86
  br label %if.end101

if.else91:                                        ; preds = %while.end79
  %74 = load i32* %iy, align 4
  %sub92 = sub nsw i32 -126, %74
  store i32 %sub92, i32* %n, align 4
  %75 = load i32* %n, align 4
  %76 = load i32* %hx, align 4
  %shr93 = ashr i32 %76, %75
  store i32 %shr93, i32* %hx, align 4
  br label %do.body94

do.body94:                                        ; preds = %if.else91
  %77 = load i32* %hx, align 4
  %78 = load i32* %sx, align 4
  %or96 = or i32 %77, %78
  %word97 = bitcast %union.ieee_float_shape_type* %sf_u95 to i32*
  store i32 %or96, i32* %word97, align 4
  %value98 = bitcast %union.ieee_float_shape_type* %sf_u95 to float*
  %79 = load float* %value98, align 4
  store float %79, float* %x.addr, align 4
  br label %do.end99

do.end99:                                         ; preds = %do.body94
  %80 = load float* %x.addr, align 4
  %mul100 = fmul float %80, 1.000000e+00
  store float %mul100, float* %x.addr, align 4
  br label %if.end101

if.end101:                                        ; preds = %do.end99, %do.end90
  %81 = load float* %x.addr, align 4
  store float %81, float* %retval
  br label %return

return:                                           ; preds = %if.end101, %if.then70, %if.then59, %if.then15, %if.then12, %if.then
  %82 = load float* %retval
  ret float %82
}

; Function Attrs: nounwind
define float @__ieee754_hypotf(float %x, float %y) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  %a = alloca float, align 4
  %b = alloca float, align 4
  %t1 = alloca float, align 4
  %t2 = alloca float, align 4
  %y1 = alloca float, align 4
  %y2 = alloca float, align 4
  %w = alloca float, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ha = alloca i32, align 4
  %hb = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u2 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u12 = alloca %union.ieee_float_shape_type, align 4
  %sf_u35 = alloca %union.ieee_float_shape_type, align 4
  %sf_u40 = alloca %union.ieee_float_shape_type, align 4
  %sf_u53 = alloca %union.ieee_float_shape_type, align 4
  %sf_u64 = alloca %union.ieee_float_shape_type, align 4
  %sf_u69 = alloca %union.ieee_float_shape_type, align 4
  %sf_u80 = alloca %union.ieee_float_shape_type, align 4
  %sf_u96 = alloca %union.ieee_float_shape_type, align 4
  %sf_u103 = alloca %union.ieee_float_shape_type, align 4
  %sf_u122 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  %0 = load float* %x.addr, align 4
  store float %0, float* %a, align 4
  %1 = load float* %y.addr, align 4
  store float %1, float* %b, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %2, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %3 = load i32* %word, align 4
  store i32 %3, i32* %ha, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load i32* %ha, align 4
  %and = and i32 %4, 2147483647
  store i32 %and, i32* %ha, align 4
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %5 = load float* %y.addr, align 4
  %value3 = bitcast %union.ieee_float_shape_type* %gf_u2 to float*
  store float %5, float* %value3, align 4
  %word4 = bitcast %union.ieee_float_shape_type* %gf_u2 to i32*
  %6 = load i32* %word4, align 4
  store i32 %6, i32* %hb, align 4
  br label %do.end5

do.end5:                                          ; preds = %do.body1
  %7 = load i32* %hb, align 4
  %and6 = and i32 %7, 2147483647
  store i32 %and6, i32* %hb, align 4
  %8 = load i32* %hb, align 4
  %9 = load i32* %ha, align 4
  %cmp = icmp sgt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end5
  %10 = load float* %y.addr, align 4
  store float %10, float* %a, align 4
  %11 = load float* %x.addr, align 4
  store float %11, float* %b, align 4
  %12 = load i32* %ha, align 4
  store i32 %12, i32* %j, align 4
  %13 = load i32* %hb, align 4
  store i32 %13, i32* %ha, align 4
  %14 = load i32* %j, align 4
  store i32 %14, i32* %hb, align 4
  br label %if.end

if.else:                                          ; preds = %do.end5
  %15 = load float* %x.addr, align 4
  store float %15, float* %a, align 4
  %16 = load float* %y.addr, align 4
  store float %16, float* %b, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.body7

do.body7:                                         ; preds = %if.end
  %17 = load i32* %ha, align 4
  %word8 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %17, i32* %word8, align 4
  %value9 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %18 = load float* %value9, align 4
  store float %18, float* %a, align 4
  br label %do.end10

do.end10:                                         ; preds = %do.body7
  br label %do.body11

do.body11:                                        ; preds = %do.end10
  %19 = load i32* %hb, align 4
  %word13 = bitcast %union.ieee_float_shape_type* %sf_u12 to i32*
  store i32 %19, i32* %word13, align 4
  %value14 = bitcast %union.ieee_float_shape_type* %sf_u12 to float*
  %20 = load float* %value14, align 4
  store float %20, float* %b, align 4
  br label %do.end15

do.end15:                                         ; preds = %do.body11
  %21 = load i32* %ha, align 4
  %22 = load i32* %hb, align 4
  %sub = sub nsw i32 %21, %22
  %cmp16 = icmp sgt i32 %sub, 251658240
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %do.end15
  %23 = load float* %a, align 4
  %24 = load float* %b, align 4
  %add = fadd float %23, %24
  store float %add, float* %retval
  br label %return

if.end18:                                         ; preds = %do.end15
  store i32 0, i32* %k, align 4
  %25 = load i32* %ha, align 4
  %cmp19 = icmp sgt i32 %25, 1484783616
  br i1 %cmp19, label %if.then20, label %if.end44

if.then20:                                        ; preds = %if.end18
  %26 = load i32* %ha, align 4
  %cmp21 = icmp slt i32 %26, 2139095040
  br i1 %cmp21, label %if.end30, label %if.then22

if.then22:                                        ; preds = %if.then20
  %27 = load float* %a, align 4
  %28 = load float* %b, align 4
  %add23 = fadd float %27, %28
  store float %add23, float* %w, align 4
  %29 = load i32* %ha, align 4
  %cmp24 = icmp eq i32 %29, 2139095040
  br i1 %cmp24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.then22
  %30 = load float* %a, align 4
  store float %30, float* %w, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then25, %if.then22
  %31 = load i32* %hb, align 4
  %cmp27 = icmp eq i32 %31, 2139095040
  br i1 %cmp27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.end26
  %32 = load float* %b, align 4
  store float %32, float* %w, align 4
  br label %if.end29

if.end29:                                         ; preds = %if.then28, %if.end26
  %33 = load float* %w, align 4
  store float %33, float* %retval
  br label %return

if.end30:                                         ; preds = %if.then20
  %34 = load i32* %ha, align 4
  %sub31 = sub nsw i32 %34, 570425344
  store i32 %sub31, i32* %ha, align 4
  %35 = load i32* %hb, align 4
  %sub32 = sub nsw i32 %35, 570425344
  store i32 %sub32, i32* %hb, align 4
  %36 = load i32* %k, align 4
  %add33 = add nsw i32 %36, 68
  store i32 %add33, i32* %k, align 4
  br label %do.body34

do.body34:                                        ; preds = %if.end30
  %37 = load i32* %ha, align 4
  %word36 = bitcast %union.ieee_float_shape_type* %sf_u35 to i32*
  store i32 %37, i32* %word36, align 4
  %value37 = bitcast %union.ieee_float_shape_type* %sf_u35 to float*
  %38 = load float* %value37, align 4
  store float %38, float* %a, align 4
  br label %do.end38

do.end38:                                         ; preds = %do.body34
  br label %do.body39

do.body39:                                        ; preds = %do.end38
  %39 = load i32* %hb, align 4
  %word41 = bitcast %union.ieee_float_shape_type* %sf_u40 to i32*
  store i32 %39, i32* %word41, align 4
  %value42 = bitcast %union.ieee_float_shape_type* %sf_u40 to float*
  %40 = load float* %value42, align 4
  store float %40, float* %b, align 4
  br label %do.end43

do.end43:                                         ; preds = %do.body39
  br label %if.end44

if.end44:                                         ; preds = %do.end43, %if.end18
  %41 = load i32* %hb, align 4
  %cmp45 = icmp slt i32 %41, 645922816
  br i1 %cmp45, label %if.then46, label %if.end75

if.then46:                                        ; preds = %if.end44
  %42 = load i32* %hb, align 4
  %cmp47 = icmp eq i32 %42, 0
  br i1 %cmp47, label %if.then48, label %if.else49

if.then48:                                        ; preds = %if.then46
  %43 = load float* %a, align 4
  store float %43, float* %retval
  br label %return

if.else49:                                        ; preds = %if.then46
  %44 = load i32* %hb, align 4
  %cmp50 = icmp slt i32 %44, 8388608
  br i1 %cmp50, label %if.then51, label %if.else59

if.then51:                                        ; preds = %if.else49
  br label %do.body52

do.body52:                                        ; preds = %if.then51
  %word54 = bitcast %union.ieee_float_shape_type* %sf_u53 to i32*
  store i32 2122317824, i32* %word54, align 4
  %value55 = bitcast %union.ieee_float_shape_type* %sf_u53 to float*
  %45 = load float* %value55, align 4
  store float %45, float* %t1, align 4
  br label %do.end56

do.end56:                                         ; preds = %do.body52
  %46 = load float* %t1, align 4
  %47 = load float* %b, align 4
  %mul = fmul float %47, %46
  store float %mul, float* %b, align 4
  %48 = load float* %t1, align 4
  %49 = load float* %a, align 4
  %mul57 = fmul float %49, %48
  store float %mul57, float* %a, align 4
  %50 = load i32* %k, align 4
  %sub58 = sub nsw i32 %50, 126
  store i32 %sub58, i32* %k, align 4
  br label %if.end73

if.else59:                                        ; preds = %if.else49
  %51 = load i32* %ha, align 4
  %add60 = add nsw i32 %51, 570425344
  store i32 %add60, i32* %ha, align 4
  %52 = load i32* %hb, align 4
  %add61 = add nsw i32 %52, 570425344
  store i32 %add61, i32* %hb, align 4
  %53 = load i32* %k, align 4
  %sub62 = sub nsw i32 %53, 68
  store i32 %sub62, i32* %k, align 4
  br label %do.body63

do.body63:                                        ; preds = %if.else59
  %54 = load i32* %ha, align 4
  %word65 = bitcast %union.ieee_float_shape_type* %sf_u64 to i32*
  store i32 %54, i32* %word65, align 4
  %value66 = bitcast %union.ieee_float_shape_type* %sf_u64 to float*
  %55 = load float* %value66, align 4
  store float %55, float* %a, align 4
  br label %do.end67

do.end67:                                         ; preds = %do.body63
  br label %do.body68

do.body68:                                        ; preds = %do.end67
  %56 = load i32* %hb, align 4
  %word70 = bitcast %union.ieee_float_shape_type* %sf_u69 to i32*
  store i32 %56, i32* %word70, align 4
  %value71 = bitcast %union.ieee_float_shape_type* %sf_u69 to float*
  %57 = load float* %value71, align 4
  store float %57, float* %b, align 4
  br label %do.end72

do.end72:                                         ; preds = %do.body68
  br label %if.end73

if.end73:                                         ; preds = %do.end72, %do.end56
  br label %if.end74

if.end74:                                         ; preds = %if.end73
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.end44
  %58 = load float* %a, align 4
  %59 = load float* %b, align 4
  %sub76 = fsub float %58, %59
  store float %sub76, float* %w, align 4
  %60 = load float* %w, align 4
  %61 = load float* %b, align 4
  %cmp77 = fcmp ogt float %60, %61
  br i1 %cmp77, label %if.then78, label %if.else93

if.then78:                                        ; preds = %if.end75
  br label %do.body79

do.body79:                                        ; preds = %if.then78
  %62 = load i32* %ha, align 4
  %and81 = and i32 %62, -4096
  %word82 = bitcast %union.ieee_float_shape_type* %sf_u80 to i32*
  store i32 %and81, i32* %word82, align 4
  %value83 = bitcast %union.ieee_float_shape_type* %sf_u80 to float*
  %63 = load float* %value83, align 4
  store float %63, float* %t1, align 4
  br label %do.end84

do.end84:                                         ; preds = %do.body79
  %64 = load float* %a, align 4
  %65 = load float* %t1, align 4
  %sub85 = fsub float %64, %65
  store float %sub85, float* %t2, align 4
  %66 = load float* %t1, align 4
  %67 = load float* %t1, align 4
  %mul86 = fmul float %66, %67
  %68 = load float* %b, align 4
  %69 = load float* %b, align 4
  %sub87 = fsub float -0.000000e+00, %69
  %mul88 = fmul float %68, %sub87
  %70 = load float* %t2, align 4
  %71 = load float* %a, align 4
  %72 = load float* %t1, align 4
  %add89 = fadd float %71, %72
  %mul90 = fmul float %70, %add89
  %sub91 = fsub float %mul88, %mul90
  %sub92 = fsub float %mul86, %sub91
  %call = call float @__ieee754_sqrtf(float %sub92) #5
  store float %call, float* %w, align 4
  br label %if.end118

if.else93:                                        ; preds = %if.end75
  %73 = load float* %a, align 4
  %74 = load float* %a, align 4
  %add94 = fadd float %73, %74
  store float %add94, float* %a, align 4
  br label %do.body95

do.body95:                                        ; preds = %if.else93
  %75 = load i32* %hb, align 4
  %and97 = and i32 %75, -4096
  %word98 = bitcast %union.ieee_float_shape_type* %sf_u96 to i32*
  store i32 %and97, i32* %word98, align 4
  %value99 = bitcast %union.ieee_float_shape_type* %sf_u96 to float*
  %76 = load float* %value99, align 4
  store float %76, float* %y1, align 4
  br label %do.end100

do.end100:                                        ; preds = %do.body95
  %77 = load float* %b, align 4
  %78 = load float* %y1, align 4
  %sub101 = fsub float %77, %78
  store float %sub101, float* %y2, align 4
  br label %do.body102

do.body102:                                       ; preds = %do.end100
  %79 = load i32* %ha, align 4
  %add104 = add nsw i32 %79, 8388608
  %word105 = bitcast %union.ieee_float_shape_type* %sf_u103 to i32*
  store i32 %add104, i32* %word105, align 4
  %value106 = bitcast %union.ieee_float_shape_type* %sf_u103 to float*
  %80 = load float* %value106, align 4
  store float %80, float* %t1, align 4
  br label %do.end107

do.end107:                                        ; preds = %do.body102
  %81 = load float* %a, align 4
  %82 = load float* %t1, align 4
  %sub108 = fsub float %81, %82
  store float %sub108, float* %t2, align 4
  %83 = load float* %t1, align 4
  %84 = load float* %y1, align 4
  %mul109 = fmul float %83, %84
  %85 = load float* %w, align 4
  %86 = load float* %w, align 4
  %sub110 = fsub float -0.000000e+00, %86
  %mul111 = fmul float %85, %sub110
  %87 = load float* %t1, align 4
  %88 = load float* %y2, align 4
  %mul112 = fmul float %87, %88
  %89 = load float* %t2, align 4
  %90 = load float* %b, align 4
  %mul113 = fmul float %89, %90
  %add114 = fadd float %mul112, %mul113
  %sub115 = fsub float %mul111, %add114
  %sub116 = fsub float %mul109, %sub115
  %call117 = call float @__ieee754_sqrtf(float %sub116) #5
  store float %call117, float* %w, align 4
  br label %if.end118

if.end118:                                        ; preds = %do.end107, %do.end84
  %91 = load i32* %k, align 4
  %cmp119 = icmp ne i32 %91, 0
  br i1 %cmp119, label %if.then120, label %if.else128

if.then120:                                       ; preds = %if.end118
  br label %do.body121

do.body121:                                       ; preds = %if.then120
  %92 = load i32* %k, align 4
  %shl = shl i32 %92, 23
  %add123 = add nsw i32 1065353216, %shl
  %word124 = bitcast %union.ieee_float_shape_type* %sf_u122 to i32*
  store i32 %add123, i32* %word124, align 4
  %value125 = bitcast %union.ieee_float_shape_type* %sf_u122 to float*
  %93 = load float* %value125, align 4
  store float %93, float* %t1, align 4
  br label %do.end126

do.end126:                                        ; preds = %do.body121
  %94 = load float* %t1, align 4
  %95 = load float* %w, align 4
  %mul127 = fmul float %94, %95
  store float %mul127, float* %retval
  br label %return

if.else128:                                       ; preds = %if.end118
  %96 = load float* %w, align 4
  store float %96, float* %retval
  br label %return

return:                                           ; preds = %if.else128, %do.end126, %if.then48, %if.end29, %if.then17
  %97 = load float* %retval
  ret float %97
}

; Function Attrs: nounwind
define float @__ieee754_j0f(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %z = alloca float, align 4
  %s = alloca float, align 4
  %c = alloca float, align 4
  %ss = alloca float, align 4
  %cc = alloca float, align 4
  %r = alloca float, align 4
  %u = alloca float, align 4
  %v = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %mul = fmul float %4, %5
  %div = fdiv float 1.000000e+00, %mul
  store float %div, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load float* %x.addr, align 4
  %call = call float @fabsf(float %6) #6
  store float %call, float* %x.addr, align 4
  %7 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %7, 1073741824
  br i1 %cmp1, label %if.then2, label %if.end32

if.then2:                                         ; preds = %if.end
  %8 = load float* %x.addr, align 4
  %call3 = call float @sinf(float %8) #4
  store float %call3, float* %s, align 4
  %9 = load float* %x.addr, align 4
  %call4 = call float @cosf(float %9) #4
  store float %call4, float* %c, align 4
  %10 = load float* %s, align 4
  %11 = load float* %c, align 4
  %sub = fsub float %10, %11
  store float %sub, float* %ss, align 4
  %12 = load float* %s, align 4
  %13 = load float* %c, align 4
  %add = fadd float %12, %13
  store float %add, float* %cc, align 4
  %14 = load i32* %ix, align 4
  %cmp5 = icmp sle i32 %14, 2130706431
  br i1 %cmp5, label %if.then6, label %if.end16

if.then6:                                         ; preds = %if.then2
  %15 = load float* %x.addr, align 4
  %16 = load float* %x.addr, align 4
  %add7 = fadd float %15, %16
  %call8 = call float @cosf(float %add7) #4
  %sub9 = fsub float -0.000000e+00, %call8
  store float %sub9, float* %z, align 4
  %17 = load float* %s, align 4
  %18 = load float* %c, align 4
  %mul10 = fmul float %17, %18
  %cmp11 = fcmp olt float %mul10, 0.000000e+00
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then6
  %19 = load float* %z, align 4
  %20 = load float* %ss, align 4
  %div13 = fdiv float %19, %20
  store float %div13, float* %cc, align 4
  br label %if.end15

if.else:                                          ; preds = %if.then6
  %21 = load float* %z, align 4
  %22 = load float* %cc, align 4
  %div14 = fdiv float %21, %22
  store float %div14, float* %ss, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then12
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then2
  %23 = load i32* %ix, align 4
  %cmp17 = icmp ugt i32 %23, -2147483648
  br i1 %cmp17, label %if.then18, label %if.else22

if.then18:                                        ; preds = %if.end16
  %24 = load float* %cc, align 4
  %mul19 = fmul float 0x3FE20DD760000000, %24
  %25 = load float* %x.addr, align 4
  %call20 = call float @__ieee754_sqrtf(float %25) #5
  %div21 = fdiv float %mul19, %call20
  store float %div21, float* %z, align 4
  br label %if.end31

if.else22:                                        ; preds = %if.end16
  %26 = load float* %x.addr, align 4
  %call23 = call float @pzerof(float %26) #5
  store float %call23, float* %u, align 4
  %27 = load float* %x.addr, align 4
  %call24 = call float @qzerof(float %27) #5
  store float %call24, float* %v, align 4
  %28 = load float* %u, align 4
  %29 = load float* %cc, align 4
  %mul25 = fmul float %28, %29
  %30 = load float* %v, align 4
  %31 = load float* %ss, align 4
  %mul26 = fmul float %30, %31
  %sub27 = fsub float %mul25, %mul26
  %mul28 = fmul float 0x3FE20DD760000000, %sub27
  %32 = load float* %x.addr, align 4
  %call29 = call float @__ieee754_sqrtf(float %32) #5
  %div30 = fdiv float %mul28, %call29
  store float %div30, float* %z, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.else22, %if.then18
  %33 = load float* %z, align 4
  store float %33, float* %retval
  br label %return

if.end32:                                         ; preds = %if.end
  %34 = load i32* %ix, align 4
  %cmp33 = icmp slt i32 %34, 956301312
  br i1 %cmp33, label %if.then34, label %if.end45

if.then34:                                        ; preds = %if.end32
  %35 = load float* %x.addr, align 4
  %add35 = fadd float 0x46293E5940000000, %35
  %cmp36 = fcmp ogt float %add35, 1.000000e+00
  br i1 %cmp36, label %if.then37, label %if.end44

if.then37:                                        ; preds = %if.then34
  %36 = load i32* %ix, align 4
  %cmp38 = icmp slt i32 %36, 838860800
  br i1 %cmp38, label %if.then39, label %if.else40

if.then39:                                        ; preds = %if.then37
  store float 1.000000e+00, float* %retval
  br label %return

if.else40:                                        ; preds = %if.then37
  %37 = load float* %x.addr, align 4
  %mul41 = fmul float 2.500000e-01, %37
  %38 = load float* %x.addr, align 4
  %mul42 = fmul float %mul41, %38
  %sub43 = fsub float 1.000000e+00, %mul42
  store float %sub43, float* %retval
  br label %return

if.end44:                                         ; preds = %if.then34
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end32
  %39 = load float* %x.addr, align 4
  %40 = load float* %x.addr, align 4
  %mul46 = fmul float %39, %40
  store float %mul46, float* %z, align 4
  %41 = load float* %z, align 4
  %42 = load float* %z, align 4
  %43 = load float* %z, align 4
  %44 = load float* %z, align 4
  %mul47 = fmul float %44, 0xBE33D5E780000000
  %add48 = fadd float 0x3EBEB1D100000000, %mul47
  %mul49 = fmul float %43, %add48
  %add50 = fadd float 0xBF28E6A5C0000000, %mul49
  %mul51 = fmul float %42, %add50
  %add52 = fadd float 1.562500e-02, %mul51
  %mul53 = fmul float %41, %add52
  store float %mul53, float* %r, align 4
  %45 = load float* %z, align 4
  %46 = load float* %z, align 4
  %47 = load float* %z, align 4
  %48 = load float* %z, align 4
  %mul54 = fmul float %48, 0x3E1408BD00000000
  %add55 = fadd float 0x3EA13B54C0000000, %mul54
  %mul56 = fmul float %47, %add55
  %add57 = fadd float 0x3F1EA6D2E0000000, %mul56
  %mul58 = fmul float %46, %add57
  %add59 = fadd float 0x3F8FFCE880000000, %mul58
  %mul60 = fmul float %45, %add59
  %add61 = fadd float 1.000000e+00, %mul60
  store float %add61, float* %s, align 4
  %49 = load i32* %ix, align 4
  %cmp62 = icmp slt i32 %49, 1065353216
  br i1 %cmp62, label %if.then63, label %if.else68

if.then63:                                        ; preds = %if.end45
  %50 = load float* %z, align 4
  %51 = load float* %r, align 4
  %52 = load float* %s, align 4
  %div64 = fdiv float %51, %52
  %add65 = fadd float -2.500000e-01, %div64
  %mul66 = fmul float %50, %add65
  %add67 = fadd float 1.000000e+00, %mul66
  store float %add67, float* %retval
  br label %return

if.else68:                                        ; preds = %if.end45
  %53 = load float* %x.addr, align 4
  %mul69 = fmul float 5.000000e-01, %53
  store float %mul69, float* %u, align 4
  %54 = load float* %u, align 4
  %add70 = fadd float 1.000000e+00, %54
  %55 = load float* %u, align 4
  %sub71 = fsub float 1.000000e+00, %55
  %mul72 = fmul float %add70, %sub71
  %56 = load float* %z, align 4
  %57 = load float* %r, align 4
  %58 = load float* %s, align 4
  %div73 = fdiv float %57, %58
  %mul74 = fmul float %56, %div73
  %add75 = fadd float %mul72, %mul74
  store float %add75, float* %retval
  br label %return

return:                                           ; preds = %if.else68, %if.then63, %if.else40, %if.then39, %if.end31, %if.then
  %59 = load float* %retval
  ret float %59
}

; Function Attrs: nounwind
define float @__ieee754_y0f(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %z = alloca float, align 4
  %s = alloca float, align 4
  %c = alloca float, align 4
  %ss = alloca float, align 4
  %cc = alloca float, align 4
  %u = alloca float, align 4
  %v = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 2147483647, %2
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %6 = load float* %x.addr, align 4
  %mul = fmul float %5, %6
  %add = fadd float %4, %mul
  %div = fdiv float 1.000000e+00, %add
  store float %div, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix, align 4
  %cmp1 = icmp eq i32 %7, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store float 0xFFF0000000000000, float* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %8 = load i32* %hx, align 4
  %cmp4 = icmp slt i32 %8, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store float 0x7FF8000000000000, float* %retval
  br label %return

if.end6:                                          ; preds = %if.end3
  %9 = load i32* %ix, align 4
  %cmp7 = icmp sge i32 %9, 1073741824
  br i1 %cmp7, label %if.then8, label %if.end38

if.then8:                                         ; preds = %if.end6
  %10 = load float* %x.addr, align 4
  %call = call float @sinf(float %10) #4
  store float %call, float* %s, align 4
  %11 = load float* %x.addr, align 4
  %call9 = call float @cosf(float %11) #4
  store float %call9, float* %c, align 4
  %12 = load float* %s, align 4
  %13 = load float* %c, align 4
  %sub = fsub float %12, %13
  store float %sub, float* %ss, align 4
  %14 = load float* %s, align 4
  %15 = load float* %c, align 4
  %add10 = fadd float %14, %15
  store float %add10, float* %cc, align 4
  %16 = load i32* %ix, align 4
  %cmp11 = icmp sle i32 %16, 2130706431
  br i1 %cmp11, label %if.then12, label %if.end22

if.then12:                                        ; preds = %if.then8
  %17 = load float* %x.addr, align 4
  %18 = load float* %x.addr, align 4
  %add13 = fadd float %17, %18
  %call14 = call float @cosf(float %add13) #4
  %sub15 = fsub float -0.000000e+00, %call14
  store float %sub15, float* %z, align 4
  %19 = load float* %s, align 4
  %20 = load float* %c, align 4
  %mul16 = fmul float %19, %20
  %cmp17 = fcmp olt float %mul16, 0.000000e+00
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.then12
  %21 = load float* %z, align 4
  %22 = load float* %ss, align 4
  %div19 = fdiv float %21, %22
  store float %div19, float* %cc, align 4
  br label %if.end21

if.else:                                          ; preds = %if.then12
  %23 = load float* %z, align 4
  %24 = load float* %cc, align 4
  %div20 = fdiv float %23, %24
  store float %div20, float* %ss, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then18
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then8
  %25 = load i32* %ix, align 4
  %cmp23 = icmp ugt i32 %25, -2147483648
  br i1 %cmp23, label %if.then24, label %if.else28

if.then24:                                        ; preds = %if.end22
  %26 = load float* %ss, align 4
  %mul25 = fmul float 0x3FE20DD760000000, %26
  %27 = load float* %x.addr, align 4
  %call26 = call float @__ieee754_sqrtf(float %27) #5
  %div27 = fdiv float %mul25, %call26
  store float %div27, float* %z, align 4
  br label %if.end37

if.else28:                                        ; preds = %if.end22
  %28 = load float* %x.addr, align 4
  %call29 = call float @pzerof(float %28) #5
  store float %call29, float* %u, align 4
  %29 = load float* %x.addr, align 4
  %call30 = call float @qzerof(float %29) #5
  store float %call30, float* %v, align 4
  %30 = load float* %u, align 4
  %31 = load float* %ss, align 4
  %mul31 = fmul float %30, %31
  %32 = load float* %v, align 4
  %33 = load float* %cc, align 4
  %mul32 = fmul float %32, %33
  %add33 = fadd float %mul31, %mul32
  %mul34 = fmul float 0x3FE20DD760000000, %add33
  %34 = load float* %x.addr, align 4
  %call35 = call float @__ieee754_sqrtf(float %34) #5
  %div36 = fdiv float %mul34, %call35
  store float %div36, float* %z, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.else28, %if.then24
  %35 = load float* %z, align 4
  store float %35, float* %retval
  br label %return

if.end38:                                         ; preds = %if.end6
  %36 = load i32* %ix, align 4
  %cmp39 = icmp sle i32 %36, 838860800
  br i1 %cmp39, label %if.then40, label %if.end44

if.then40:                                        ; preds = %if.end38
  %37 = load float* %x.addr, align 4
  %call41 = call float @__ieee754_logf(float %37) #5
  %mul42 = fmul float 0x3FE45F3060000000, %call41
  %add43 = fadd float 0xBFB2E4D6A0000000, %mul42
  store float %add43, float* %retval
  br label %return

if.end44:                                         ; preds = %if.end38
  %38 = load float* %x.addr, align 4
  %39 = load float* %x.addr, align 4
  %mul45 = fmul float %38, %39
  store float %mul45, float* %z, align 4
  %40 = load float* %z, align 4
  %41 = load float* %z, align 4
  %42 = load float* %z, align 4
  %43 = load float* %z, align 4
  %44 = load float* %z, align 4
  %45 = load float* %z, align 4
  %mul46 = fmul float %45, 0xBDC5E43D60000000
  %add47 = fadd float 0x3E55005740000000, %mul46
  %mul48 = fmul float %44, %add47
  %add49 = fadd float 0xBECFFEA780000000, %mul48
  %mul50 = fmul float %43, %add49
  %add51 = fadd float 0x3F36C54D20000000, %mul50
  %mul52 = fmul float %42, %add51
  %add53 = fadd float 0xBF8C4CE8C0000000, %mul52
  %mul54 = fmul float %41, %add53
  %add55 = fadd float 0x3FC69D01A0000000, %mul54
  %mul56 = fmul float %40, %add55
  %add57 = fadd float 0xBFB2E4D6A0000000, %mul56
  store float %add57, float* %u, align 4
  %46 = load float* %z, align 4
  %47 = load float* %z, align 4
  %48 = load float* %z, align 4
  %49 = load float* %z, align 4
  %mul58 = fmul float %49, 0x3DFE501840000000
  %add59 = fadd float 0x3E91642D80000000, %mul58
  %mul60 = fmul float %48, %add59
  %add61 = fadd float 0x3F13ECBC00000000, %mul60
  %mul62 = fmul float %47, %add61
  %add63 = fadd float 0x3F8A1270A0000000, %mul62
  %mul64 = fmul float %46, %add63
  %add65 = fadd float 1.000000e+00, %mul64
  store float %add65, float* %v, align 4
  %50 = load float* %u, align 4
  %51 = load float* %v, align 4
  %div66 = fdiv float %50, %51
  %52 = load float* %x.addr, align 4
  %call67 = call float @__ieee754_j0f(float %52) #5
  %53 = load float* %x.addr, align 4
  %call68 = call float @__ieee754_logf(float %53) #5
  %mul69 = fmul float %call67, %call68
  %mul70 = fmul float 0x3FE45F3060000000, %mul69
  %add71 = fadd float %div66, %mul70
  store float %add71, float* %retval
  br label %return

return:                                           ; preds = %if.end44, %if.then40, %if.end37, %if.then5, %if.then2, %if.then
  %54 = load float* %retval
  ret float %54
}

; Function Attrs: nounwind
define float @__ieee754_j1f(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %z = alloca float, align 4
  %s = alloca float, align 4
  %c = alloca float, align 4
  %ss = alloca float, align 4
  %cc = alloca float, align 4
  %r = alloca float, align 4
  %u = alloca float, align 4
  %v = alloca float, align 4
  %y = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %div = fdiv float 1.000000e+00, %4
  store float %div, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %5 = load float* %x.addr, align 4
  %call = call float @fabsf(float %5) #6
  store float %call, float* %y, align 4
  %6 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %6, 1073741824
  br i1 %cmp1, label %if.then2, label %if.end35

if.then2:                                         ; preds = %if.end
  %7 = load float* %y, align 4
  %call3 = call float @sinf(float %7) #4
  store float %call3, float* %s, align 4
  %8 = load float* %y, align 4
  %call4 = call float @cosf(float %8) #4
  store float %call4, float* %c, align 4
  %9 = load float* %s, align 4
  %sub = fsub float -0.000000e+00, %9
  %10 = load float* %c, align 4
  %sub5 = fsub float %sub, %10
  store float %sub5, float* %ss, align 4
  %11 = load float* %s, align 4
  %12 = load float* %c, align 4
  %sub6 = fsub float %11, %12
  store float %sub6, float* %cc, align 4
  %13 = load i32* %ix, align 4
  %cmp7 = icmp sle i32 %13, 2130706431
  br i1 %cmp7, label %if.then8, label %if.end15

if.then8:                                         ; preds = %if.then2
  %14 = load float* %y, align 4
  %15 = load float* %y, align 4
  %add = fadd float %14, %15
  %call9 = call float @cosf(float %add) #4
  store float %call9, float* %z, align 4
  %16 = load float* %s, align 4
  %17 = load float* %c, align 4
  %mul = fmul float %16, %17
  %cmp10 = fcmp ogt float %mul, 0.000000e+00
  br i1 %cmp10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then8
  %18 = load float* %z, align 4
  %19 = load float* %ss, align 4
  %div12 = fdiv float %18, %19
  store float %div12, float* %cc, align 4
  br label %if.end14

if.else:                                          ; preds = %if.then8
  %20 = load float* %z, align 4
  %21 = load float* %cc, align 4
  %div13 = fdiv float %20, %21
  store float %div13, float* %ss, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then11
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then2
  %22 = load i32* %ix, align 4
  %cmp16 = icmp ugt i32 %22, -2147483648
  br i1 %cmp16, label %if.then17, label %if.else21

if.then17:                                        ; preds = %if.end15
  %23 = load float* %cc, align 4
  %mul18 = fmul float 0x3FE20DD760000000, %23
  %24 = load float* %y, align 4
  %call19 = call float @__ieee754_sqrtf(float %24) #5
  %div20 = fdiv float %mul18, %call19
  store float %div20, float* %z, align 4
  br label %if.end30

if.else21:                                        ; preds = %if.end15
  %25 = load float* %y, align 4
  %call22 = call float @ponef(float %25) #5
  store float %call22, float* %u, align 4
  %26 = load float* %y, align 4
  %call23 = call float @qonef(float %26) #5
  store float %call23, float* %v, align 4
  %27 = load float* %u, align 4
  %28 = load float* %cc, align 4
  %mul24 = fmul float %27, %28
  %29 = load float* %v, align 4
  %30 = load float* %ss, align 4
  %mul25 = fmul float %29, %30
  %sub26 = fsub float %mul24, %mul25
  %mul27 = fmul float 0x3FE20DD760000000, %sub26
  %31 = load float* %y, align 4
  %call28 = call float @__ieee754_sqrtf(float %31) #5
  %div29 = fdiv float %mul27, %call28
  store float %div29, float* %z, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.else21, %if.then17
  %32 = load i32* %hx, align 4
  %cmp31 = icmp slt i32 %32, 0
  br i1 %cmp31, label %if.then32, label %if.else34

if.then32:                                        ; preds = %if.end30
  %33 = load float* %z, align 4
  %sub33 = fsub float -0.000000e+00, %33
  store float %sub33, float* %retval
  br label %return

if.else34:                                        ; preds = %if.end30
  %34 = load float* %z, align 4
  store float %34, float* %retval
  br label %return

if.end35:                                         ; preds = %if.end
  %35 = load i32* %ix, align 4
  %cmp36 = icmp slt i32 %35, 838860800
  br i1 %cmp36, label %if.then37, label %if.end43

if.then37:                                        ; preds = %if.end35
  %36 = load float* %x.addr, align 4
  %add38 = fadd float 0x46293E5940000000, %36
  %cmp39 = fcmp ogt float %add38, 1.000000e+00
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %if.then37
  %37 = load float* %x.addr, align 4
  %mul41 = fmul float 5.000000e-01, %37
  store float %mul41, float* %retval
  br label %return

if.end42:                                         ; preds = %if.then37
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end35
  %38 = load float* %x.addr, align 4
  %39 = load float* %x.addr, align 4
  %mul44 = fmul float %38, %39
  store float %mul44, float* %z, align 4
  %40 = load float* %z, align 4
  %41 = load float* %z, align 4
  %42 = load float* %z, align 4
  %43 = load float* %z, align 4
  %mul45 = fmul float %43, 0x3E6AAAFA40000000
  %add46 = fadd float 0xBEF0C5C6C0000000, %mul45
  %mul47 = fmul float %42, %add46
  %add48 = fadd float 0x3F570D9FA0000000, %mul47
  %mul49 = fmul float %41, %add48
  %add50 = fadd float -6.250000e-02, %mul49
  %mul51 = fmul float %40, %add50
  store float %mul51, float* %r, align 4
  %44 = load float* %z, align 4
  %45 = load float* %z, align 4
  %46 = load float* %z, align 4
  %47 = load float* %z, align 4
  %48 = load float* %z, align 4
  %mul52 = fmul float %48, 0x3DAB2ACFC0000000
  %add53 = fadd float 0x3E35AC88C0000000, %mul52
  %mul54 = fmul float %47, %add53
  %add55 = fadd float 0x3EB3BFF840000000, %mul54
  %mul56 = fmul float %46, %add55
  %add57 = fadd float 0x3F285F56C0000000, %mul56
  %mul58 = fmul float %45, %add57
  %add59 = fadd float 0x3F939D0B20000000, %mul58
  %mul60 = fmul float %44, %add59
  %add61 = fadd float 1.000000e+00, %mul60
  store float %add61, float* %s, align 4
  %49 = load float* %x.addr, align 4
  %50 = load float* %r, align 4
  %mul62 = fmul float %50, %49
  store float %mul62, float* %r, align 4
  %51 = load float* %x.addr, align 4
  %mul63 = fmul float %51, 5.000000e-01
  %52 = load float* %r, align 4
  %53 = load float* %s, align 4
  %div64 = fdiv float %52, %53
  %add65 = fadd float %mul63, %div64
  store float %add65, float* %retval
  br label %return

return:                                           ; preds = %if.end43, %if.then40, %if.else34, %if.then32, %if.then
  %54 = load float* %retval
  ret float %54
}

; Function Attrs: nounwind
define float @__ieee754_y1f(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %z = alloca float, align 4
  %s = alloca float, align 4
  %c = alloca float, align 4
  %ss = alloca float, align 4
  %cc = alloca float, align 4
  %u = alloca float, align 4
  %v = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 2147483647, %2
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %6 = load float* %x.addr, align 4
  %mul = fmul float %5, %6
  %add = fadd float %4, %mul
  %div = fdiv float 1.000000e+00, %add
  store float %div, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix, align 4
  %cmp1 = icmp eq i32 %7, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store float 0xFFF0000000000000, float* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %8 = load i32* %hx, align 4
  %cmp4 = icmp slt i32 %8, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store float 0x7FF8000000000000, float* %retval
  br label %return

if.end6:                                          ; preds = %if.end3
  %9 = load i32* %ix, align 4
  %cmp7 = icmp sge i32 %9, 1073741824
  br i1 %cmp7, label %if.then8, label %if.end38

if.then8:                                         ; preds = %if.end6
  %10 = load float* %x.addr, align 4
  %call = call float @sinf(float %10) #4
  store float %call, float* %s, align 4
  %11 = load float* %x.addr, align 4
  %call9 = call float @cosf(float %11) #4
  store float %call9, float* %c, align 4
  %12 = load float* %s, align 4
  %sub = fsub float -0.000000e+00, %12
  %13 = load float* %c, align 4
  %sub10 = fsub float %sub, %13
  store float %sub10, float* %ss, align 4
  %14 = load float* %s, align 4
  %15 = load float* %c, align 4
  %sub11 = fsub float %14, %15
  store float %sub11, float* %cc, align 4
  %16 = load i32* %ix, align 4
  %cmp12 = icmp sle i32 %16, 2130706431
  br i1 %cmp12, label %if.then13, label %if.end22

if.then13:                                        ; preds = %if.then8
  %17 = load float* %x.addr, align 4
  %18 = load float* %x.addr, align 4
  %add14 = fadd float %17, %18
  %call15 = call float @cosf(float %add14) #4
  store float %call15, float* %z, align 4
  %19 = load float* %s, align 4
  %20 = load float* %c, align 4
  %mul16 = fmul float %19, %20
  %cmp17 = fcmp ogt float %mul16, 0.000000e+00
  br i1 %cmp17, label %if.then18, label %if.else

if.then18:                                        ; preds = %if.then13
  %21 = load float* %z, align 4
  %22 = load float* %ss, align 4
  %div19 = fdiv float %21, %22
  store float %div19, float* %cc, align 4
  br label %if.end21

if.else:                                          ; preds = %if.then13
  %23 = load float* %z, align 4
  %24 = load float* %cc, align 4
  %div20 = fdiv float %23, %24
  store float %div20, float* %ss, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then18
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then8
  %25 = load i32* %ix, align 4
  %cmp23 = icmp sgt i32 %25, 1207959552
  br i1 %cmp23, label %if.then24, label %if.else28

if.then24:                                        ; preds = %if.end22
  %26 = load float* %ss, align 4
  %mul25 = fmul float 0x3FE20DD760000000, %26
  %27 = load float* %x.addr, align 4
  %call26 = call float @__ieee754_sqrtf(float %27) #5
  %div27 = fdiv float %mul25, %call26
  store float %div27, float* %z, align 4
  br label %if.end37

if.else28:                                        ; preds = %if.end22
  %28 = load float* %x.addr, align 4
  %call29 = call float @ponef(float %28) #5
  store float %call29, float* %u, align 4
  %29 = load float* %x.addr, align 4
  %call30 = call float @qonef(float %29) #5
  store float %call30, float* %v, align 4
  %30 = load float* %u, align 4
  %31 = load float* %ss, align 4
  %mul31 = fmul float %30, %31
  %32 = load float* %v, align 4
  %33 = load float* %cc, align 4
  %mul32 = fmul float %32, %33
  %add33 = fadd float %mul31, %mul32
  %mul34 = fmul float 0x3FE20DD760000000, %add33
  %34 = load float* %x.addr, align 4
  %call35 = call float @__ieee754_sqrtf(float %34) #5
  %div36 = fdiv float %mul34, %call35
  store float %div36, float* %z, align 4
  br label %if.end37

if.end37:                                         ; preds = %if.else28, %if.then24
  %35 = load float* %z, align 4
  store float %35, float* %retval
  br label %return

if.end38:                                         ; preds = %if.end6
  %36 = load i32* %ix, align 4
  %cmp39 = icmp sle i32 %36, 612368384
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %if.end38
  %37 = load float* %x.addr, align 4
  %div41 = fdiv float 0xBFE45F3060000000, %37
  store float %div41, float* %retval
  br label %return

if.end42:                                         ; preds = %if.end38
  %38 = load float* %x.addr, align 4
  %39 = load float* %x.addr, align 4
  %mul43 = fmul float %38, %39
  store float %mul43, float* %z, align 4
  %40 = load float* getelementptr inbounds ([5 x float]* @U0, i32 0, i32 0), align 4
  %41 = load float* %z, align 4
  %42 = load float* getelementptr inbounds ([5 x float]* @U0, i32 0, i32 1), align 4
  %43 = load float* %z, align 4
  %44 = load float* getelementptr inbounds ([5 x float]* @U0, i32 0, i32 2), align 4
  %45 = load float* %z, align 4
  %46 = load float* getelementptr inbounds ([5 x float]* @U0, i32 0, i32 3), align 4
  %47 = load float* %z, align 4
  %48 = load float* getelementptr inbounds ([5 x float]* @U0, i32 0, i32 4), align 4
  %mul44 = fmul float %47, %48
  %add45 = fadd float %46, %mul44
  %mul46 = fmul float %45, %add45
  %add47 = fadd float %44, %mul46
  %mul48 = fmul float %43, %add47
  %add49 = fadd float %42, %mul48
  %mul50 = fmul float %41, %add49
  %add51 = fadd float %40, %mul50
  store float %add51, float* %u, align 4
  %49 = load float* %z, align 4
  %50 = load float* getelementptr inbounds ([5 x float]* @V0, i32 0, i32 0), align 4
  %51 = load float* %z, align 4
  %52 = load float* getelementptr inbounds ([5 x float]* @V0, i32 0, i32 1), align 4
  %53 = load float* %z, align 4
  %54 = load float* getelementptr inbounds ([5 x float]* @V0, i32 0, i32 2), align 4
  %55 = load float* %z, align 4
  %56 = load float* getelementptr inbounds ([5 x float]* @V0, i32 0, i32 3), align 4
  %57 = load float* %z, align 4
  %58 = load float* getelementptr inbounds ([5 x float]* @V0, i32 0, i32 4), align 4
  %mul52 = fmul float %57, %58
  %add53 = fadd float %56, %mul52
  %mul54 = fmul float %55, %add53
  %add55 = fadd float %54, %mul54
  %mul56 = fmul float %53, %add55
  %add57 = fadd float %52, %mul56
  %mul58 = fmul float %51, %add57
  %add59 = fadd float %50, %mul58
  %mul60 = fmul float %49, %add59
  %add61 = fadd float 1.000000e+00, %mul60
  store float %add61, float* %v, align 4
  %59 = load float* %x.addr, align 4
  %60 = load float* %u, align 4
  %61 = load float* %v, align 4
  %div62 = fdiv float %60, %61
  %mul63 = fmul float %59, %div62
  %62 = load float* %x.addr, align 4
  %call64 = call float @__ieee754_j1f(float %62) #5
  %63 = load float* %x.addr, align 4
  %call65 = call float @__ieee754_logf(float %63) #5
  %mul66 = fmul float %call64, %call65
  %64 = load float* %x.addr, align 4
  %div67 = fdiv float 1.000000e+00, %64
  %sub68 = fsub float %mul66, %div67
  %mul69 = fmul float 0x3FE45F3060000000, %sub68
  %add70 = fadd float %mul63, %mul69
  store float %add70, float* %retval
  br label %return

return:                                           ; preds = %if.end42, %if.then40, %if.end37, %if.then5, %if.then2, %if.then
  %65 = load float* %retval
  ret float %65
}

; Function Attrs: nounwind
define float @__ieee754_jnf(i32 %n, float %x) #2 {
entry:
  %retval = alloca float, align 4
  %n.addr = alloca i32, align 4
  %x.addr = alloca float, align 4
  %i = alloca i32, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %sgn = alloca i32, align 4
  %a = alloca float, align 4
  %b = alloca float, align 4
  %temp = alloca float, align 4
  %di = alloca float, align 4
  %z = alloca float, align 4
  %w = alloca float, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %t = alloca float, align 4
  %v = alloca float, align 4
  %q0 = alloca float, align 4
  %q1 = alloca float, align 4
  %h = alloca float, align 4
  %tmp = alloca float, align 4
  %k = alloca i32, align 4
  %m = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 2147483647, %2
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sgt i32 %3, 2139095040
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %add = fadd float %4, %5
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %n.addr, align 4
  %cmp1 = icmp slt i32 %6, 0
  br i1 %cmp1, label %if.then2, label %if.end4

if.then2:                                         ; preds = %if.end
  %7 = load i32* %n.addr, align 4
  %sub = sub nsw i32 0, %7
  store i32 %sub, i32* %n.addr, align 4
  %8 = load float* %x.addr, align 4
  %sub3 = fsub float -0.000000e+00, %8
  store float %sub3, float* %x.addr, align 4
  %9 = load i32* %hx, align 4
  %xor = xor i32 %9, -2147483648
  store i32 %xor, i32* %hx, align 4
  br label %if.end4

if.end4:                                          ; preds = %if.then2, %if.end
  %10 = load i32* %n.addr, align 4
  %cmp5 = icmp eq i32 %10, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  %11 = load float* %x.addr, align 4
  %call = call float @__ieee754_j0f(float %11) #5
  store float %call, float* %retval
  br label %return

if.end7:                                          ; preds = %if.end4
  %12 = load i32* %n.addr, align 4
  %cmp8 = icmp eq i32 %12, 1
  br i1 %cmp8, label %if.then9, label %if.end11

if.then9:                                         ; preds = %if.end7
  %13 = load float* %x.addr, align 4
  %call10 = call float @__ieee754_j1f(float %13) #5
  store float %call10, float* %retval
  br label %return

if.end11:                                         ; preds = %if.end7
  %14 = load i32* %n.addr, align 4
  %and12 = and i32 %14, 1
  %15 = load i32* %hx, align 4
  %shr = ashr i32 %15, 31
  %and13 = and i32 %and12, %shr
  store i32 %and13, i32* %sgn, align 4
  %16 = load float* %x.addr, align 4
  %call14 = call float @fabsf(float %16) #6
  store float %call14, float* %x.addr, align 4
  %17 = load i32* %ix, align 4
  %cmp15 = icmp eq i32 %17, 0
  br i1 %cmp15, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end11
  %18 = load i32* %ix, align 4
  %cmp16 = icmp eq i32 %18, 2139095040
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %lor.lhs.false, %if.end11
  store float 0.000000e+00, float* %b, align 4
  br label %if.end128

if.else:                                          ; preds = %lor.lhs.false
  %19 = load i32* %n.addr, align 4
  %conv = sitofp i32 %19 to float
  %20 = load float* %x.addr, align 4
  %cmp18 = fcmp ole float %conv, %20
  br i1 %cmp18, label %if.then20, label %if.else28

if.then20:                                        ; preds = %if.else
  %21 = load float* %x.addr, align 4
  %call21 = call float @__ieee754_j0f(float %21) #5
  store float %call21, float* %a, align 4
  %22 = load float* %x.addr, align 4
  %call22 = call float @__ieee754_j1f(float %22) #5
  store float %call22, float* %b, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then20
  %23 = load i32* %i, align 4
  %24 = load i32* %n.addr, align 4
  %cmp23 = icmp slt i32 %23, %24
  br i1 %cmp23, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load float* %b, align 4
  store float %25, float* %temp, align 4
  %26 = load float* %b, align 4
  %27 = load i32* %i, align 4
  %28 = load i32* %i, align 4
  %add25 = add nsw i32 %27, %28
  %conv26 = sitofp i32 %add25 to float
  %29 = load float* %x.addr, align 4
  %div = fdiv float %conv26, %29
  %mul = fmul float %26, %div
  %30 = load float* %a, align 4
  %sub27 = fsub float %mul, %30
  store float %sub27, float* %b, align 4
  %31 = load float* %temp, align 4
  store float %31, float* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %32 = load i32* %i, align 4
  %inc = add nsw i32 %32, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end127

if.else28:                                        ; preds = %if.else
  %33 = load i32* %ix, align 4
  %cmp29 = icmp slt i32 %33, 813694976
  br i1 %cmp29, label %if.then31, label %if.else49

if.then31:                                        ; preds = %if.else28
  %34 = load i32* %n.addr, align 4
  %cmp32 = icmp sgt i32 %34, 33
  br i1 %cmp32, label %if.then34, label %if.else35

if.then34:                                        ; preds = %if.then31
  store float 0.000000e+00, float* %b, align 4
  br label %if.end48

if.else35:                                        ; preds = %if.then31
  %35 = load float* %x.addr, align 4
  %mul36 = fmul float %35, 5.000000e-01
  store float %mul36, float* %temp, align 4
  %36 = load float* %temp, align 4
  store float %36, float* %b, align 4
  store float 1.000000e+00, float* %a, align 4
  store i32 2, i32* %i, align 4
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc44, %if.else35
  %37 = load i32* %i, align 4
  %38 = load i32* %n.addr, align 4
  %cmp38 = icmp sle i32 %37, %38
  br i1 %cmp38, label %for.body40, label %for.end46

for.body40:                                       ; preds = %for.cond37
  %39 = load i32* %i, align 4
  %conv41 = sitofp i32 %39 to float
  %40 = load float* %a, align 4
  %mul42 = fmul float %40, %conv41
  store float %mul42, float* %a, align 4
  %41 = load float* %temp, align 4
  %42 = load float* %b, align 4
  %mul43 = fmul float %42, %41
  store float %mul43, float* %b, align 4
  br label %for.inc44

for.inc44:                                        ; preds = %for.body40
  %43 = load i32* %i, align 4
  %inc45 = add nsw i32 %43, 1
  store i32 %inc45, i32* %i, align 4
  br label %for.cond37

for.end46:                                        ; preds = %for.cond37
  %44 = load float* %b, align 4
  %45 = load float* %a, align 4
  %div47 = fdiv float %44, %45
  store float %div47, float* %b, align 4
  br label %if.end48

if.end48:                                         ; preds = %for.end46, %if.then34
  br label %if.end126

if.else49:                                        ; preds = %if.else28
  %46 = load i32* %n.addr, align 4
  %47 = load i32* %n.addr, align 4
  %add52 = add nsw i32 %46, %47
  %conv53 = sitofp i32 %add52 to float
  %48 = load float* %x.addr, align 4
  %div54 = fdiv float %conv53, %48
  store float %div54, float* %w, align 4
  %49 = load float* %x.addr, align 4
  %div55 = fdiv float 2.000000e+00, %49
  store float %div55, float* %h, align 4
  %50 = load float* %w, align 4
  store float %50, float* %q0, align 4
  %51 = load float* %w, align 4
  %52 = load float* %h, align 4
  %add56 = fadd float %51, %52
  store float %add56, float* %z, align 4
  %53 = load float* %w, align 4
  %54 = load float* %z, align 4
  %mul57 = fmul float %53, %54
  %sub58 = fsub float %mul57, 1.000000e+00
  store float %sub58, float* %q1, align 4
  store i32 1, i32* %k, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else49
  %55 = load float* %q1, align 4
  %cmp59 = fcmp olt float %55, 1.000000e+09
  br i1 %cmp59, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %56 = load i32* %k, align 4
  %add61 = add nsw i32 %56, 1
  store i32 %add61, i32* %k, align 4
  %57 = load float* %h, align 4
  %58 = load float* %z, align 4
  %add62 = fadd float %58, %57
  store float %add62, float* %z, align 4
  %59 = load float* %z, align 4
  %60 = load float* %q1, align 4
  %mul63 = fmul float %59, %60
  %61 = load float* %q0, align 4
  %sub64 = fsub float %mul63, %61
  store float %sub64, float* %tmp, align 4
  %62 = load float* %q1, align 4
  store float %62, float* %q0, align 4
  %63 = load float* %tmp, align 4
  store float %63, float* %q1, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %64 = load i32* %n.addr, align 4
  %65 = load i32* %n.addr, align 4
  %add65 = add nsw i32 %64, %65
  store i32 %add65, i32* %m, align 4
  store float 0.000000e+00, float* %t, align 4
  %66 = load i32* %n.addr, align 4
  %67 = load i32* %k, align 4
  %add66 = add nsw i32 %66, %67
  %mul67 = mul nsw i32 2, %add66
  store i32 %mul67, i32* %i, align 4
  br label %for.cond68

for.cond68:                                       ; preds = %for.inc76, %while.end
  %68 = load i32* %i, align 4
  %69 = load i32* %m, align 4
  %cmp69 = icmp sge i32 %68, %69
  br i1 %cmp69, label %for.body71, label %for.end78

for.body71:                                       ; preds = %for.cond68
  %70 = load i32* %i, align 4
  %conv72 = sitofp i32 %70 to float
  %71 = load float* %x.addr, align 4
  %div73 = fdiv float %conv72, %71
  %72 = load float* %t, align 4
  %sub74 = fsub float %div73, %72
  %div75 = fdiv float 1.000000e+00, %sub74
  store float %div75, float* %t, align 4
  br label %for.inc76

for.inc76:                                        ; preds = %for.body71
  %73 = load i32* %i, align 4
  %sub77 = sub nsw i32 %73, 2
  store i32 %sub77, i32* %i, align 4
  br label %for.cond68

for.end78:                                        ; preds = %for.cond68
  %74 = load float* %t, align 4
  store float %74, float* %a, align 4
  store float 1.000000e+00, float* %b, align 4
  %75 = load i32* %n.addr, align 4
  %conv79 = sitofp i32 %75 to float
  store float %conv79, float* %tmp, align 4
  %76 = load float* %x.addr, align 4
  %div80 = fdiv float 2.000000e+00, %76
  store float %div80, float* %v, align 4
  %77 = load float* %tmp, align 4
  %78 = load float* %v, align 4
  %79 = load float* %tmp, align 4
  %mul81 = fmul float %78, %79
  %call82 = call float @fabsf(float %mul81) #6
  %call83 = call float @__ieee754_logf(float %call82) #5
  %mul84 = fmul float %77, %call83
  store float %mul84, float* %tmp, align 4
  %80 = load float* %tmp, align 4
  %cmp85 = fcmp olt float %80, 0x40562E3000000000
  br i1 %cmp85, label %if.then87, label %if.else101

if.then87:                                        ; preds = %for.end78
  %81 = load i32* %n.addr, align 4
  %sub88 = sub nsw i32 %81, 1
  store i32 %sub88, i32* %i, align 4
  %82 = load i32* %i, align 4
  %83 = load i32* %i, align 4
  %add89 = add nsw i32 %82, %83
  %conv90 = sitofp i32 %add89 to float
  store float %conv90, float* %di, align 4
  br label %for.cond91

for.cond91:                                       ; preds = %for.inc99, %if.then87
  %84 = load i32* %i, align 4
  %cmp92 = icmp sgt i32 %84, 0
  br i1 %cmp92, label %for.body94, label %for.end100

for.body94:                                       ; preds = %for.cond91
  %85 = load float* %b, align 4
  store float %85, float* %temp, align 4
  %86 = load float* %di, align 4
  %87 = load float* %b, align 4
  %mul95 = fmul float %87, %86
  store float %mul95, float* %b, align 4
  %88 = load float* %b, align 4
  %89 = load float* %x.addr, align 4
  %div96 = fdiv float %88, %89
  %90 = load float* %a, align 4
  %sub97 = fsub float %div96, %90
  store float %sub97, float* %b, align 4
  %91 = load float* %temp, align 4
  store float %91, float* %a, align 4
  %92 = load float* %di, align 4
  %sub98 = fsub float %92, 2.000000e+00
  store float %sub98, float* %di, align 4
  br label %for.inc99

for.inc99:                                        ; preds = %for.body94
  %93 = load i32* %i, align 4
  %dec = add nsw i32 %93, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond91

for.end100:                                       ; preds = %for.cond91
  br label %if.end122

if.else101:                                       ; preds = %for.end78
  %94 = load i32* %n.addr, align 4
  %sub102 = sub nsw i32 %94, 1
  store i32 %sub102, i32* %i, align 4
  %95 = load i32* %i, align 4
  %96 = load i32* %i, align 4
  %add103 = add nsw i32 %95, %96
  %conv104 = sitofp i32 %add103 to float
  store float %conv104, float* %di, align 4
  br label %for.cond105

for.cond105:                                      ; preds = %for.inc119, %if.else101
  %97 = load i32* %i, align 4
  %cmp106 = icmp sgt i32 %97, 0
  br i1 %cmp106, label %for.body108, label %for.end121

for.body108:                                      ; preds = %for.cond105
  %98 = load float* %b, align 4
  store float %98, float* %temp, align 4
  %99 = load float* %di, align 4
  %100 = load float* %b, align 4
  %mul109 = fmul float %100, %99
  store float %mul109, float* %b, align 4
  %101 = load float* %b, align 4
  %102 = load float* %x.addr, align 4
  %div110 = fdiv float %101, %102
  %103 = load float* %a, align 4
  %sub111 = fsub float %div110, %103
  store float %sub111, float* %b, align 4
  %104 = load float* %temp, align 4
  store float %104, float* %a, align 4
  %105 = load float* %di, align 4
  %sub112 = fsub float %105, 2.000000e+00
  store float %sub112, float* %di, align 4
  %106 = load float* %b, align 4
  %cmp113 = fcmp ogt float %106, 1.000000e+10
  br i1 %cmp113, label %if.then115, label %if.end118

if.then115:                                       ; preds = %for.body108
  %107 = load float* %b, align 4
  %108 = load float* %a, align 4
  %div116 = fdiv float %108, %107
  store float %div116, float* %a, align 4
  %109 = load float* %b, align 4
  %110 = load float* %t, align 4
  %div117 = fdiv float %110, %109
  store float %div117, float* %t, align 4
  store float 1.000000e+00, float* %b, align 4
  br label %if.end118

if.end118:                                        ; preds = %if.then115, %for.body108
  br label %for.inc119

for.inc119:                                       ; preds = %if.end118
  %111 = load i32* %i, align 4
  %dec120 = add nsw i32 %111, -1
  store i32 %dec120, i32* %i, align 4
  br label %for.cond105

for.end121:                                       ; preds = %for.cond105
  br label %if.end122

if.end122:                                        ; preds = %for.end121, %for.end100
  %112 = load float* %t, align 4
  %113 = load float* %x.addr, align 4
  %call123 = call float @__ieee754_j0f(float %113) #5
  %mul124 = fmul float %112, %call123
  %114 = load float* %b, align 4
  %div125 = fdiv float %mul124, %114
  store float %div125, float* %b, align 4
  br label %if.end126

if.end126:                                        ; preds = %if.end122, %if.end48
  br label %if.end127

if.end127:                                        ; preds = %if.end126, %for.end
  br label %if.end128

if.end128:                                        ; preds = %if.end127, %if.then17
  %115 = load i32* %sgn, align 4
  %cmp129 = icmp eq i32 %115, 1
  br i1 %cmp129, label %if.then131, label %if.else133

if.then131:                                       ; preds = %if.end128
  %116 = load float* %b, align 4
  %sub132 = fsub float -0.000000e+00, %116
  store float %sub132, float* %retval
  br label %return

if.else133:                                       ; preds = %if.end128
  %117 = load float* %b, align 4
  store float %117, float* %retval
  br label %return

return:                                           ; preds = %if.else133, %if.then131, %if.then9, %if.then6, %if.then
  %118 = load float* %retval
  ret float %118
}

; Function Attrs: nounwind
define float @__ieee754_ynf(i32 %n, float %x) #2 {
entry:
  %retval = alloca float, align 4
  %n.addr = alloca i32, align 4
  %x.addr = alloca float, align 4
  %i = alloca i32, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %ib = alloca i32, align 4
  %sign = alloca i32, align 4
  %a = alloca float, align 4
  %b = alloca float, align 4
  %temp = alloca float, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u26 = alloca %union.ieee_float_shape_type, align 4
  %gf_u39 = alloca %union.ieee_float_shape_type, align 4
  store i32 %n, i32* %n.addr, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 2147483647, %2
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sgt i32 %3, 2139095040
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %add = fadd float %4, %5
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp eq i32 %6, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store float 0xFFF0000000000000, float* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %7 = load i32* %hx, align 4
  %cmp4 = icmp slt i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end3
  store float 0x7FF8000000000000, float* %retval
  br label %return

if.end6:                                          ; preds = %if.end3
  store i32 1, i32* %sign, align 4
  %8 = load i32* %n.addr, align 4
  %cmp7 = icmp slt i32 %8, 0
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.end6
  %9 = load i32* %n.addr, align 4
  %sub = sub nsw i32 0, %9
  store i32 %sub, i32* %n.addr, align 4
  %10 = load i32* %n.addr, align 4
  %and9 = and i32 %10, 1
  %shl = shl i32 %and9, 1
  %sub10 = sub nsw i32 1, %shl
  store i32 %sub10, i32* %sign, align 4
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.end6
  %11 = load i32* %n.addr, align 4
  %cmp12 = icmp eq i32 %11, 0
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  %12 = load float* %x.addr, align 4
  %call = call float @__ieee754_y0f(float %12) #5
  store float %call, float* %retval
  br label %return

if.end14:                                         ; preds = %if.end11
  %13 = load i32* %n.addr, align 4
  %cmp15 = icmp eq i32 %13, 1
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %14 = load i32* %sign, align 4
  %conv = sitofp i32 %14 to float
  %15 = load float* %x.addr, align 4
  %call17 = call float @__ieee754_y1f(float %15) #5
  %mul = fmul float %conv, %call17
  store float %mul, float* %retval
  br label %return

if.end18:                                         ; preds = %if.end14
  %16 = load i32* %ix, align 4
  %cmp19 = icmp eq i32 %16, 2139095040
  br i1 %cmp19, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end18
  store float 0.000000e+00, float* %retval
  br label %return

if.end22:                                         ; preds = %if.end18
  %17 = load float* %x.addr, align 4
  %call23 = call float @__ieee754_y0f(float %17) #5
  store float %call23, float* %a, align 4
  %18 = load float* %x.addr, align 4
  %call24 = call float @__ieee754_y1f(float %18) #5
  store float %call24, float* %b, align 4
  br label %do.body25

do.body25:                                        ; preds = %if.end22
  %19 = load float* %b, align 4
  %value27 = bitcast %union.ieee_float_shape_type* %gf_u26 to float*
  store float %19, float* %value27, align 4
  %word28 = bitcast %union.ieee_float_shape_type* %gf_u26 to i32*
  %20 = load i32* %word28, align 4
  store i32 %20, i32* %ib, align 4
  br label %do.end29

do.end29:                                         ; preds = %do.body25
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end29
  %21 = load i32* %i, align 4
  %22 = load i32* %n.addr, align 4
  %cmp30 = icmp slt i32 %21, %22
  br i1 %cmp30, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %23 = load i32* %ib, align 4
  %cmp32 = icmp ne i32 %23, -8388608
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %24 = phi i1 [ false, %for.cond ], [ %cmp32, %land.rhs ]
  br i1 %24, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %25 = load float* %b, align 4
  store float %25, float* %temp, align 4
  %26 = load i32* %i, align 4
  %27 = load i32* %i, align 4
  %add34 = add nsw i32 %26, %27
  %conv35 = sitofp i32 %add34 to float
  %28 = load float* %x.addr, align 4
  %div = fdiv float %conv35, %28
  %29 = load float* %b, align 4
  %mul36 = fmul float %div, %29
  %30 = load float* %a, align 4
  %sub37 = fsub float %mul36, %30
  store float %sub37, float* %b, align 4
  br label %do.body38

do.body38:                                        ; preds = %for.body
  %31 = load float* %b, align 4
  %value40 = bitcast %union.ieee_float_shape_type* %gf_u39 to float*
  store float %31, float* %value40, align 4
  %word41 = bitcast %union.ieee_float_shape_type* %gf_u39 to i32*
  %32 = load i32* %word41, align 4
  store i32 %32, i32* %ib, align 4
  br label %do.end42

do.end42:                                         ; preds = %do.body38
  %33 = load float* %temp, align 4
  store float %33, float* %a, align 4
  br label %for.inc

for.inc:                                          ; preds = %do.end42
  %34 = load i32* %i, align 4
  %inc = add nsw i32 %34, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  %35 = load i32* %sign, align 4
  %cmp43 = icmp sgt i32 %35, 0
  br i1 %cmp43, label %if.then45, label %if.else

if.then45:                                        ; preds = %for.end
  %36 = load float* %b, align 4
  store float %36, float* %retval
  br label %return

if.else:                                          ; preds = %for.end
  %37 = load float* %b, align 4
  %sub46 = fsub float -0.000000e+00, %37
  store float %sub46, float* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then45, %if.then21, %if.then16, %if.then13, %if.then5, %if.then2, %if.then
  %38 = load float* %retval
  ret float %38
}

; Function Attrs: nounwind
define float @__ieee754_log10f(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y = alloca float, align 4
  %z = alloca float, align 4
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %hx = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u11 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  store i32 0, i32* %k, align 4
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  store float 0xFFF0000000000000, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %3 = load i32* %hx, align 4
  %cmp1 = icmp slt i32 %3, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %sub = fsub float %4, %5
  %div = fdiv float %sub, 0.000000e+00
  store float %div, float* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %6 = load i32* %hx, align 4
  %cmp4 = icmp slt i32 %6, 2139095040
  br i1 %cmp4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end3
  %7 = load float* %x.addr, align 4
  %8 = load float* %x.addr, align 4
  %add = fadd float %7, %8
  store float %add, float* %retval
  br label %return

if.end6:                                          ; preds = %if.end3
  %9 = load i32* %hx, align 4
  %cmp7 = icmp slt i32 %9, 8388608
  br i1 %cmp7, label %if.then8, label %if.end15

if.then8:                                         ; preds = %if.end6
  %10 = load i32* %k, align 4
  %sub9 = sub nsw i32 %10, 25
  store i32 %sub9, i32* %k, align 4
  %11 = load float* %x.addr, align 4
  %mul = fmul float %11, 0x4180000000000000
  store float %mul, float* %x.addr, align 4
  br label %do.body10

do.body10:                                        ; preds = %if.then8
  %12 = load float* %x.addr, align 4
  %value12 = bitcast %union.ieee_float_shape_type* %gf_u11 to float*
  store float %12, float* %value12, align 4
  %word13 = bitcast %union.ieee_float_shape_type* %gf_u11 to i32*
  %13 = load i32* %word13, align 4
  store i32 %13, i32* %hx, align 4
  br label %do.end14

do.end14:                                         ; preds = %do.body10
  br label %if.end15

if.end15:                                         ; preds = %do.end14, %if.end6
  %14 = load i32* %hx, align 4
  %shr = ashr i32 %14, 23
  %sub16 = sub nsw i32 %shr, 127
  %15 = load i32* %k, align 4
  %add17 = add nsw i32 %15, %sub16
  store i32 %add17, i32* %k, align 4
  %16 = load i32* %k, align 4
  %and18 = and i32 %16, -2147483648
  %shr19 = lshr i32 %and18, 31
  store i32 %shr19, i32* %i, align 4
  %17 = load i32* %hx, align 4
  %and20 = and i32 %17, 8388607
  %18 = load i32* %i, align 4
  %sub21 = sub nsw i32 127, %18
  %shl = shl i32 %sub21, 23
  %or = or i32 %and20, %shl
  store i32 %or, i32* %hx, align 4
  %19 = load i32* %k, align 4
  %20 = load i32* %i, align 4
  %add22 = add nsw i32 %19, %20
  %conv = sitofp i32 %add22 to float
  store float %conv, float* %y, align 4
  br label %do.body23

do.body23:                                        ; preds = %if.end15
  %21 = load i32* %hx, align 4
  %word24 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %21, i32* %word24, align 4
  %value25 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %22 = load float* %value25, align 4
  store float %22, float* %x.addr, align 4
  br label %do.end26

do.end26:                                         ; preds = %do.body23
  %23 = load float* %y, align 4
  %mul27 = fmul float %23, 0x3EAA84FB60000000
  %24 = load float* %x.addr, align 4
  %call = call float @__ieee754_logf(float %24) #5
  %mul28 = fmul float 0x3FDBCB7B20000000, %call
  %add29 = fadd float %mul27, %mul28
  store float %add29, float* %z, align 4
  %25 = load float* %z, align 4
  %26 = load float* %y, align 4
  %mul30 = fmul float %26, 0x3FD3441000000000
  %add31 = fadd float %25, %mul30
  store float %add31, float* %retval
  br label %return

return:                                           ; preds = %do.end26, %if.then5, %if.then2, %if.then
  %27 = load float* %retval
  ret float %27
}

; Function Attrs: nounwind
define float @__ieee754_logf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %hfsq = alloca float, align 4
  %f = alloca float, align 4
  %s = alloca float, align 4
  %z = alloca float, align 4
  %R = alloca float, align 4
  %w = alloca float, align 4
  %t1 = alloca float, align 4
  %t2 = alloca float, align 4
  %dk = alloca float, align 4
  %k = alloca i32, align 4
  %ix = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u11 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  store i32 0, i32* %k, align 4
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  %cmp = icmp eq i32 %and, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  store float 0xFFF0000000000000, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %3 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %3, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %sub = fsub float %4, %5
  %div = fdiv float %sub, 0.000000e+00
  store float %div, float* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %6 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %6, 2139095040
  br i1 %cmp4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.end3
  %7 = load float* %x.addr, align 4
  %8 = load float* %x.addr, align 4
  %add = fadd float %7, %8
  store float %add, float* %retval
  br label %return

if.end6:                                          ; preds = %if.end3
  %9 = load i32* %ix, align 4
  %cmp7 = icmp slt i32 %9, 8388608
  br i1 %cmp7, label %if.then8, label %if.end15

if.then8:                                         ; preds = %if.end6
  %10 = load i32* %k, align 4
  %sub9 = sub nsw i32 %10, 25
  store i32 %sub9, i32* %k, align 4
  %11 = load float* %x.addr, align 4
  %mul = fmul float %11, 0x4180000000000000
  store float %mul, float* %x.addr, align 4
  br label %do.body10

do.body10:                                        ; preds = %if.then8
  %12 = load float* %x.addr, align 4
  %value12 = bitcast %union.ieee_float_shape_type* %gf_u11 to float*
  store float %12, float* %value12, align 4
  %word13 = bitcast %union.ieee_float_shape_type* %gf_u11 to i32*
  %13 = load i32* %word13, align 4
  store i32 %13, i32* %ix, align 4
  br label %do.end14

do.end14:                                         ; preds = %do.body10
  br label %if.end15

if.end15:                                         ; preds = %do.end14, %if.end6
  %14 = load i32* %ix, align 4
  %shr = ashr i32 %14, 23
  %sub16 = sub nsw i32 %shr, 127
  %15 = load i32* %k, align 4
  %add17 = add nsw i32 %15, %sub16
  store i32 %add17, i32* %k, align 4
  %16 = load i32* %ix, align 4
  %and18 = and i32 %16, 8388607
  store i32 %and18, i32* %ix, align 4
  %17 = load i32* %ix, align 4
  %add19 = add nsw i32 %17, 4913952
  %and20 = and i32 %add19, 8388608
  store i32 %and20, i32* %i, align 4
  br label %do.body21

do.body21:                                        ; preds = %if.end15
  %18 = load i32* %ix, align 4
  %19 = load i32* %i, align 4
  %xor = xor i32 %19, 1065353216
  %or = or i32 %18, %xor
  %word22 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %or, i32* %word22, align 4
  %value23 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %20 = load float* %value23, align 4
  store float %20, float* %x.addr, align 4
  br label %do.end24

do.end24:                                         ; preds = %do.body21
  %21 = load i32* %i, align 4
  %shr25 = ashr i32 %21, 23
  %22 = load i32* %k, align 4
  %add26 = add nsw i32 %22, %shr25
  store i32 %add26, i32* %k, align 4
  %23 = load float* %x.addr, align 4
  %sub27 = fsub float %23, 1.000000e+00
  store float %sub27, float* %f, align 4
  %24 = load i32* %ix, align 4
  %add28 = add nsw i32 15, %24
  %and29 = and i32 8388607, %add28
  %cmp30 = icmp slt i32 %and29, 16
  br i1 %cmp30, label %if.then31, label %if.end55

if.then31:                                        ; preds = %do.end24
  %25 = load float* %f, align 4
  %cmp32 = fcmp oeq float %25, 0.000000e+00
  br i1 %cmp32, label %if.then33, label %if.end39

if.then33:                                        ; preds = %if.then31
  %26 = load i32* %k, align 4
  %cmp34 = icmp eq i32 %26, 0
  br i1 %cmp34, label %if.then35, label %if.else

if.then35:                                        ; preds = %if.then33
  store float 0.000000e+00, float* %retval
  br label %return

if.else:                                          ; preds = %if.then33
  %27 = load i32* %k, align 4
  %conv = sitofp i32 %27 to float
  store float %conv, float* %dk, align 4
  %28 = load float* %dk, align 4
  %mul36 = fmul float %28, 0x3FE62E3000000000
  %29 = load float* %dk, align 4
  %mul37 = fmul float %29, 0x3EE2FEFA20000000
  %add38 = fadd float %mul36, %mul37
  store float %add38, float* %retval
  br label %return

if.end39:                                         ; preds = %if.then31
  %30 = load float* %f, align 4
  %31 = load float* %f, align 4
  %mul40 = fmul float %30, %31
  %32 = load float* %f, align 4
  %mul41 = fmul float 0x3FD5555560000000, %32
  %sub42 = fsub float 5.000000e-01, %mul41
  %mul43 = fmul float %mul40, %sub42
  store float %mul43, float* %R, align 4
  %33 = load i32* %k, align 4
  %cmp44 = icmp eq i32 %33, 0
  br i1 %cmp44, label %if.then46, label %if.else48

if.then46:                                        ; preds = %if.end39
  %34 = load float* %f, align 4
  %35 = load float* %R, align 4
  %sub47 = fsub float %34, %35
  store float %sub47, float* %retval
  br label %return

if.else48:                                        ; preds = %if.end39
  %36 = load i32* %k, align 4
  %conv49 = sitofp i32 %36 to float
  store float %conv49, float* %dk, align 4
  %37 = load float* %dk, align 4
  %mul50 = fmul float %37, 0x3FE62E3000000000
  %38 = load float* %R, align 4
  %39 = load float* %dk, align 4
  %mul51 = fmul float %39, 0x3EE2FEFA20000000
  %sub52 = fsub float %38, %mul51
  %40 = load float* %f, align 4
  %sub53 = fsub float %sub52, %40
  %sub54 = fsub float %mul50, %sub53
  store float %sub54, float* %retval
  br label %return

if.end55:                                         ; preds = %do.end24
  %41 = load float* %f, align 4
  %42 = load float* %f, align 4
  %add56 = fadd float 2.000000e+00, %42
  %div57 = fdiv float %41, %add56
  store float %div57, float* %s, align 4
  %43 = load i32* %k, align 4
  %conv58 = sitofp i32 %43 to float
  store float %conv58, float* %dk, align 4
  %44 = load float* %s, align 4
  %45 = load float* %s, align 4
  %mul59 = fmul float %44, %45
  store float %mul59, float* %z, align 4
  %46 = load i32* %ix, align 4
  %sub60 = sub nsw i32 %46, 3187664
  store i32 %sub60, i32* %i, align 4
  %47 = load float* %z, align 4
  %48 = load float* %z, align 4
  %mul61 = fmul float %47, %48
  store float %mul61, float* %w, align 4
  %49 = load i32* %ix, align 4
  %sub62 = sub nsw i32 3523208, %49
  store i32 %sub62, i32* %j, align 4
  %50 = load float* %w, align 4
  %51 = load float* %w, align 4
  %52 = load float* %w, align 4
  %mul63 = fmul float %52, 0x3FC39A09E0000000
  %add64 = fadd float 0x3FCC71C520000000, %mul63
  %mul65 = fmul float %51, %add64
  %add66 = fadd float 0x3FD99999A0000000, %mul65
  %mul67 = fmul float %50, %add66
  store float %mul67, float* %t1, align 4
  %53 = load float* %z, align 4
  %54 = load float* %w, align 4
  %55 = load float* %w, align 4
  %56 = load float* %w, align 4
  %mul68 = fmul float %56, 0x3FC2F112E0000000
  %add69 = fadd float 0x3FC74664A0000000, %mul68
  %mul70 = fmul float %55, %add69
  %add71 = fadd float 0x3FD24924A0000000, %mul70
  %mul72 = fmul float %54, %add71
  %add73 = fadd float 0x3FE5555560000000, %mul72
  %mul74 = fmul float %53, %add73
  store float %mul74, float* %t2, align 4
  %57 = load i32* %j, align 4
  %58 = load i32* %i, align 4
  %or75 = or i32 %58, %57
  store i32 %or75, i32* %i, align 4
  %59 = load float* %t2, align 4
  %60 = load float* %t1, align 4
  %add76 = fadd float %59, %60
  store float %add76, float* %R, align 4
  %61 = load i32* %i, align 4
  %cmp77 = icmp sgt i32 %61, 0
  br i1 %cmp77, label %if.then79, label %if.else98

if.then79:                                        ; preds = %if.end55
  %62 = load float* %f, align 4
  %mul80 = fmul float 5.000000e-01, %62
  %63 = load float* %f, align 4
  %mul81 = fmul float %mul80, %63
  store float %mul81, float* %hfsq, align 4
  %64 = load i32* %k, align 4
  %cmp82 = icmp eq i32 %64, 0
  br i1 %cmp82, label %if.then84, label %if.else89

if.then84:                                        ; preds = %if.then79
  %65 = load float* %f, align 4
  %66 = load float* %hfsq, align 4
  %67 = load float* %s, align 4
  %68 = load float* %hfsq, align 4
  %69 = load float* %R, align 4
  %add85 = fadd float %68, %69
  %mul86 = fmul float %67, %add85
  %sub87 = fsub float %66, %mul86
  %sub88 = fsub float %65, %sub87
  store float %sub88, float* %retval
  br label %return

if.else89:                                        ; preds = %if.then79
  %70 = load float* %dk, align 4
  %mul90 = fmul float %70, 0x3FE62E3000000000
  %71 = load float* %hfsq, align 4
  %72 = load float* %s, align 4
  %73 = load float* %hfsq, align 4
  %74 = load float* %R, align 4
  %add91 = fadd float %73, %74
  %mul92 = fmul float %72, %add91
  %75 = load float* %dk, align 4
  %mul93 = fmul float %75, 0x3EE2FEFA20000000
  %add94 = fadd float %mul92, %mul93
  %sub95 = fsub float %71, %add94
  %76 = load float* %f, align 4
  %sub96 = fsub float %sub95, %76
  %sub97 = fsub float %mul90, %sub96
  store float %sub97, float* %retval
  br label %return

if.else98:                                        ; preds = %if.end55
  %77 = load i32* %k, align 4
  %cmp99 = icmp eq i32 %77, 0
  br i1 %cmp99, label %if.then101, label %if.else105

if.then101:                                       ; preds = %if.else98
  %78 = load float* %f, align 4
  %79 = load float* %s, align 4
  %80 = load float* %f, align 4
  %81 = load float* %R, align 4
  %sub102 = fsub float %80, %81
  %mul103 = fmul float %79, %sub102
  %sub104 = fsub float %78, %mul103
  store float %sub104, float* %retval
  br label %return

if.else105:                                       ; preds = %if.else98
  %82 = load float* %dk, align 4
  %mul106 = fmul float %82, 0x3FE62E3000000000
  %83 = load float* %s, align 4
  %84 = load float* %f, align 4
  %85 = load float* %R, align 4
  %sub107 = fsub float %84, %85
  %mul108 = fmul float %83, %sub107
  %86 = load float* %dk, align 4
  %mul109 = fmul float %86, 0x3EE2FEFA20000000
  %sub110 = fsub float %mul108, %mul109
  %87 = load float* %f, align 4
  %sub111 = fsub float %sub110, %87
  %sub112 = fsub float %mul106, %sub111
  store float %sub112, float* %retval
  br label %return

return:                                           ; preds = %if.else105, %if.then101, %if.else89, %if.then84, %if.else48, %if.then46, %if.else, %if.then35, %if.then5, %if.then2, %if.then
  %88 = load float* %retval
  ret float %88
}

; Function Attrs: nounwind
define double @__ieee754_fmod(double %x, double %y) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  %n = alloca i32, align 4
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %hz = alloca i32, align 4
  %ix = alloca i32, align 4
  %iy = alloca i32, align 4
  %sx = alloca i32, align 4
  %i = alloca i32, align 4
  %lx = alloca i32, align 4
  %ly = alloca i32, align 4
  %lz = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %ew_u3 = alloca %union.ieee_double_shape_type, align 4
  %iw_u = alloca %union.ieee_double_shape_type, align 4
  %iw_u193 = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body2

do.body2:                                         ; preds = %do.end
  %3 = load double* %y.addr, align 8
  %value4 = bitcast %union.ieee_double_shape_type* %ew_u3 to double*
  store double %3, double* %value4, align 4
  %parts5 = bitcast %union.ieee_double_shape_type* %ew_u3 to %struct.anon*
  %msw6 = getelementptr inbounds %struct.anon* %parts5, i32 0, i32 1
  %4 = load i32* %msw6, align 4
  store i32 %4, i32* %hy, align 4
  %parts7 = bitcast %union.ieee_double_shape_type* %ew_u3 to %struct.anon*
  %lsw8 = getelementptr inbounds %struct.anon* %parts7, i32 0, i32 0
  %5 = load i32* %lsw8, align 4
  store i32 %5, i32* %ly, align 4
  br label %do.end9

do.end9:                                          ; preds = %do.body2
  %6 = load i32* %hx, align 4
  %and = and i32 %6, -2147483648
  store i32 %and, i32* %sx, align 4
  %7 = load i32* %sx, align 4
  %8 = load i32* %hx, align 4
  %xor = xor i32 %8, %7
  store i32 %xor, i32* %hx, align 4
  %9 = load i32* %hy, align 4
  %and10 = and i32 %9, 2147483647
  store i32 %and10, i32* %hy, align 4
  %10 = load i32* %hy, align 4
  %11 = load i32* %ly, align 4
  %or = or i32 %10, %11
  %cmp = icmp eq i32 %or, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end9
  %12 = load i32* %hx, align 4
  %cmp11 = icmp sge i32 %12, 2146435072
  br i1 %cmp11, label %if.then, label %lor.lhs.false12

lor.lhs.false12:                                  ; preds = %lor.lhs.false
  %13 = load i32* %hy, align 4
  %14 = load i32* %ly, align 4
  %15 = load i32* %ly, align 4
  %sub = sub i32 0, %15
  %or13 = or i32 %14, %sub
  %shr = lshr i32 %or13, 31
  %or14 = or i32 %13, %shr
  %cmp15 = icmp ugt i32 %or14, 2146435072
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false12, %lor.lhs.false, %do.end9
  %16 = load double* %x.addr, align 8
  %17 = load double* %y.addr, align 8
  %mul = fmul double %16, %17
  %18 = load double* %x.addr, align 8
  %19 = load double* %y.addr, align 8
  %mul16 = fmul double %18, %19
  %div = fdiv double %mul, %mul16
  store double %div, double* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false12
  %20 = load i32* %hx, align 4
  %21 = load i32* %hy, align 4
  %cmp17 = icmp sle i32 %20, %21
  br i1 %cmp17, label %if.then18, label %if.end28

if.then18:                                        ; preds = %if.end
  %22 = load i32* %hx, align 4
  %23 = load i32* %hy, align 4
  %cmp19 = icmp slt i32 %22, %23
  br i1 %cmp19, label %if.then22, label %lor.lhs.false20

lor.lhs.false20:                                  ; preds = %if.then18
  %24 = load i32* %lx, align 4
  %25 = load i32* %ly, align 4
  %cmp21 = icmp ult i32 %24, %25
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %lor.lhs.false20, %if.then18
  %26 = load double* %x.addr, align 8
  store double %26, double* %retval
  br label %return

if.end23:                                         ; preds = %lor.lhs.false20
  %27 = load i32* %lx, align 4
  %28 = load i32* %ly, align 4
  %cmp24 = icmp eq i32 %27, %28
  br i1 %cmp24, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.end23
  %29 = load i32* %sx, align 4
  %shr26 = lshr i32 %29, 31
  %arrayidx = getelementptr inbounds [2 x double]* @Zero38, i32 0, i32 %shr26
  %30 = load double* %arrayidx, align 4
  store double %30, double* %retval
  br label %return

if.end27:                                         ; preds = %if.end23
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end
  %31 = load i32* %hx, align 4
  %cmp29 = icmp slt i32 %31, 1048576
  br i1 %cmp29, label %if.then30, label %if.else44

if.then30:                                        ; preds = %if.end28
  %32 = load i32* %hx, align 4
  %cmp31 = icmp eq i32 %32, 0
  br i1 %cmp31, label %if.then32, label %if.else

if.then32:                                        ; preds = %if.then30
  store i32 -1043, i32* %ix, align 4
  %33 = load i32* %lx, align 4
  store i32 %33, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then32
  %34 = load i32* %i, align 4
  %cmp33 = icmp sgt i32 %34, 0
  br i1 %cmp33, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %35 = load i32* %ix, align 4
  %sub34 = sub nsw i32 %35, 1
  store i32 %sub34, i32* %ix, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %36 = load i32* %i, align 4
  %shl = shl i32 %36, 1
  store i32 %shl, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end43

if.else:                                          ; preds = %if.then30
  store i32 -1022, i32* %ix, align 4
  %37 = load i32* %hx, align 4
  %shl35 = shl i32 %37, 11
  store i32 %shl35, i32* %i, align 4
  br label %for.cond36

for.cond36:                                       ; preds = %for.inc40, %if.else
  %38 = load i32* %i, align 4
  %cmp37 = icmp sgt i32 %38, 0
  br i1 %cmp37, label %for.body38, label %for.end42

for.body38:                                       ; preds = %for.cond36
  %39 = load i32* %ix, align 4
  %sub39 = sub nsw i32 %39, 1
  store i32 %sub39, i32* %ix, align 4
  br label %for.inc40

for.inc40:                                        ; preds = %for.body38
  %40 = load i32* %i, align 4
  %shl41 = shl i32 %40, 1
  store i32 %shl41, i32* %i, align 4
  br label %for.cond36

for.end42:                                        ; preds = %for.cond36
  br label %if.end43

if.end43:                                         ; preds = %for.end42, %for.end
  br label %if.end47

if.else44:                                        ; preds = %if.end28
  %41 = load i32* %hx, align 4
  %shr45 = ashr i32 %41, 20
  %sub46 = sub nsw i32 %shr45, 1023
  store i32 %sub46, i32* %ix, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.else44, %if.end43
  %42 = load i32* %hy, align 4
  %cmp48 = icmp slt i32 %42, 1048576
  br i1 %cmp48, label %if.then49, label %if.else69

if.then49:                                        ; preds = %if.end47
  %43 = load i32* %hy, align 4
  %cmp50 = icmp eq i32 %43, 0
  br i1 %cmp50, label %if.then51, label %if.else59

if.then51:                                        ; preds = %if.then49
  store i32 -1043, i32* %iy, align 4
  %44 = load i32* %ly, align 4
  store i32 %44, i32* %i, align 4
  br label %for.cond52

for.cond52:                                       ; preds = %for.inc56, %if.then51
  %45 = load i32* %i, align 4
  %cmp53 = icmp sgt i32 %45, 0
  br i1 %cmp53, label %for.body54, label %for.end58

for.body54:                                       ; preds = %for.cond52
  %46 = load i32* %iy, align 4
  %sub55 = sub nsw i32 %46, 1
  store i32 %sub55, i32* %iy, align 4
  br label %for.inc56

for.inc56:                                        ; preds = %for.body54
  %47 = load i32* %i, align 4
  %shl57 = shl i32 %47, 1
  store i32 %shl57, i32* %i, align 4
  br label %for.cond52

for.end58:                                        ; preds = %for.cond52
  br label %if.end68

if.else59:                                        ; preds = %if.then49
  store i32 -1022, i32* %iy, align 4
  %48 = load i32* %hy, align 4
  %shl60 = shl i32 %48, 11
  store i32 %shl60, i32* %i, align 4
  br label %for.cond61

for.cond61:                                       ; preds = %for.inc65, %if.else59
  %49 = load i32* %i, align 4
  %cmp62 = icmp sgt i32 %49, 0
  br i1 %cmp62, label %for.body63, label %for.end67

for.body63:                                       ; preds = %for.cond61
  %50 = load i32* %iy, align 4
  %sub64 = sub nsw i32 %50, 1
  store i32 %sub64, i32* %iy, align 4
  br label %for.inc65

for.inc65:                                        ; preds = %for.body63
  %51 = load i32* %i, align 4
  %shl66 = shl i32 %51, 1
  store i32 %shl66, i32* %i, align 4
  br label %for.cond61

for.end67:                                        ; preds = %for.cond61
  br label %if.end68

if.end68:                                         ; preds = %for.end67, %for.end58
  br label %if.end72

if.else69:                                        ; preds = %if.end47
  %52 = load i32* %hy, align 4
  %shr70 = ashr i32 %52, 20
  %sub71 = sub nsw i32 %shr70, 1023
  store i32 %sub71, i32* %iy, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.else69, %if.end68
  %53 = load i32* %ix, align 4
  %cmp73 = icmp sge i32 %53, -1022
  br i1 %cmp73, label %if.then74, label %if.else77

if.then74:                                        ; preds = %if.end72
  %54 = load i32* %hx, align 4
  %and75 = and i32 1048575, %54
  %or76 = or i32 1048576, %and75
  store i32 %or76, i32* %hx, align 4
  br label %if.end90

if.else77:                                        ; preds = %if.end72
  %55 = load i32* %ix, align 4
  %sub78 = sub nsw i32 -1022, %55
  store i32 %sub78, i32* %n, align 4
  %56 = load i32* %n, align 4
  %cmp79 = icmp sle i32 %56, 31
  br i1 %cmp79, label %if.then80, label %if.else86

if.then80:                                        ; preds = %if.else77
  %57 = load i32* %hx, align 4
  %58 = load i32* %n, align 4
  %shl81 = shl i32 %57, %58
  %59 = load i32* %lx, align 4
  %60 = load i32* %n, align 4
  %sub82 = sub nsw i32 32, %60
  %shr83 = lshr i32 %59, %sub82
  %or84 = or i32 %shl81, %shr83
  store i32 %or84, i32* %hx, align 4
  %61 = load i32* %n, align 4
  %62 = load i32* %lx, align 4
  %shl85 = shl i32 %62, %61
  store i32 %shl85, i32* %lx, align 4
  br label %if.end89

if.else86:                                        ; preds = %if.else77
  %63 = load i32* %lx, align 4
  %64 = load i32* %n, align 4
  %sub87 = sub nsw i32 %64, 32
  %shl88 = shl i32 %63, %sub87
  store i32 %shl88, i32* %hx, align 4
  store i32 0, i32* %lx, align 4
  br label %if.end89

if.end89:                                         ; preds = %if.else86, %if.then80
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.then74
  %65 = load i32* %iy, align 4
  %cmp91 = icmp sge i32 %65, -1022
  br i1 %cmp91, label %if.then92, label %if.else95

if.then92:                                        ; preds = %if.end90
  %66 = load i32* %hy, align 4
  %and93 = and i32 1048575, %66
  %or94 = or i32 1048576, %and93
  store i32 %or94, i32* %hy, align 4
  br label %if.end108

if.else95:                                        ; preds = %if.end90
  %67 = load i32* %iy, align 4
  %sub96 = sub nsw i32 -1022, %67
  store i32 %sub96, i32* %n, align 4
  %68 = load i32* %n, align 4
  %cmp97 = icmp sle i32 %68, 31
  br i1 %cmp97, label %if.then98, label %if.else104

if.then98:                                        ; preds = %if.else95
  %69 = load i32* %hy, align 4
  %70 = load i32* %n, align 4
  %shl99 = shl i32 %69, %70
  %71 = load i32* %ly, align 4
  %72 = load i32* %n, align 4
  %sub100 = sub nsw i32 32, %72
  %shr101 = lshr i32 %71, %sub100
  %or102 = or i32 %shl99, %shr101
  store i32 %or102, i32* %hy, align 4
  %73 = load i32* %n, align 4
  %74 = load i32* %ly, align 4
  %shl103 = shl i32 %74, %73
  store i32 %shl103, i32* %ly, align 4
  br label %if.end107

if.else104:                                       ; preds = %if.else95
  %75 = load i32* %ly, align 4
  %76 = load i32* %n, align 4
  %sub105 = sub nsw i32 %76, 32
  %shl106 = shl i32 %75, %sub105
  store i32 %shl106, i32* %hy, align 4
  store i32 0, i32* %ly, align 4
  br label %if.end107

if.end107:                                        ; preds = %if.else104, %if.then98
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.then92
  %77 = load i32* %ix, align 4
  %78 = load i32* %iy, align 4
  %sub109 = sub nsw i32 %77, %78
  store i32 %sub109, i32* %n, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end132, %if.end108
  %79 = load i32* %n, align 4
  %dec = add nsw i32 %79, -1
  store i32 %dec, i32* %n, align 4
  %tobool = icmp ne i32 %79, 0
  br i1 %tobool, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %80 = load i32* %hx, align 4
  %81 = load i32* %hy, align 4
  %sub110 = sub nsw i32 %80, %81
  store i32 %sub110, i32* %hz, align 4
  %82 = load i32* %lx, align 4
  %83 = load i32* %ly, align 4
  %sub111 = sub i32 %82, %83
  store i32 %sub111, i32* %lz, align 4
  %84 = load i32* %lx, align 4
  %85 = load i32* %ly, align 4
  %cmp112 = icmp ult i32 %84, %85
  br i1 %cmp112, label %if.then113, label %if.end115

if.then113:                                       ; preds = %while.body
  %86 = load i32* %hz, align 4
  %sub114 = sub nsw i32 %86, 1
  store i32 %sub114, i32* %hz, align 4
  br label %if.end115

if.end115:                                        ; preds = %if.then113, %while.body
  %87 = load i32* %hz, align 4
  %cmp116 = icmp slt i32 %87, 0
  br i1 %cmp116, label %if.then117, label %if.else121

if.then117:                                       ; preds = %if.end115
  %88 = load i32* %hx, align 4
  %89 = load i32* %hx, align 4
  %add = add nsw i32 %88, %89
  %90 = load i32* %lx, align 4
  %shr118 = lshr i32 %90, 31
  %add119 = add i32 %add, %shr118
  store i32 %add119, i32* %hx, align 4
  %91 = load i32* %lx, align 4
  %92 = load i32* %lx, align 4
  %add120 = add i32 %91, %92
  store i32 %add120, i32* %lx, align 4
  br label %if.end132

if.else121:                                       ; preds = %if.end115
  %93 = load i32* %hz, align 4
  %94 = load i32* %lz, align 4
  %or122 = or i32 %93, %94
  %cmp123 = icmp eq i32 %or122, 0
  br i1 %cmp123, label %if.then124, label %if.end127

if.then124:                                       ; preds = %if.else121
  %95 = load i32* %sx, align 4
  %shr125 = lshr i32 %95, 31
  %arrayidx126 = getelementptr inbounds [2 x double]* @Zero38, i32 0, i32 %shr125
  %96 = load double* %arrayidx126, align 4
  store double %96, double* %retval
  br label %return

if.end127:                                        ; preds = %if.else121
  %97 = load i32* %hz, align 4
  %98 = load i32* %hz, align 4
  %add128 = add nsw i32 %97, %98
  %99 = load i32* %lz, align 4
  %shr129 = lshr i32 %99, 31
  %add130 = add i32 %add128, %shr129
  store i32 %add130, i32* %hx, align 4
  %100 = load i32* %lz, align 4
  %101 = load i32* %lz, align 4
  %add131 = add i32 %100, %101
  store i32 %add131, i32* %lx, align 4
  br label %if.end132

if.end132:                                        ; preds = %if.end127, %if.then117
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %102 = load i32* %hx, align 4
  %103 = load i32* %hy, align 4
  %sub133 = sub nsw i32 %102, %103
  store i32 %sub133, i32* %hz, align 4
  %104 = load i32* %lx, align 4
  %105 = load i32* %ly, align 4
  %sub134 = sub i32 %104, %105
  store i32 %sub134, i32* %lz, align 4
  %106 = load i32* %lx, align 4
  %107 = load i32* %ly, align 4
  %cmp135 = icmp ult i32 %106, %107
  br i1 %cmp135, label %if.then136, label %if.end138

if.then136:                                       ; preds = %while.end
  %108 = load i32* %hz, align 4
  %sub137 = sub nsw i32 %108, 1
  store i32 %sub137, i32* %hz, align 4
  br label %if.end138

if.end138:                                        ; preds = %if.then136, %while.end
  %109 = load i32* %hz, align 4
  %cmp139 = icmp sge i32 %109, 0
  br i1 %cmp139, label %if.then140, label %if.end141

if.then140:                                       ; preds = %if.end138
  %110 = load i32* %hz, align 4
  store i32 %110, i32* %hx, align 4
  %111 = load i32* %lz, align 4
  store i32 %111, i32* %lx, align 4
  br label %if.end141

if.end141:                                        ; preds = %if.then140, %if.end138
  %112 = load i32* %hx, align 4
  %113 = load i32* %lx, align 4
  %or142 = or i32 %112, %113
  %cmp143 = icmp eq i32 %or142, 0
  br i1 %cmp143, label %if.then144, label %if.end147

if.then144:                                       ; preds = %if.end141
  %114 = load i32* %sx, align 4
  %shr145 = lshr i32 %114, 31
  %arrayidx146 = getelementptr inbounds [2 x double]* @Zero38, i32 0, i32 %shr145
  %115 = load double* %arrayidx146, align 4
  store double %115, double* %retval
  br label %return

if.end147:                                        ; preds = %if.end141
  br label %while.cond148

while.cond148:                                    ; preds = %while.body150, %if.end147
  %116 = load i32* %hx, align 4
  %cmp149 = icmp slt i32 %116, 1048576
  br i1 %cmp149, label %while.body150, label %while.end156

while.body150:                                    ; preds = %while.cond148
  %117 = load i32* %hx, align 4
  %118 = load i32* %hx, align 4
  %add151 = add nsw i32 %117, %118
  %119 = load i32* %lx, align 4
  %shr152 = lshr i32 %119, 31
  %add153 = add i32 %add151, %shr152
  store i32 %add153, i32* %hx, align 4
  %120 = load i32* %lx, align 4
  %121 = load i32* %lx, align 4
  %add154 = add i32 %120, %121
  store i32 %add154, i32* %lx, align 4
  %122 = load i32* %iy, align 4
  %sub155 = sub nsw i32 %122, 1
  store i32 %sub155, i32* %iy, align 4
  br label %while.cond148

while.end156:                                     ; preds = %while.cond148
  %123 = load i32* %iy, align 4
  %cmp157 = icmp sge i32 %123, -1022
  br i1 %cmp157, label %if.then158, label %if.else171

if.then158:                                       ; preds = %while.end156
  %124 = load i32* %hx, align 4
  %sub159 = sub nsw i32 %124, 1048576
  %125 = load i32* %iy, align 4
  %add160 = add nsw i32 %125, 1023
  %shl161 = shl i32 %add160, 20
  %or162 = or i32 %sub159, %shl161
  store i32 %or162, i32* %hx, align 4
  br label %do.body163

do.body163:                                       ; preds = %if.then158
  %126 = load i32* %hx, align 4
  %127 = load i32* %sx, align 4
  %or164 = or i32 %126, %127
  %parts165 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %msw166 = getelementptr inbounds %struct.anon* %parts165, i32 0, i32 1
  store i32 %or164, i32* %msw166, align 4
  %128 = load i32* %lx, align 4
  %parts167 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %lsw168 = getelementptr inbounds %struct.anon* %parts167, i32 0, i32 0
  store i32 %128, i32* %lsw168, align 4
  %value169 = bitcast %union.ieee_double_shape_type* %iw_u to double*
  %129 = load double* %value169, align 4
  store double %129, double* %x.addr, align 8
  br label %do.end170

do.end170:                                        ; preds = %do.body163
  br label %if.end202

if.else171:                                       ; preds = %while.end156
  %130 = load i32* %iy, align 4
  %sub172 = sub nsw i32 -1022, %130
  store i32 %sub172, i32* %n, align 4
  %131 = load i32* %n, align 4
  %cmp173 = icmp sle i32 %131, 20
  br i1 %cmp173, label %if.then174, label %if.else180

if.then174:                                       ; preds = %if.else171
  %132 = load i32* %lx, align 4
  %133 = load i32* %n, align 4
  %shr175 = lshr i32 %132, %133
  %134 = load i32* %hx, align 4
  %135 = load i32* %n, align 4
  %sub176 = sub nsw i32 32, %135
  %shl177 = shl i32 %134, %sub176
  %or178 = or i32 %shr175, %shl177
  store i32 %or178, i32* %lx, align 4
  %136 = load i32* %n, align 4
  %137 = load i32* %hx, align 4
  %shr179 = ashr i32 %137, %136
  store i32 %shr179, i32* %hx, align 4
  br label %if.end191

if.else180:                                       ; preds = %if.else171
  %138 = load i32* %n, align 4
  %cmp181 = icmp sle i32 %138, 31
  br i1 %cmp181, label %if.then182, label %if.else187

if.then182:                                       ; preds = %if.else180
  %139 = load i32* %hx, align 4
  %140 = load i32* %n, align 4
  %sub183 = sub nsw i32 32, %140
  %shl184 = shl i32 %139, %sub183
  %141 = load i32* %lx, align 4
  %142 = load i32* %n, align 4
  %shr185 = lshr i32 %141, %142
  %or186 = or i32 %shl184, %shr185
  store i32 %or186, i32* %lx, align 4
  %143 = load i32* %sx, align 4
  store i32 %143, i32* %hx, align 4
  br label %if.end190

if.else187:                                       ; preds = %if.else180
  %144 = load i32* %hx, align 4
  %145 = load i32* %n, align 4
  %sub188 = sub nsw i32 %145, 32
  %shr189 = ashr i32 %144, %sub188
  store i32 %shr189, i32* %lx, align 4
  %146 = load i32* %sx, align 4
  store i32 %146, i32* %hx, align 4
  br label %if.end190

if.end190:                                        ; preds = %if.else187, %if.then182
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %if.then174
  br label %do.body192

do.body192:                                       ; preds = %if.end191
  %147 = load i32* %hx, align 4
  %148 = load i32* %sx, align 4
  %or194 = or i32 %147, %148
  %parts195 = bitcast %union.ieee_double_shape_type* %iw_u193 to %struct.anon*
  %msw196 = getelementptr inbounds %struct.anon* %parts195, i32 0, i32 1
  store i32 %or194, i32* %msw196, align 4
  %149 = load i32* %lx, align 4
  %parts197 = bitcast %union.ieee_double_shape_type* %iw_u193 to %struct.anon*
  %lsw198 = getelementptr inbounds %struct.anon* %parts197, i32 0, i32 0
  store i32 %149, i32* %lsw198, align 4
  %value199 = bitcast %union.ieee_double_shape_type* %iw_u193 to double*
  %150 = load double* %value199, align 4
  store double %150, double* %x.addr, align 8
  br label %do.end200

do.end200:                                        ; preds = %do.body192
  %151 = load double* %x.addr, align 8
  %mul201 = fmul double %151, 1.000000e+00
  store double %mul201, double* %x.addr, align 8
  br label %if.end202

if.end202:                                        ; preds = %do.end200, %do.end170
  %152 = load double* %x.addr, align 8
  store double %152, double* %retval
  br label %return

return:                                           ; preds = %if.end202, %if.then144, %if.then124, %if.then25, %if.then22, %if.then
  %153 = load double* %retval
  ret double %153
}

; Function Attrs: nounwind
define float @__ieee754_powf(float %x, float %y) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  %z = alloca float, align 4
  %ax = alloca float, align 4
  %z_h = alloca float, align 4
  %z_l = alloca float, align 4
  %p_h = alloca float, align 4
  %p_l = alloca float, align 4
  %y1 = alloca float, align 4
  %t1 = alloca float, align 4
  %t2 = alloca float, align 4
  %r = alloca float, align 4
  %s = alloca float, align 4
  %t = alloca float, align 4
  %u = alloca float, align 4
  %v = alloca float, align 4
  %w = alloca float, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %yisint = alloca i32, align 4
  %n = alloca i32, align 4
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %ix = alloca i32, align 4
  %iy = alloca i32, align 4
  %is = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u2 = alloca %union.ieee_float_shape_type, align 4
  %gf_u123 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  %s2 = alloca float, align 4
  %s_h = alloca float, align 4
  %s_l = alloca float, align 4
  %t_h = alloca float, align 4
  %t_l = alloca float, align 4
  %gf_u140 = alloca %union.ieee_float_shape_type, align 4
  %sf_u161 = alloca %union.ieee_float_shape_type, align 4
  %gf_u171 = alloca %union.ieee_float_shape_type, align 4
  %sf_u176 = alloca %union.ieee_float_shape_type, align 4
  %sf_u182 = alloca %union.ieee_float_shape_type, align 4
  %gf_u219 = alloca %union.ieee_float_shape_type, align 4
  %sf_u224 = alloca %union.ieee_float_shape_type, align 4
  %gf_u238 = alloca %union.ieee_float_shape_type, align 4
  %sf_u243 = alloca %union.ieee_float_shape_type, align 4
  %gf_u261 = alloca %union.ieee_float_shape_type, align 4
  %sf_u266 = alloca %union.ieee_float_shape_type, align 4
  %gf_u286 = alloca %union.ieee_float_shape_type, align 4
  %sf_u291 = alloca %union.ieee_float_shape_type, align 4
  %gf_u303 = alloca %union.ieee_float_shape_type, align 4
  %sf_u362 = alloca %union.ieee_float_shape_type, align 4
  %gf_u381 = alloca %union.ieee_float_shape_type, align 4
  %sf_u386 = alloca %union.ieee_float_shape_type, align 4
  %gf_u420 = alloca %union.ieee_float_shape_type, align 4
  %sf_u433 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %2 = load float* %y.addr, align 4
  %value3 = bitcast %union.ieee_float_shape_type* %gf_u2 to float*
  store float %2, float* %value3, align 4
  %word4 = bitcast %union.ieee_float_shape_type* %gf_u2 to i32*
  %3 = load i32* %word4, align 4
  store i32 %3, i32* %hy, align 4
  br label %do.end5

do.end5:                                          ; preds = %do.body1
  %4 = load i32* %hx, align 4
  %and = and i32 %4, 2147483647
  store i32 %and, i32* %ix, align 4
  %5 = load i32* %hy, align 4
  %and6 = and i32 %5, 2147483647
  store i32 %and6, i32* %iy, align 4
  %6 = load i32* %iy, align 4
  %cmp = icmp eq i32 %6, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end5
  store float 1.000000e+00, float* %retval
  br label %return

if.end:                                           ; preds = %do.end5
  %7 = load i32* %ix, align 4
  %cmp7 = icmp sgt i32 %7, 2139095040
  br i1 %cmp7, label %if.then9, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %8 = load i32* %iy, align 4
  %cmp8 = icmp sgt i32 %8, 2139095040
  br i1 %cmp8, label %if.then9, label %if.end12

if.then9:                                         ; preds = %lor.lhs.false, %if.end
  %9 = load i32* %ix, align 4
  %cmp10 = icmp eq i32 %9, 1065353216
  br i1 %cmp10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then9
  store float 1.000000e+00, float* %retval
  br label %return

if.else:                                          ; preds = %if.then9
  %call = call float @nanf(i8* getelementptr inbounds ([1 x i8]* @.str11, i32 0, i32 0)) #6
  store float %call, float* %retval
  br label %return

if.end12:                                         ; preds = %lor.lhs.false
  store i32 0, i32* %yisint, align 4
  %10 = load i32* %hx, align 4
  %cmp13 = icmp slt i32 %10, 0
  br i1 %cmp13, label %if.then14, label %if.end30

if.then14:                                        ; preds = %if.end12
  %11 = load i32* %iy, align 4
  %cmp15 = icmp sge i32 %11, 1266679808
  br i1 %cmp15, label %if.then16, label %if.else17

if.then16:                                        ; preds = %if.then14
  store i32 2, i32* %yisint, align 4
  br label %if.end29

if.else17:                                        ; preds = %if.then14
  %12 = load i32* %iy, align 4
  %cmp18 = icmp sge i32 %12, 1065353216
  br i1 %cmp18, label %if.then19, label %if.end28

if.then19:                                        ; preds = %if.else17
  %13 = load i32* %iy, align 4
  %shr = ashr i32 %13, 23
  %sub = sub nsw i32 %shr, 127
  store i32 %sub, i32* %k, align 4
  %14 = load i32* %iy, align 4
  %15 = load i32* %k, align 4
  %sub20 = sub nsw i32 23, %15
  %shr21 = ashr i32 %14, %sub20
  store i32 %shr21, i32* %j, align 4
  %16 = load i32* %j, align 4
  %17 = load i32* %k, align 4
  %sub22 = sub nsw i32 23, %17
  %shl = shl i32 %16, %sub22
  %18 = load i32* %iy, align 4
  %cmp23 = icmp eq i32 %shl, %18
  br i1 %cmp23, label %if.then24, label %if.end27

if.then24:                                        ; preds = %if.then19
  %19 = load i32* %j, align 4
  %and25 = and i32 %19, 1
  %sub26 = sub nsw i32 2, %and25
  store i32 %sub26, i32* %yisint, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then24, %if.then19
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.else17
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then16
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.end12
  %20 = load i32* %iy, align 4
  %cmp31 = icmp eq i32 %20, 2139095040
  br i1 %cmp31, label %if.then32, label %if.end46

if.then32:                                        ; preds = %if.end30
  %21 = load i32* %ix, align 4
  %cmp33 = icmp eq i32 %21, 1065353216
  br i1 %cmp33, label %if.then34, label %if.else35

if.then34:                                        ; preds = %if.then32
  store float 1.000000e+00, float* %retval
  br label %return

if.else35:                                        ; preds = %if.then32
  %22 = load i32* %ix, align 4
  %cmp36 = icmp sgt i32 %22, 1065353216
  br i1 %cmp36, label %if.then37, label %if.else39

if.then37:                                        ; preds = %if.else35
  %23 = load i32* %hy, align 4
  %cmp38 = icmp sge i32 %23, 0
  br i1 %cmp38, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then37
  %24 = load float* %y.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.then37
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %24, %cond.true ], [ 0.000000e+00, %cond.false ]
  store float %cond, float* %retval
  br label %return

if.else39:                                        ; preds = %if.else35
  %25 = load i32* %hy, align 4
  %cmp40 = icmp slt i32 %25, 0
  br i1 %cmp40, label %cond.true41, label %cond.false43

cond.true41:                                      ; preds = %if.else39
  %26 = load float* %y.addr, align 4
  %sub42 = fsub float -0.000000e+00, %26
  br label %cond.end44

cond.false43:                                     ; preds = %if.else39
  br label %cond.end44

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi float [ %sub42, %cond.true41 ], [ 0.000000e+00, %cond.false43 ]
  store float %cond45, float* %retval
  br label %return

if.end46:                                         ; preds = %if.end30
  %27 = load i32* %iy, align 4
  %cmp47 = icmp eq i32 %27, 1065353216
  br i1 %cmp47, label %if.then48, label %if.end52

if.then48:                                        ; preds = %if.end46
  %28 = load i32* %hy, align 4
  %cmp49 = icmp slt i32 %28, 0
  br i1 %cmp49, label %if.then50, label %if.else51

if.then50:                                        ; preds = %if.then48
  %29 = load float* %x.addr, align 4
  %div = fdiv float 1.000000e+00, %29
  store float %div, float* %retval
  br label %return

if.else51:                                        ; preds = %if.then48
  %30 = load float* %x.addr, align 4
  store float %30, float* %retval
  br label %return

if.end52:                                         ; preds = %if.end46
  %31 = load i32* %hy, align 4
  %cmp53 = icmp eq i32 %31, 1073741824
  br i1 %cmp53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end52
  %32 = load float* %x.addr, align 4
  %33 = load float* %x.addr, align 4
  %mul = fmul float %32, %33
  store float %mul, float* %retval
  br label %return

if.end55:                                         ; preds = %if.end52
  %34 = load i32* %hy, align 4
  %cmp56 = icmp eq i32 %34, 1056964608
  br i1 %cmp56, label %if.then57, label %if.end62

if.then57:                                        ; preds = %if.end55
  %35 = load i32* %hx, align 4
  %cmp58 = icmp sge i32 %35, 0
  br i1 %cmp58, label %if.then59, label %if.end61

if.then59:                                        ; preds = %if.then57
  %36 = load float* %x.addr, align 4
  %call60 = call float @__ieee754_sqrtf(float %36) #5
  store float %call60, float* %retval
  br label %return

if.end61:                                         ; preds = %if.then57
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end55
  %37 = load float* %x.addr, align 4
  %call63 = call float @fabsf(float %37) #6
  store float %call63, float* %ax, align 4
  %38 = load i32* %ix, align 4
  %cmp64 = icmp eq i32 %38, 2139095040
  br i1 %cmp64, label %if.then69, label %lor.lhs.false65

lor.lhs.false65:                                  ; preds = %if.end62
  %39 = load i32* %ix, align 4
  %cmp66 = icmp eq i32 %39, 0
  br i1 %cmp66, label %if.then69, label %lor.lhs.false67

lor.lhs.false67:                                  ; preds = %lor.lhs.false65
  %40 = load i32* %ix, align 4
  %cmp68 = icmp eq i32 %40, 1065353216
  br i1 %cmp68, label %if.then69, label %if.end89

if.then69:                                        ; preds = %lor.lhs.false67, %lor.lhs.false65, %if.end62
  %41 = load float* %ax, align 4
  store float %41, float* %z, align 4
  %42 = load i32* %hy, align 4
  %cmp70 = icmp slt i32 %42, 0
  br i1 %cmp70, label %if.then71, label %if.end73

if.then71:                                        ; preds = %if.then69
  %43 = load float* %z, align 4
  %div72 = fdiv float 1.000000e+00, %43
  store float %div72, float* %z, align 4
  br label %if.end73

if.end73:                                         ; preds = %if.then71, %if.then69
  %44 = load i32* %hx, align 4
  %cmp74 = icmp slt i32 %44, 0
  br i1 %cmp74, label %if.then75, label %if.end88

if.then75:                                        ; preds = %if.end73
  %45 = load i32* %ix, align 4
  %sub76 = sub nsw i32 %45, 1065353216
  %46 = load i32* %yisint, align 4
  %or = or i32 %sub76, %46
  %cmp77 = icmp eq i32 %or, 0
  br i1 %cmp77, label %if.then78, label %if.else82

if.then78:                                        ; preds = %if.then75
  %47 = load float* %z, align 4
  %48 = load float* %z, align 4
  %sub79 = fsub float %47, %48
  %49 = load float* %z, align 4
  %50 = load float* %z, align 4
  %sub80 = fsub float %49, %50
  %div81 = fdiv float %sub79, %sub80
  store float %div81, float* %z, align 4
  br label %if.end87

if.else82:                                        ; preds = %if.then75
  %51 = load i32* %yisint, align 4
  %cmp83 = icmp eq i32 %51, 1
  br i1 %cmp83, label %if.then84, label %if.end86

if.then84:                                        ; preds = %if.else82
  %52 = load float* %z, align 4
  %sub85 = fsub float -0.000000e+00, %52
  store float %sub85, float* %z, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then84, %if.else82
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %if.then78
  br label %if.end88

if.end88:                                         ; preds = %if.end87, %if.end73
  %53 = load float* %z, align 4
  store float %53, float* %retval
  br label %return

if.end89:                                         ; preds = %lor.lhs.false67
  %54 = load i32* %hx, align 4
  %shr90 = lshr i32 %54, 31
  %sub91 = sub i32 %shr90, 1
  %55 = load i32* %yisint, align 4
  %or92 = or i32 %sub91, %55
  %cmp93 = icmp eq i32 %or92, 0
  br i1 %cmp93, label %if.then94, label %if.end98

if.then94:                                        ; preds = %if.end89
  %56 = load float* %x.addr, align 4
  %57 = load float* %x.addr, align 4
  %sub95 = fsub float %56, %57
  %58 = load float* %x.addr, align 4
  %59 = load float* %x.addr, align 4
  %sub96 = fsub float %58, %59
  %div97 = fdiv float %sub95, %sub96
  store float %div97, float* %retval
  br label %return

if.end98:                                         ; preds = %if.end89
  %60 = load i32* %iy, align 4
  %cmp99 = icmp sgt i32 %60, 1291845632
  br i1 %cmp99, label %if.then100, label %if.else134

if.then100:                                       ; preds = %if.end98
  %61 = load i32* %ix, align 4
  %cmp101 = icmp slt i32 %61, 1065353208
  br i1 %cmp101, label %if.then102, label %if.end105

if.then102:                                       ; preds = %if.then100
  %62 = load i32* %hy, align 4
  %cmp103 = icmp slt i32 %62, 0
  %cond104 = select i1 %cmp103, float 0x7FF0000000000000, float 0.000000e+00
  store float %cond104, float* %retval
  br label %return

if.end105:                                        ; preds = %if.then100
  %63 = load i32* %ix, align 4
  %cmp106 = icmp sgt i32 %63, 1065353223
  br i1 %cmp106, label %if.then107, label %if.end110

if.then107:                                       ; preds = %if.end105
  %64 = load i32* %hy, align 4
  %cmp108 = icmp sgt i32 %64, 0
  %cond109 = select i1 %cmp108, float 0x7FF0000000000000, float 0.000000e+00
  store float %cond109, float* %retval
  br label %return

if.end110:                                        ; preds = %if.end105
  %65 = load float* %ax, align 4
  %sub111 = fsub float %65, 1.000000e+00
  store float %sub111, float* %t, align 4
  %66 = load float* %t, align 4
  %67 = load float* %t, align 4
  %mul112 = fmul float %66, %67
  %68 = load float* %t, align 4
  %69 = load float* %t, align 4
  %mul113 = fmul float %69, 2.500000e-01
  %sub114 = fsub float 0x3FD5555560000000, %mul113
  %mul115 = fmul float %68, %sub114
  %sub116 = fsub float 5.000000e-01, %mul115
  %mul117 = fmul float %mul112, %sub116
  store float %mul117, float* %w, align 4
  %70 = load float* %t, align 4
  %mul118 = fmul float 0x3FF7154000000000, %70
  store float %mul118, float* %u, align 4
  %71 = load float* %t, align 4
  %mul119 = fmul float %71, 0x3EDD94AE00000000
  %72 = load float* %w, align 4
  %mul120 = fmul float %72, 0x3FF7154760000000
  %sub121 = fsub float %mul119, %mul120
  store float %sub121, float* %v, align 4
  %73 = load float* %u, align 4
  %74 = load float* %v, align 4
  %add = fadd float %73, %74
  store float %add, float* %t1, align 4
  br label %do.body122

do.body122:                                       ; preds = %if.end110
  %75 = load float* %t1, align 4
  %value124 = bitcast %union.ieee_float_shape_type* %gf_u123 to float*
  store float %75, float* %value124, align 4
  %word125 = bitcast %union.ieee_float_shape_type* %gf_u123 to i32*
  %76 = load i32* %word125, align 4
  store i32 %76, i32* %is, align 4
  br label %do.end126

do.end126:                                        ; preds = %do.body122
  br label %do.body127

do.body127:                                       ; preds = %do.end126
  %77 = load i32* %is, align 4
  %and128 = and i32 %77, -4096
  %word129 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %and128, i32* %word129, align 4
  %value130 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %78 = load float* %value130, align 4
  store float %78, float* %t1, align 4
  br label %do.end131

do.end131:                                        ; preds = %do.body127
  %79 = load float* %v, align 4
  %80 = load float* %t1, align 4
  %81 = load float* %u, align 4
  %sub132 = fsub float %80, %81
  %sub133 = fsub float %79, %sub132
  store float %sub133, float* %t2, align 4
  br label %if.end276

if.else134:                                       ; preds = %if.end98
  store i32 0, i32* %n, align 4
  %82 = load i32* %ix, align 4
  %cmp135 = icmp slt i32 %82, 8388608
  br i1 %cmp135, label %if.then136, label %if.end144

if.then136:                                       ; preds = %if.else134
  %83 = load float* %ax, align 4
  %mul137 = fmul float %83, 0x4170000000000000
  store float %mul137, float* %ax, align 4
  %84 = load i32* %n, align 4
  %sub138 = sub nsw i32 %84, 24
  store i32 %sub138, i32* %n, align 4
  br label %do.body139

do.body139:                                       ; preds = %if.then136
  %85 = load float* %ax, align 4
  %value141 = bitcast %union.ieee_float_shape_type* %gf_u140 to float*
  store float %85, float* %value141, align 4
  %word142 = bitcast %union.ieee_float_shape_type* %gf_u140 to i32*
  %86 = load i32* %word142, align 4
  store i32 %86, i32* %ix, align 4
  br label %do.end143

do.end143:                                        ; preds = %do.body139
  br label %if.end144

if.end144:                                        ; preds = %do.end143, %if.else134
  %87 = load i32* %ix, align 4
  %shr145 = ashr i32 %87, 23
  %sub146 = sub nsw i32 %shr145, 127
  %88 = load i32* %n, align 4
  %add147 = add nsw i32 %88, %sub146
  store i32 %add147, i32* %n, align 4
  %89 = load i32* %ix, align 4
  %and148 = and i32 %89, 8388607
  store i32 %and148, i32* %j, align 4
  %90 = load i32* %j, align 4
  %or149 = or i32 %90, 1065353216
  store i32 %or149, i32* %ix, align 4
  %91 = load i32* %j, align 4
  %cmp150 = icmp sle i32 %91, 1885297
  br i1 %cmp150, label %if.then151, label %if.else152

if.then151:                                       ; preds = %if.end144
  store i32 0, i32* %k, align 4
  br label %if.end159

if.else152:                                       ; preds = %if.end144
  %92 = load i32* %j, align 4
  %cmp153 = icmp slt i32 %92, 6140887
  br i1 %cmp153, label %if.then154, label %if.else155

if.then154:                                       ; preds = %if.else152
  store i32 1, i32* %k, align 4
  br label %if.end158

if.else155:                                       ; preds = %if.else152
  store i32 0, i32* %k, align 4
  %93 = load i32* %n, align 4
  %add156 = add nsw i32 %93, 1
  store i32 %add156, i32* %n, align 4
  %94 = load i32* %ix, align 4
  %sub157 = sub nsw i32 %94, 8388608
  store i32 %sub157, i32* %ix, align 4
  br label %if.end158

if.end158:                                        ; preds = %if.else155, %if.then154
  br label %if.end159

if.end159:                                        ; preds = %if.end158, %if.then151
  br label %do.body160

do.body160:                                       ; preds = %if.end159
  %95 = load i32* %ix, align 4
  %word162 = bitcast %union.ieee_float_shape_type* %sf_u161 to i32*
  store i32 %95, i32* %word162, align 4
  %value163 = bitcast %union.ieee_float_shape_type* %sf_u161 to float*
  %96 = load float* %value163, align 4
  store float %96, float* %ax, align 4
  br label %do.end164

do.end164:                                        ; preds = %do.body160
  %97 = load float* %ax, align 4
  %98 = load i32* %k, align 4
  %arrayidx = getelementptr inbounds [2 x float]* @bp, i32 0, i32 %98
  %99 = load float* %arrayidx, align 4
  %sub165 = fsub float %97, %99
  store float %sub165, float* %u, align 4
  %100 = load float* %ax, align 4
  %101 = load i32* %k, align 4
  %arrayidx166 = getelementptr inbounds [2 x float]* @bp, i32 0, i32 %101
  %102 = load float* %arrayidx166, align 4
  %add167 = fadd float %100, %102
  %div168 = fdiv float 1.000000e+00, %add167
  store float %div168, float* %v, align 4
  %103 = load float* %u, align 4
  %104 = load float* %v, align 4
  %mul169 = fmul float %103, %104
  store float %mul169, float* %s, align 4
  %105 = load float* %s, align 4
  store float %105, float* %s_h, align 4
  br label %do.body170

do.body170:                                       ; preds = %do.end164
  %106 = load float* %s_h, align 4
  %value172 = bitcast %union.ieee_float_shape_type* %gf_u171 to float*
  store float %106, float* %value172, align 4
  %word173 = bitcast %union.ieee_float_shape_type* %gf_u171 to i32*
  %107 = load i32* %word173, align 4
  store i32 %107, i32* %is, align 4
  br label %do.end174

do.end174:                                        ; preds = %do.body170
  br label %do.body175

do.body175:                                       ; preds = %do.end174
  %108 = load i32* %is, align 4
  %and177 = and i32 %108, -4096
  %word178 = bitcast %union.ieee_float_shape_type* %sf_u176 to i32*
  store i32 %and177, i32* %word178, align 4
  %value179 = bitcast %union.ieee_float_shape_type* %sf_u176 to float*
  %109 = load float* %value179, align 4
  store float %109, float* %s_h, align 4
  br label %do.end180

do.end180:                                        ; preds = %do.body175
  br label %do.body181

do.body181:                                       ; preds = %do.end180
  %110 = load i32* %ix, align 4
  %shr183 = ashr i32 %110, 1
  %or184 = or i32 %shr183, 536870912
  %add185 = add nsw i32 %or184, 262144
  %111 = load i32* %k, align 4
  %shl186 = shl i32 %111, 21
  %add187 = add nsw i32 %add185, %shl186
  %word188 = bitcast %union.ieee_float_shape_type* %sf_u182 to i32*
  store i32 %add187, i32* %word188, align 4
  %value189 = bitcast %union.ieee_float_shape_type* %sf_u182 to float*
  %112 = load float* %value189, align 4
  store float %112, float* %t_h, align 4
  br label %do.end190

do.end190:                                        ; preds = %do.body181
  %113 = load float* %ax, align 4
  %114 = load float* %t_h, align 4
  %115 = load i32* %k, align 4
  %arrayidx191 = getelementptr inbounds [2 x float]* @bp, i32 0, i32 %115
  %116 = load float* %arrayidx191, align 4
  %sub192 = fsub float %114, %116
  %sub193 = fsub float %113, %sub192
  store float %sub193, float* %t_l, align 4
  %117 = load float* %v, align 4
  %118 = load float* %u, align 4
  %119 = load float* %s_h, align 4
  %120 = load float* %t_h, align 4
  %mul194 = fmul float %119, %120
  %sub195 = fsub float %118, %mul194
  %121 = load float* %s_h, align 4
  %122 = load float* %t_l, align 4
  %mul196 = fmul float %121, %122
  %sub197 = fsub float %sub195, %mul196
  %mul198 = fmul float %117, %sub197
  store float %mul198, float* %s_l, align 4
  %123 = load float* %s, align 4
  %124 = load float* %s, align 4
  %mul199 = fmul float %123, %124
  store float %mul199, float* %s2, align 4
  %125 = load float* %s2, align 4
  %126 = load float* %s2, align 4
  %mul200 = fmul float %125, %126
  %127 = load float* %s2, align 4
  %128 = load float* %s2, align 4
  %129 = load float* %s2, align 4
  %130 = load float* %s2, align 4
  %131 = load float* %s2, align 4
  %mul201 = fmul float %131, 0x3FCA7E2840000000
  %add202 = fadd float 0x3FCD864AA0000000, %mul201
  %mul203 = fmul float %130, %add202
  %add204 = fadd float 0x3FD17460A0000000, %mul203
  %mul205 = fmul float %129, %add204
  %add206 = fadd float 0x3FD5555560000000, %mul205
  %mul207 = fmul float %128, %add206
  %add208 = fadd float 0x3FDB6DB6E0000000, %mul207
  %mul209 = fmul float %127, %add208
  %add210 = fadd float 0x3FE3333340000000, %mul209
  %mul211 = fmul float %mul200, %add210
  store float %mul211, float* %r, align 4
  %132 = load float* %s_l, align 4
  %133 = load float* %s_h, align 4
  %134 = load float* %s, align 4
  %add212 = fadd float %133, %134
  %mul213 = fmul float %132, %add212
  %135 = load float* %r, align 4
  %add214 = fadd float %135, %mul213
  store float %add214, float* %r, align 4
  %136 = load float* %s_h, align 4
  %137 = load float* %s_h, align 4
  %mul215 = fmul float %136, %137
  store float %mul215, float* %s2, align 4
  %138 = load float* %s2, align 4
  %add216 = fadd float 3.000000e+00, %138
  %139 = load float* %r, align 4
  %add217 = fadd float %add216, %139
  store float %add217, float* %t_h, align 4
  br label %do.body218

do.body218:                                       ; preds = %do.end190
  %140 = load float* %t_h, align 4
  %value220 = bitcast %union.ieee_float_shape_type* %gf_u219 to float*
  store float %140, float* %value220, align 4
  %word221 = bitcast %union.ieee_float_shape_type* %gf_u219 to i32*
  %141 = load i32* %word221, align 4
  store i32 %141, i32* %is, align 4
  br label %do.end222

do.end222:                                        ; preds = %do.body218
  br label %do.body223

do.body223:                                       ; preds = %do.end222
  %142 = load i32* %is, align 4
  %and225 = and i32 %142, -4096
  %word226 = bitcast %union.ieee_float_shape_type* %sf_u224 to i32*
  store i32 %and225, i32* %word226, align 4
  %value227 = bitcast %union.ieee_float_shape_type* %sf_u224 to float*
  %143 = load float* %value227, align 4
  store float %143, float* %t_h, align 4
  br label %do.end228

do.end228:                                        ; preds = %do.body223
  %144 = load float* %r, align 4
  %145 = load float* %t_h, align 4
  %sub229 = fsub float %145, 3.000000e+00
  %146 = load float* %s2, align 4
  %sub230 = fsub float %sub229, %146
  %sub231 = fsub float %144, %sub230
  store float %sub231, float* %t_l, align 4
  %147 = load float* %s_h, align 4
  %148 = load float* %t_h, align 4
  %mul232 = fmul float %147, %148
  store float %mul232, float* %u, align 4
  %149 = load float* %s_l, align 4
  %150 = load float* %t_h, align 4
  %mul233 = fmul float %149, %150
  %151 = load float* %t_l, align 4
  %152 = load float* %s, align 4
  %mul234 = fmul float %151, %152
  %add235 = fadd float %mul233, %mul234
  store float %add235, float* %v, align 4
  %153 = load float* %u, align 4
  %154 = load float* %v, align 4
  %add236 = fadd float %153, %154
  store float %add236, float* %p_h, align 4
  br label %do.body237

do.body237:                                       ; preds = %do.end228
  %155 = load float* %p_h, align 4
  %value239 = bitcast %union.ieee_float_shape_type* %gf_u238 to float*
  store float %155, float* %value239, align 4
  %word240 = bitcast %union.ieee_float_shape_type* %gf_u238 to i32*
  %156 = load i32* %word240, align 4
  store i32 %156, i32* %is, align 4
  br label %do.end241

do.end241:                                        ; preds = %do.body237
  br label %do.body242

do.body242:                                       ; preds = %do.end241
  %157 = load i32* %is, align 4
  %and244 = and i32 %157, -4096
  %word245 = bitcast %union.ieee_float_shape_type* %sf_u243 to i32*
  store i32 %and244, i32* %word245, align 4
  %value246 = bitcast %union.ieee_float_shape_type* %sf_u243 to float*
  %158 = load float* %value246, align 4
  store float %158, float* %p_h, align 4
  br label %do.end247

do.end247:                                        ; preds = %do.body242
  %159 = load float* %v, align 4
  %160 = load float* %p_h, align 4
  %161 = load float* %u, align 4
  %sub248 = fsub float %160, %161
  %sub249 = fsub float %159, %sub248
  store float %sub249, float* %p_l, align 4
  %162 = load float* %p_h, align 4
  %mul250 = fmul float 0x3FEEC70000000000, %162
  store float %mul250, float* %z_h, align 4
  %163 = load float* %p_h, align 4
  %mul251 = fmul float 0x3ED3B87400000000, %163
  %164 = load float* %p_l, align 4
  %mul252 = fmul float %164, 0x3FEEC709E0000000
  %add253 = fadd float %mul251, %mul252
  %165 = load i32* %k, align 4
  %arrayidx254 = getelementptr inbounds [2 x float]* @dp_l, i32 0, i32 %165
  %166 = load float* %arrayidx254, align 4
  %add255 = fadd float %add253, %166
  store float %add255, float* %z_l, align 4
  %167 = load i32* %n, align 4
  %conv = sitofp i32 %167 to float
  store float %conv, float* %t, align 4
  %168 = load float* %z_h, align 4
  %169 = load float* %z_l, align 4
  %add256 = fadd float %168, %169
  %170 = load i32* %k, align 4
  %arrayidx257 = getelementptr inbounds [2 x float]* @dp_h, i32 0, i32 %170
  %171 = load float* %arrayidx257, align 4
  %add258 = fadd float %add256, %171
  %172 = load float* %t, align 4
  %add259 = fadd float %add258, %172
  store float %add259, float* %t1, align 4
  br label %do.body260

do.body260:                                       ; preds = %do.end247
  %173 = load float* %t1, align 4
  %value262 = bitcast %union.ieee_float_shape_type* %gf_u261 to float*
  store float %173, float* %value262, align 4
  %word263 = bitcast %union.ieee_float_shape_type* %gf_u261 to i32*
  %174 = load i32* %word263, align 4
  store i32 %174, i32* %is, align 4
  br label %do.end264

do.end264:                                        ; preds = %do.body260
  br label %do.body265

do.body265:                                       ; preds = %do.end264
  %175 = load i32* %is, align 4
  %and267 = and i32 %175, -4096
  %word268 = bitcast %union.ieee_float_shape_type* %sf_u266 to i32*
  store i32 %and267, i32* %word268, align 4
  %value269 = bitcast %union.ieee_float_shape_type* %sf_u266 to float*
  %176 = load float* %value269, align 4
  store float %176, float* %t1, align 4
  br label %do.end270

do.end270:                                        ; preds = %do.body265
  %177 = load float* %z_l, align 4
  %178 = load float* %t1, align 4
  %179 = load float* %t, align 4
  %sub271 = fsub float %178, %179
  %180 = load i32* %k, align 4
  %arrayidx272 = getelementptr inbounds [2 x float]* @dp_h, i32 0, i32 %180
  %181 = load float* %arrayidx272, align 4
  %sub273 = fsub float %sub271, %181
  %182 = load float* %z_h, align 4
  %sub274 = fsub float %sub273, %182
  %sub275 = fsub float %177, %sub274
  store float %sub275, float* %t2, align 4
  br label %if.end276

if.end276:                                        ; preds = %do.end270, %do.end131
  store float 1.000000e+00, float* %s, align 4
  %183 = load i32* %hx, align 4
  %shr277 = lshr i32 %183, 31
  %sub278 = sub i32 %shr277, 1
  %184 = load i32* %yisint, align 4
  %sub279 = sub nsw i32 %184, 1
  %or280 = or i32 %sub278, %sub279
  %cmp281 = icmp eq i32 %or280, 0
  br i1 %cmp281, label %if.then283, label %if.end284

if.then283:                                       ; preds = %if.end276
  store float -1.000000e+00, float* %s, align 4
  br label %if.end284

if.end284:                                        ; preds = %if.then283, %if.end276
  br label %do.body285

do.body285:                                       ; preds = %if.end284
  %185 = load float* %y.addr, align 4
  %value287 = bitcast %union.ieee_float_shape_type* %gf_u286 to float*
  store float %185, float* %value287, align 4
  %word288 = bitcast %union.ieee_float_shape_type* %gf_u286 to i32*
  %186 = load i32* %word288, align 4
  store i32 %186, i32* %is, align 4
  br label %do.end289

do.end289:                                        ; preds = %do.body285
  br label %do.body290

do.body290:                                       ; preds = %do.end289
  %187 = load i32* %is, align 4
  %and292 = and i32 %187, -4096
  %word293 = bitcast %union.ieee_float_shape_type* %sf_u291 to i32*
  store i32 %and292, i32* %word293, align 4
  %value294 = bitcast %union.ieee_float_shape_type* %sf_u291 to float*
  %188 = load float* %value294, align 4
  store float %188, float* %y1, align 4
  br label %do.end295

do.end295:                                        ; preds = %do.body290
  %189 = load float* %y.addr, align 4
  %190 = load float* %y1, align 4
  %sub296 = fsub float %189, %190
  %191 = load float* %t1, align 4
  %mul297 = fmul float %sub296, %191
  %192 = load float* %y.addr, align 4
  %193 = load float* %t2, align 4
  %mul298 = fmul float %192, %193
  %add299 = fadd float %mul297, %mul298
  store float %add299, float* %p_l, align 4
  %194 = load float* %y1, align 4
  %195 = load float* %t1, align 4
  %mul300 = fmul float %194, %195
  store float %mul300, float* %p_h, align 4
  %196 = load float* %p_l, align 4
  %197 = load float* %p_h, align 4
  %add301 = fadd float %196, %197
  store float %add301, float* %z, align 4
  br label %do.body302

do.body302:                                       ; preds = %do.end295
  %198 = load float* %z, align 4
  %value304 = bitcast %union.ieee_float_shape_type* %gf_u303 to float*
  store float %198, float* %value304, align 4
  %word305 = bitcast %union.ieee_float_shape_type* %gf_u303 to i32*
  %199 = load i32* %word305, align 4
  store i32 %199, i32* %j, align 4
  br label %do.end306

do.end306:                                        ; preds = %do.body302
  %200 = load i32* %j, align 4
  %and307 = and i32 %200, 2147483647
  store i32 %and307, i32* %i, align 4
  %201 = load i32* %j, align 4
  %cmp308 = icmp sgt i32 %201, 0
  br i1 %cmp308, label %if.then310, label %if.else330

if.then310:                                       ; preds = %do.end306
  %202 = load i32* %i, align 4
  %cmp311 = icmp sgt i32 %202, 1124073472
  br i1 %cmp311, label %if.then313, label %if.else316

if.then313:                                       ; preds = %if.then310
  %203 = load float* %s, align 4
  %mul314 = fmul float %203, 0x46293E5940000000
  %mul315 = fmul float %mul314, 0x46293E5940000000
  store float %mul315, float* %retval
  br label %return

if.else316:                                       ; preds = %if.then310
  %204 = load i32* %i, align 4
  %cmp317 = icmp eq i32 %204, 1124073472
  br i1 %cmp317, label %if.then319, label %if.end328

if.then319:                                       ; preds = %if.else316
  %205 = load float* %p_l, align 4
  %add320 = fadd float %205, 0x3E67154780000000
  %206 = load float* %z, align 4
  %207 = load float* %p_h, align 4
  %sub321 = fsub float %206, %207
  %cmp322 = fcmp ogt float %add320, %sub321
  br i1 %cmp322, label %if.then324, label %if.end327

if.then324:                                       ; preds = %if.then319
  %208 = load float* %s, align 4
  %mul325 = fmul float %208, 0x46293E5940000000
  %mul326 = fmul float %mul325, 0x46293E5940000000
  store float %mul326, float* %retval
  br label %return

if.end327:                                        ; preds = %if.then319
  br label %if.end328

if.end328:                                        ; preds = %if.end327, %if.else316
  br label %if.end329

if.end329:                                        ; preds = %if.end328
  br label %if.end349

if.else330:                                       ; preds = %do.end306
  %209 = load i32* %i, align 4
  %cmp331 = icmp sgt i32 %209, 1125515264
  br i1 %cmp331, label %if.then333, label %if.else336

if.then333:                                       ; preds = %if.else330
  %210 = load float* %s, align 4
  %mul334 = fmul float %210, 0x39B4484C00000000
  %mul335 = fmul float %mul334, 0x39B4484C00000000
  store float %mul335, float* %retval
  br label %return

if.else336:                                       ; preds = %if.else330
  %211 = load i32* %i, align 4
  %cmp337 = icmp eq i32 %211, 1125515264
  br i1 %cmp337, label %if.then339, label %if.end347

if.then339:                                       ; preds = %if.else336
  %212 = load float* %p_l, align 4
  %213 = load float* %z, align 4
  %214 = load float* %p_h, align 4
  %sub340 = fsub float %213, %214
  %cmp341 = fcmp ole float %212, %sub340
  br i1 %cmp341, label %if.then343, label %if.end346

if.then343:                                       ; preds = %if.then339
  %215 = load float* %s, align 4
  %mul344 = fmul float %215, 0x39B4484C00000000
  %mul345 = fmul float %mul344, 0x39B4484C00000000
  store float %mul345, float* %retval
  br label %return

if.end346:                                        ; preds = %if.then339
  br label %if.end347

if.end347:                                        ; preds = %if.end346, %if.else336
  br label %if.end348

if.end348:                                        ; preds = %if.end347
  br label %if.end349

if.end349:                                        ; preds = %if.end348, %if.end329
  %216 = load i32* %i, align 4
  %shr350 = ashr i32 %216, 23
  %sub351 = sub nsw i32 %shr350, 127
  store i32 %sub351, i32* %k, align 4
  store i32 0, i32* %n, align 4
  %217 = load i32* %i, align 4
  %cmp352 = icmp sgt i32 %217, 1056964608
  br i1 %cmp352, label %if.then354, label %if.end378

if.then354:                                       ; preds = %if.end349
  %218 = load i32* %j, align 4
  %219 = load i32* %k, align 4
  %add355 = add nsw i32 %219, 1
  %shr356 = ashr i32 8388608, %add355
  %add357 = add nsw i32 %218, %shr356
  store i32 %add357, i32* %n, align 4
  %220 = load i32* %n, align 4
  %and358 = and i32 %220, 2147483647
  %shr359 = ashr i32 %and358, 23
  %sub360 = sub nsw i32 %shr359, 127
  store i32 %sub360, i32* %k, align 4
  br label %do.body361

do.body361:                                       ; preds = %if.then354
  %221 = load i32* %n, align 4
  %222 = load i32* %k, align 4
  %shr363 = ashr i32 8388607, %222
  %neg = xor i32 %shr363, -1
  %and364 = and i32 %221, %neg
  %word365 = bitcast %union.ieee_float_shape_type* %sf_u362 to i32*
  store i32 %and364, i32* %word365, align 4
  %value366 = bitcast %union.ieee_float_shape_type* %sf_u362 to float*
  %223 = load float* %value366, align 4
  store float %223, float* %t, align 4
  br label %do.end367

do.end367:                                        ; preds = %do.body361
  %224 = load i32* %n, align 4
  %and368 = and i32 %224, 8388607
  %or369 = or i32 %and368, 8388608
  %225 = load i32* %k, align 4
  %sub370 = sub nsw i32 23, %225
  %shr371 = ashr i32 %or369, %sub370
  store i32 %shr371, i32* %n, align 4
  %226 = load i32* %j, align 4
  %cmp372 = icmp slt i32 %226, 0
  br i1 %cmp372, label %if.then374, label %if.end376

if.then374:                                       ; preds = %do.end367
  %227 = load i32* %n, align 4
  %sub375 = sub nsw i32 0, %227
  store i32 %sub375, i32* %n, align 4
  br label %if.end376

if.end376:                                        ; preds = %if.then374, %do.end367
  %228 = load float* %t, align 4
  %229 = load float* %p_h, align 4
  %sub377 = fsub float %229, %228
  store float %sub377, float* %p_h, align 4
  br label %if.end378

if.end378:                                        ; preds = %if.end376, %if.end349
  %230 = load float* %p_l, align 4
  %231 = load float* %p_h, align 4
  %add379 = fadd float %230, %231
  store float %add379, float* %t, align 4
  br label %do.body380

do.body380:                                       ; preds = %if.end378
  %232 = load float* %t, align 4
  %value382 = bitcast %union.ieee_float_shape_type* %gf_u381 to float*
  store float %232, float* %value382, align 4
  %word383 = bitcast %union.ieee_float_shape_type* %gf_u381 to i32*
  %233 = load i32* %word383, align 4
  store i32 %233, i32* %is, align 4
  br label %do.end384

do.end384:                                        ; preds = %do.body380
  br label %do.body385

do.body385:                                       ; preds = %do.end384
  %234 = load i32* %is, align 4
  %and387 = and i32 %234, -4096
  %word388 = bitcast %union.ieee_float_shape_type* %sf_u386 to i32*
  store i32 %and387, i32* %word388, align 4
  %value389 = bitcast %union.ieee_float_shape_type* %sf_u386 to float*
  %235 = load float* %value389, align 4
  store float %235, float* %t, align 4
  br label %do.end390

do.end390:                                        ; preds = %do.body385
  %236 = load float* %t, align 4
  %mul391 = fmul float %236, 0x3FE62E4000000000
  store float %mul391, float* %u, align 4
  %237 = load float* %p_l, align 4
  %238 = load float* %t, align 4
  %239 = load float* %p_h, align 4
  %sub392 = fsub float %238, %239
  %sub393 = fsub float %237, %sub392
  %mul394 = fmul float %sub393, 0x3FE62E4300000000
  %240 = load float* %t, align 4
  %mul395 = fmul float %240, 0x3EB7F7D180000000
  %add396 = fadd float %mul394, %mul395
  store float %add396, float* %v, align 4
  %241 = load float* %u, align 4
  %242 = load float* %v, align 4
  %add397 = fadd float %241, %242
  store float %add397, float* %z, align 4
  %243 = load float* %v, align 4
  %244 = load float* %z, align 4
  %245 = load float* %u, align 4
  %sub398 = fsub float %244, %245
  %sub399 = fsub float %243, %sub398
  store float %sub399, float* %w, align 4
  %246 = load float* %z, align 4
  %247 = load float* %z, align 4
  %mul400 = fmul float %246, %247
  store float %mul400, float* %t, align 4
  %248 = load float* %z, align 4
  %249 = load float* %t, align 4
  %250 = load float* %t, align 4
  %251 = load float* %t, align 4
  %252 = load float* %t, align 4
  %253 = load float* %t, align 4
  %mul401 = fmul float %253, 0x3E66376980000000
  %add402 = fadd float 0xBEBBBD41C0000000, %mul401
  %mul403 = fmul float %252, %add402
  %add404 = fadd float 0x3F11566AA0000000, %mul403
  %mul405 = fmul float %251, %add404
  %add406 = fadd float 0xBF66C16C20000000, %mul405
  %mul407 = fmul float %250, %add406
  %add408 = fadd float 0x3FC5555560000000, %mul407
  %mul409 = fmul float %249, %add408
  %sub410 = fsub float %248, %mul409
  store float %sub410, float* %t1, align 4
  %254 = load float* %z, align 4
  %255 = load float* %t1, align 4
  %mul411 = fmul float %254, %255
  %256 = load float* %t1, align 4
  %sub412 = fsub float %256, 2.000000e+00
  %div413 = fdiv float %mul411, %sub412
  %257 = load float* %w, align 4
  %258 = load float* %z, align 4
  %259 = load float* %w, align 4
  %mul414 = fmul float %258, %259
  %add415 = fadd float %257, %mul414
  %sub416 = fsub float %div413, %add415
  store float %sub416, float* %r, align 4
  %260 = load float* %r, align 4
  %261 = load float* %z, align 4
  %sub417 = fsub float %260, %261
  %sub418 = fsub float 1.000000e+00, %sub417
  store float %sub418, float* %z, align 4
  br label %do.body419

do.body419:                                       ; preds = %do.end390
  %262 = load float* %z, align 4
  %value421 = bitcast %union.ieee_float_shape_type* %gf_u420 to float*
  store float %262, float* %value421, align 4
  %word422 = bitcast %union.ieee_float_shape_type* %gf_u420 to i32*
  %263 = load i32* %word422, align 4
  store i32 %263, i32* %j, align 4
  br label %do.end423

do.end423:                                        ; preds = %do.body419
  %264 = load i32* %n, align 4
  %shl424 = shl i32 %264, 23
  %265 = load i32* %j, align 4
  %add425 = add nsw i32 %265, %shl424
  store i32 %add425, i32* %j, align 4
  %266 = load i32* %j, align 4
  %shr426 = ashr i32 %266, 23
  %cmp427 = icmp sle i32 %shr426, 0
  br i1 %cmp427, label %if.then429, label %if.else431

if.then429:                                       ; preds = %do.end423
  %267 = load float* %z, align 4
  %268 = load i32* %n, align 4
  %call430 = call float @scalbnf(float %267, i32 %268) #4
  store float %call430, float* %z, align 4
  br label %if.end437

if.else431:                                       ; preds = %do.end423
  br label %do.body432

do.body432:                                       ; preds = %if.else431
  %269 = load i32* %j, align 4
  %word434 = bitcast %union.ieee_float_shape_type* %sf_u433 to i32*
  store i32 %269, i32* %word434, align 4
  %value435 = bitcast %union.ieee_float_shape_type* %sf_u433 to float*
  %270 = load float* %value435, align 4
  store float %270, float* %z, align 4
  br label %do.end436

do.end436:                                        ; preds = %do.body432
  br label %if.end437

if.end437:                                        ; preds = %do.end436, %if.then429
  %271 = load float* %s, align 4
  %272 = load float* %z, align 4
  %mul438 = fmul float %271, %272
  store float %mul438, float* %retval
  br label %return

return:                                           ; preds = %if.end437, %if.then343, %if.then333, %if.then324, %if.then313, %if.then107, %if.then102, %if.then94, %if.end88, %if.then59, %if.then54, %if.else51, %if.then50, %cond.end44, %cond.end, %if.then34, %if.else, %if.then11, %if.then
  %273 = load float* %retval
  ret float %273
}

; Function Attrs: nounwind
define float @__ieee754_remainderf(float %x, float %p) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %p.addr = alloca float, align 4
  %hx = alloca i32, align 4
  %hp = alloca i32, align 4
  %sx = alloca i32, align 4
  %p_half = alloca float, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u2 = alloca %union.ieee_float_shape_type, align 4
  %gf_u44 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float %p, float* %p.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %2 = load float* %p.addr, align 4
  %value3 = bitcast %union.ieee_float_shape_type* %gf_u2 to float*
  store float %2, float* %value3, align 4
  %word4 = bitcast %union.ieee_float_shape_type* %gf_u2 to i32*
  %3 = load i32* %word4, align 4
  store i32 %3, i32* %hp, align 4
  br label %do.end5

do.end5:                                          ; preds = %do.body1
  %4 = load i32* %hx, align 4
  %and = and i32 %4, -2147483648
  store i32 %and, i32* %sx, align 4
  %5 = load i32* %hp, align 4
  %and6 = and i32 %5, 2147483647
  store i32 %and6, i32* %hp, align 4
  %6 = load i32* %hx, align 4
  %and7 = and i32 %6, 2147483647
  store i32 %and7, i32* %hx, align 4
  %7 = load i32* %hp, align 4
  %cmp = icmp eq i32 %7, 0
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end5
  %8 = load i32* %hx, align 4
  %cmp8 = icmp slt i32 %8, 2139095040
  br i1 %cmp8, label %lor.lhs.false9, label %if.then

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %9 = load i32* %hp, align 4
  %cmp10 = icmp sgt i32 %9, 2139095040
  br i1 %cmp10, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false, %do.end5
  %10 = load float* %x.addr, align 4
  %11 = load float* %p.addr, align 4
  %mul = fmul float %10, %11
  %12 = load float* %x.addr, align 4
  %13 = load float* %p.addr, align 4
  %mul11 = fmul float %12, %13
  %div = fdiv float %mul, %mul11
  store float %div, float* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false9
  %14 = load i32* %hp, align 4
  %cmp12 = icmp sle i32 %14, 2130706431
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end
  %15 = load float* %x.addr, align 4
  %16 = load float* %p.addr, align 4
  %17 = load float* %p.addr, align 4
  %add = fadd float %16, %17
  %call = call float @__ieee754_fmodf(float %15, float %add) #5
  store float %call, float* %x.addr, align 4
  br label %if.end14

if.end14:                                         ; preds = %if.then13, %if.end
  %18 = load i32* %hx, align 4
  %19 = load i32* %hp, align 4
  %sub = sub nsw i32 %18, %19
  %cmp15 = icmp eq i32 %sub, 0
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.end14
  %20 = load float* %x.addr, align 4
  %mul17 = fmul float 0.000000e+00, %20
  store float %mul17, float* %retval
  br label %return

if.end18:                                         ; preds = %if.end14
  %21 = load float* %x.addr, align 4
  %call19 = call float @fabsf(float %21) #6
  store float %call19, float* %x.addr, align 4
  %22 = load float* %p.addr, align 4
  %call20 = call float @fabsf(float %22) #6
  store float %call20, float* %p.addr, align 4
  %23 = load i32* %hp, align 4
  %cmp21 = icmp slt i32 %23, 16777216
  br i1 %cmp21, label %if.then22, label %if.else

if.then22:                                        ; preds = %if.end18
  %24 = load float* %x.addr, align 4
  %25 = load float* %x.addr, align 4
  %add23 = fadd float %24, %25
  %26 = load float* %p.addr, align 4
  %cmp24 = fcmp ogt float %add23, %26
  br i1 %cmp24, label %if.then25, label %if.end32

if.then25:                                        ; preds = %if.then22
  %27 = load float* %p.addr, align 4
  %28 = load float* %x.addr, align 4
  %sub26 = fsub float %28, %27
  store float %sub26, float* %x.addr, align 4
  %29 = load float* %x.addr, align 4
  %30 = load float* %x.addr, align 4
  %add27 = fadd float %29, %30
  %31 = load float* %p.addr, align 4
  %cmp28 = fcmp oge float %add27, %31
  br i1 %cmp28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.then25
  %32 = load float* %p.addr, align 4
  %33 = load float* %x.addr, align 4
  %sub30 = fsub float %33, %32
  store float %sub30, float* %x.addr, align 4
  br label %if.end31

if.end31:                                         ; preds = %if.then29, %if.then25
  br label %if.end32

if.end32:                                         ; preds = %if.end31, %if.then22
  br label %if.end42

if.else:                                          ; preds = %if.end18
  %34 = load float* %p.addr, align 4
  %mul33 = fmul float 5.000000e-01, %34
  store float %mul33, float* %p_half, align 4
  %35 = load float* %x.addr, align 4
  %36 = load float* %p_half, align 4
  %cmp34 = fcmp ogt float %35, %36
  br i1 %cmp34, label %if.then35, label %if.end41

if.then35:                                        ; preds = %if.else
  %37 = load float* %p.addr, align 4
  %38 = load float* %x.addr, align 4
  %sub36 = fsub float %38, %37
  store float %sub36, float* %x.addr, align 4
  %39 = load float* %x.addr, align 4
  %40 = load float* %p_half, align 4
  %cmp37 = fcmp oge float %39, %40
  br i1 %cmp37, label %if.then38, label %if.end40

if.then38:                                        ; preds = %if.then35
  %41 = load float* %p.addr, align 4
  %42 = load float* %x.addr, align 4
  %sub39 = fsub float %42, %41
  store float %sub39, float* %x.addr, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.then38, %if.then35
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.else
  br label %if.end42

if.end42:                                         ; preds = %if.end41, %if.end32
  br label %do.body43

do.body43:                                        ; preds = %if.end42
  %43 = load float* %x.addr, align 4
  %value45 = bitcast %union.ieee_float_shape_type* %gf_u44 to float*
  store float %43, float* %value45, align 4
  %word46 = bitcast %union.ieee_float_shape_type* %gf_u44 to i32*
  %44 = load i32* %word46, align 4
  store i32 %44, i32* %hx, align 4
  br label %do.end47

do.end47:                                         ; preds = %do.body43
  br label %do.body48

do.body48:                                        ; preds = %do.end47
  %45 = load i32* %hx, align 4
  %46 = load i32* %sx, align 4
  %xor = xor i32 %45, %46
  %word49 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %xor, i32* %word49, align 4
  %value50 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %47 = load float* %value50, align 4
  store float %47, float* %x.addr, align 4
  br label %do.end51

do.end51:                                         ; preds = %do.body48
  %48 = load float* %x.addr, align 4
  store float %48, float* %retval
  br label %return

return:                                           ; preds = %do.end51, %if.then16, %if.then
  %49 = load float* %retval
  ret float %49
}

; Function Attrs: nounwind
define i32 @__ieee754_rem_pio2f(float %x, float* %y) #2 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca float, align 4
  %y.addr = alloca float*, align 4
  %z = alloca float, align 4
  %w = alloca float, align 4
  %t = alloca float, align 4
  %r = alloca float, align 4
  %fn = alloca float, align 4
  %tx = alloca [3 x float], align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %hx = alloca i32, align 4
  %e0 = alloca i32, align 4
  %nx = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %high = alloca i32, align 4
  %gf_u64 = alloca %union.ieee_float_shape_type, align 4
  %gf_u84 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float* %y, float** %y.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sle i32 %3, 1061752792
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float** %y.addr, align 4
  %arrayidx = getelementptr inbounds float* %5, i32 0
  store float %4, float* %arrayidx, align 4
  %6 = load float** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds float* %6, i32 1
  store float 0.000000e+00, float* %arrayidx1, align 4
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix, align 4
  %cmp2 = icmp slt i32 %7, 1075235812
  br i1 %cmp2, label %if.then3, label %if.end42

if.then3:                                         ; preds = %if.end
  %8 = load i32* %hx, align 4
  %cmp4 = icmp sgt i32 %8, 0
  br i1 %cmp4, label %if.then5, label %if.else23

if.then5:                                         ; preds = %if.then3
  %9 = load float* %x.addr, align 4
  %sub = fsub float %9, 0x3FF921F000000000
  store float %sub, float* %z, align 4
  %10 = load i32* %ix, align 4
  %and6 = and i32 %10, -16
  %cmp7 = icmp ne i32 %and6, 1070141392
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.then5
  %11 = load float* %z, align 4
  %sub9 = fsub float %11, 0x3EE6A88860000000
  %12 = load float** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds float* %12, i32 0
  store float %sub9, float* %arrayidx10, align 4
  %13 = load float* %z, align 4
  %14 = load float** %y.addr, align 4
  %arrayidx11 = getelementptr inbounds float* %14, i32 0
  %15 = load float* %arrayidx11, align 4
  %sub12 = fsub float %13, %15
  %sub13 = fsub float %sub12, 0x3EE6A88860000000
  %16 = load float** %y.addr, align 4
  %arrayidx14 = getelementptr inbounds float* %16, i32 1
  store float %sub13, float* %arrayidx14, align 4
  br label %if.end22

if.else:                                          ; preds = %if.then5
  %17 = load float* %z, align 4
  %sub15 = fsub float %17, 0x3EE6A88000000000
  store float %sub15, float* %z, align 4
  %18 = load float* %z, align 4
  %sub16 = fsub float %18, 0x3DD0B46100000000
  %19 = load float** %y.addr, align 4
  %arrayidx17 = getelementptr inbounds float* %19, i32 0
  store float %sub16, float* %arrayidx17, align 4
  %20 = load float* %z, align 4
  %21 = load float** %y.addr, align 4
  %arrayidx18 = getelementptr inbounds float* %21, i32 0
  %22 = load float* %arrayidx18, align 4
  %sub19 = fsub float %20, %22
  %sub20 = fsub float %sub19, 0x3DD0B46100000000
  %23 = load float** %y.addr, align 4
  %arrayidx21 = getelementptr inbounds float* %23, i32 1
  store float %sub20, float* %arrayidx21, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then8
  store i32 1, i32* %retval
  br label %return

if.else23:                                        ; preds = %if.then3
  %24 = load float* %x.addr, align 4
  %add = fadd float %24, 0x3FF921F000000000
  store float %add, float* %z, align 4
  %25 = load i32* %ix, align 4
  %and24 = and i32 %25, -16
  %cmp25 = icmp ne i32 %and24, 1070141392
  br i1 %cmp25, label %if.then26, label %if.else33

if.then26:                                        ; preds = %if.else23
  %26 = load float* %z, align 4
  %add27 = fadd float %26, 0x3EE6A88860000000
  %27 = load float** %y.addr, align 4
  %arrayidx28 = getelementptr inbounds float* %27, i32 0
  store float %add27, float* %arrayidx28, align 4
  %28 = load float* %z, align 4
  %29 = load float** %y.addr, align 4
  %arrayidx29 = getelementptr inbounds float* %29, i32 0
  %30 = load float* %arrayidx29, align 4
  %sub30 = fsub float %28, %30
  %add31 = fadd float %sub30, 0x3EE6A88860000000
  %31 = load float** %y.addr, align 4
  %arrayidx32 = getelementptr inbounds float* %31, i32 1
  store float %add31, float* %arrayidx32, align 4
  br label %if.end41

if.else33:                                        ; preds = %if.else23
  %32 = load float* %z, align 4
  %add34 = fadd float %32, 0x3EE6A88000000000
  store float %add34, float* %z, align 4
  %33 = load float* %z, align 4
  %add35 = fadd float %33, 0x3DD0B46100000000
  %34 = load float** %y.addr, align 4
  %arrayidx36 = getelementptr inbounds float* %34, i32 0
  store float %add35, float* %arrayidx36, align 4
  %35 = load float* %z, align 4
  %36 = load float** %y.addr, align 4
  %arrayidx37 = getelementptr inbounds float* %36, i32 0
  %37 = load float* %arrayidx37, align 4
  %sub38 = fsub float %35, %37
  %add39 = fadd float %sub38, 0x3DD0B46100000000
  %38 = load float** %y.addr, align 4
  %arrayidx40 = getelementptr inbounds float* %38, i32 1
  store float %add39, float* %arrayidx40, align 4
  br label %if.end41

if.end41:                                         ; preds = %if.else33, %if.then26
  store i32 -1, i32* %retval
  br label %return

if.end42:                                         ; preds = %if.end
  %39 = load i32* %ix, align 4
  %cmp43 = icmp sle i32 %39, 1128861568
  br i1 %cmp43, label %if.then44, label %if.end121

if.then44:                                        ; preds = %if.end42
  %40 = load float* %x.addr, align 4
  %call = call float @fabsf(float %40) #6
  store float %call, float* %t, align 4
  %41 = load float* %t, align 4
  %mul = fmul float %41, 0x3FE45F3080000000
  %add45 = fadd float %mul, 5.000000e-01
  %conv = fptosi float %add45 to i32
  store i32 %conv, i32* %n, align 4
  %42 = load i32* %n, align 4
  %conv46 = sitofp i32 %42 to float
  store float %conv46, float* %fn, align 4
  %43 = load float* %t, align 4
  %44 = load float* %fn, align 4
  %mul47 = fmul float %44, 0x3FF921F000000000
  %sub48 = fsub float %43, %mul47
  store float %sub48, float* %r, align 4
  %45 = load float* %fn, align 4
  %mul49 = fmul float %45, 0x3EE6A88860000000
  store float %mul49, float* %w, align 4
  %46 = load i32* %n, align 4
  %cmp50 = icmp slt i32 %46, 32
  br i1 %cmp50, label %land.lhs.true, label %if.else60

land.lhs.true:                                    ; preds = %if.then44
  %47 = load i32* %ix, align 4
  %and52 = and i32 %47, -256
  %48 = load i32* %n, align 4
  %sub53 = sub nsw i32 %48, 1
  %arrayidx54 = getelementptr inbounds [32 x i32]* @npio2_hw, i32 0, i32 %sub53
  %49 = load i32* %arrayidx54, align 4
  %cmp55 = icmp ne i32 %and52, %49
  br i1 %cmp55, label %if.then57, label %if.else60

if.then57:                                        ; preds = %land.lhs.true
  %50 = load float* %r, align 4
  %51 = load float* %w, align 4
  %sub58 = fsub float %50, %51
  %52 = load float** %y.addr, align 4
  %arrayidx59 = getelementptr inbounds float* %52, i32 0
  store float %sub58, float* %arrayidx59, align 4
  br label %if.end105

if.else60:                                        ; preds = %land.lhs.true, %if.then44
  %53 = load i32* %ix, align 4
  %shr = ashr i32 %53, 23
  store i32 %shr, i32* %j, align 4
  %54 = load float* %r, align 4
  %55 = load float* %w, align 4
  %sub61 = fsub float %54, %55
  %56 = load float** %y.addr, align 4
  %arrayidx62 = getelementptr inbounds float* %56, i32 0
  store float %sub61, float* %arrayidx62, align 4
  br label %do.body63

do.body63:                                        ; preds = %if.else60
  %57 = load float** %y.addr, align 4
  %arrayidx65 = getelementptr inbounds float* %57, i32 0
  %58 = load float* %arrayidx65, align 4
  %value66 = bitcast %union.ieee_float_shape_type* %gf_u64 to float*
  store float %58, float* %value66, align 4
  %word67 = bitcast %union.ieee_float_shape_type* %gf_u64 to i32*
  %59 = load i32* %word67, align 4
  store i32 %59, i32* %high, align 4
  br label %do.end68

do.end68:                                         ; preds = %do.body63
  %60 = load i32* %j, align 4
  %61 = load i32* %high, align 4
  %shr69 = lshr i32 %61, 23
  %and70 = and i32 %shr69, 255
  %sub71 = sub i32 %60, %and70
  store i32 %sub71, i32* %i, align 4
  %62 = load i32* %i, align 4
  %cmp72 = icmp sgt i32 %62, 8
  br i1 %cmp72, label %if.then74, label %if.end104

if.then74:                                        ; preds = %do.end68
  %63 = load float* %r, align 4
  store float %63, float* %t, align 4
  %64 = load float* %fn, align 4
  %mul75 = fmul float %64, 0x3EE6A88000000000
  store float %mul75, float* %w, align 4
  %65 = load float* %t, align 4
  %66 = load float* %w, align 4
  %sub76 = fsub float %65, %66
  store float %sub76, float* %r, align 4
  %67 = load float* %fn, align 4
  %mul77 = fmul float %67, 0x3DD0B46100000000
  %68 = load float* %t, align 4
  %69 = load float* %r, align 4
  %sub78 = fsub float %68, %69
  %70 = load float* %w, align 4
  %sub79 = fsub float %sub78, %70
  %sub80 = fsub float %mul77, %sub79
  store float %sub80, float* %w, align 4
  %71 = load float* %r, align 4
  %72 = load float* %w, align 4
  %sub81 = fsub float %71, %72
  %73 = load float** %y.addr, align 4
  %arrayidx82 = getelementptr inbounds float* %73, i32 0
  store float %sub81, float* %arrayidx82, align 4
  br label %do.body83

do.body83:                                        ; preds = %if.then74
  %74 = load float** %y.addr, align 4
  %arrayidx85 = getelementptr inbounds float* %74, i32 0
  %75 = load float* %arrayidx85, align 4
  %value86 = bitcast %union.ieee_float_shape_type* %gf_u84 to float*
  store float %75, float* %value86, align 4
  %word87 = bitcast %union.ieee_float_shape_type* %gf_u84 to i32*
  %76 = load i32* %word87, align 4
  store i32 %76, i32* %high, align 4
  br label %do.end88

do.end88:                                         ; preds = %do.body83
  %77 = load i32* %j, align 4
  %78 = load i32* %high, align 4
  %shr89 = lshr i32 %78, 23
  %and90 = and i32 %shr89, 255
  %sub91 = sub i32 %77, %and90
  store i32 %sub91, i32* %i, align 4
  %79 = load i32* %i, align 4
  %cmp92 = icmp sgt i32 %79, 25
  br i1 %cmp92, label %if.then94, label %if.end103

if.then94:                                        ; preds = %do.end88
  %80 = load float* %r, align 4
  store float %80, float* %t, align 4
  %81 = load float* %fn, align 4
  %mul95 = fmul float %81, 0x3DD0B46000000000
  store float %mul95, float* %w, align 4
  %82 = load float* %t, align 4
  %83 = load float* %w, align 4
  %sub96 = fsub float %82, %83
  store float %sub96, float* %r, align 4
  %84 = load float* %fn, align 4
  %mul97 = fmul float %84, 0x3C91A62640000000
  %85 = load float* %t, align 4
  %86 = load float* %r, align 4
  %sub98 = fsub float %85, %86
  %87 = load float* %w, align 4
  %sub99 = fsub float %sub98, %87
  %sub100 = fsub float %mul97, %sub99
  store float %sub100, float* %w, align 4
  %88 = load float* %r, align 4
  %89 = load float* %w, align 4
  %sub101 = fsub float %88, %89
  %90 = load float** %y.addr, align 4
  %arrayidx102 = getelementptr inbounds float* %90, i32 0
  store float %sub101, float* %arrayidx102, align 4
  br label %if.end103

if.end103:                                        ; preds = %if.then94, %do.end88
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %do.end68
  br label %if.end105

if.end105:                                        ; preds = %if.end104, %if.then57
  %91 = load float* %r, align 4
  %92 = load float** %y.addr, align 4
  %arrayidx106 = getelementptr inbounds float* %92, i32 0
  %93 = load float* %arrayidx106, align 4
  %sub107 = fsub float %91, %93
  %94 = load float* %w, align 4
  %sub108 = fsub float %sub107, %94
  %95 = load float** %y.addr, align 4
  %arrayidx109 = getelementptr inbounds float* %95, i32 1
  store float %sub108, float* %arrayidx109, align 4
  %96 = load i32* %hx, align 4
  %cmp110 = icmp slt i32 %96, 0
  br i1 %cmp110, label %if.then112, label %if.else120

if.then112:                                       ; preds = %if.end105
  %97 = load float** %y.addr, align 4
  %arrayidx113 = getelementptr inbounds float* %97, i32 0
  %98 = load float* %arrayidx113, align 4
  %sub114 = fsub float -0.000000e+00, %98
  %99 = load float** %y.addr, align 4
  %arrayidx115 = getelementptr inbounds float* %99, i32 0
  store float %sub114, float* %arrayidx115, align 4
  %100 = load float** %y.addr, align 4
  %arrayidx116 = getelementptr inbounds float* %100, i32 1
  %101 = load float* %arrayidx116, align 4
  %sub117 = fsub float -0.000000e+00, %101
  %102 = load float** %y.addr, align 4
  %arrayidx118 = getelementptr inbounds float* %102, i32 1
  store float %sub117, float* %arrayidx118, align 4
  %103 = load i32* %n, align 4
  %sub119 = sub nsw i32 0, %103
  store i32 %sub119, i32* %retval
  br label %return

if.else120:                                       ; preds = %if.end105
  %104 = load i32* %n, align 4
  store i32 %104, i32* %retval
  br label %return

if.end121:                                        ; preds = %if.end42
  %105 = load i32* %ix, align 4
  %cmp122 = icmp slt i32 %105, 2139095040
  br i1 %cmp122, label %if.end128, label %if.then124

if.then124:                                       ; preds = %if.end121
  %106 = load float* %x.addr, align 4
  %107 = load float* %x.addr, align 4
  %sub125 = fsub float %106, %107
  %108 = load float** %y.addr, align 4
  %arrayidx126 = getelementptr inbounds float* %108, i32 1
  store float %sub125, float* %arrayidx126, align 4
  %109 = load float** %y.addr, align 4
  %arrayidx127 = getelementptr inbounds float* %109, i32 0
  store float %sub125, float* %arrayidx127, align 4
  store i32 0, i32* %retval
  br label %return

if.end128:                                        ; preds = %if.end121
  %110 = load i32* %ix, align 4
  %shr129 = ashr i32 %110, 23
  %sub130 = sub nsw i32 %shr129, 134
  store i32 %sub130, i32* %e0, align 4
  br label %do.body131

do.body131:                                       ; preds = %if.end128
  %111 = load i32* %ix, align 4
  %112 = load i32* %e0, align 4
  %shl = shl i32 %112, 23
  %sub132 = sub nsw i32 %111, %shl
  %word133 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %sub132, i32* %word133, align 4
  %value134 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %113 = load float* %value134, align 4
  store float %113, float* %z, align 4
  br label %do.end135

do.end135:                                        ; preds = %do.body131
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end135
  %114 = load i32* %i, align 4
  %cmp136 = icmp slt i32 %114, 2
  br i1 %cmp136, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %115 = load float* %z, align 4
  %conv138 = fptosi float %115 to i32
  %conv139 = sitofp i32 %conv138 to float
  %116 = load i32* %i, align 4
  %arrayidx140 = getelementptr inbounds [3 x float]* %tx, i32 0, i32 %116
  store float %conv139, float* %arrayidx140, align 4
  %117 = load float* %z, align 4
  %118 = load i32* %i, align 4
  %arrayidx141 = getelementptr inbounds [3 x float]* %tx, i32 0, i32 %118
  %119 = load float* %arrayidx141, align 4
  %sub142 = fsub float %117, %119
  %mul143 = fmul float %sub142, 2.560000e+02
  store float %mul143, float* %z, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %120 = load i32* %i, align 4
  %inc = add nsw i32 %120, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %121 = load float* %z, align 4
  %arrayidx144 = getelementptr inbounds [3 x float]* %tx, i32 0, i32 2
  store float %121, float* %arrayidx144, align 4
  store i32 3, i32* %nx, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %122 = load i32* %nx, align 4
  %sub145 = sub nsw i32 %122, 1
  %arrayidx146 = getelementptr inbounds [3 x float]* %tx, i32 0, i32 %sub145
  %123 = load float* %arrayidx146, align 4
  %cmp147 = fcmp oeq float %123, 0.000000e+00
  br i1 %cmp147, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %124 = load i32* %nx, align 4
  %dec = add nsw i32 %124, -1
  store i32 %dec, i32* %nx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay = getelementptr inbounds [3 x float]* %tx, i32 0, i32 0
  %125 = load float** %y.addr, align 4
  %126 = load i32* %e0, align 4
  %127 = load i32* %nx, align 4
  %call149 = call i32 @__kernel_rem_pio2f(float* %arraydecay, float* %125, i32 %126, i32 %127, i32 2, i32* getelementptr inbounds ([198 x i32]* @two_over_pi, i32 0, i32 0)) #5
  store i32 %call149, i32* %n, align 4
  %128 = load i32* %hx, align 4
  %cmp150 = icmp slt i32 %128, 0
  br i1 %cmp150, label %if.then152, label %if.end160

if.then152:                                       ; preds = %while.end
  %129 = load float** %y.addr, align 4
  %arrayidx153 = getelementptr inbounds float* %129, i32 0
  %130 = load float* %arrayidx153, align 4
  %sub154 = fsub float -0.000000e+00, %130
  %131 = load float** %y.addr, align 4
  %arrayidx155 = getelementptr inbounds float* %131, i32 0
  store float %sub154, float* %arrayidx155, align 4
  %132 = load float** %y.addr, align 4
  %arrayidx156 = getelementptr inbounds float* %132, i32 1
  %133 = load float* %arrayidx156, align 4
  %sub157 = fsub float -0.000000e+00, %133
  %134 = load float** %y.addr, align 4
  %arrayidx158 = getelementptr inbounds float* %134, i32 1
  store float %sub157, float* %arrayidx158, align 4
  %135 = load i32* %n, align 4
  %sub159 = sub nsw i32 0, %135
  store i32 %sub159, i32* %retval
  br label %return

if.end160:                                        ; preds = %while.end
  %136 = load i32* %n, align 4
  store i32 %136, i32* %retval
  br label %return

return:                                           ; preds = %if.end160, %if.then152, %if.then124, %if.else120, %if.then112, %if.end41, %if.end22, %if.then
  %137 = load i32* %retval
  ret i32 %137
}

; Function Attrs: nounwind
define float @__ieee754_scalbf(float %x, float %fn) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %fn.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %fn, float* %fn.addr, align 4
  br i1 true, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = load float* %x.addr, align 4
  %call = call i32 @__isnanf(float %0) #6
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

cond.false:                                       ; preds = %entry
  br i1 false, label %cond.true1, label %cond.false4

cond.true1:                                       ; preds = %cond.false
  %1 = load float* %x.addr, align 4
  %conv = fpext float %1 to double
  %call2 = call i32 @__isnan(double %conv) #6
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then, label %lor.lhs.false

cond.false4:                                      ; preds = %cond.false
  %2 = load float* %x.addr, align 4
  %conv5 = fpext float %2 to x86_fp80
  %call6 = call i32 @__isnanl(x86_fp80 %conv5) #6
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false4, %cond.true1, %cond.true
  br i1 true, label %cond.true8, label %cond.false11

cond.true8:                                       ; preds = %lor.lhs.false
  %3 = load float* %fn.addr, align 4
  %call9 = call i32 @__isnanf(float %3) #6
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.then, label %if.end

cond.false11:                                     ; preds = %lor.lhs.false
  br i1 false, label %cond.true12, label %cond.false16

cond.true12:                                      ; preds = %cond.false11
  %4 = load float* %fn.addr, align 4
  %conv13 = fpext float %4 to double
  %call14 = call i32 @__isnan(double %conv13) #6
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then, label %if.end

cond.false16:                                     ; preds = %cond.false11
  %5 = load float* %fn.addr, align 4
  %conv17 = fpext float %5 to x86_fp80
  %call18 = call i32 @__isnanl(x86_fp80 %conv17) #6
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false16, %cond.true12, %cond.true8, %cond.false4, %cond.true1, %cond.true
  %6 = load float* %x.addr, align 4
  %7 = load float* %fn.addr, align 4
  %mul = fmul float %6, %7
  store float %mul, float* %retval
  br label %return

if.end:                                           ; preds = %cond.false16, %cond.true12, %cond.true8
  %8 = load float* %fn.addr, align 4
  %call20 = call i32 @finitef(float %8) #6
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.end26, label %if.then22

if.then22:                                        ; preds = %if.end
  %9 = load float* %fn.addr, align 4
  %cmp = fcmp ogt float %9, 0.000000e+00
  br i1 %cmp, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.then22
  %10 = load float* %x.addr, align 4
  %11 = load float* %fn.addr, align 4
  %mul25 = fmul float %10, %11
  store float %mul25, float* %retval
  br label %return

if.else:                                          ; preds = %if.then22
  %12 = load float* %x.addr, align 4
  %13 = load float* %fn.addr, align 4
  %sub = fsub float -0.000000e+00, %13
  %div = fdiv float %12, %sub
  store float %div, float* %retval
  br label %return

if.end26:                                         ; preds = %if.end
  %14 = load float* %fn.addr, align 4
  %call27 = call float @rintf(float %14) #4
  %15 = load float* %fn.addr, align 4
  %cmp28 = fcmp une float %call27, %15
  br i1 %cmp28, label %if.then30, label %if.end34

if.then30:                                        ; preds = %if.end26
  %16 = load float* %fn.addr, align 4
  %17 = load float* %fn.addr, align 4
  %sub31 = fsub float %16, %17
  %18 = load float* %fn.addr, align 4
  %19 = load float* %fn.addr, align 4
  %sub32 = fsub float %18, %19
  %div33 = fdiv float %sub31, %sub32
  store float %div33, float* %retval
  br label %return

if.end34:                                         ; preds = %if.end26
  %20 = load float* %fn.addr, align 4
  %cmp35 = fcmp ogt float %20, 6.500000e+04
  br i1 %cmp35, label %if.then37, label %if.end39

if.then37:                                        ; preds = %if.end34
  %21 = load float* %x.addr, align 4
  %call38 = call float @scalbnf(float %21, i32 65000) #4
  store float %call38, float* %retval
  br label %return

if.end39:                                         ; preds = %if.end34
  %22 = load float* %fn.addr, align 4
  %sub40 = fsub float -0.000000e+00, %22
  %cmp41 = fcmp ogt float %sub40, 6.500000e+04
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %if.end39
  %23 = load float* %x.addr, align 4
  %call44 = call float @scalbnf(float %23, i32 -65000) #4
  store float %call44, float* %retval
  br label %return

if.end45:                                         ; preds = %if.end39
  %24 = load float* %x.addr, align 4
  %25 = load float* %fn.addr, align 4
  %conv46 = fptosi float %25 to i32
  %call47 = call float @scalbnf(float %24, i32 %conv46) #4
  store float %call47, float* %retval
  br label %return

return:                                           ; preds = %if.end45, %if.then43, %if.then37, %if.then30, %if.else, %if.then24, %if.then
  %26 = load float* %retval
  ret float %26
}

; Function Attrs: nounwind readnone
declare i32 @__isnanl(x86_fp80) #3

; Function Attrs: nounwind
define float @__ieee754_sinhf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %t = alloca float, align 4
  %w = alloca float, align 4
  %h = alloca float, align 4
  %ix = alloca i32, align 4
  %jx = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %jx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %jx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %add = fadd float %4, %5
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  store float 5.000000e-01, float* %h, align 4
  %6 = load i32* %jx, align 4
  %cmp1 = icmp slt i32 %6, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %7 = load float* %h, align 4
  %sub = fsub float -0.000000e+00, %7
  store float %sub, float* %h, align 4
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %8 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %8, 1102053376
  br i1 %cmp4, label %if.then5, label %if.end25

if.then5:                                         ; preds = %if.end3
  %9 = load i32* %ix, align 4
  %cmp6 = icmp slt i32 %9, 830472192
  br i1 %cmp6, label %if.then7, label %if.end12

if.then7:                                         ; preds = %if.then5
  %10 = load float* %x.addr, align 4
  %add8 = fadd float 0x479E17B840000000, %10
  %cmp9 = fcmp ogt float %add8, 1.000000e+00
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.then7
  %11 = load float* %x.addr, align 4
  store float %11, float* %retval
  br label %return

if.end11:                                         ; preds = %if.then7
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then5
  %12 = load float* %x.addr, align 4
  %call = call float @fabsf(float %12) #6
  %call13 = call float @expm1f(float %call) #4
  store float %call13, float* %t, align 4
  %13 = load i32* %ix, align 4
  %cmp14 = icmp slt i32 %13, 1065353216
  br i1 %cmp14, label %if.then15, label %if.end20

if.then15:                                        ; preds = %if.end12
  %14 = load float* %h, align 4
  %15 = load float* %t, align 4
  %mul = fmul float 2.000000e+00, %15
  %16 = load float* %t, align 4
  %17 = load float* %t, align 4
  %mul16 = fmul float %16, %17
  %18 = load float* %t, align 4
  %add17 = fadd float %18, 1.000000e+00
  %div = fdiv float %mul16, %add17
  %sub18 = fsub float %mul, %div
  %mul19 = fmul float %14, %sub18
  store float %mul19, float* %retval
  br label %return

if.end20:                                         ; preds = %if.end12
  %19 = load float* %h, align 4
  %20 = load float* %t, align 4
  %21 = load float* %t, align 4
  %22 = load float* %t, align 4
  %add21 = fadd float %22, 1.000000e+00
  %div22 = fdiv float %21, %add21
  %add23 = fadd float %20, %div22
  %mul24 = fmul float %19, %add23
  store float %mul24, float* %retval
  br label %return

if.end25:                                         ; preds = %if.end3
  %23 = load i32* %ix, align 4
  %cmp26 = icmp sle i32 %23, 1118925335
  br i1 %cmp26, label %if.then27, label %if.end31

if.then27:                                        ; preds = %if.end25
  %24 = load float* %h, align 4
  %25 = load float* %x.addr, align 4
  %call28 = call float @fabsf(float %25) #6
  %call29 = call float @__ieee754_expf(float %call28) #5
  %mul30 = fmul float %24, %call29
  store float %mul30, float* %retval
  br label %return

if.end31:                                         ; preds = %if.end25
  %26 = load i32* %ix, align 4
  %cmp32 = icmp sle i32 %26, 1119016188
  br i1 %cmp32, label %if.then33, label %if.end39

if.then33:                                        ; preds = %if.end31
  %27 = load float* %x.addr, align 4
  %call34 = call float @fabsf(float %27) #6
  %mul35 = fmul float 5.000000e-01, %call34
  %call36 = call float @__ieee754_expf(float %mul35) #5
  store float %call36, float* %w, align 4
  %28 = load float* %h, align 4
  %29 = load float* %w, align 4
  %mul37 = fmul float %28, %29
  store float %mul37, float* %t, align 4
  %30 = load float* %t, align 4
  %31 = load float* %w, align 4
  %mul38 = fmul float %30, %31
  store float %mul38, float* %retval
  br label %return

if.end39:                                         ; preds = %if.end31
  %32 = load float* %x.addr, align 4
  %mul40 = fmul float %32, 0x479E17B840000000
  store float %mul40, float* %retval
  br label %return

return:                                           ; preds = %if.end39, %if.then33, %if.then27, %if.end20, %if.then15, %if.then10, %if.then
  %33 = load float* %retval
  ret float %33
}

; Function Attrs: nounwind
define float @__ieee754_sqrtf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %z = alloca float, align 4
  %r = alloca i32, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %s = alloca i32, align 4
  %q = alloca i32, align 4
  %m = alloca i32, align 4
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %hx, align 4
  %3 = load i32* %hx, align 4
  %cmp = icmp ult i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %mul = fmul float %4, %5
  %6 = load float* %x.addr, align 4
  %add = fadd float %mul, %6
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %hx, align 4
  %cmp1 = icmp eq i32 %7, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %8 = load float* %x.addr, align 4
  store float %8, float* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %9 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %9, 0
  br i1 %cmp4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %if.end3
  %10 = load float* %x.addr, align 4
  %11 = load float* %x.addr, align 4
  %sub = fsub float %10, %11
  %12 = load float* %x.addr, align 4
  %13 = load float* %x.addr, align 4
  %sub6 = fsub float %12, %13
  %div = fdiv float %sub, %sub6
  store float %div, float* %retval
  br label %return

if.end7:                                          ; preds = %if.end3
  %14 = load i32* %ix, align 4
  %shr = ashr i32 %14, 23
  store i32 %shr, i32* %m, align 4
  %15 = load i32* %hx, align 4
  %cmp8 = icmp ult i32 %15, 8388608
  br i1 %cmp8, label %if.then9, label %if.end14

if.then9:                                         ; preds = %if.end7
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then9
  %16 = load i32* %ix, align 4
  %and10 = and i32 %16, 8388608
  %cmp11 = icmp eq i32 %and10, 0
  br i1 %cmp11, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %17 = load i32* %ix, align 4
  %shl = shl i32 %17, 1
  store i32 %shl, i32* %ix, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %18 = load i32* %i, align 4
  %inc = add nsw i32 %18, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %19 = load i32* %i, align 4
  %sub12 = sub nsw i32 %19, 1
  %20 = load i32* %m, align 4
  %sub13 = sub nsw i32 %20, %sub12
  store i32 %sub13, i32* %m, align 4
  br label %if.end14

if.end14:                                         ; preds = %for.end, %if.end7
  %21 = load i32* %m, align 4
  %sub15 = sub nsw i32 %21, 127
  store i32 %sub15, i32* %m, align 4
  %22 = load i32* %ix, align 4
  %and16 = and i32 %22, 8388607
  %or = or i32 %and16, 8388608
  store i32 %or, i32* %ix, align 4
  %23 = load i32* %m, align 4
  %and17 = and i32 %23, 1
  %tobool = icmp ne i32 %and17, 0
  br i1 %tobool, label %if.then18, label %if.end20

if.then18:                                        ; preds = %if.end14
  %24 = load i32* %ix, align 4
  %25 = load i32* %ix, align 4
  %add19 = add nsw i32 %25, %24
  store i32 %add19, i32* %ix, align 4
  br label %if.end20

if.end20:                                         ; preds = %if.then18, %if.end14
  %26 = load i32* %m, align 4
  %shr21 = ashr i32 %26, 1
  store i32 %shr21, i32* %m, align 4
  %27 = load i32* %ix, align 4
  %28 = load i32* %ix, align 4
  %add22 = add nsw i32 %28, %27
  store i32 %add22, i32* %ix, align 4
  store i32 0, i32* %s, align 4
  store i32 0, i32* %q, align 4
  store i32 16777216, i32* %r, align 4
  br label %while.cond

while.cond:                                       ; preds = %if.end30, %if.end20
  %29 = load i32* %r, align 4
  %cmp23 = icmp ne i32 %29, 0
  br i1 %cmp23, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %30 = load i32* %s, align 4
  %31 = load i32* %r, align 4
  %add24 = add i32 %30, %31
  store i32 %add24, i32* %t, align 4
  %32 = load i32* %t, align 4
  %33 = load i32* %ix, align 4
  %cmp25 = icmp sle i32 %32, %33
  br i1 %cmp25, label %if.then26, label %if.end30

if.then26:                                        ; preds = %while.body
  %34 = load i32* %t, align 4
  %35 = load i32* %r, align 4
  %add27 = add i32 %34, %35
  store i32 %add27, i32* %s, align 4
  %36 = load i32* %t, align 4
  %37 = load i32* %ix, align 4
  %sub28 = sub nsw i32 %37, %36
  store i32 %sub28, i32* %ix, align 4
  %38 = load i32* %r, align 4
  %39 = load i32* %q, align 4
  %add29 = add i32 %39, %38
  store i32 %add29, i32* %q, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then26, %while.body
  %40 = load i32* %ix, align 4
  %41 = load i32* %ix, align 4
  %add31 = add nsw i32 %41, %40
  store i32 %add31, i32* %ix, align 4
  %42 = load i32* %r, align 4
  %shr32 = lshr i32 %42, 1
  store i32 %shr32, i32* %r, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %43 = load i32* %ix, align 4
  %cmp33 = icmp ne i32 %43, 0
  br i1 %cmp33, label %if.then34, label %if.end44

if.then34:                                        ; preds = %while.end
  store float 1.000000e+00, float* %z, align 4
  %44 = load float* %z, align 4
  %cmp35 = fcmp oge float %44, 1.000000e+00
  br i1 %cmp35, label %if.then36, label %if.end43

if.then36:                                        ; preds = %if.then34
  store float 1.000000e+00, float* %z, align 4
  %45 = load float* %z, align 4
  %cmp37 = fcmp ogt float %45, 1.000000e+00
  br i1 %cmp37, label %if.then38, label %if.else

if.then38:                                        ; preds = %if.then36
  %46 = load i32* %q, align 4
  %add39 = add nsw i32 %46, 2
  store i32 %add39, i32* %q, align 4
  br label %if.end42

if.else:                                          ; preds = %if.then36
  %47 = load i32* %q, align 4
  %and40 = and i32 %47, 1
  %48 = load i32* %q, align 4
  %add41 = add nsw i32 %48, %and40
  store i32 %add41, i32* %q, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.else, %if.then38
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then34
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %while.end
  %49 = load i32* %q, align 4
  %shr45 = ashr i32 %49, 1
  %add46 = add nsw i32 %shr45, 1056964608
  store i32 %add46, i32* %ix, align 4
  %50 = load i32* %m, align 4
  %shl47 = shl i32 %50, 23
  %51 = load i32* %ix, align 4
  %add48 = add nsw i32 %51, %shl47
  store i32 %add48, i32* %ix, align 4
  br label %do.body49

do.body49:                                        ; preds = %if.end44
  %52 = load i32* %ix, align 4
  %word50 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %52, i32* %word50, align 4
  %value51 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %53 = load float* %value51, align 4
  store float %53, float* %z, align 4
  br label %do.end52

do.end52:                                         ; preds = %do.body49
  %54 = load float* %z, align 4
  store float %54, float* %retval
  br label %return

return:                                           ; preds = %do.end52, %if.then5, %if.then2, %if.then
  %55 = load float* %retval
  ret float %55
}

; Function Attrs: nounwind
define double @__ieee754_hypot(double %x, double %y) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  %a = alloca double, align 8
  %b = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %y1 = alloca double, align 8
  %y2 = alloca double, align 8
  %w = alloca double, align 8
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %ha = alloca i32, align 4
  %hb = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %gh_u2 = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u15 = alloca %union.ieee_double_shape_type, align 4
  %low = alloca i32, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  %gl_u38 = alloca %union.ieee_double_shape_type, align 4
  %sh_u52 = alloca %union.ieee_double_shape_type, align 4
  %sh_u59 = alloca %union.ieee_double_shape_type, align 4
  %low70 = alloca i32, align 4
  %gl_u72 = alloca %union.ieee_double_shape_type, align 4
  %sh_u82 = alloca %union.ieee_double_shape_type, align 4
  %sh_u95 = alloca %union.ieee_double_shape_type, align 4
  %sh_u102 = alloca %union.ieee_double_shape_type, align 4
  %sh_u114 = alloca %union.ieee_double_shape_type, align 4
  %sh_u131 = alloca %union.ieee_double_shape_type, align 4
  %sh_u139 = alloca %union.ieee_double_shape_type, align 4
  %high = alloca i32, align 4
  %gh_u160 = alloca %union.ieee_double_shape_type, align 4
  %sh_u166 = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double* %x.addr, align 8
  store double %0, double* %a, align 8
  %1 = load double* %y.addr, align 8
  store double %1, double* %b, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %2 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %2, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %3 = load i32* %msw, align 4
  store i32 %3, i32* %ha, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %4 = load i32* %ha, align 4
  %and = and i32 %4, 2147483647
  store i32 %and, i32* %ha, align 4
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %5 = load double* %y.addr, align 8
  %value3 = bitcast %union.ieee_double_shape_type* %gh_u2 to double*
  store double %5, double* %value3, align 4
  %parts4 = bitcast %union.ieee_double_shape_type* %gh_u2 to %struct.anon*
  %msw5 = getelementptr inbounds %struct.anon* %parts4, i32 0, i32 1
  %6 = load i32* %msw5, align 4
  store i32 %6, i32* %hb, align 4
  br label %do.end6

do.end6:                                          ; preds = %do.body1
  %7 = load i32* %hb, align 4
  %and7 = and i32 %7, 2147483647
  store i32 %and7, i32* %hb, align 4
  %8 = load i32* %hb, align 4
  %9 = load i32* %ha, align 4
  %cmp = icmp sgt i32 %8, %9
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end6
  %10 = load double* %y.addr, align 8
  store double %10, double* %a, align 8
  %11 = load double* %x.addr, align 8
  store double %11, double* %b, align 8
  %12 = load i32* %ha, align 4
  store i32 %12, i32* %j, align 4
  %13 = load i32* %hb, align 4
  store i32 %13, i32* %ha, align 4
  %14 = load i32* %j, align 4
  store i32 %14, i32* %hb, align 4
  br label %if.end

if.else:                                          ; preds = %do.end6
  %15 = load double* %x.addr, align 8
  store double %15, double* %a, align 8
  %16 = load double* %y.addr, align 8
  store double %16, double* %b, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %do.body8

do.body8:                                         ; preds = %if.end
  %17 = load double* %a, align 8
  %value9 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %17, double* %value9, align 4
  %18 = load i32* %ha, align 4
  %parts10 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw11 = getelementptr inbounds %struct.anon* %parts10, i32 0, i32 1
  store i32 %18, i32* %msw11, align 4
  %value12 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %19 = load double* %value12, align 4
  store double %19, double* %a, align 8
  br label %do.end13

do.end13:                                         ; preds = %do.body8
  br label %do.body14

do.body14:                                        ; preds = %do.end13
  %20 = load double* %b, align 8
  %value16 = bitcast %union.ieee_double_shape_type* %sh_u15 to double*
  store double %20, double* %value16, align 4
  %21 = load i32* %hb, align 4
  %parts17 = bitcast %union.ieee_double_shape_type* %sh_u15 to %struct.anon*
  %msw18 = getelementptr inbounds %struct.anon* %parts17, i32 0, i32 1
  store i32 %21, i32* %msw18, align 4
  %value19 = bitcast %union.ieee_double_shape_type* %sh_u15 to double*
  %22 = load double* %value19, align 4
  store double %22, double* %b, align 8
  br label %do.end20

do.end20:                                         ; preds = %do.body14
  %23 = load i32* %ha, align 4
  %24 = load i32* %hb, align 4
  %sub = sub nsw i32 %23, %24
  %cmp21 = icmp sgt i32 %sub, 62914560
  br i1 %cmp21, label %if.then22, label %if.end23

if.then22:                                        ; preds = %do.end20
  %25 = load double* %a, align 8
  %26 = load double* %b, align 8
  %add = fadd double %25, %26
  store double %add, double* %retval
  br label %return

if.end23:                                         ; preds = %do.end20
  store i32 0, i32* %k, align 4
  %27 = load i32* %ha, align 4
  %cmp24 = icmp sgt i32 %27, 1596981248
  br i1 %cmp24, label %if.then25, label %if.end65

if.then25:                                        ; preds = %if.end23
  %28 = load i32* %ha, align 4
  %cmp26 = icmp sge i32 %28, 2146435072
  br i1 %cmp26, label %if.then27, label %if.end47

if.then27:                                        ; preds = %if.then25
  %29 = load double* %a, align 8
  %30 = load double* %b, align 8
  %add28 = fadd double %29, %30
  store double %add28, double* %w, align 8
  br label %do.body29

do.body29:                                        ; preds = %if.then27
  %31 = load double* %a, align 8
  %value30 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %31, double* %value30, align 4
  %parts31 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts31, i32 0, i32 0
  %32 = load i32* %lsw, align 4
  store i32 %32, i32* %low, align 4
  br label %do.end32

do.end32:                                         ; preds = %do.body29
  %33 = load i32* %ha, align 4
  %and33 = and i32 %33, 1048575
  %34 = load i32* %low, align 4
  %or = or i32 %and33, %34
  %cmp34 = icmp eq i32 %or, 0
  br i1 %cmp34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %do.end32
  %35 = load double* %a, align 8
  store double %35, double* %w, align 8
  br label %if.end36

if.end36:                                         ; preds = %if.then35, %do.end32
  br label %do.body37

do.body37:                                        ; preds = %if.end36
  %36 = load double* %b, align 8
  %value39 = bitcast %union.ieee_double_shape_type* %gl_u38 to double*
  store double %36, double* %value39, align 4
  %parts40 = bitcast %union.ieee_double_shape_type* %gl_u38 to %struct.anon*
  %lsw41 = getelementptr inbounds %struct.anon* %parts40, i32 0, i32 0
  %37 = load i32* %lsw41, align 4
  store i32 %37, i32* %low, align 4
  br label %do.end42

do.end42:                                         ; preds = %do.body37
  %38 = load i32* %hb, align 4
  %xor = xor i32 %38, 2146435072
  %39 = load i32* %low, align 4
  %or43 = or i32 %xor, %39
  %cmp44 = icmp eq i32 %or43, 0
  br i1 %cmp44, label %if.then45, label %if.end46

if.then45:                                        ; preds = %do.end42
  %40 = load double* %b, align 8
  store double %40, double* %w, align 8
  br label %if.end46

if.end46:                                         ; preds = %if.then45, %do.end42
  %41 = load double* %w, align 8
  store double %41, double* %retval
  br label %return

if.end47:                                         ; preds = %if.then25
  %42 = load i32* %ha, align 4
  %sub48 = sub nsw i32 %42, 629145600
  store i32 %sub48, i32* %ha, align 4
  %43 = load i32* %hb, align 4
  %sub49 = sub nsw i32 %43, 629145600
  store i32 %sub49, i32* %hb, align 4
  %44 = load i32* %k, align 4
  %add50 = add nsw i32 %44, 600
  store i32 %add50, i32* %k, align 4
  br label %do.body51

do.body51:                                        ; preds = %if.end47
  %45 = load double* %a, align 8
  %value53 = bitcast %union.ieee_double_shape_type* %sh_u52 to double*
  store double %45, double* %value53, align 4
  %46 = load i32* %ha, align 4
  %parts54 = bitcast %union.ieee_double_shape_type* %sh_u52 to %struct.anon*
  %msw55 = getelementptr inbounds %struct.anon* %parts54, i32 0, i32 1
  store i32 %46, i32* %msw55, align 4
  %value56 = bitcast %union.ieee_double_shape_type* %sh_u52 to double*
  %47 = load double* %value56, align 4
  store double %47, double* %a, align 8
  br label %do.end57

do.end57:                                         ; preds = %do.body51
  br label %do.body58

do.body58:                                        ; preds = %do.end57
  %48 = load double* %b, align 8
  %value60 = bitcast %union.ieee_double_shape_type* %sh_u59 to double*
  store double %48, double* %value60, align 4
  %49 = load i32* %hb, align 4
  %parts61 = bitcast %union.ieee_double_shape_type* %sh_u59 to %struct.anon*
  %msw62 = getelementptr inbounds %struct.anon* %parts61, i32 0, i32 1
  store i32 %49, i32* %msw62, align 4
  %value63 = bitcast %union.ieee_double_shape_type* %sh_u59 to double*
  %50 = load double* %value63, align 4
  store double %50, double* %b, align 8
  br label %do.end64

do.end64:                                         ; preds = %do.body58
  br label %if.end65

if.end65:                                         ; preds = %do.end64, %if.end23
  %51 = load i32* %hb, align 4
  %cmp66 = icmp slt i32 %51, 548405248
  br i1 %cmp66, label %if.then67, label %if.end109

if.then67:                                        ; preds = %if.end65
  %52 = load i32* %hb, align 4
  %cmp68 = icmp sle i32 %52, 1048575
  br i1 %cmp68, label %if.then69, label %if.else90

if.then69:                                        ; preds = %if.then67
  br label %do.body71

do.body71:                                        ; preds = %if.then69
  %53 = load double* %b, align 8
  %value73 = bitcast %union.ieee_double_shape_type* %gl_u72 to double*
  store double %53, double* %value73, align 4
  %parts74 = bitcast %union.ieee_double_shape_type* %gl_u72 to %struct.anon*
  %lsw75 = getelementptr inbounds %struct.anon* %parts74, i32 0, i32 0
  %54 = load i32* %lsw75, align 4
  store i32 %54, i32* %low70, align 4
  br label %do.end76

do.end76:                                         ; preds = %do.body71
  %55 = load i32* %hb, align 4
  %56 = load i32* %low70, align 4
  %or77 = or i32 %55, %56
  %cmp78 = icmp eq i32 %or77, 0
  br i1 %cmp78, label %if.then79, label %if.end80

if.then79:                                        ; preds = %do.end76
  %57 = load double* %a, align 8
  store double %57, double* %retval
  br label %return

if.end80:                                         ; preds = %do.end76
  store double 0.000000e+00, double* %t1, align 8
  br label %do.body81

do.body81:                                        ; preds = %if.end80
  %58 = load double* %t1, align 8
  %value83 = bitcast %union.ieee_double_shape_type* %sh_u82 to double*
  store double %58, double* %value83, align 4
  %parts84 = bitcast %union.ieee_double_shape_type* %sh_u82 to %struct.anon*
  %msw85 = getelementptr inbounds %struct.anon* %parts84, i32 0, i32 1
  store i32 2144337920, i32* %msw85, align 4
  %value86 = bitcast %union.ieee_double_shape_type* %sh_u82 to double*
  %59 = load double* %value86, align 4
  store double %59, double* %t1, align 8
  br label %do.end87

do.end87:                                         ; preds = %do.body81
  %60 = load double* %t1, align 8
  %61 = load double* %b, align 8
  %mul = fmul double %61, %60
  store double %mul, double* %b, align 8
  %62 = load double* %t1, align 8
  %63 = load double* %a, align 8
  %mul88 = fmul double %63, %62
  store double %mul88, double* %a, align 8
  %64 = load i32* %k, align 4
  %sub89 = sub nsw i32 %64, 1022
  store i32 %sub89, i32* %k, align 4
  br label %if.end108

if.else90:                                        ; preds = %if.then67
  %65 = load i32* %ha, align 4
  %add91 = add nsw i32 %65, 629145600
  store i32 %add91, i32* %ha, align 4
  %66 = load i32* %hb, align 4
  %add92 = add nsw i32 %66, 629145600
  store i32 %add92, i32* %hb, align 4
  %67 = load i32* %k, align 4
  %sub93 = sub nsw i32 %67, 600
  store i32 %sub93, i32* %k, align 4
  br label %do.body94

do.body94:                                        ; preds = %if.else90
  %68 = load double* %a, align 8
  %value96 = bitcast %union.ieee_double_shape_type* %sh_u95 to double*
  store double %68, double* %value96, align 4
  %69 = load i32* %ha, align 4
  %parts97 = bitcast %union.ieee_double_shape_type* %sh_u95 to %struct.anon*
  %msw98 = getelementptr inbounds %struct.anon* %parts97, i32 0, i32 1
  store i32 %69, i32* %msw98, align 4
  %value99 = bitcast %union.ieee_double_shape_type* %sh_u95 to double*
  %70 = load double* %value99, align 4
  store double %70, double* %a, align 8
  br label %do.end100

do.end100:                                        ; preds = %do.body94
  br label %do.body101

do.body101:                                       ; preds = %do.end100
  %71 = load double* %b, align 8
  %value103 = bitcast %union.ieee_double_shape_type* %sh_u102 to double*
  store double %71, double* %value103, align 4
  %72 = load i32* %hb, align 4
  %parts104 = bitcast %union.ieee_double_shape_type* %sh_u102 to %struct.anon*
  %msw105 = getelementptr inbounds %struct.anon* %parts104, i32 0, i32 1
  store i32 %72, i32* %msw105, align 4
  %value106 = bitcast %union.ieee_double_shape_type* %sh_u102 to double*
  %73 = load double* %value106, align 4
  store double %73, double* %b, align 8
  br label %do.end107

do.end107:                                        ; preds = %do.body101
  br label %if.end108

if.end108:                                        ; preds = %do.end107, %do.end87
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.end65
  %74 = load double* %a, align 8
  %75 = load double* %b, align 8
  %sub110 = fsub double %74, %75
  store double %sub110, double* %w, align 8
  %76 = load double* %w, align 8
  %77 = load double* %b, align 8
  %cmp111 = fcmp ogt double %76, %77
  br i1 %cmp111, label %if.then112, label %if.else128

if.then112:                                       ; preds = %if.end109
  store double 0.000000e+00, double* %t1, align 8
  br label %do.body113

do.body113:                                       ; preds = %if.then112
  %78 = load double* %t1, align 8
  %value115 = bitcast %union.ieee_double_shape_type* %sh_u114 to double*
  store double %78, double* %value115, align 4
  %79 = load i32* %ha, align 4
  %parts116 = bitcast %union.ieee_double_shape_type* %sh_u114 to %struct.anon*
  %msw117 = getelementptr inbounds %struct.anon* %parts116, i32 0, i32 1
  store i32 %79, i32* %msw117, align 4
  %value118 = bitcast %union.ieee_double_shape_type* %sh_u114 to double*
  %80 = load double* %value118, align 4
  store double %80, double* %t1, align 8
  br label %do.end119

do.end119:                                        ; preds = %do.body113
  %81 = load double* %a, align 8
  %82 = load double* %t1, align 8
  %sub120 = fsub double %81, %82
  store double %sub120, double* %t2, align 8
  %83 = load double* %t1, align 8
  %84 = load double* %t1, align 8
  %mul121 = fmul double %83, %84
  %85 = load double* %b, align 8
  %86 = load double* %b, align 8
  %sub122 = fsub double -0.000000e+00, %86
  %mul123 = fmul double %85, %sub122
  %87 = load double* %t2, align 8
  %88 = load double* %a, align 8
  %89 = load double* %t1, align 8
  %add124 = fadd double %88, %89
  %mul125 = fmul double %87, %add124
  %sub126 = fsub double %mul123, %mul125
  %sub127 = fsub double %mul121, %sub126
  %call = call double @__ieee754_sqrt(double %sub127) #5
  store double %call, double* %w, align 8
  br label %if.end156

if.else128:                                       ; preds = %if.end109
  %90 = load double* %a, align 8
  %91 = load double* %a, align 8
  %add129 = fadd double %90, %91
  store double %add129, double* %a, align 8
  store double 0.000000e+00, double* %y1, align 8
  br label %do.body130

do.body130:                                       ; preds = %if.else128
  %92 = load double* %y1, align 8
  %value132 = bitcast %union.ieee_double_shape_type* %sh_u131 to double*
  store double %92, double* %value132, align 4
  %93 = load i32* %hb, align 4
  %parts133 = bitcast %union.ieee_double_shape_type* %sh_u131 to %struct.anon*
  %msw134 = getelementptr inbounds %struct.anon* %parts133, i32 0, i32 1
  store i32 %93, i32* %msw134, align 4
  %value135 = bitcast %union.ieee_double_shape_type* %sh_u131 to double*
  %94 = load double* %value135, align 4
  store double %94, double* %y1, align 8
  br label %do.end136

do.end136:                                        ; preds = %do.body130
  %95 = load double* %b, align 8
  %96 = load double* %y1, align 8
  %sub137 = fsub double %95, %96
  store double %sub137, double* %y2, align 8
  store double 0.000000e+00, double* %t1, align 8
  br label %do.body138

do.body138:                                       ; preds = %do.end136
  %97 = load double* %t1, align 8
  %value140 = bitcast %union.ieee_double_shape_type* %sh_u139 to double*
  store double %97, double* %value140, align 4
  %98 = load i32* %ha, align 4
  %add141 = add nsw i32 %98, 1048576
  %parts142 = bitcast %union.ieee_double_shape_type* %sh_u139 to %struct.anon*
  %msw143 = getelementptr inbounds %struct.anon* %parts142, i32 0, i32 1
  store i32 %add141, i32* %msw143, align 4
  %value144 = bitcast %union.ieee_double_shape_type* %sh_u139 to double*
  %99 = load double* %value144, align 4
  store double %99, double* %t1, align 8
  br label %do.end145

do.end145:                                        ; preds = %do.body138
  %100 = load double* %a, align 8
  %101 = load double* %t1, align 8
  %sub146 = fsub double %100, %101
  store double %sub146, double* %t2, align 8
  %102 = load double* %t1, align 8
  %103 = load double* %y1, align 8
  %mul147 = fmul double %102, %103
  %104 = load double* %w, align 8
  %105 = load double* %w, align 8
  %sub148 = fsub double -0.000000e+00, %105
  %mul149 = fmul double %104, %sub148
  %106 = load double* %t1, align 8
  %107 = load double* %y2, align 8
  %mul150 = fmul double %106, %107
  %108 = load double* %t2, align 8
  %109 = load double* %b, align 8
  %mul151 = fmul double %108, %109
  %add152 = fadd double %mul150, %mul151
  %sub153 = fsub double %mul149, %add152
  %sub154 = fsub double %mul147, %sub153
  %call155 = call double @__ieee754_sqrt(double %sub154) #5
  store double %call155, double* %w, align 8
  br label %if.end156

if.end156:                                        ; preds = %do.end145, %do.end119
  %110 = load i32* %k, align 4
  %cmp157 = icmp ne i32 %110, 0
  br i1 %cmp157, label %if.then158, label %if.else174

if.then158:                                       ; preds = %if.end156
  store double 1.000000e+00, double* %t1, align 8
  br label %do.body159

do.body159:                                       ; preds = %if.then158
  %111 = load double* %t1, align 8
  %value161 = bitcast %union.ieee_double_shape_type* %gh_u160 to double*
  store double %111, double* %value161, align 4
  %parts162 = bitcast %union.ieee_double_shape_type* %gh_u160 to %struct.anon*
  %msw163 = getelementptr inbounds %struct.anon* %parts162, i32 0, i32 1
  %112 = load i32* %msw163, align 4
  store i32 %112, i32* %high, align 4
  br label %do.end164

do.end164:                                        ; preds = %do.body159
  br label %do.body165

do.body165:                                       ; preds = %do.end164
  %113 = load double* %t1, align 8
  %value167 = bitcast %union.ieee_double_shape_type* %sh_u166 to double*
  store double %113, double* %value167, align 4
  %114 = load i32* %high, align 4
  %115 = load i32* %k, align 4
  %shl = shl i32 %115, 20
  %add168 = add i32 %114, %shl
  %parts169 = bitcast %union.ieee_double_shape_type* %sh_u166 to %struct.anon*
  %msw170 = getelementptr inbounds %struct.anon* %parts169, i32 0, i32 1
  store i32 %add168, i32* %msw170, align 4
  %value171 = bitcast %union.ieee_double_shape_type* %sh_u166 to double*
  %116 = load double* %value171, align 4
  store double %116, double* %t1, align 8
  br label %do.end172

do.end172:                                        ; preds = %do.body165
  %117 = load double* %t1, align 8
  %118 = load double* %w, align 8
  %mul173 = fmul double %117, %118
  store double %mul173, double* %retval
  br label %return

if.else174:                                       ; preds = %if.end156
  %119 = load double* %w, align 8
  store double %119, double* %retval
  br label %return

return:                                           ; preds = %if.else174, %do.end172, %if.then79, %if.end46, %if.then22
  %120 = load double* %retval
  ret double %120
}

; Function Attrs: nounwind
define double @__ieee754_j0(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %z = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %ss = alloca double, align 8
  %cc = alloca double, align 8
  %r = alloca double, align 8
  %u = alloca double, align 8
  %v = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double* %x.addr, align 8
  %mul = fmul double %4, %5
  %div = fdiv double 1.000000e+00, %mul
  store double %div, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load double* %x.addr, align 8
  %call = call double @fabs(double %6) #6
  store double %call, double* %x.addr, align 8
  %7 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %7, 1073741824
  br i1 %cmp1, label %if.then2, label %if.end32

if.then2:                                         ; preds = %if.end
  %8 = load double* %x.addr, align 8
  %call3 = call double @sin(double %8) #4
  store double %call3, double* %s, align 8
  %9 = load double* %x.addr, align 8
  %call4 = call double @cos(double %9) #4
  store double %call4, double* %c, align 8
  %10 = load double* %s, align 8
  %11 = load double* %c, align 8
  %sub = fsub double %10, %11
  store double %sub, double* %ss, align 8
  %12 = load double* %s, align 8
  %13 = load double* %c, align 8
  %add = fadd double %12, %13
  store double %add, double* %cc, align 8
  %14 = load i32* %ix, align 4
  %cmp5 = icmp slt i32 %14, 2145386496
  br i1 %cmp5, label %if.then6, label %if.end16

if.then6:                                         ; preds = %if.then2
  %15 = load double* %x.addr, align 8
  %16 = load double* %x.addr, align 8
  %add7 = fadd double %15, %16
  %call8 = call double @cos(double %add7) #4
  %sub9 = fsub double -0.000000e+00, %call8
  store double %sub9, double* %z, align 8
  %17 = load double* %s, align 8
  %18 = load double* %c, align 8
  %mul10 = fmul double %17, %18
  %cmp11 = fcmp olt double %mul10, 0.000000e+00
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then6
  %19 = load double* %z, align 8
  %20 = load double* %ss, align 8
  %div13 = fdiv double %19, %20
  store double %div13, double* %cc, align 8
  br label %if.end15

if.else:                                          ; preds = %if.then6
  %21 = load double* %z, align 8
  %22 = load double* %cc, align 8
  %div14 = fdiv double %21, %22
  store double %div14, double* %ss, align 8
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then12
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then2
  %23 = load i32* %ix, align 4
  %cmp17 = icmp sgt i32 %23, 1207959552
  br i1 %cmp17, label %if.then18, label %if.else22

if.then18:                                        ; preds = %if.end16
  %24 = load double* %cc, align 8
  %mul19 = fmul double 0x3FE20DD750429B6D, %24
  %25 = load double* %x.addr, align 8
  %call20 = call double @__ieee754_sqrt(double %25) #5
  %div21 = fdiv double %mul19, %call20
  store double %div21, double* %z, align 8
  br label %if.end31

if.else22:                                        ; preds = %if.end16
  %26 = load double* %x.addr, align 8
  %call23 = call double @pzero(double %26) #5
  store double %call23, double* %u, align 8
  %27 = load double* %x.addr, align 8
  %call24 = call double @qzero(double %27) #5
  store double %call24, double* %v, align 8
  %28 = load double* %u, align 8
  %29 = load double* %cc, align 8
  %mul25 = fmul double %28, %29
  %30 = load double* %v, align 8
  %31 = load double* %ss, align 8
  %mul26 = fmul double %30, %31
  %sub27 = fsub double %mul25, %mul26
  %mul28 = fmul double 0x3FE20DD750429B6D, %sub27
  %32 = load double* %x.addr, align 8
  %call29 = call double @__ieee754_sqrt(double %32) #5
  %div30 = fdiv double %mul28, %call29
  store double %div30, double* %z, align 8
  br label %if.end31

if.end31:                                         ; preds = %if.else22, %if.then18
  %33 = load double* %z, align 8
  store double %33, double* %retval
  br label %return

if.end32:                                         ; preds = %if.end
  %34 = load i32* %ix, align 4
  %cmp33 = icmp slt i32 %34, 1059061760
  br i1 %cmp33, label %if.then34, label %if.end45

if.then34:                                        ; preds = %if.end32
  %35 = load double* %x.addr, align 8
  %add35 = fadd double 1.000000e+300, %35
  %cmp36 = fcmp ogt double %add35, 1.000000e+00
  br i1 %cmp36, label %if.then37, label %if.end44

if.then37:                                        ; preds = %if.then34
  %36 = load i32* %ix, align 4
  %cmp38 = icmp slt i32 %36, 1044381696
  br i1 %cmp38, label %if.then39, label %if.else40

if.then39:                                        ; preds = %if.then37
  store double 1.000000e+00, double* %retval
  br label %return

if.else40:                                        ; preds = %if.then37
  %37 = load double* %x.addr, align 8
  %mul41 = fmul double 2.500000e-01, %37
  %38 = load double* %x.addr, align 8
  %mul42 = fmul double %mul41, %38
  %sub43 = fsub double 1.000000e+00, %mul42
  store double %sub43, double* %retval
  br label %return

if.end44:                                         ; preds = %if.then34
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end32
  %39 = load double* %x.addr, align 8
  %40 = load double* %x.addr, align 8
  %mul46 = fmul double %39, %40
  store double %mul46, double* %z, align 8
  %41 = load double* %z, align 8
  %42 = load double* %z, align 8
  %43 = load double* %z, align 8
  %44 = load double* %z, align 8
  %mul47 = fmul double %44, 0xBE33D5E773D63FCE
  %add48 = fadd double 0x3EBEB1D10C503919, %mul47
  %mul49 = fmul double %43, %add48
  %add50 = fadd double 0xBF28E6A5B61AC6E9, %mul49
  %mul51 = fmul double %42, %add50
  %add52 = fadd double 0x3F8FFFFFFFFFFFFD, %mul51
  %mul53 = fmul double %41, %add52
  store double %mul53, double* %r, align 8
  %45 = load double* %z, align 8
  %46 = load double* %z, align 8
  %47 = load double* %z, align 8
  %48 = load double* %z, align 8
  %mul54 = fmul double %48, 0x3E1408BCF4745D8F
  %add55 = fadd double 0x3EA13B54CE84D5A9, %mul54
  %mul56 = fmul double %47, %add55
  %add57 = fadd double 0x3F1EA6D2DD57DBF4, %mul56
  %mul58 = fmul double %46, %add57
  %add59 = fadd double 0x3F8FFCE882C8C2A4, %mul58
  %mul60 = fmul double %45, %add59
  %add61 = fadd double 1.000000e+00, %mul60
  store double %add61, double* %s, align 8
  %49 = load i32* %ix, align 4
  %cmp62 = icmp slt i32 %49, 1072693248
  br i1 %cmp62, label %if.then63, label %if.else68

if.then63:                                        ; preds = %if.end45
  %50 = load double* %z, align 8
  %51 = load double* %r, align 8
  %52 = load double* %s, align 8
  %div64 = fdiv double %51, %52
  %add65 = fadd double -2.500000e-01, %div64
  %mul66 = fmul double %50, %add65
  %add67 = fadd double 1.000000e+00, %mul66
  store double %add67, double* %retval
  br label %return

if.else68:                                        ; preds = %if.end45
  %53 = load double* %x.addr, align 8
  %mul69 = fmul double 5.000000e-01, %53
  store double %mul69, double* %u, align 8
  %54 = load double* %u, align 8
  %add70 = fadd double 1.000000e+00, %54
  %55 = load double* %u, align 8
  %sub71 = fsub double 1.000000e+00, %55
  %mul72 = fmul double %add70, %sub71
  %56 = load double* %z, align 8
  %57 = load double* %r, align 8
  %58 = load double* %s, align 8
  %div73 = fdiv double %57, %58
  %mul74 = fmul double %56, %div73
  %add75 = fadd double %mul72, %mul74
  store double %add75, double* %retval
  br label %return

return:                                           ; preds = %if.else68, %if.then63, %if.else40, %if.then39, %if.end31, %if.then
  %59 = load double* %retval
  ret double %59
}

; Function Attrs: nounwind
define double @__ieee754_y0(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %z = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %ss = alloca double, align 8
  %cc = alloca double, align 8
  %u = alloca double, align 8
  %v = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 2147483647, %3
  store i32 %and, i32* %ix, align 4
  %4 = load i32* %ix, align 4
  %cmp = icmp sge i32 %4, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %5 = load double* %x.addr, align 8
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %mul = fmul double %6, %7
  %add = fadd double %5, %mul
  %div = fdiv double 1.000000e+00, %add
  store double %div, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %8 = load i32* %ix, align 4
  %9 = load i32* %lx, align 4
  %or = or i32 %8, %9
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store double 0xFFF0000000000000, double* %retval
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load i32* %hx, align 4
  %cmp5 = icmp slt i32 %10, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  store double 0x7FF8000000000000, double* %retval
  br label %return

if.end7:                                          ; preds = %if.end4
  %11 = load i32* %ix, align 4
  %cmp8 = icmp sge i32 %11, 1073741824
  br i1 %cmp8, label %if.then9, label %if.end39

if.then9:                                         ; preds = %if.end7
  %12 = load double* %x.addr, align 8
  %call = call double @sin(double %12) #4
  store double %call, double* %s, align 8
  %13 = load double* %x.addr, align 8
  %call10 = call double @cos(double %13) #4
  store double %call10, double* %c, align 8
  %14 = load double* %s, align 8
  %15 = load double* %c, align 8
  %sub = fsub double %14, %15
  store double %sub, double* %ss, align 8
  %16 = load double* %s, align 8
  %17 = load double* %c, align 8
  %add11 = fadd double %16, %17
  store double %add11, double* %cc, align 8
  %18 = load i32* %ix, align 4
  %cmp12 = icmp slt i32 %18, 2145386496
  br i1 %cmp12, label %if.then13, label %if.end23

if.then13:                                        ; preds = %if.then9
  %19 = load double* %x.addr, align 8
  %20 = load double* %x.addr, align 8
  %add14 = fadd double %19, %20
  %call15 = call double @cos(double %add14) #4
  %sub16 = fsub double -0.000000e+00, %call15
  store double %sub16, double* %z, align 8
  %21 = load double* %s, align 8
  %22 = load double* %c, align 8
  %mul17 = fmul double %21, %22
  %cmp18 = fcmp olt double %mul17, 0.000000e+00
  br i1 %cmp18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.then13
  %23 = load double* %z, align 8
  %24 = load double* %ss, align 8
  %div20 = fdiv double %23, %24
  store double %div20, double* %cc, align 8
  br label %if.end22

if.else:                                          ; preds = %if.then13
  %25 = load double* %z, align 8
  %26 = load double* %cc, align 8
  %div21 = fdiv double %25, %26
  store double %div21, double* %ss, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then19
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then9
  %27 = load i32* %ix, align 4
  %cmp24 = icmp sgt i32 %27, 1207959552
  br i1 %cmp24, label %if.then25, label %if.else29

if.then25:                                        ; preds = %if.end23
  %28 = load double* %ss, align 8
  %mul26 = fmul double 0x3FE20DD750429B6D, %28
  %29 = load double* %x.addr, align 8
  %call27 = call double @__ieee754_sqrt(double %29) #5
  %div28 = fdiv double %mul26, %call27
  store double %div28, double* %z, align 8
  br label %if.end38

if.else29:                                        ; preds = %if.end23
  %30 = load double* %x.addr, align 8
  %call30 = call double @pzero(double %30) #5
  store double %call30, double* %u, align 8
  %31 = load double* %x.addr, align 8
  %call31 = call double @qzero(double %31) #5
  store double %call31, double* %v, align 8
  %32 = load double* %u, align 8
  %33 = load double* %ss, align 8
  %mul32 = fmul double %32, %33
  %34 = load double* %v, align 8
  %35 = load double* %cc, align 8
  %mul33 = fmul double %34, %35
  %add34 = fadd double %mul32, %mul33
  %mul35 = fmul double 0x3FE20DD750429B6D, %add34
  %36 = load double* %x.addr, align 8
  %call36 = call double @__ieee754_sqrt(double %36) #5
  %div37 = fdiv double %mul35, %call36
  store double %div37, double* %z, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.else29, %if.then25
  %37 = load double* %z, align 8
  store double %37, double* %retval
  br label %return

if.end39:                                         ; preds = %if.end7
  %38 = load i32* %ix, align 4
  %cmp40 = icmp sle i32 %38, 1044381696
  br i1 %cmp40, label %if.then41, label %if.end45

if.then41:                                        ; preds = %if.end39
  %39 = load double* %x.addr, align 8
  %call42 = call double @__ieee754_log(double %39) #5
  %mul43 = fmul double 0x3FE45F306DC9C883, %call42
  %add44 = fadd double 0xBFB2E4D699CBD01F, %mul43
  store double %add44, double* %retval
  br label %return

if.end45:                                         ; preds = %if.end39
  %40 = load double* %x.addr, align 8
  %41 = load double* %x.addr, align 8
  %mul46 = fmul double %40, %41
  store double %mul46, double* %z, align 8
  %42 = load double* %z, align 8
  %43 = load double* %z, align 8
  %44 = load double* %z, align 8
  %45 = load double* %z, align 8
  %46 = load double* %z, align 8
  %47 = load double* %z, align 8
  %mul47 = fmul double %47, 0xBDC5E43D693FB3C8
  %add48 = fadd double 0x3E5500573B4EABD4, %mul47
  %mul49 = fmul double %46, %add48
  %add50 = fadd double 0xBECFFEA773D25CAD, %mul49
  %mul51 = fmul double %45, %add50
  %add52 = fadd double 0x3F36C54D20B29B6B, %mul51
  %mul53 = fmul double %44, %add52
  %add54 = fadd double 0xBF8C4CE8B16CFA97, %mul53
  %mul55 = fmul double %43, %add54
  %add56 = fadd double 0x3FC69D019DE9E3FC, %mul55
  %mul57 = fmul double %42, %add56
  %add58 = fadd double 0xBFB2E4D699CBD01F, %mul57
  store double %add58, double* %u, align 8
  %48 = load double* %z, align 8
  %49 = load double* %z, align 8
  %50 = load double* %z, align 8
  %51 = load double* %z, align 8
  %mul59 = fmul double %51, 0x3DFE50183BD6D9EF
  %add60 = fadd double 0x3E91642D7FF202FD, %mul59
  %mul61 = fmul double %50, %add60
  %add62 = fadd double 0x3F13ECBBF578C6C1, %mul61
  %mul63 = fmul double %49, %add62
  %add64 = fadd double 0x3F8A127091C9C71A, %mul63
  %mul65 = fmul double %48, %add64
  %add66 = fadd double 1.000000e+00, %mul65
  store double %add66, double* %v, align 8
  %52 = load double* %u, align 8
  %53 = load double* %v, align 8
  %div67 = fdiv double %52, %53
  %54 = load double* %x.addr, align 8
  %call68 = call double @__ieee754_j0(double %54) #5
  %55 = load double* %x.addr, align 8
  %call69 = call double @__ieee754_log(double %55) #5
  %mul70 = fmul double %call68, %call69
  %mul71 = fmul double 0x3FE45F306DC9C883, %mul70
  %add72 = fadd double %div67, %mul71
  store double %add72, double* %retval
  br label %return

return:                                           ; preds = %if.end45, %if.then41, %if.end38, %if.then6, %if.then3, %if.then
  %56 = load double* %retval
  ret double %56
}

; Function Attrs: nounwind
define double @__ieee754_j1(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %z = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %ss = alloca double, align 8
  %cc = alloca double, align 8
  %r = alloca double, align 8
  %u = alloca double, align 8
  %v = alloca double, align 8
  %y = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %div = fdiv double 1.000000e+00, %4
  store double %div, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %5 = load double* %x.addr, align 8
  %call = call double @fabs(double %5) #6
  store double %call, double* %y, align 8
  %6 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %6, 1073741824
  br i1 %cmp1, label %if.then2, label %if.end35

if.then2:                                         ; preds = %if.end
  %7 = load double* %y, align 8
  %call3 = call double @sin(double %7) #4
  store double %call3, double* %s, align 8
  %8 = load double* %y, align 8
  %call4 = call double @cos(double %8) #4
  store double %call4, double* %c, align 8
  %9 = load double* %s, align 8
  %sub = fsub double -0.000000e+00, %9
  %10 = load double* %c, align 8
  %sub5 = fsub double %sub, %10
  store double %sub5, double* %ss, align 8
  %11 = load double* %s, align 8
  %12 = load double* %c, align 8
  %sub6 = fsub double %11, %12
  store double %sub6, double* %cc, align 8
  %13 = load i32* %ix, align 4
  %cmp7 = icmp slt i32 %13, 2145386496
  br i1 %cmp7, label %if.then8, label %if.end15

if.then8:                                         ; preds = %if.then2
  %14 = load double* %y, align 8
  %15 = load double* %y, align 8
  %add = fadd double %14, %15
  %call9 = call double @cos(double %add) #4
  store double %call9, double* %z, align 8
  %16 = load double* %s, align 8
  %17 = load double* %c, align 8
  %mul = fmul double %16, %17
  %cmp10 = fcmp ogt double %mul, 0.000000e+00
  br i1 %cmp10, label %if.then11, label %if.else

if.then11:                                        ; preds = %if.then8
  %18 = load double* %z, align 8
  %19 = load double* %ss, align 8
  %div12 = fdiv double %18, %19
  store double %div12, double* %cc, align 8
  br label %if.end14

if.else:                                          ; preds = %if.then8
  %20 = load double* %z, align 8
  %21 = load double* %cc, align 8
  %div13 = fdiv double %20, %21
  store double %div13, double* %ss, align 8
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then11
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.then2
  %22 = load i32* %ix, align 4
  %cmp16 = icmp sgt i32 %22, 1207959552
  br i1 %cmp16, label %if.then17, label %if.else21

if.then17:                                        ; preds = %if.end15
  %23 = load double* %cc, align 8
  %mul18 = fmul double 0x3FE20DD750429B6D, %23
  %24 = load double* %y, align 8
  %call19 = call double @__ieee754_sqrt(double %24) #5
  %div20 = fdiv double %mul18, %call19
  store double %div20, double* %z, align 8
  br label %if.end30

if.else21:                                        ; preds = %if.end15
  %25 = load double* %y, align 8
  %call22 = call double @pone(double %25) #5
  store double %call22, double* %u, align 8
  %26 = load double* %y, align 8
  %call23 = call double @qone(double %26) #5
  store double %call23, double* %v, align 8
  %27 = load double* %u, align 8
  %28 = load double* %cc, align 8
  %mul24 = fmul double %27, %28
  %29 = load double* %v, align 8
  %30 = load double* %ss, align 8
  %mul25 = fmul double %29, %30
  %sub26 = fsub double %mul24, %mul25
  %mul27 = fmul double 0x3FE20DD750429B6D, %sub26
  %31 = load double* %y, align 8
  %call28 = call double @__ieee754_sqrt(double %31) #5
  %div29 = fdiv double %mul27, %call28
  store double %div29, double* %z, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.else21, %if.then17
  %32 = load i32* %hx, align 4
  %cmp31 = icmp slt i32 %32, 0
  br i1 %cmp31, label %if.then32, label %if.else34

if.then32:                                        ; preds = %if.end30
  %33 = load double* %z, align 8
  %sub33 = fsub double -0.000000e+00, %33
  store double %sub33, double* %retval
  br label %return

if.else34:                                        ; preds = %if.end30
  %34 = load double* %z, align 8
  store double %34, double* %retval
  br label %return

if.end35:                                         ; preds = %if.end
  %35 = load i32* %ix, align 4
  %cmp36 = icmp slt i32 %35, 1044381696
  br i1 %cmp36, label %if.then37, label %if.end43

if.then37:                                        ; preds = %if.end35
  %36 = load double* %x.addr, align 8
  %add38 = fadd double 1.000000e+300, %36
  %cmp39 = fcmp ogt double %add38, 1.000000e+00
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %if.then37
  %37 = load double* %x.addr, align 8
  %mul41 = fmul double 5.000000e-01, %37
  store double %mul41, double* %retval
  br label %return

if.end42:                                         ; preds = %if.then37
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.end35
  %38 = load double* %x.addr, align 8
  %39 = load double* %x.addr, align 8
  %mul44 = fmul double %38, %39
  store double %mul44, double* %z, align 8
  %40 = load double* %z, align 8
  %41 = load double* %z, align 8
  %42 = load double* %z, align 8
  %43 = load double* %z, align 8
  %mul45 = fmul double %43, 0x3E6AAAFA46CA0BD9
  %add46 = fadd double 0xBEF0C5C6BA169668, %mul45
  %mul47 = fmul double %42, %add46
  %add48 = fadd double 0x3F570D9F98472C61, %mul47
  %mul49 = fmul double %41, %add48
  %add50 = fadd double -6.250000e-02, %mul49
  %mul51 = fmul double %40, %add50
  store double %mul51, double* %r, align 8
  %44 = load double* %z, align 8
  %45 = load double* %z, align 8
  %46 = load double* %z, align 8
  %47 = load double* %z, align 8
  %48 = load double* %z, align 8
  %mul52 = fmul double %48, 0x3DAB2ACFCFB97ED8
  %add53 = fadd double 0x3E35AC88C97DFF2C, %mul52
  %mul54 = fmul double %47, %add53
  %add55 = fadd double 0x3EB3BFF8333F8498, %mul54
  %mul56 = fmul double %46, %add55
  %add57 = fadd double 0x3F285F56B9CDF664, %mul56
  %mul58 = fmul double %45, %add57
  %add59 = fadd double 0x3F939D0B12637E53, %mul58
  %mul60 = fmul double %44, %add59
  %add61 = fadd double 1.000000e+00, %mul60
  store double %add61, double* %s, align 8
  %49 = load double* %x.addr, align 8
  %50 = load double* %r, align 8
  %mul62 = fmul double %50, %49
  store double %mul62, double* %r, align 8
  %51 = load double* %x.addr, align 8
  %mul63 = fmul double %51, 5.000000e-01
  %52 = load double* %r, align 8
  %53 = load double* %s, align 8
  %div64 = fdiv double %52, %53
  %add65 = fadd double %mul63, %div64
  store double %add65, double* %retval
  br label %return

return:                                           ; preds = %if.end43, %if.then40, %if.else34, %if.then32, %if.then
  %54 = load double* %retval
  ret double %54
}

; Function Attrs: nounwind
define double @__ieee754_y1(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %z = alloca double, align 8
  %s = alloca double, align 8
  %c = alloca double, align 8
  %ss = alloca double, align 8
  %cc = alloca double, align 8
  %u = alloca double, align 8
  %v = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 2147483647, %3
  store i32 %and, i32* %ix, align 4
  %4 = load i32* %ix, align 4
  %cmp = icmp sge i32 %4, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %5 = load double* %x.addr, align 8
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %mul = fmul double %6, %7
  %add = fadd double %5, %mul
  %div = fdiv double 1.000000e+00, %add
  store double %div, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %8 = load i32* %ix, align 4
  %9 = load i32* %lx, align 4
  %or = or i32 %8, %9
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store double 0xFFF0000000000000, double* %retval
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load i32* %hx, align 4
  %cmp5 = icmp slt i32 %10, 0
  br i1 %cmp5, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.end4
  store double 0x7FF8000000000000, double* %retval
  br label %return

if.end7:                                          ; preds = %if.end4
  %11 = load i32* %ix, align 4
  %cmp8 = icmp sge i32 %11, 1073741824
  br i1 %cmp8, label %if.then9, label %if.end39

if.then9:                                         ; preds = %if.end7
  %12 = load double* %x.addr, align 8
  %call = call double @sin(double %12) #4
  store double %call, double* %s, align 8
  %13 = load double* %x.addr, align 8
  %call10 = call double @cos(double %13) #4
  store double %call10, double* %c, align 8
  %14 = load double* %s, align 8
  %sub = fsub double -0.000000e+00, %14
  %15 = load double* %c, align 8
  %sub11 = fsub double %sub, %15
  store double %sub11, double* %ss, align 8
  %16 = load double* %s, align 8
  %17 = load double* %c, align 8
  %sub12 = fsub double %16, %17
  store double %sub12, double* %cc, align 8
  %18 = load i32* %ix, align 4
  %cmp13 = icmp slt i32 %18, 2145386496
  br i1 %cmp13, label %if.then14, label %if.end23

if.then14:                                        ; preds = %if.then9
  %19 = load double* %x.addr, align 8
  %20 = load double* %x.addr, align 8
  %add15 = fadd double %19, %20
  %call16 = call double @cos(double %add15) #4
  store double %call16, double* %z, align 8
  %21 = load double* %s, align 8
  %22 = load double* %c, align 8
  %mul17 = fmul double %21, %22
  %cmp18 = fcmp ogt double %mul17, 0.000000e+00
  br i1 %cmp18, label %if.then19, label %if.else

if.then19:                                        ; preds = %if.then14
  %23 = load double* %z, align 8
  %24 = load double* %ss, align 8
  %div20 = fdiv double %23, %24
  store double %div20, double* %cc, align 8
  br label %if.end22

if.else:                                          ; preds = %if.then14
  %25 = load double* %z, align 8
  %26 = load double* %cc, align 8
  %div21 = fdiv double %25, %26
  store double %div21, double* %ss, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then19
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then9
  %27 = load i32* %ix, align 4
  %cmp24 = icmp sgt i32 %27, 1207959552
  br i1 %cmp24, label %if.then25, label %if.else29

if.then25:                                        ; preds = %if.end23
  %28 = load double* %ss, align 8
  %mul26 = fmul double 0x3FE20DD750429B6D, %28
  %29 = load double* %x.addr, align 8
  %call27 = call double @__ieee754_sqrt(double %29) #5
  %div28 = fdiv double %mul26, %call27
  store double %div28, double* %z, align 8
  br label %if.end38

if.else29:                                        ; preds = %if.end23
  %30 = load double* %x.addr, align 8
  %call30 = call double @pone(double %30) #5
  store double %call30, double* %u, align 8
  %31 = load double* %x.addr, align 8
  %call31 = call double @qone(double %31) #5
  store double %call31, double* %v, align 8
  %32 = load double* %u, align 8
  %33 = load double* %ss, align 8
  %mul32 = fmul double %32, %33
  %34 = load double* %v, align 8
  %35 = load double* %cc, align 8
  %mul33 = fmul double %34, %35
  %add34 = fadd double %mul32, %mul33
  %mul35 = fmul double 0x3FE20DD750429B6D, %add34
  %36 = load double* %x.addr, align 8
  %call36 = call double @__ieee754_sqrt(double %36) #5
  %div37 = fdiv double %mul35, %call36
  store double %div37, double* %z, align 8
  br label %if.end38

if.end38:                                         ; preds = %if.else29, %if.then25
  %37 = load double* %z, align 8
  store double %37, double* %retval
  br label %return

if.end39:                                         ; preds = %if.end7
  %38 = load i32* %ix, align 4
  %cmp40 = icmp sle i32 %38, 1016070144
  br i1 %cmp40, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.end39
  %39 = load double* %x.addr, align 8
  %div42 = fdiv double 0xBFE45F306DC9C883, %39
  store double %div42, double* %retval
  br label %return

if.end43:                                         ; preds = %if.end39
  %40 = load double* %x.addr, align 8
  %41 = load double* %x.addr, align 8
  %mul44 = fmul double %40, %41
  store double %mul44, double* %z, align 8
  %42 = load double* getelementptr inbounds ([5 x double]* @U057, i32 0, i32 0), align 4
  %43 = load double* %z, align 8
  %44 = load double* getelementptr inbounds ([5 x double]* @U057, i32 0, i32 1), align 4
  %45 = load double* %z, align 8
  %46 = load double* getelementptr inbounds ([5 x double]* @U057, i32 0, i32 2), align 4
  %47 = load double* %z, align 8
  %48 = load double* getelementptr inbounds ([5 x double]* @U057, i32 0, i32 3), align 4
  %49 = load double* %z, align 8
  %50 = load double* getelementptr inbounds ([5 x double]* @U057, i32 0, i32 4), align 4
  %mul45 = fmul double %49, %50
  %add46 = fadd double %48, %mul45
  %mul47 = fmul double %47, %add46
  %add48 = fadd double %46, %mul47
  %mul49 = fmul double %45, %add48
  %add50 = fadd double %44, %mul49
  %mul51 = fmul double %43, %add50
  %add52 = fadd double %42, %mul51
  store double %add52, double* %u, align 8
  %51 = load double* %z, align 8
  %52 = load double* getelementptr inbounds ([5 x double]* @V058, i32 0, i32 0), align 4
  %53 = load double* %z, align 8
  %54 = load double* getelementptr inbounds ([5 x double]* @V058, i32 0, i32 1), align 4
  %55 = load double* %z, align 8
  %56 = load double* getelementptr inbounds ([5 x double]* @V058, i32 0, i32 2), align 4
  %57 = load double* %z, align 8
  %58 = load double* getelementptr inbounds ([5 x double]* @V058, i32 0, i32 3), align 4
  %59 = load double* %z, align 8
  %60 = load double* getelementptr inbounds ([5 x double]* @V058, i32 0, i32 4), align 4
  %mul53 = fmul double %59, %60
  %add54 = fadd double %58, %mul53
  %mul55 = fmul double %57, %add54
  %add56 = fadd double %56, %mul55
  %mul57 = fmul double %55, %add56
  %add58 = fadd double %54, %mul57
  %mul59 = fmul double %53, %add58
  %add60 = fadd double %52, %mul59
  %mul61 = fmul double %51, %add60
  %add62 = fadd double 1.000000e+00, %mul61
  store double %add62, double* %v, align 8
  %61 = load double* %x.addr, align 8
  %62 = load double* %u, align 8
  %63 = load double* %v, align 8
  %div63 = fdiv double %62, %63
  %mul64 = fmul double %61, %div63
  %64 = load double* %x.addr, align 8
  %call65 = call double @__ieee754_j1(double %64) #5
  %65 = load double* %x.addr, align 8
  %call66 = call double @__ieee754_log(double %65) #5
  %mul67 = fmul double %call65, %call66
  %66 = load double* %x.addr, align 8
  %div68 = fdiv double 1.000000e+00, %66
  %sub69 = fsub double %mul67, %div68
  %mul70 = fmul double 0x3FE45F306DC9C883, %sub69
  %add71 = fadd double %mul64, %mul70
  store double %add71, double* %retval
  br label %return

return:                                           ; preds = %if.end43, %if.then41, %if.end38, %if.then6, %if.then3, %if.then
  %67 = load double* %retval
  ret double %67
}

; Function Attrs: nounwind
define double @__ieee754_jn(i32 %n, double %x) #2 {
entry:
  %retval = alloca double, align 4
  %n.addr = alloca i32, align 4
  %x.addr = alloca double, align 8
  %i = alloca i32, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %lx = alloca i32, align 4
  %sgn = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %temp = alloca double, align 8
  %di = alloca double, align 8
  %z = alloca double, align 8
  %w = alloca double, align 8
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %t = alloca double, align 8
  %v = alloca double, align 8
  %q0 = alloca double, align 8
  %q1 = alloca double, align 8
  %h = alloca double, align 8
  %tmp = alloca double, align 8
  %k = alloca i32, align 4
  %m = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 2147483647, %3
  store i32 %and, i32* %ix, align 4
  %4 = load i32* %ix, align 4
  %5 = load i32* %lx, align 4
  %6 = load i32* %lx, align 4
  %sub = sub nsw i32 0, %6
  %or = or i32 %5, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %4, %shr
  %cmp = icmp ugt i32 %or2, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %7 = load double* %x.addr, align 8
  %8 = load double* %x.addr, align 8
  %add = fadd double %7, %8
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %9 = load i32* %n.addr, align 4
  %cmp3 = icmp slt i32 %9, 0
  br i1 %cmp3, label %if.then4, label %if.end7

if.then4:                                         ; preds = %if.end
  %10 = load i32* %n.addr, align 4
  %sub5 = sub nsw i32 0, %10
  store i32 %sub5, i32* %n.addr, align 4
  %11 = load double* %x.addr, align 8
  %sub6 = fsub double -0.000000e+00, %11
  store double %sub6, double* %x.addr, align 8
  %12 = load i32* %hx, align 4
  %xor = xor i32 %12, -2147483648
  store i32 %xor, i32* %hx, align 4
  br label %if.end7

if.end7:                                          ; preds = %if.then4, %if.end
  %13 = load i32* %n.addr, align 4
  %cmp8 = icmp eq i32 %13, 0
  br i1 %cmp8, label %if.then9, label %if.end10

if.then9:                                         ; preds = %if.end7
  %14 = load double* %x.addr, align 8
  %call = call double @__ieee754_j0(double %14) #5
  store double %call, double* %retval
  br label %return

if.end10:                                         ; preds = %if.end7
  %15 = load i32* %n.addr, align 4
  %cmp11 = icmp eq i32 %15, 1
  br i1 %cmp11, label %if.then12, label %if.end14

if.then12:                                        ; preds = %if.end10
  %16 = load double* %x.addr, align 8
  %call13 = call double @__ieee754_j1(double %16) #5
  store double %call13, double* %retval
  br label %return

if.end14:                                         ; preds = %if.end10
  %17 = load i32* %n.addr, align 4
  %and15 = and i32 %17, 1
  %18 = load i32* %hx, align 4
  %shr16 = ashr i32 %18, 31
  %and17 = and i32 %and15, %shr16
  store i32 %and17, i32* %sgn, align 4
  %19 = load double* %x.addr, align 8
  %call18 = call double @fabs(double %19) #6
  store double %call18, double* %x.addr, align 8
  %20 = load i32* %ix, align 4
  %21 = load i32* %lx, align 4
  %or19 = or i32 %20, %21
  %cmp20 = icmp eq i32 %or19, 0
  br i1 %cmp20, label %if.then22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end14
  %22 = load i32* %ix, align 4
  %cmp21 = icmp sge i32 %22, 2146435072
  br i1 %cmp21, label %if.then22, label %if.else

if.then22:                                        ; preds = %lor.lhs.false, %if.end14
  store double 0.000000e+00, double* %b, align 8
  br label %if.end159

if.else:                                          ; preds = %lor.lhs.false
  %23 = load i32* %n.addr, align 4
  %conv = sitofp i32 %23 to double
  %24 = load double* %x.addr, align 8
  %cmp23 = fcmp ole double %conv, %24
  br i1 %cmp23, label %if.then25, label %if.else59

if.then25:                                        ; preds = %if.else
  %25 = load i32* %ix, align 4
  %cmp26 = icmp sge i32 %25, 1389363200
  br i1 %cmp26, label %if.then28, label %if.else48

if.then28:                                        ; preds = %if.then25
  %26 = load i32* %n.addr, align 4
  %and29 = and i32 %26, 3
  switch i32 %and29, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb33
    i32 2, label %sw.bb38
    i32 3, label %sw.bb43
  ]

sw.bb:                                            ; preds = %if.then28
  %27 = load double* %x.addr, align 8
  %call30 = call double @cos(double %27) #4
  %28 = load double* %x.addr, align 8
  %call31 = call double @sin(double %28) #4
  %add32 = fadd double %call30, %call31
  store double %add32, double* %temp, align 8
  br label %sw.epilog

sw.bb33:                                          ; preds = %if.then28
  %29 = load double* %x.addr, align 8
  %call34 = call double @cos(double %29) #4
  %sub35 = fsub double -0.000000e+00, %call34
  %30 = load double* %x.addr, align 8
  %call36 = call double @sin(double %30) #4
  %add37 = fadd double %sub35, %call36
  store double %add37, double* %temp, align 8
  br label %sw.epilog

sw.bb38:                                          ; preds = %if.then28
  %31 = load double* %x.addr, align 8
  %call39 = call double @cos(double %31) #4
  %sub40 = fsub double -0.000000e+00, %call39
  %32 = load double* %x.addr, align 8
  %call41 = call double @sin(double %32) #4
  %sub42 = fsub double %sub40, %call41
  store double %sub42, double* %temp, align 8
  br label %sw.epilog

sw.bb43:                                          ; preds = %if.then28
  %33 = load double* %x.addr, align 8
  %call44 = call double @cos(double %33) #4
  %34 = load double* %x.addr, align 8
  %call45 = call double @sin(double %34) #4
  %sub46 = fsub double %call44, %call45
  store double %sub46, double* %temp, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb43, %sw.bb38, %sw.bb33, %sw.bb, %if.then28
  %35 = load double* %temp, align 8
  %mul = fmul double 0x3FE20DD750429B6D, %35
  %36 = load double* %x.addr, align 8
  %call47 = call double @__ieee754_sqrt(double %36) #5
  %div = fdiv double %mul, %call47
  store double %div, double* %b, align 8
  br label %if.end58

if.else48:                                        ; preds = %if.then25
  %37 = load double* %x.addr, align 8
  %call49 = call double @__ieee754_j0(double %37) #5
  store double %call49, double* %a, align 8
  %38 = load double* %x.addr, align 8
  %call50 = call double @__ieee754_j1(double %38) #5
  store double %call50, double* %b, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else48
  %39 = load i32* %i, align 4
  %40 = load i32* %n.addr, align 4
  %cmp51 = icmp slt i32 %39, %40
  br i1 %cmp51, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %41 = load double* %b, align 8
  store double %41, double* %temp, align 8
  %42 = load double* %b, align 8
  %43 = load i32* %i, align 4
  %44 = load i32* %i, align 4
  %add53 = add nsw i32 %43, %44
  %conv54 = sitofp i32 %add53 to double
  %45 = load double* %x.addr, align 8
  %div55 = fdiv double %conv54, %45
  %mul56 = fmul double %42, %div55
  %46 = load double* %a, align 8
  %sub57 = fsub double %mul56, %46
  store double %sub57, double* %b, align 8
  %47 = load double* %temp, align 8
  store double %47, double* %a, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %48 = load i32* %i, align 4
  %inc = add nsw i32 %48, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end58

if.end58:                                         ; preds = %for.end, %sw.epilog
  br label %if.end158

if.else59:                                        ; preds = %if.else
  %49 = load i32* %ix, align 4
  %cmp60 = icmp slt i32 %49, 1041235968
  br i1 %cmp60, label %if.then62, label %if.else80

if.then62:                                        ; preds = %if.else59
  %50 = load i32* %n.addr, align 4
  %cmp63 = icmp sgt i32 %50, 33
  br i1 %cmp63, label %if.then65, label %if.else66

if.then65:                                        ; preds = %if.then62
  store double 0.000000e+00, double* %b, align 8
  br label %if.end79

if.else66:                                        ; preds = %if.then62
  %51 = load double* %x.addr, align 8
  %mul67 = fmul double %51, 5.000000e-01
  store double %mul67, double* %temp, align 8
  %52 = load double* %temp, align 8
  store double %52, double* %b, align 8
  store double 1.000000e+00, double* %a, align 8
  store i32 2, i32* %i, align 4
  br label %for.cond68

for.cond68:                                       ; preds = %for.inc75, %if.else66
  %53 = load i32* %i, align 4
  %54 = load i32* %n.addr, align 4
  %cmp69 = icmp sle i32 %53, %54
  br i1 %cmp69, label %for.body71, label %for.end77

for.body71:                                       ; preds = %for.cond68
  %55 = load i32* %i, align 4
  %conv72 = sitofp i32 %55 to double
  %56 = load double* %a, align 8
  %mul73 = fmul double %56, %conv72
  store double %mul73, double* %a, align 8
  %57 = load double* %temp, align 8
  %58 = load double* %b, align 8
  %mul74 = fmul double %58, %57
  store double %mul74, double* %b, align 8
  br label %for.inc75

for.inc75:                                        ; preds = %for.body71
  %59 = load i32* %i, align 4
  %inc76 = add nsw i32 %59, 1
  store i32 %inc76, i32* %i, align 4
  br label %for.cond68

for.end77:                                        ; preds = %for.cond68
  %60 = load double* %b, align 8
  %61 = load double* %a, align 8
  %div78 = fdiv double %60, %61
  store double %div78, double* %b, align 8
  br label %if.end79

if.end79:                                         ; preds = %for.end77, %if.then65
  br label %if.end157

if.else80:                                        ; preds = %if.else59
  %62 = load i32* %n.addr, align 4
  %63 = load i32* %n.addr, align 4
  %add83 = add nsw i32 %62, %63
  %conv84 = sitofp i32 %add83 to double
  %64 = load double* %x.addr, align 8
  %div85 = fdiv double %conv84, %64
  store double %div85, double* %w, align 8
  %65 = load double* %x.addr, align 8
  %div86 = fdiv double 2.000000e+00, %65
  store double %div86, double* %h, align 8
  %66 = load double* %w, align 8
  store double %66, double* %q0, align 8
  %67 = load double* %w, align 8
  %68 = load double* %h, align 8
  %add87 = fadd double %67, %68
  store double %add87, double* %z, align 8
  %69 = load double* %w, align 8
  %70 = load double* %z, align 8
  %mul88 = fmul double %69, %70
  %sub89 = fsub double %mul88, 1.000000e+00
  store double %sub89, double* %q1, align 8
  store i32 1, i32* %k, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.else80
  %71 = load double* %q1, align 8
  %cmp90 = fcmp olt double %71, 1.000000e+09
  br i1 %cmp90, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %72 = load i32* %k, align 4
  %add92 = add nsw i32 %72, 1
  store i32 %add92, i32* %k, align 4
  %73 = load double* %h, align 8
  %74 = load double* %z, align 8
  %add93 = fadd double %74, %73
  store double %add93, double* %z, align 8
  %75 = load double* %z, align 8
  %76 = load double* %q1, align 8
  %mul94 = fmul double %75, %76
  %77 = load double* %q0, align 8
  %sub95 = fsub double %mul94, %77
  store double %sub95, double* %tmp, align 8
  %78 = load double* %q1, align 8
  store double %78, double* %q0, align 8
  %79 = load double* %tmp, align 8
  store double %79, double* %q1, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %80 = load i32* %n.addr, align 4
  %81 = load i32* %n.addr, align 4
  %add96 = add nsw i32 %80, %81
  store i32 %add96, i32* %m, align 4
  store double 0.000000e+00, double* %t, align 8
  %82 = load i32* %n.addr, align 4
  %83 = load i32* %k, align 4
  %add97 = add nsw i32 %82, %83
  %mul98 = mul nsw i32 2, %add97
  store i32 %mul98, i32* %i, align 4
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc107, %while.end
  %84 = load i32* %i, align 4
  %85 = load i32* %m, align 4
  %cmp100 = icmp sge i32 %84, %85
  br i1 %cmp100, label %for.body102, label %for.end109

for.body102:                                      ; preds = %for.cond99
  %86 = load i32* %i, align 4
  %conv103 = sitofp i32 %86 to double
  %87 = load double* %x.addr, align 8
  %div104 = fdiv double %conv103, %87
  %88 = load double* %t, align 8
  %sub105 = fsub double %div104, %88
  %div106 = fdiv double 1.000000e+00, %sub105
  store double %div106, double* %t, align 8
  br label %for.inc107

for.inc107:                                       ; preds = %for.body102
  %89 = load i32* %i, align 4
  %sub108 = sub nsw i32 %89, 2
  store i32 %sub108, i32* %i, align 4
  br label %for.cond99

for.end109:                                       ; preds = %for.cond99
  %90 = load double* %t, align 8
  store double %90, double* %a, align 8
  store double 1.000000e+00, double* %b, align 8
  %91 = load i32* %n.addr, align 4
  %conv110 = sitofp i32 %91 to double
  store double %conv110, double* %tmp, align 8
  %92 = load double* %x.addr, align 8
  %div111 = fdiv double 2.000000e+00, %92
  store double %div111, double* %v, align 8
  %93 = load double* %tmp, align 8
  %94 = load double* %v, align 8
  %95 = load double* %tmp, align 8
  %mul112 = fmul double %94, %95
  %call113 = call double @fabs(double %mul112) #6
  %call114 = call double @__ieee754_log(double %call113) #5
  %mul115 = fmul double %93, %call114
  store double %mul115, double* %tmp, align 8
  %96 = load double* %tmp, align 8
  %cmp116 = fcmp olt double %96, 0x40862E42FEFA39EF
  br i1 %cmp116, label %if.then118, label %if.else132

if.then118:                                       ; preds = %for.end109
  %97 = load i32* %n.addr, align 4
  %sub119 = sub nsw i32 %97, 1
  store i32 %sub119, i32* %i, align 4
  %98 = load i32* %i, align 4
  %99 = load i32* %i, align 4
  %add120 = add nsw i32 %98, %99
  %conv121 = sitofp i32 %add120 to double
  store double %conv121, double* %di, align 8
  br label %for.cond122

for.cond122:                                      ; preds = %for.inc130, %if.then118
  %100 = load i32* %i, align 4
  %cmp123 = icmp sgt i32 %100, 0
  br i1 %cmp123, label %for.body125, label %for.end131

for.body125:                                      ; preds = %for.cond122
  %101 = load double* %b, align 8
  store double %101, double* %temp, align 8
  %102 = load double* %di, align 8
  %103 = load double* %b, align 8
  %mul126 = fmul double %103, %102
  store double %mul126, double* %b, align 8
  %104 = load double* %b, align 8
  %105 = load double* %x.addr, align 8
  %div127 = fdiv double %104, %105
  %106 = load double* %a, align 8
  %sub128 = fsub double %div127, %106
  store double %sub128, double* %b, align 8
  %107 = load double* %temp, align 8
  store double %107, double* %a, align 8
  %108 = load double* %di, align 8
  %sub129 = fsub double %108, 2.000000e+00
  store double %sub129, double* %di, align 8
  br label %for.inc130

for.inc130:                                       ; preds = %for.body125
  %109 = load i32* %i, align 4
  %dec = add nsw i32 %109, -1
  store i32 %dec, i32* %i, align 4
  br label %for.cond122

for.end131:                                       ; preds = %for.cond122
  br label %if.end153

if.else132:                                       ; preds = %for.end109
  %110 = load i32* %n.addr, align 4
  %sub133 = sub nsw i32 %110, 1
  store i32 %sub133, i32* %i, align 4
  %111 = load i32* %i, align 4
  %112 = load i32* %i, align 4
  %add134 = add nsw i32 %111, %112
  %conv135 = sitofp i32 %add134 to double
  store double %conv135, double* %di, align 8
  br label %for.cond136

for.cond136:                                      ; preds = %for.inc150, %if.else132
  %113 = load i32* %i, align 4
  %cmp137 = icmp sgt i32 %113, 0
  br i1 %cmp137, label %for.body139, label %for.end152

for.body139:                                      ; preds = %for.cond136
  %114 = load double* %b, align 8
  store double %114, double* %temp, align 8
  %115 = load double* %di, align 8
  %116 = load double* %b, align 8
  %mul140 = fmul double %116, %115
  store double %mul140, double* %b, align 8
  %117 = load double* %b, align 8
  %118 = load double* %x.addr, align 8
  %div141 = fdiv double %117, %118
  %119 = load double* %a, align 8
  %sub142 = fsub double %div141, %119
  store double %sub142, double* %b, align 8
  %120 = load double* %temp, align 8
  store double %120, double* %a, align 8
  %121 = load double* %di, align 8
  %sub143 = fsub double %121, 2.000000e+00
  store double %sub143, double* %di, align 8
  %122 = load double* %b, align 8
  %cmp144 = fcmp ogt double %122, 1.000000e+100
  br i1 %cmp144, label %if.then146, label %if.end149

if.then146:                                       ; preds = %for.body139
  %123 = load double* %b, align 8
  %124 = load double* %a, align 8
  %div147 = fdiv double %124, %123
  store double %div147, double* %a, align 8
  %125 = load double* %b, align 8
  %126 = load double* %t, align 8
  %div148 = fdiv double %126, %125
  store double %div148, double* %t, align 8
  store double 1.000000e+00, double* %b, align 8
  br label %if.end149

if.end149:                                        ; preds = %if.then146, %for.body139
  br label %for.inc150

for.inc150:                                       ; preds = %if.end149
  %127 = load i32* %i, align 4
  %dec151 = add nsw i32 %127, -1
  store i32 %dec151, i32* %i, align 4
  br label %for.cond136

for.end152:                                       ; preds = %for.cond136
  br label %if.end153

if.end153:                                        ; preds = %for.end152, %for.end131
  %128 = load double* %t, align 8
  %129 = load double* %x.addr, align 8
  %call154 = call double @__ieee754_j0(double %129) #5
  %mul155 = fmul double %128, %call154
  %130 = load double* %b, align 8
  %div156 = fdiv double %mul155, %130
  store double %div156, double* %b, align 8
  br label %if.end157

if.end157:                                        ; preds = %if.end153, %if.end79
  br label %if.end158

if.end158:                                        ; preds = %if.end157, %if.end58
  br label %if.end159

if.end159:                                        ; preds = %if.end158, %if.then22
  %131 = load i32* %sgn, align 4
  %cmp160 = icmp eq i32 %131, 1
  br i1 %cmp160, label %if.then162, label %if.else164

if.then162:                                       ; preds = %if.end159
  %132 = load double* %b, align 8
  %sub163 = fsub double -0.000000e+00, %132
  store double %sub163, double* %retval
  br label %return

if.else164:                                       ; preds = %if.end159
  %133 = load double* %b, align 8
  store double %133, double* %retval
  br label %return

return:                                           ; preds = %if.else164, %if.then162, %if.then12, %if.then9, %if.then
  %134 = load double* %retval
  ret double %134
}

; Function Attrs: nounwind
define double @__ieee754_yn(i32 %n, double %x) #2 {
entry:
  %retval = alloca double, align 4
  %n.addr = alloca i32, align 4
  %x.addr = alloca double, align 8
  %i = alloca i32, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %lx = alloca i32, align 4
  %sign = alloca i32, align 4
  %a = alloca double, align 8
  %b = alloca double, align 8
  %temp = alloca double, align 8
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %high = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %gh_u67 = alloca %union.ieee_double_shape_type, align 4
  store i32 %n, i32* %n.addr, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 2147483647, %3
  store i32 %and, i32* %ix, align 4
  %4 = load i32* %ix, align 4
  %5 = load i32* %lx, align 4
  %6 = load i32* %lx, align 4
  %sub = sub nsw i32 0, %6
  %or = or i32 %5, %sub
  %shr = lshr i32 %or, 31
  %or2 = or i32 %4, %shr
  %cmp = icmp ugt i32 %or2, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %7 = load double* %x.addr, align 8
  %8 = load double* %x.addr, align 8
  %add = fadd double %7, %8
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %9 = load i32* %ix, align 4
  %10 = load i32* %lx, align 4
  %or3 = or i32 %9, %10
  %cmp4 = icmp eq i32 %or3, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  store double 0xFFF0000000000000, double* %retval
  br label %return

if.end6:                                          ; preds = %if.end
  %11 = load i32* %hx, align 4
  %cmp7 = icmp slt i32 %11, 0
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end6
  store double 0x7FF8000000000000, double* %retval
  br label %return

if.end9:                                          ; preds = %if.end6
  store i32 1, i32* %sign, align 4
  %12 = load i32* %n.addr, align 4
  %cmp10 = icmp slt i32 %12, 0
  br i1 %cmp10, label %if.then11, label %if.end15

if.then11:                                        ; preds = %if.end9
  %13 = load i32* %n.addr, align 4
  %sub12 = sub nsw i32 0, %13
  store i32 %sub12, i32* %n.addr, align 4
  %14 = load i32* %n.addr, align 4
  %and13 = and i32 %14, 1
  %shl = shl i32 %and13, 1
  %sub14 = sub nsw i32 1, %shl
  store i32 %sub14, i32* %sign, align 4
  br label %if.end15

if.end15:                                         ; preds = %if.then11, %if.end9
  %15 = load i32* %n.addr, align 4
  %cmp16 = icmp eq i32 %15, 0
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.end15
  %16 = load double* %x.addr, align 8
  %call = call double @__ieee754_y0(double %16) #5
  store double %call, double* %retval
  br label %return

if.end18:                                         ; preds = %if.end15
  %17 = load i32* %n.addr, align 4
  %cmp19 = icmp eq i32 %17, 1
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end18
  %18 = load i32* %sign, align 4
  %conv = sitofp i32 %18 to double
  %19 = load double* %x.addr, align 8
  %call21 = call double @__ieee754_y1(double %19) #5
  %mul = fmul double %conv, %call21
  store double %mul, double* %retval
  br label %return

if.end22:                                         ; preds = %if.end18
  %20 = load i32* %ix, align 4
  %cmp23 = icmp eq i32 %20, 2146435072
  br i1 %cmp23, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end22
  store double 0.000000e+00, double* %retval
  br label %return

if.end26:                                         ; preds = %if.end22
  %21 = load i32* %ix, align 4
  %cmp27 = icmp sge i32 %21, 1389363200
  br i1 %cmp27, label %if.then29, label %if.else

if.then29:                                        ; preds = %if.end26
  %22 = load i32* %n.addr, align 4
  %and30 = and i32 %22, 3
  switch i32 %and30, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb34
    i32 2, label %sw.bb39
    i32 3, label %sw.bb44
  ]

sw.bb:                                            ; preds = %if.then29
  %23 = load double* %x.addr, align 8
  %call31 = call double @sin(double %23) #4
  %24 = load double* %x.addr, align 8
  %call32 = call double @cos(double %24) #4
  %sub33 = fsub double %call31, %call32
  store double %sub33, double* %temp, align 8
  br label %sw.epilog

sw.bb34:                                          ; preds = %if.then29
  %25 = load double* %x.addr, align 8
  %call35 = call double @sin(double %25) #4
  %sub36 = fsub double -0.000000e+00, %call35
  %26 = load double* %x.addr, align 8
  %call37 = call double @cos(double %26) #4
  %sub38 = fsub double %sub36, %call37
  store double %sub38, double* %temp, align 8
  br label %sw.epilog

sw.bb39:                                          ; preds = %if.then29
  %27 = load double* %x.addr, align 8
  %call40 = call double @sin(double %27) #4
  %sub41 = fsub double -0.000000e+00, %call40
  %28 = load double* %x.addr, align 8
  %call42 = call double @cos(double %28) #4
  %add43 = fadd double %sub41, %call42
  store double %add43, double* %temp, align 8
  br label %sw.epilog

sw.bb44:                                          ; preds = %if.then29
  %29 = load double* %x.addr, align 8
  %call45 = call double @sin(double %29) #4
  %30 = load double* %x.addr, align 8
  %call46 = call double @cos(double %30) #4
  %add47 = fadd double %call45, %call46
  store double %add47, double* %temp, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb44, %sw.bb39, %sw.bb34, %sw.bb, %if.then29
  %31 = load double* %temp, align 8
  %mul48 = fmul double 0x3FE20DD750429B6D, %31
  %32 = load double* %x.addr, align 8
  %call49 = call double @__ieee754_sqrt(double %32) #5
  %div = fdiv double %mul48, %call49
  store double %div, double* %b, align 8
  br label %if.end72

if.else:                                          ; preds = %if.end26
  %33 = load double* %x.addr, align 8
  %call50 = call double @__ieee754_y0(double %33) #5
  store double %call50, double* %a, align 8
  %34 = load double* %x.addr, align 8
  %call51 = call double @__ieee754_y1(double %34) #5
  store double %call51, double* %b, align 8
  br label %do.body52

do.body52:                                        ; preds = %if.else
  %35 = load double* %b, align 8
  %value53 = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %35, double* %value53, align 4
  %parts54 = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw55 = getelementptr inbounds %struct.anon* %parts54, i32 0, i32 1
  %36 = load i32* %msw55, align 4
  store i32 %36, i32* %high, align 4
  br label %do.end56

do.end56:                                         ; preds = %do.body52
  store i32 1, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end56
  %37 = load i32* %i, align 4
  %38 = load i32* %n.addr, align 4
  %cmp57 = icmp slt i32 %37, %38
  br i1 %cmp57, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %39 = load i32* %high, align 4
  %cmp59 = icmp ne i32 %39, -1048576
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %40 = phi i1 [ false, %for.cond ], [ %cmp59, %land.rhs ]
  br i1 %40, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %41 = load double* %b, align 8
  store double %41, double* %temp, align 8
  %42 = load i32* %i, align 4
  %43 = load i32* %i, align 4
  %add61 = add nsw i32 %42, %43
  %conv62 = sitofp i32 %add61 to double
  %44 = load double* %x.addr, align 8
  %div63 = fdiv double %conv62, %44
  %45 = load double* %b, align 8
  %mul64 = fmul double %div63, %45
  %46 = load double* %a, align 8
  %sub65 = fsub double %mul64, %46
  store double %sub65, double* %b, align 8
  br label %do.body66

do.body66:                                        ; preds = %for.body
  %47 = load double* %b, align 8
  %value68 = bitcast %union.ieee_double_shape_type* %gh_u67 to double*
  store double %47, double* %value68, align 4
  %parts69 = bitcast %union.ieee_double_shape_type* %gh_u67 to %struct.anon*
  %msw70 = getelementptr inbounds %struct.anon* %parts69, i32 0, i32 1
  %48 = load i32* %msw70, align 4
  store i32 %48, i32* %high, align 4
  br label %do.end71

do.end71:                                         ; preds = %do.body66
  %49 = load double* %temp, align 8
  store double %49, double* %a, align 8
  br label %for.inc

for.inc:                                          ; preds = %do.end71
  %50 = load i32* %i, align 4
  %inc = add nsw i32 %50, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end72

if.end72:                                         ; preds = %for.end, %sw.epilog
  %51 = load i32* %sign, align 4
  %cmp73 = icmp sgt i32 %51, 0
  br i1 %cmp73, label %if.then75, label %if.else76

if.then75:                                        ; preds = %if.end72
  %52 = load double* %b, align 8
  store double %52, double* %retval
  br label %return

if.else76:                                        ; preds = %if.end72
  %53 = load double* %b, align 8
  %sub77 = fsub double -0.000000e+00, %53
  store double %sub77, double* %retval
  br label %return

return:                                           ; preds = %if.else76, %if.then75, %if.then25, %if.then20, %if.then17, %if.then8, %if.then5, %if.then
  %54 = load double* %retval
  ret double %54
}

; Function Attrs: nounwind
define double @__ieee754_log10(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  %i = alloca i32, align 4
  %k = alloca i32, align 4
  %hx = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  store i32 0, i32* %k, align 4
  %3 = load i32* %hx, align 4
  %cmp = icmp slt i32 %3, 1048576
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %do.end
  %4 = load i32* %hx, align 4
  %and = and i32 %4, 2147483647
  %5 = load i32* %lx, align 4
  %or = or i32 %and, %5
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  store double 0xFFF0000000000000, double* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load i32* %hx, align 4
  %cmp4 = icmp slt i32 %6, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %7 = load double* %x.addr, align 8
  %8 = load double* %x.addr, align 8
  %sub = fsub double %7, %8
  %div = fdiv double %sub, 0.000000e+00
  store double %div, double* %retval
  br label %return

if.end6:                                          ; preds = %if.end
  %9 = load i32* %k, align 4
  %sub7 = sub nsw i32 %9, 54
  store i32 %sub7, i32* %k, align 4
  %10 = load double* %x.addr, align 8
  %mul = fmul double %10, 0x4350000000000000
  store double %mul, double* %x.addr, align 8
  br label %do.body8

do.body8:                                         ; preds = %if.end6
  %11 = load double* %x.addr, align 8
  %value9 = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %11, double* %value9, align 4
  %parts10 = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw11 = getelementptr inbounds %struct.anon* %parts10, i32 0, i32 1
  %12 = load i32* %msw11, align 4
  store i32 %12, i32* %hx, align 4
  br label %do.end12

do.end12:                                         ; preds = %do.body8
  br label %if.end13

if.end13:                                         ; preds = %do.end12, %do.end
  %13 = load i32* %hx, align 4
  %cmp14 = icmp sge i32 %13, 2146435072
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end13
  %14 = load double* %x.addr, align 8
  %15 = load double* %x.addr, align 8
  %add = fadd double %14, %15
  store double %add, double* %retval
  br label %return

if.end16:                                         ; preds = %if.end13
  %16 = load i32* %hx, align 4
  %shr = ashr i32 %16, 20
  %sub17 = sub nsw i32 %shr, 1023
  %17 = load i32* %k, align 4
  %add18 = add nsw i32 %17, %sub17
  store i32 %add18, i32* %k, align 4
  %18 = load i32* %k, align 4
  %and19 = and i32 %18, -2147483648
  %shr20 = lshr i32 %and19, 31
  store i32 %shr20, i32* %i, align 4
  %19 = load i32* %hx, align 4
  %and21 = and i32 %19, 1048575
  %20 = load i32* %i, align 4
  %sub22 = sub nsw i32 1023, %20
  %shl = shl i32 %sub22, 20
  %or23 = or i32 %and21, %shl
  store i32 %or23, i32* %hx, align 4
  %21 = load i32* %k, align 4
  %22 = load i32* %i, align 4
  %add24 = add nsw i32 %21, %22
  %conv = sitofp i32 %add24 to double
  store double %conv, double* %y, align 8
  br label %do.body25

do.body25:                                        ; preds = %if.end16
  %23 = load double* %x.addr, align 8
  %value26 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %23, double* %value26, align 4
  %24 = load i32* %hx, align 4
  %parts27 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw28 = getelementptr inbounds %struct.anon* %parts27, i32 0, i32 1
  store i32 %24, i32* %msw28, align 4
  %value29 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %25 = load double* %value29, align 4
  store double %25, double* %x.addr, align 8
  br label %do.end30

do.end30:                                         ; preds = %do.body25
  %26 = load double* %y, align 8
  %mul31 = fmul double %26, 0x3D59FEF311F12B36
  %27 = load double* %x.addr, align 8
  %call = call double @__ieee754_log(double %27) #5
  %mul32 = fmul double 0x3FDBCB7B1526E50E, %call
  %add33 = fadd double %mul31, %mul32
  store double %add33, double* %z, align 8
  %28 = load double* %z, align 8
  %29 = load double* %y, align 8
  %mul34 = fmul double %29, 0x3FD34413509F6000
  %add35 = fadd double %28, %mul34
  store double %add35, double* %retval
  br label %return

return:                                           ; preds = %do.end30, %if.then15, %if.then5, %if.then3
  %30 = load double* %retval
  ret double %30
}

; Function Attrs: nounwind
define double @__ieee754_log(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %hfsq = alloca double, align 8
  %f = alloca double, align 8
  %s = alloca double, align 8
  %z = alloca double, align 8
  %R = alloca double, align 8
  %w = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %dk = alloca double, align 8
  %k = alloca i32, align 4
  %hx = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  store i32 0, i32* %k, align 4
  %3 = load i32* %hx, align 4
  %cmp = icmp slt i32 %3, 1048576
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %do.end
  %4 = load i32* %hx, align 4
  %and = and i32 %4, 2147483647
  %5 = load i32* %lx, align 4
  %or = or i32 %and, %5
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  store double 0xFFF0000000000000, double* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %6 = load i32* %hx, align 4
  %cmp4 = icmp slt i32 %6, 0
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.end
  %7 = load double* %x.addr, align 8
  %8 = load double* %x.addr, align 8
  %sub = fsub double %7, %8
  %div = fdiv double %sub, 0.000000e+00
  store double %div, double* %retval
  br label %return

if.end6:                                          ; preds = %if.end
  %9 = load i32* %k, align 4
  %sub7 = sub nsw i32 %9, 54
  store i32 %sub7, i32* %k, align 4
  %10 = load double* %x.addr, align 8
  %mul = fmul double %10, 0x4350000000000000
  store double %mul, double* %x.addr, align 8
  br label %do.body8

do.body8:                                         ; preds = %if.end6
  %11 = load double* %x.addr, align 8
  %value9 = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %11, double* %value9, align 4
  %parts10 = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw11 = getelementptr inbounds %struct.anon* %parts10, i32 0, i32 1
  %12 = load i32* %msw11, align 4
  store i32 %12, i32* %hx, align 4
  br label %do.end12

do.end12:                                         ; preds = %do.body8
  br label %if.end13

if.end13:                                         ; preds = %do.end12, %do.end
  %13 = load i32* %hx, align 4
  %cmp14 = icmp sge i32 %13, 2146435072
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.end13
  %14 = load double* %x.addr, align 8
  %15 = load double* %x.addr, align 8
  %add = fadd double %14, %15
  store double %add, double* %retval
  br label %return

if.end16:                                         ; preds = %if.end13
  %16 = load i32* %hx, align 4
  %shr = ashr i32 %16, 20
  %sub17 = sub nsw i32 %shr, 1023
  %17 = load i32* %k, align 4
  %add18 = add nsw i32 %17, %sub17
  store i32 %add18, i32* %k, align 4
  %18 = load i32* %hx, align 4
  %and19 = and i32 %18, 1048575
  store i32 %and19, i32* %hx, align 4
  %19 = load i32* %hx, align 4
  %add20 = add nsw i32 %19, 614244
  %and21 = and i32 %add20, 1048576
  store i32 %and21, i32* %i, align 4
  br label %do.body22

do.body22:                                        ; preds = %if.end16
  %20 = load double* %x.addr, align 8
  %value23 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %20, double* %value23, align 4
  %21 = load i32* %hx, align 4
  %22 = load i32* %i, align 4
  %xor = xor i32 %22, 1072693248
  %or24 = or i32 %21, %xor
  %parts25 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw26 = getelementptr inbounds %struct.anon* %parts25, i32 0, i32 1
  store i32 %or24, i32* %msw26, align 4
  %value27 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %23 = load double* %value27, align 4
  store double %23, double* %x.addr, align 8
  br label %do.end28

do.end28:                                         ; preds = %do.body22
  %24 = load i32* %i, align 4
  %shr29 = ashr i32 %24, 20
  %25 = load i32* %k, align 4
  %add30 = add nsw i32 %25, %shr29
  store i32 %add30, i32* %k, align 4
  %26 = load double* %x.addr, align 8
  %sub31 = fsub double %26, 1.000000e+00
  store double %sub31, double* %f, align 8
  %27 = load i32* %hx, align 4
  %add32 = add nsw i32 2, %27
  %and33 = and i32 1048575, %add32
  %cmp34 = icmp slt i32 %and33, 3
  br i1 %cmp34, label %if.then35, label %if.end59

if.then35:                                        ; preds = %do.end28
  %28 = load double* %f, align 8
  %cmp36 = fcmp oeq double %28, 0.000000e+00
  br i1 %cmp36, label %if.then37, label %if.end43

if.then37:                                        ; preds = %if.then35
  %29 = load i32* %k, align 4
  %cmp38 = icmp eq i32 %29, 0
  br i1 %cmp38, label %if.then39, label %if.else

if.then39:                                        ; preds = %if.then37
  store double 0.000000e+00, double* %retval
  br label %return

if.else:                                          ; preds = %if.then37
  %30 = load i32* %k, align 4
  %conv = sitofp i32 %30 to double
  store double %conv, double* %dk, align 8
  %31 = load double* %dk, align 8
  %mul40 = fmul double %31, 0x3FE62E42FEE00000
  %32 = load double* %dk, align 8
  %mul41 = fmul double %32, 0x3DEA39EF35793C76
  %add42 = fadd double %mul40, %mul41
  store double %add42, double* %retval
  br label %return

if.end43:                                         ; preds = %if.then35
  %33 = load double* %f, align 8
  %34 = load double* %f, align 8
  %mul44 = fmul double %33, %34
  %35 = load double* %f, align 8
  %mul45 = fmul double 0x3FD5555555555555, %35
  %sub46 = fsub double 5.000000e-01, %mul45
  %mul47 = fmul double %mul44, %sub46
  store double %mul47, double* %R, align 8
  %36 = load i32* %k, align 4
  %cmp48 = icmp eq i32 %36, 0
  br i1 %cmp48, label %if.then50, label %if.else52

if.then50:                                        ; preds = %if.end43
  %37 = load double* %f, align 8
  %38 = load double* %R, align 8
  %sub51 = fsub double %37, %38
  store double %sub51, double* %retval
  br label %return

if.else52:                                        ; preds = %if.end43
  %39 = load i32* %k, align 4
  %conv53 = sitofp i32 %39 to double
  store double %conv53, double* %dk, align 8
  %40 = load double* %dk, align 8
  %mul54 = fmul double %40, 0x3FE62E42FEE00000
  %41 = load double* %R, align 8
  %42 = load double* %dk, align 8
  %mul55 = fmul double %42, 0x3DEA39EF35793C76
  %sub56 = fsub double %41, %mul55
  %43 = load double* %f, align 8
  %sub57 = fsub double %sub56, %43
  %sub58 = fsub double %mul54, %sub57
  store double %sub58, double* %retval
  br label %return

if.end59:                                         ; preds = %do.end28
  %44 = load double* %f, align 8
  %45 = load double* %f, align 8
  %add60 = fadd double 2.000000e+00, %45
  %div61 = fdiv double %44, %add60
  store double %div61, double* %s, align 8
  %46 = load i32* %k, align 4
  %conv62 = sitofp i32 %46 to double
  store double %conv62, double* %dk, align 8
  %47 = load double* %s, align 8
  %48 = load double* %s, align 8
  %mul63 = fmul double %47, %48
  store double %mul63, double* %z, align 8
  %49 = load i32* %hx, align 4
  %sub64 = sub nsw i32 %49, 398458
  store i32 %sub64, i32* %i, align 4
  %50 = load double* %z, align 8
  %51 = load double* %z, align 8
  %mul65 = fmul double %50, %51
  store double %mul65, double* %w, align 8
  %52 = load i32* %hx, align 4
  %sub66 = sub nsw i32 440401, %52
  store i32 %sub66, i32* %j, align 4
  %53 = load double* %w, align 8
  %54 = load double* %w, align 8
  %55 = load double* %w, align 8
  %mul67 = fmul double %55, 0x3FC39A09D078C69F
  %add68 = fadd double 0x3FCC71C51D8E78AF, %mul67
  %mul69 = fmul double %54, %add68
  %add70 = fadd double 0x3FD999999997FA04, %mul69
  %mul71 = fmul double %53, %add70
  store double %mul71, double* %t1, align 8
  %56 = load double* %z, align 8
  %57 = load double* %w, align 8
  %58 = load double* %w, align 8
  %59 = load double* %w, align 8
  %mul72 = fmul double %59, 0x3FC2F112DF3E5244
  %add73 = fadd double 0x3FC7466496CB03DE, %mul72
  %mul74 = fmul double %58, %add73
  %add75 = fadd double 0x3FD2492494229359, %mul74
  %mul76 = fmul double %57, %add75
  %add77 = fadd double 0x3FE5555555555593, %mul76
  %mul78 = fmul double %56, %add77
  store double %mul78, double* %t2, align 8
  %60 = load i32* %j, align 4
  %61 = load i32* %i, align 4
  %or79 = or i32 %61, %60
  store i32 %or79, i32* %i, align 4
  %62 = load double* %t2, align 8
  %63 = load double* %t1, align 8
  %add80 = fadd double %62, %63
  store double %add80, double* %R, align 8
  %64 = load i32* %i, align 4
  %cmp81 = icmp sgt i32 %64, 0
  br i1 %cmp81, label %if.then83, label %if.else102

if.then83:                                        ; preds = %if.end59
  %65 = load double* %f, align 8
  %mul84 = fmul double 5.000000e-01, %65
  %66 = load double* %f, align 8
  %mul85 = fmul double %mul84, %66
  store double %mul85, double* %hfsq, align 8
  %67 = load i32* %k, align 4
  %cmp86 = icmp eq i32 %67, 0
  br i1 %cmp86, label %if.then88, label %if.else93

if.then88:                                        ; preds = %if.then83
  %68 = load double* %f, align 8
  %69 = load double* %hfsq, align 8
  %70 = load double* %s, align 8
  %71 = load double* %hfsq, align 8
  %72 = load double* %R, align 8
  %add89 = fadd double %71, %72
  %mul90 = fmul double %70, %add89
  %sub91 = fsub double %69, %mul90
  %sub92 = fsub double %68, %sub91
  store double %sub92, double* %retval
  br label %return

if.else93:                                        ; preds = %if.then83
  %73 = load double* %dk, align 8
  %mul94 = fmul double %73, 0x3FE62E42FEE00000
  %74 = load double* %hfsq, align 8
  %75 = load double* %s, align 8
  %76 = load double* %hfsq, align 8
  %77 = load double* %R, align 8
  %add95 = fadd double %76, %77
  %mul96 = fmul double %75, %add95
  %78 = load double* %dk, align 8
  %mul97 = fmul double %78, 0x3DEA39EF35793C76
  %add98 = fadd double %mul96, %mul97
  %sub99 = fsub double %74, %add98
  %79 = load double* %f, align 8
  %sub100 = fsub double %sub99, %79
  %sub101 = fsub double %mul94, %sub100
  store double %sub101, double* %retval
  br label %return

if.else102:                                       ; preds = %if.end59
  %80 = load i32* %k, align 4
  %cmp103 = icmp eq i32 %80, 0
  br i1 %cmp103, label %if.then105, label %if.else109

if.then105:                                       ; preds = %if.else102
  %81 = load double* %f, align 8
  %82 = load double* %s, align 8
  %83 = load double* %f, align 8
  %84 = load double* %R, align 8
  %sub106 = fsub double %83, %84
  %mul107 = fmul double %82, %sub106
  %sub108 = fsub double %81, %mul107
  store double %sub108, double* %retval
  br label %return

if.else109:                                       ; preds = %if.else102
  %85 = load double* %dk, align 8
  %mul110 = fmul double %85, 0x3FE62E42FEE00000
  %86 = load double* %s, align 8
  %87 = load double* %f, align 8
  %88 = load double* %R, align 8
  %sub111 = fsub double %87, %88
  %mul112 = fmul double %86, %sub111
  %89 = load double* %dk, align 8
  %mul113 = fmul double %89, 0x3DEA39EF35793C76
  %sub114 = fsub double %mul112, %mul113
  %90 = load double* %f, align 8
  %sub115 = fsub double %sub114, %90
  %sub116 = fsub double %mul110, %sub115
  store double %sub116, double* %retval
  br label %return

return:                                           ; preds = %if.else109, %if.then105, %if.else93, %if.then88, %if.else52, %if.then50, %if.else, %if.then39, %if.then15, %if.then5, %if.then3
  %91 = load double* %retval
  ret double %91
}

; Function Attrs: nounwind
define double @__ieee754_pow(double %x, double %y) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  %z = alloca double, align 8
  %ax = alloca double, align 8
  %z_h = alloca double, align 8
  %z_l = alloca double, align 8
  %p_h = alloca double, align 8
  %p_l = alloca double, align 8
  %y1 = alloca double, align 8
  %t1 = alloca double, align 8
  %t2 = alloca double, align 8
  %r = alloca double, align 8
  %s = alloca double, align 8
  %t = alloca double, align 8
  %u = alloca double, align 8
  %v = alloca double, align 8
  %w = alloca double, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %yisint = alloca i32, align 4
  %n = alloca i32, align 4
  %hx = alloca i32, align 4
  %hy = alloca i32, align 4
  %ix = alloca i32, align 4
  %iy = alloca i32, align 4
  %lx = alloca i32, align 4
  %ly = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %ew_u3 = alloca %union.ieee_double_shape_type, align 4
  %sl_u = alloca %union.ieee_double_shape_type, align 4
  %s2 = alloca double, align 8
  %s_h = alloca double, align 8
  %s_l = alloca double, align 8
  %t_h = alloca double, align 8
  %t_l = alloca double, align 8
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  %sl_u219 = alloca %union.ieee_double_shape_type, align 4
  %sh_u226 = alloca %union.ieee_double_shape_type, align 4
  %sl_u265 = alloca %union.ieee_double_shape_type, align 4
  %sl_u280 = alloca %union.ieee_double_shape_type, align 4
  %sl_u299 = alloca %union.ieee_double_shape_type, align 4
  %sl_u320 = alloca %union.ieee_double_shape_type, align 4
  %ew_u333 = alloca %union.ieee_double_shape_type, align 4
  %sh_u396 = alloca %union.ieee_double_shape_type, align 4
  %sl_u417 = alloca %union.ieee_double_shape_type, align 4
  %gh_u452 = alloca %union.ieee_double_shape_type, align 4
  %sh_u466 = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body2

do.body2:                                         ; preds = %do.end
  %3 = load double* %y.addr, align 8
  %value4 = bitcast %union.ieee_double_shape_type* %ew_u3 to double*
  store double %3, double* %value4, align 4
  %parts5 = bitcast %union.ieee_double_shape_type* %ew_u3 to %struct.anon*
  %msw6 = getelementptr inbounds %struct.anon* %parts5, i32 0, i32 1
  %4 = load i32* %msw6, align 4
  store i32 %4, i32* %hy, align 4
  %parts7 = bitcast %union.ieee_double_shape_type* %ew_u3 to %struct.anon*
  %lsw8 = getelementptr inbounds %struct.anon* %parts7, i32 0, i32 0
  %5 = load i32* %lsw8, align 4
  store i32 %5, i32* %ly, align 4
  br label %do.end9

do.end9:                                          ; preds = %do.body2
  %6 = load i32* %hx, align 4
  %and = and i32 %6, 2147483647
  store i32 %and, i32* %ix, align 4
  %7 = load i32* %hy, align 4
  %and10 = and i32 %7, 2147483647
  store i32 %and10, i32* %iy, align 4
  %8 = load i32* %iy, align 4
  %9 = load i32* %ly, align 4
  %or = or i32 %8, %9
  %cmp = icmp eq i32 %or, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end9
  store double 1.000000e+00, double* %retval
  br label %return

if.end:                                           ; preds = %do.end9
  %10 = load i32* %ix, align 4
  %cmp11 = icmp sgt i32 %10, 2146435072
  br i1 %cmp11, label %if.then20, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %11 = load i32* %ix, align 4
  %cmp12 = icmp eq i32 %11, 2146435072
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false14

land.lhs.true:                                    ; preds = %lor.lhs.false
  %12 = load i32* %lx, align 4
  %cmp13 = icmp ne i32 %12, 0
  br i1 %cmp13, label %if.then20, label %lor.lhs.false14

lor.lhs.false14:                                  ; preds = %land.lhs.true, %lor.lhs.false
  %13 = load i32* %iy, align 4
  %cmp15 = icmp sgt i32 %13, 2146435072
  br i1 %cmp15, label %if.then20, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %lor.lhs.false14
  %14 = load i32* %iy, align 4
  %cmp17 = icmp eq i32 %14, 2146435072
  br i1 %cmp17, label %land.lhs.true18, label %if.end24

land.lhs.true18:                                  ; preds = %lor.lhs.false16
  %15 = load i32* %ly, align 4
  %cmp19 = icmp ne i32 %15, 0
  br i1 %cmp19, label %if.then20, label %if.end24

if.then20:                                        ; preds = %land.lhs.true18, %lor.lhs.false14, %land.lhs.true, %if.end
  %16 = load i32* %ix, align 4
  %sub = sub nsw i32 %16, 1072693248
  %17 = load i32* %lx, align 4
  %or21 = or i32 %sub, %17
  %cmp22 = icmp eq i32 %or21, 0
  br i1 %cmp22, label %if.then23, label %if.else

if.then23:                                        ; preds = %if.then20
  store double 1.000000e+00, double* %retval
  br label %return

if.else:                                          ; preds = %if.then20
  %call = call double @nan(i8* getelementptr inbounds ([1 x i8]* @.str77, i32 0, i32 0)) #6
  store double %call, double* %retval
  br label %return

if.end24:                                         ; preds = %land.lhs.true18, %lor.lhs.false16
  store i32 0, i32* %yisint, align 4
  %18 = load i32* %hx, align 4
  %cmp25 = icmp slt i32 %18, 0
  br i1 %cmp25, label %if.then26, label %if.end59

if.then26:                                        ; preds = %if.end24
  %19 = load i32* %iy, align 4
  %cmp27 = icmp sge i32 %19, 1128267776
  br i1 %cmp27, label %if.then28, label %if.else29

if.then28:                                        ; preds = %if.then26
  store i32 2, i32* %yisint, align 4
  br label %if.end58

if.else29:                                        ; preds = %if.then26
  %20 = load i32* %iy, align 4
  %cmp30 = icmp sge i32 %20, 1072693248
  br i1 %cmp30, label %if.then31, label %if.end57

if.then31:                                        ; preds = %if.else29
  %21 = load i32* %iy, align 4
  %shr = ashr i32 %21, 20
  %sub32 = sub nsw i32 %shr, 1023
  store i32 %sub32, i32* %k, align 4
  %22 = load i32* %k, align 4
  %cmp33 = icmp sgt i32 %22, 20
  br i1 %cmp33, label %if.then34, label %if.else43

if.then34:                                        ; preds = %if.then31
  %23 = load i32* %ly, align 4
  %24 = load i32* %k, align 4
  %sub35 = sub nsw i32 52, %24
  %shr36 = lshr i32 %23, %sub35
  store i32 %shr36, i32* %j, align 4
  %25 = load i32* %j, align 4
  %26 = load i32* %k, align 4
  %sub37 = sub nsw i32 52, %26
  %shl = shl i32 %25, %sub37
  %27 = load i32* %ly, align 4
  %cmp38 = icmp eq i32 %shl, %27
  br i1 %cmp38, label %if.then39, label %if.end42

if.then39:                                        ; preds = %if.then34
  %28 = load i32* %j, align 4
  %and40 = and i32 %28, 1
  %sub41 = sub nsw i32 2, %and40
  store i32 %sub41, i32* %yisint, align 4
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.then34
  br label %if.end56

if.else43:                                        ; preds = %if.then31
  %29 = load i32* %ly, align 4
  %cmp44 = icmp eq i32 %29, 0
  br i1 %cmp44, label %if.then45, label %if.end55

if.then45:                                        ; preds = %if.else43
  %30 = load i32* %iy, align 4
  %31 = load i32* %k, align 4
  %sub46 = sub nsw i32 20, %31
  %shr47 = ashr i32 %30, %sub46
  store i32 %shr47, i32* %j, align 4
  %32 = load i32* %j, align 4
  %33 = load i32* %k, align 4
  %sub48 = sub nsw i32 20, %33
  %shl49 = shl i32 %32, %sub48
  %34 = load i32* %iy, align 4
  %cmp50 = icmp eq i32 %shl49, %34
  br i1 %cmp50, label %if.then51, label %if.end54

if.then51:                                        ; preds = %if.then45
  %35 = load i32* %j, align 4
  %and52 = and i32 %35, 1
  %sub53 = sub nsw i32 2, %and52
  store i32 %sub53, i32* %yisint, align 4
  br label %if.end54

if.end54:                                         ; preds = %if.then51, %if.then45
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.else43
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end42
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.else29
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then28
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.end24
  %36 = load i32* %ly, align 4
  %cmp60 = icmp eq i32 %36, 0
  br i1 %cmp60, label %if.then61, label %if.end96

if.then61:                                        ; preds = %if.end59
  %37 = load i32* %iy, align 4
  %cmp62 = icmp eq i32 %37, 2146435072
  br i1 %cmp62, label %if.then63, label %if.end79

if.then63:                                        ; preds = %if.then61
  %38 = load i32* %ix, align 4
  %sub64 = sub nsw i32 %38, 1072693248
  %39 = load i32* %lx, align 4
  %or65 = or i32 %sub64, %39
  %cmp66 = icmp eq i32 %or65, 0
  br i1 %cmp66, label %if.then67, label %if.else68

if.then67:                                        ; preds = %if.then63
  store double 1.000000e+00, double* %retval
  br label %return

if.else68:                                        ; preds = %if.then63
  %40 = load i32* %ix, align 4
  %cmp69 = icmp sge i32 %40, 1072693248
  br i1 %cmp69, label %if.then70, label %if.else72

if.then70:                                        ; preds = %if.else68
  %41 = load i32* %hy, align 4
  %cmp71 = icmp sge i32 %41, 0
  br i1 %cmp71, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then70
  %42 = load double* %y.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.then70
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %42, %cond.true ], [ 0.000000e+00, %cond.false ]
  store double %cond, double* %retval
  br label %return

if.else72:                                        ; preds = %if.else68
  %43 = load i32* %hy, align 4
  %cmp73 = icmp slt i32 %43, 0
  br i1 %cmp73, label %cond.true74, label %cond.false76

cond.true74:                                      ; preds = %if.else72
  %44 = load double* %y.addr, align 8
  %sub75 = fsub double -0.000000e+00, %44
  br label %cond.end77

cond.false76:                                     ; preds = %if.else72
  br label %cond.end77

cond.end77:                                       ; preds = %cond.false76, %cond.true74
  %cond78 = phi double [ %sub75, %cond.true74 ], [ 0.000000e+00, %cond.false76 ]
  store double %cond78, double* %retval
  br label %return

if.end79:                                         ; preds = %if.then61
  %45 = load i32* %iy, align 4
  %cmp80 = icmp eq i32 %45, 1072693248
  br i1 %cmp80, label %if.then81, label %if.end85

if.then81:                                        ; preds = %if.end79
  %46 = load i32* %hy, align 4
  %cmp82 = icmp slt i32 %46, 0
  br i1 %cmp82, label %if.then83, label %if.else84

if.then83:                                        ; preds = %if.then81
  %47 = load double* %x.addr, align 8
  %div = fdiv double 1.000000e+00, %47
  store double %div, double* %retval
  br label %return

if.else84:                                        ; preds = %if.then81
  %48 = load double* %x.addr, align 8
  store double %48, double* %retval
  br label %return

if.end85:                                         ; preds = %if.end79
  %49 = load i32* %hy, align 4
  %cmp86 = icmp eq i32 %49, 1073741824
  br i1 %cmp86, label %if.then87, label %if.end88

if.then87:                                        ; preds = %if.end85
  %50 = load double* %x.addr, align 8
  %51 = load double* %x.addr, align 8
  %mul = fmul double %50, %51
  store double %mul, double* %retval
  br label %return

if.end88:                                         ; preds = %if.end85
  %52 = load i32* %hy, align 4
  %cmp89 = icmp eq i32 %52, 1071644672
  br i1 %cmp89, label %if.then90, label %if.end95

if.then90:                                        ; preds = %if.end88
  %53 = load i32* %hx, align 4
  %cmp91 = icmp sge i32 %53, 0
  br i1 %cmp91, label %if.then92, label %if.end94

if.then92:                                        ; preds = %if.then90
  %54 = load double* %x.addr, align 8
  %call93 = call double @__ieee754_sqrt(double %54) #5
  store double %call93, double* %retval
  br label %return

if.end94:                                         ; preds = %if.then90
  br label %if.end95

if.end95:                                         ; preds = %if.end94, %if.end88
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.end59
  %55 = load double* %x.addr, align 8
  %call97 = call double @fabs(double %55) #6
  store double %call97, double* %ax, align 8
  %56 = load i32* %lx, align 4
  %cmp98 = icmp eq i32 %56, 0
  br i1 %cmp98, label %if.then99, label %if.end127

if.then99:                                        ; preds = %if.end96
  %57 = load i32* %ix, align 4
  %cmp100 = icmp eq i32 %57, 2146435072
  br i1 %cmp100, label %if.then105, label %lor.lhs.false101

lor.lhs.false101:                                 ; preds = %if.then99
  %58 = load i32* %ix, align 4
  %cmp102 = icmp eq i32 %58, 0
  br i1 %cmp102, label %if.then105, label %lor.lhs.false103

lor.lhs.false103:                                 ; preds = %lor.lhs.false101
  %59 = load i32* %ix, align 4
  %cmp104 = icmp eq i32 %59, 1072693248
  br i1 %cmp104, label %if.then105, label %if.end126

if.then105:                                       ; preds = %lor.lhs.false103, %lor.lhs.false101, %if.then99
  %60 = load double* %ax, align 8
  store double %60, double* %z, align 8
  %61 = load i32* %hy, align 4
  %cmp106 = icmp slt i32 %61, 0
  br i1 %cmp106, label %if.then107, label %if.end109

if.then107:                                       ; preds = %if.then105
  %62 = load double* %z, align 8
  %div108 = fdiv double 1.000000e+00, %62
  store double %div108, double* %z, align 8
  br label %if.end109

if.end109:                                        ; preds = %if.then107, %if.then105
  %63 = load i32* %hx, align 4
  %cmp110 = icmp slt i32 %63, 0
  br i1 %cmp110, label %if.then111, label %if.end125

if.then111:                                       ; preds = %if.end109
  %64 = load i32* %ix, align 4
  %sub112 = sub nsw i32 %64, 1072693248
  %65 = load i32* %yisint, align 4
  %or113 = or i32 %sub112, %65
  %cmp114 = icmp eq i32 %or113, 0
  br i1 %cmp114, label %if.then115, label %if.else119

if.then115:                                       ; preds = %if.then111
  %66 = load double* %z, align 8
  %67 = load double* %z, align 8
  %sub116 = fsub double %66, %67
  %68 = load double* %z, align 8
  %69 = load double* %z, align 8
  %sub117 = fsub double %68, %69
  %div118 = fdiv double %sub116, %sub117
  store double %div118, double* %z, align 8
  br label %if.end124

if.else119:                                       ; preds = %if.then111
  %70 = load i32* %yisint, align 4
  %cmp120 = icmp eq i32 %70, 1
  br i1 %cmp120, label %if.then121, label %if.end123

if.then121:                                       ; preds = %if.else119
  %71 = load double* %z, align 8
  %sub122 = fsub double -0.000000e+00, %71
  store double %sub122, double* %z, align 8
  br label %if.end123

if.end123:                                        ; preds = %if.then121, %if.else119
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.then115
  br label %if.end125

if.end125:                                        ; preds = %if.end124, %if.end109
  %72 = load double* %z, align 8
  store double %72, double* %retval
  br label %return

if.end126:                                        ; preds = %lor.lhs.false103
  br label %if.end127

if.end127:                                        ; preds = %if.end126, %if.end96
  %73 = load i32* %hx, align 4
  %shr128 = lshr i32 %73, 31
  %sub129 = sub i32 %shr128, 1
  %74 = load i32* %yisint, align 4
  %or130 = or i32 %sub129, %74
  %cmp131 = icmp eq i32 %or130, 0
  br i1 %cmp131, label %if.then132, label %if.end136

if.then132:                                       ; preds = %if.end127
  %75 = load double* %x.addr, align 8
  %76 = load double* %x.addr, align 8
  %sub133 = fsub double %75, %76
  %77 = load double* %x.addr, align 8
  %78 = load double* %x.addr, align 8
  %sub134 = fsub double %77, %78
  %div135 = fdiv double %sub133, %sub134
  store double %div135, double* %retval
  br label %return

if.end136:                                        ; preds = %if.end127
  %79 = load i32* %iy, align 4
  %cmp137 = icmp sgt i32 %79, 1105199104
  br i1 %cmp137, label %if.then138, label %if.else181

if.then138:                                       ; preds = %if.end136
  %80 = load i32* %iy, align 4
  %cmp139 = icmp sgt i32 %80, 1139802112
  br i1 %cmp139, label %if.then140, label %if.end151

if.then140:                                       ; preds = %if.then138
  %81 = load i32* %ix, align 4
  %cmp141 = icmp sle i32 %81, 1072693247
  br i1 %cmp141, label %if.then142, label %if.end145

if.then142:                                       ; preds = %if.then140
  %82 = load i32* %hy, align 4
  %cmp143 = icmp slt i32 %82, 0
  %cond144 = select i1 %cmp143, double 0x7FF0000000000000, double 0.000000e+00
  store double %cond144, double* %retval
  br label %return

if.end145:                                        ; preds = %if.then140
  %83 = load i32* %ix, align 4
  %cmp146 = icmp sge i32 %83, 1072693248
  br i1 %cmp146, label %if.then147, label %if.end150

if.then147:                                       ; preds = %if.end145
  %84 = load i32* %hy, align 4
  %cmp148 = icmp sgt i32 %84, 0
  %cond149 = select i1 %cmp148, double 0x7FF0000000000000, double 0.000000e+00
  store double %cond149, double* %retval
  br label %return

if.end150:                                        ; preds = %if.end145
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.then138
  %85 = load i32* %ix, align 4
  %cmp152 = icmp slt i32 %85, 1072693247
  br i1 %cmp152, label %if.then153, label %if.end156

if.then153:                                       ; preds = %if.end151
  %86 = load i32* %hy, align 4
  %cmp154 = icmp slt i32 %86, 0
  %cond155 = select i1 %cmp154, double 0x7FF0000000000000, double 0.000000e+00
  store double %cond155, double* %retval
  br label %return

if.end156:                                        ; preds = %if.end151
  %87 = load i32* %ix, align 4
  %cmp157 = icmp sgt i32 %87, 1072693248
  br i1 %cmp157, label %if.then158, label %if.end161

if.then158:                                       ; preds = %if.end156
  %88 = load i32* %hy, align 4
  %cmp159 = icmp sgt i32 %88, 0
  %cond160 = select i1 %cmp159, double 0x7FF0000000000000, double 0.000000e+00
  store double %cond160, double* %retval
  br label %return

if.end161:                                        ; preds = %if.end156
  %89 = load double* %ax, align 8
  %sub162 = fsub double %89, 1.000000e+00
  store double %sub162, double* %t, align 8
  %90 = load double* %t, align 8
  %91 = load double* %t, align 8
  %mul163 = fmul double %90, %91
  %92 = load double* %t, align 8
  %93 = load double* %t, align 8
  %mul164 = fmul double %93, 2.500000e-01
  %sub165 = fsub double 0x3FD5555555555555, %mul164
  %mul166 = fmul double %92, %sub165
  %sub167 = fsub double 5.000000e-01, %mul166
  %mul168 = fmul double %mul163, %sub167
  store double %mul168, double* %w, align 8
  %94 = load double* %t, align 8
  %mul169 = fmul double 0x3FF7154760000000, %94
  store double %mul169, double* %u, align 8
  %95 = load double* %t, align 8
  %mul170 = fmul double %95, 0x3E54AE0BF85DDF44
  %96 = load double* %w, align 8
  %mul171 = fmul double %96, 0x3FF71547652B82FE
  %sub172 = fsub double %mul170, %mul171
  store double %sub172, double* %v, align 8
  %97 = load double* %u, align 8
  %98 = load double* %v, align 8
  %add = fadd double %97, %98
  store double %add, double* %t1, align 8
  br label %do.body173

do.body173:                                       ; preds = %if.end161
  %99 = load double* %t1, align 8
  %value174 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  store double %99, double* %value174, align 4
  %parts175 = bitcast %union.ieee_double_shape_type* %sl_u to %struct.anon*
  %lsw176 = getelementptr inbounds %struct.anon* %parts175, i32 0, i32 0
  store i32 0, i32* %lsw176, align 4
  %value177 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  %100 = load double* %value177, align 4
  store double %100, double* %t1, align 8
  br label %do.end178

do.end178:                                        ; preds = %do.body173
  %101 = load double* %v, align 8
  %102 = load double* %t1, align 8
  %103 = load double* %u, align 8
  %sub179 = fsub double %102, %103
  %sub180 = fsub double %101, %sub179
  store double %sub180, double* %t2, align 8
  br label %if.end310

if.else181:                                       ; preds = %if.end136
  store i32 0, i32* %n, align 4
  %104 = load i32* %ix, align 4
  %cmp182 = icmp slt i32 %104, 1048576
  br i1 %cmp182, label %if.then183, label %if.end191

if.then183:                                       ; preds = %if.else181
  %105 = load double* %ax, align 8
  %mul184 = fmul double %105, 0x4340000000000000
  store double %mul184, double* %ax, align 8
  %106 = load i32* %n, align 4
  %sub185 = sub nsw i32 %106, 53
  store i32 %sub185, i32* %n, align 4
  br label %do.body186

do.body186:                                       ; preds = %if.then183
  %107 = load double* %ax, align 8
  %value187 = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %107, double* %value187, align 4
  %parts188 = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw189 = getelementptr inbounds %struct.anon* %parts188, i32 0, i32 1
  %108 = load i32* %msw189, align 4
  store i32 %108, i32* %ix, align 4
  br label %do.end190

do.end190:                                        ; preds = %do.body186
  br label %if.end191

if.end191:                                        ; preds = %do.end190, %if.else181
  %109 = load i32* %ix, align 4
  %shr192 = ashr i32 %109, 20
  %sub193 = sub nsw i32 %shr192, 1023
  %110 = load i32* %n, align 4
  %add194 = add nsw i32 %110, %sub193
  store i32 %add194, i32* %n, align 4
  %111 = load i32* %ix, align 4
  %and195 = and i32 %111, 1048575
  store i32 %and195, i32* %j, align 4
  %112 = load i32* %j, align 4
  %or196 = or i32 %112, 1072693248
  store i32 %or196, i32* %ix, align 4
  %113 = load i32* %j, align 4
  %cmp197 = icmp sle i32 %113, 235662
  br i1 %cmp197, label %if.then198, label %if.else199

if.then198:                                       ; preds = %if.end191
  store i32 0, i32* %k, align 4
  br label %if.end206

if.else199:                                       ; preds = %if.end191
  %114 = load i32* %j, align 4
  %cmp200 = icmp slt i32 %114, 767610
  br i1 %cmp200, label %if.then201, label %if.else202

if.then201:                                       ; preds = %if.else199
  store i32 1, i32* %k, align 4
  br label %if.end205

if.else202:                                       ; preds = %if.else199
  store i32 0, i32* %k, align 4
  %115 = load i32* %n, align 4
  %add203 = add nsw i32 %115, 1
  store i32 %add203, i32* %n, align 4
  %116 = load i32* %ix, align 4
  %sub204 = sub nsw i32 %116, 1048576
  store i32 %sub204, i32* %ix, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.else202, %if.then201
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.then198
  br label %do.body207

do.body207:                                       ; preds = %if.end206
  %117 = load double* %ax, align 8
  %value208 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %117, double* %value208, align 4
  %118 = load i32* %ix, align 4
  %parts209 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw210 = getelementptr inbounds %struct.anon* %parts209, i32 0, i32 1
  store i32 %118, i32* %msw210, align 4
  %value211 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %119 = load double* %value211, align 4
  store double %119, double* %ax, align 8
  br label %do.end212

do.end212:                                        ; preds = %do.body207
  %120 = load double* %ax, align 8
  %121 = load i32* %k, align 4
  %arrayidx = getelementptr inbounds [2 x double]* @bp78, i32 0, i32 %121
  %122 = load double* %arrayidx, align 4
  %sub213 = fsub double %120, %122
  store double %sub213, double* %u, align 8
  %123 = load double* %ax, align 8
  %124 = load i32* %k, align 4
  %arrayidx214 = getelementptr inbounds [2 x double]* @bp78, i32 0, i32 %124
  %125 = load double* %arrayidx214, align 4
  %add215 = fadd double %123, %125
  %div216 = fdiv double 1.000000e+00, %add215
  store double %div216, double* %v, align 8
  %126 = load double* %u, align 8
  %127 = load double* %v, align 8
  %mul217 = fmul double %126, %127
  store double %mul217, double* %s, align 8
  %128 = load double* %s, align 8
  store double %128, double* %s_h, align 8
  br label %do.body218

do.body218:                                       ; preds = %do.end212
  %129 = load double* %s_h, align 8
  %value220 = bitcast %union.ieee_double_shape_type* %sl_u219 to double*
  store double %129, double* %value220, align 4
  %parts221 = bitcast %union.ieee_double_shape_type* %sl_u219 to %struct.anon*
  %lsw222 = getelementptr inbounds %struct.anon* %parts221, i32 0, i32 0
  store i32 0, i32* %lsw222, align 4
  %value223 = bitcast %union.ieee_double_shape_type* %sl_u219 to double*
  %130 = load double* %value223, align 4
  store double %130, double* %s_h, align 8
  br label %do.end224

do.end224:                                        ; preds = %do.body218
  store double 0.000000e+00, double* %t_h, align 8
  br label %do.body225

do.body225:                                       ; preds = %do.end224
  %131 = load double* %t_h, align 8
  %value227 = bitcast %union.ieee_double_shape_type* %sh_u226 to double*
  store double %131, double* %value227, align 4
  %132 = load i32* %ix, align 4
  %shr228 = ashr i32 %132, 1
  %or229 = or i32 %shr228, 536870912
  %add230 = add nsw i32 %or229, 524288
  %133 = load i32* %k, align 4
  %shl231 = shl i32 %133, 18
  %add232 = add nsw i32 %add230, %shl231
  %parts233 = bitcast %union.ieee_double_shape_type* %sh_u226 to %struct.anon*
  %msw234 = getelementptr inbounds %struct.anon* %parts233, i32 0, i32 1
  store i32 %add232, i32* %msw234, align 4
  %value235 = bitcast %union.ieee_double_shape_type* %sh_u226 to double*
  %134 = load double* %value235, align 4
  store double %134, double* %t_h, align 8
  br label %do.end236

do.end236:                                        ; preds = %do.body225
  %135 = load double* %ax, align 8
  %136 = load double* %t_h, align 8
  %137 = load i32* %k, align 4
  %arrayidx237 = getelementptr inbounds [2 x double]* @bp78, i32 0, i32 %137
  %138 = load double* %arrayidx237, align 4
  %sub238 = fsub double %136, %138
  %sub239 = fsub double %135, %sub238
  store double %sub239, double* %t_l, align 8
  %139 = load double* %v, align 8
  %140 = load double* %u, align 8
  %141 = load double* %s_h, align 8
  %142 = load double* %t_h, align 8
  %mul240 = fmul double %141, %142
  %sub241 = fsub double %140, %mul240
  %143 = load double* %s_h, align 8
  %144 = load double* %t_l, align 8
  %mul242 = fmul double %143, %144
  %sub243 = fsub double %sub241, %mul242
  %mul244 = fmul double %139, %sub243
  store double %mul244, double* %s_l, align 8
  %145 = load double* %s, align 8
  %146 = load double* %s, align 8
  %mul245 = fmul double %145, %146
  store double %mul245, double* %s2, align 8
  %147 = load double* %s2, align 8
  %148 = load double* %s2, align 8
  %mul246 = fmul double %147, %148
  %149 = load double* %s2, align 8
  %150 = load double* %s2, align 8
  %151 = load double* %s2, align 8
  %152 = load double* %s2, align 8
  %153 = load double* %s2, align 8
  %mul247 = fmul double %153, 0x3FCA7E284A454EEF
  %add248 = fadd double 0x3FCD864A93C9DB65, %mul247
  %mul249 = fmul double %152, %add248
  %add250 = fadd double 0x3FD17460A91D4101, %mul249
  %mul251 = fmul double %151, %add250
  %add252 = fadd double 0x3FD55555518F264D, %mul251
  %mul253 = fmul double %150, %add252
  %add254 = fadd double 0x3FDB6DB6DB6FABFF, %mul253
  %mul255 = fmul double %149, %add254
  %add256 = fadd double 0x3FE3333333333303, %mul255
  %mul257 = fmul double %mul246, %add256
  store double %mul257, double* %r, align 8
  %154 = load double* %s_l, align 8
  %155 = load double* %s_h, align 8
  %156 = load double* %s, align 8
  %add258 = fadd double %155, %156
  %mul259 = fmul double %154, %add258
  %157 = load double* %r, align 8
  %add260 = fadd double %157, %mul259
  store double %add260, double* %r, align 8
  %158 = load double* %s_h, align 8
  %159 = load double* %s_h, align 8
  %mul261 = fmul double %158, %159
  store double %mul261, double* %s2, align 8
  %160 = load double* %s2, align 8
  %add262 = fadd double 3.000000e+00, %160
  %161 = load double* %r, align 8
  %add263 = fadd double %add262, %161
  store double %add263, double* %t_h, align 8
  br label %do.body264

do.body264:                                       ; preds = %do.end236
  %162 = load double* %t_h, align 8
  %value266 = bitcast %union.ieee_double_shape_type* %sl_u265 to double*
  store double %162, double* %value266, align 4
  %parts267 = bitcast %union.ieee_double_shape_type* %sl_u265 to %struct.anon*
  %lsw268 = getelementptr inbounds %struct.anon* %parts267, i32 0, i32 0
  store i32 0, i32* %lsw268, align 4
  %value269 = bitcast %union.ieee_double_shape_type* %sl_u265 to double*
  %163 = load double* %value269, align 4
  store double %163, double* %t_h, align 8
  br label %do.end270

do.end270:                                        ; preds = %do.body264
  %164 = load double* %r, align 8
  %165 = load double* %t_h, align 8
  %sub271 = fsub double %165, 3.000000e+00
  %166 = load double* %s2, align 8
  %sub272 = fsub double %sub271, %166
  %sub273 = fsub double %164, %sub272
  store double %sub273, double* %t_l, align 8
  %167 = load double* %s_h, align 8
  %168 = load double* %t_h, align 8
  %mul274 = fmul double %167, %168
  store double %mul274, double* %u, align 8
  %169 = load double* %s_l, align 8
  %170 = load double* %t_h, align 8
  %mul275 = fmul double %169, %170
  %171 = load double* %t_l, align 8
  %172 = load double* %s, align 8
  %mul276 = fmul double %171, %172
  %add277 = fadd double %mul275, %mul276
  store double %add277, double* %v, align 8
  %173 = load double* %u, align 8
  %174 = load double* %v, align 8
  %add278 = fadd double %173, %174
  store double %add278, double* %p_h, align 8
  br label %do.body279

do.body279:                                       ; preds = %do.end270
  %175 = load double* %p_h, align 8
  %value281 = bitcast %union.ieee_double_shape_type* %sl_u280 to double*
  store double %175, double* %value281, align 4
  %parts282 = bitcast %union.ieee_double_shape_type* %sl_u280 to %struct.anon*
  %lsw283 = getelementptr inbounds %struct.anon* %parts282, i32 0, i32 0
  store i32 0, i32* %lsw283, align 4
  %value284 = bitcast %union.ieee_double_shape_type* %sl_u280 to double*
  %176 = load double* %value284, align 4
  store double %176, double* %p_h, align 8
  br label %do.end285

do.end285:                                        ; preds = %do.body279
  %177 = load double* %v, align 8
  %178 = load double* %p_h, align 8
  %179 = load double* %u, align 8
  %sub286 = fsub double %178, %179
  %sub287 = fsub double %177, %sub286
  store double %sub287, double* %p_l, align 8
  %180 = load double* %p_h, align 8
  %mul288 = fmul double 0x3FEEC709E0000000, %180
  store double %mul288, double* %z_h, align 8
  %181 = load double* %p_h, align 8
  %mul289 = fmul double 0xBE3E2FE0145B01F5, %181
  %182 = load double* %p_l, align 8
  %mul290 = fmul double %182, 0x3FEEC709DC3A03FD
  %add291 = fadd double %mul289, %mul290
  %183 = load i32* %k, align 4
  %arrayidx292 = getelementptr inbounds [2 x double]* @dp_l79, i32 0, i32 %183
  %184 = load double* %arrayidx292, align 4
  %add293 = fadd double %add291, %184
  store double %add293, double* %z_l, align 8
  %185 = load i32* %n, align 4
  %conv = sitofp i32 %185 to double
  store double %conv, double* %t, align 8
  %186 = load double* %z_h, align 8
  %187 = load double* %z_l, align 8
  %add294 = fadd double %186, %187
  %188 = load i32* %k, align 4
  %arrayidx295 = getelementptr inbounds [2 x double]* @dp_h80, i32 0, i32 %188
  %189 = load double* %arrayidx295, align 4
  %add296 = fadd double %add294, %189
  %190 = load double* %t, align 8
  %add297 = fadd double %add296, %190
  store double %add297, double* %t1, align 8
  br label %do.body298

do.body298:                                       ; preds = %do.end285
  %191 = load double* %t1, align 8
  %value300 = bitcast %union.ieee_double_shape_type* %sl_u299 to double*
  store double %191, double* %value300, align 4
  %parts301 = bitcast %union.ieee_double_shape_type* %sl_u299 to %struct.anon*
  %lsw302 = getelementptr inbounds %struct.anon* %parts301, i32 0, i32 0
  store i32 0, i32* %lsw302, align 4
  %value303 = bitcast %union.ieee_double_shape_type* %sl_u299 to double*
  %192 = load double* %value303, align 4
  store double %192, double* %t1, align 8
  br label %do.end304

do.end304:                                        ; preds = %do.body298
  %193 = load double* %z_l, align 8
  %194 = load double* %t1, align 8
  %195 = load double* %t, align 8
  %sub305 = fsub double %194, %195
  %196 = load i32* %k, align 4
  %arrayidx306 = getelementptr inbounds [2 x double]* @dp_h80, i32 0, i32 %196
  %197 = load double* %arrayidx306, align 4
  %sub307 = fsub double %sub305, %197
  %198 = load double* %z_h, align 8
  %sub308 = fsub double %sub307, %198
  %sub309 = fsub double %193, %sub308
  store double %sub309, double* %t2, align 8
  br label %if.end310

if.end310:                                        ; preds = %do.end304, %do.end178
  store double 1.000000e+00, double* %s, align 8
  %199 = load i32* %hx, align 4
  %shr311 = lshr i32 %199, 31
  %sub312 = sub i32 %shr311, 1
  %200 = load i32* %yisint, align 4
  %sub313 = sub nsw i32 %200, 1
  %or314 = or i32 %sub312, %sub313
  %cmp315 = icmp eq i32 %or314, 0
  br i1 %cmp315, label %if.then317, label %if.end318

if.then317:                                       ; preds = %if.end310
  store double -1.000000e+00, double* %s, align 8
  br label %if.end318

if.end318:                                        ; preds = %if.then317, %if.end310
  %201 = load double* %y.addr, align 8
  store double %201, double* %y1, align 8
  br label %do.body319

do.body319:                                       ; preds = %if.end318
  %202 = load double* %y1, align 8
  %value321 = bitcast %union.ieee_double_shape_type* %sl_u320 to double*
  store double %202, double* %value321, align 4
  %parts322 = bitcast %union.ieee_double_shape_type* %sl_u320 to %struct.anon*
  %lsw323 = getelementptr inbounds %struct.anon* %parts322, i32 0, i32 0
  store i32 0, i32* %lsw323, align 4
  %value324 = bitcast %union.ieee_double_shape_type* %sl_u320 to double*
  %203 = load double* %value324, align 4
  store double %203, double* %y1, align 8
  br label %do.end325

do.end325:                                        ; preds = %do.body319
  %204 = load double* %y.addr, align 8
  %205 = load double* %y1, align 8
  %sub326 = fsub double %204, %205
  %206 = load double* %t1, align 8
  %mul327 = fmul double %sub326, %206
  %207 = load double* %y.addr, align 8
  %208 = load double* %t2, align 8
  %mul328 = fmul double %207, %208
  %add329 = fadd double %mul327, %mul328
  store double %add329, double* %p_l, align 8
  %209 = load double* %y1, align 8
  %210 = load double* %t1, align 8
  %mul330 = fmul double %209, %210
  store double %mul330, double* %p_h, align 8
  %211 = load double* %p_l, align 8
  %212 = load double* %p_h, align 8
  %add331 = fadd double %211, %212
  store double %add331, double* %z, align 8
  br label %do.body332

do.body332:                                       ; preds = %do.end325
  %213 = load double* %z, align 8
  %value334 = bitcast %union.ieee_double_shape_type* %ew_u333 to double*
  store double %213, double* %value334, align 4
  %parts335 = bitcast %union.ieee_double_shape_type* %ew_u333 to %struct.anon*
  %msw336 = getelementptr inbounds %struct.anon* %parts335, i32 0, i32 1
  %214 = load i32* %msw336, align 4
  store i32 %214, i32* %j, align 4
  %parts337 = bitcast %union.ieee_double_shape_type* %ew_u333 to %struct.anon*
  %lsw338 = getelementptr inbounds %struct.anon* %parts337, i32 0, i32 0
  %215 = load i32* %lsw338, align 4
  store i32 %215, i32* %i, align 4
  br label %do.end339

do.end339:                                        ; preds = %do.body332
  %216 = load i32* %j, align 4
  %cmp340 = icmp sge i32 %216, 1083179008
  br i1 %cmp340, label %if.then342, label %if.else360

if.then342:                                       ; preds = %do.end339
  %217 = load i32* %j, align 4
  %sub343 = sub nsw i32 %217, 1083179008
  %218 = load i32* %i, align 4
  %or344 = or i32 %sub343, %218
  %cmp345 = icmp ne i32 %or344, 0
  br i1 %cmp345, label %if.then347, label %if.else350

if.then347:                                       ; preds = %if.then342
  %219 = load double* %s, align 8
  %mul348 = fmul double %219, 1.000000e+300
  %mul349 = fmul double %mul348, 1.000000e+300
  store double %mul349, double* %retval
  br label %return

if.else350:                                       ; preds = %if.then342
  %220 = load double* %p_l, align 8
  %add351 = fadd double %220, 0x3C971547652B82FE
  %221 = load double* %z, align 8
  %222 = load double* %p_h, align 8
  %sub352 = fsub double %221, %222
  %cmp353 = fcmp ogt double %add351, %sub352
  br i1 %cmp353, label %if.then355, label %if.end358

if.then355:                                       ; preds = %if.else350
  %223 = load double* %s, align 8
  %mul356 = fmul double %223, 1.000000e+300
  %mul357 = fmul double %mul356, 1.000000e+300
  store double %mul357, double* %retval
  br label %return

if.end358:                                        ; preds = %if.else350
  br label %if.end359

if.end359:                                        ; preds = %if.end358
  br label %if.end382

if.else360:                                       ; preds = %do.end339
  %224 = load i32* %j, align 4
  %and361 = and i32 %224, 2147483647
  %cmp362 = icmp sge i32 %and361, 1083231232
  br i1 %cmp362, label %if.then364, label %if.end381

if.then364:                                       ; preds = %if.else360
  %225 = load i32* %j, align 4
  %sub365 = sub i32 %225, -1064252416
  %226 = load i32* %i, align 4
  %or366 = or i32 %sub365, %226
  %cmp367 = icmp ne i32 %or366, 0
  br i1 %cmp367, label %if.then369, label %if.else372

if.then369:                                       ; preds = %if.then364
  %227 = load double* %s, align 8
  %mul370 = fmul double %227, 1.000000e-300
  %mul371 = fmul double %mul370, 1.000000e-300
  store double %mul371, double* %retval
  br label %return

if.else372:                                       ; preds = %if.then364
  %228 = load double* %p_l, align 8
  %229 = load double* %z, align 8
  %230 = load double* %p_h, align 8
  %sub373 = fsub double %229, %230
  %cmp374 = fcmp ole double %228, %sub373
  br i1 %cmp374, label %if.then376, label %if.end379

if.then376:                                       ; preds = %if.else372
  %231 = load double* %s, align 8
  %mul377 = fmul double %231, 1.000000e-300
  %mul378 = fmul double %mul377, 1.000000e-300
  store double %mul378, double* %retval
  br label %return

if.end379:                                        ; preds = %if.else372
  br label %if.end380

if.end380:                                        ; preds = %if.end379
  br label %if.end381

if.end381:                                        ; preds = %if.end380, %if.else360
  br label %if.end382

if.end382:                                        ; preds = %if.end381, %if.end359
  %232 = load i32* %j, align 4
  %and383 = and i32 %232, 2147483647
  store i32 %and383, i32* %i, align 4
  %233 = load i32* %i, align 4
  %shr384 = ashr i32 %233, 20
  %sub385 = sub nsw i32 %shr384, 1023
  store i32 %sub385, i32* %k, align 4
  store i32 0, i32* %n, align 4
  %234 = load i32* %i, align 4
  %cmp386 = icmp sgt i32 %234, 1071644672
  br i1 %cmp386, label %if.then388, label %if.end414

if.then388:                                       ; preds = %if.end382
  %235 = load i32* %j, align 4
  %236 = load i32* %k, align 4
  %add389 = add nsw i32 %236, 1
  %shr390 = ashr i32 1048576, %add389
  %add391 = add nsw i32 %235, %shr390
  store i32 %add391, i32* %n, align 4
  %237 = load i32* %n, align 4
  %and392 = and i32 %237, 2147483647
  %shr393 = ashr i32 %and392, 20
  %sub394 = sub nsw i32 %shr393, 1023
  store i32 %sub394, i32* %k, align 4
  store double 0.000000e+00, double* %t, align 8
  br label %do.body395

do.body395:                                       ; preds = %if.then388
  %238 = load double* %t, align 8
  %value397 = bitcast %union.ieee_double_shape_type* %sh_u396 to double*
  store double %238, double* %value397, align 4
  %239 = load i32* %n, align 4
  %240 = load i32* %k, align 4
  %shr398 = ashr i32 1048575, %240
  %neg = xor i32 %shr398, -1
  %and399 = and i32 %239, %neg
  %parts400 = bitcast %union.ieee_double_shape_type* %sh_u396 to %struct.anon*
  %msw401 = getelementptr inbounds %struct.anon* %parts400, i32 0, i32 1
  store i32 %and399, i32* %msw401, align 4
  %value402 = bitcast %union.ieee_double_shape_type* %sh_u396 to double*
  %241 = load double* %value402, align 4
  store double %241, double* %t, align 8
  br label %do.end403

do.end403:                                        ; preds = %do.body395
  %242 = load i32* %n, align 4
  %and404 = and i32 %242, 1048575
  %or405 = or i32 %and404, 1048576
  %243 = load i32* %k, align 4
  %sub406 = sub nsw i32 20, %243
  %shr407 = ashr i32 %or405, %sub406
  store i32 %shr407, i32* %n, align 4
  %244 = load i32* %j, align 4
  %cmp408 = icmp slt i32 %244, 0
  br i1 %cmp408, label %if.then410, label %if.end412

if.then410:                                       ; preds = %do.end403
  %245 = load i32* %n, align 4
  %sub411 = sub nsw i32 0, %245
  store i32 %sub411, i32* %n, align 4
  br label %if.end412

if.end412:                                        ; preds = %if.then410, %do.end403
  %246 = load double* %t, align 8
  %247 = load double* %p_h, align 8
  %sub413 = fsub double %247, %246
  store double %sub413, double* %p_h, align 8
  br label %if.end414

if.end414:                                        ; preds = %if.end412, %if.end382
  %248 = load double* %p_l, align 8
  %249 = load double* %p_h, align 8
  %add415 = fadd double %248, %249
  store double %add415, double* %t, align 8
  br label %do.body416

do.body416:                                       ; preds = %if.end414
  %250 = load double* %t, align 8
  %value418 = bitcast %union.ieee_double_shape_type* %sl_u417 to double*
  store double %250, double* %value418, align 4
  %parts419 = bitcast %union.ieee_double_shape_type* %sl_u417 to %struct.anon*
  %lsw420 = getelementptr inbounds %struct.anon* %parts419, i32 0, i32 0
  store i32 0, i32* %lsw420, align 4
  %value421 = bitcast %union.ieee_double_shape_type* %sl_u417 to double*
  %251 = load double* %value421, align 4
  store double %251, double* %t, align 8
  br label %do.end422

do.end422:                                        ; preds = %do.body416
  %252 = load double* %t, align 8
  %mul423 = fmul double %252, 0x3FE62E4300000000
  store double %mul423, double* %u, align 8
  %253 = load double* %p_l, align 8
  %254 = load double* %t, align 8
  %255 = load double* %p_h, align 8
  %sub424 = fsub double %254, %255
  %sub425 = fsub double %253, %sub424
  %mul426 = fmul double %sub425, 0x3FE62E42FEFA39EF
  %256 = load double* %t, align 8
  %mul427 = fmul double %256, 0xBE205C610CA86C39
  %add428 = fadd double %mul426, %mul427
  store double %add428, double* %v, align 8
  %257 = load double* %u, align 8
  %258 = load double* %v, align 8
  %add429 = fadd double %257, %258
  store double %add429, double* %z, align 8
  %259 = load double* %v, align 8
  %260 = load double* %z, align 8
  %261 = load double* %u, align 8
  %sub430 = fsub double %260, %261
  %sub431 = fsub double %259, %sub430
  store double %sub431, double* %w, align 8
  %262 = load double* %z, align 8
  %263 = load double* %z, align 8
  %mul432 = fmul double %262, %263
  store double %mul432, double* %t, align 8
  %264 = load double* %z, align 8
  %265 = load double* %t, align 8
  %266 = load double* %t, align 8
  %267 = load double* %t, align 8
  %268 = load double* %t, align 8
  %269 = load double* %t, align 8
  %mul433 = fmul double %269, 0x3E66376972BEA4D0
  %add434 = fadd double 0xBEBBBD41C5D26BF1, %mul433
  %mul435 = fmul double %268, %add434
  %add436 = fadd double 0x3F11566AAF25DE2C, %mul435
  %mul437 = fmul double %267, %add436
  %add438 = fadd double 0xBF66C16C16BEBD93, %mul437
  %mul439 = fmul double %266, %add438
  %add440 = fadd double 0x3FC555555555553E, %mul439
  %mul441 = fmul double %265, %add440
  %sub442 = fsub double %264, %mul441
  store double %sub442, double* %t1, align 8
  %270 = load double* %z, align 8
  %271 = load double* %t1, align 8
  %mul443 = fmul double %270, %271
  %272 = load double* %t1, align 8
  %sub444 = fsub double %272, 2.000000e+00
  %div445 = fdiv double %mul443, %sub444
  %273 = load double* %w, align 8
  %274 = load double* %z, align 8
  %275 = load double* %w, align 8
  %mul446 = fmul double %274, %275
  %add447 = fadd double %273, %mul446
  %sub448 = fsub double %div445, %add447
  store double %sub448, double* %r, align 8
  %276 = load double* %r, align 8
  %277 = load double* %z, align 8
  %sub449 = fsub double %276, %277
  %sub450 = fsub double 1.000000e+00, %sub449
  store double %sub450, double* %z, align 8
  br label %do.body451

do.body451:                                       ; preds = %do.end422
  %278 = load double* %z, align 8
  %value453 = bitcast %union.ieee_double_shape_type* %gh_u452 to double*
  store double %278, double* %value453, align 4
  %parts454 = bitcast %union.ieee_double_shape_type* %gh_u452 to %struct.anon*
  %msw455 = getelementptr inbounds %struct.anon* %parts454, i32 0, i32 1
  %279 = load i32* %msw455, align 4
  store i32 %279, i32* %j, align 4
  br label %do.end456

do.end456:                                        ; preds = %do.body451
  %280 = load i32* %n, align 4
  %shl457 = shl i32 %280, 20
  %281 = load i32* %j, align 4
  %add458 = add nsw i32 %281, %shl457
  store i32 %add458, i32* %j, align 4
  %282 = load i32* %j, align 4
  %shr459 = ashr i32 %282, 20
  %cmp460 = icmp sle i32 %shr459, 0
  br i1 %cmp460, label %if.then462, label %if.else464

if.then462:                                       ; preds = %do.end456
  %283 = load double* %z, align 8
  %284 = load i32* %n, align 4
  %call463 = call double @scalbn(double %283, i32 %284) #4
  store double %call463, double* %z, align 8
  br label %if.end472

if.else464:                                       ; preds = %do.end456
  br label %do.body465

do.body465:                                       ; preds = %if.else464
  %285 = load double* %z, align 8
  %value467 = bitcast %union.ieee_double_shape_type* %sh_u466 to double*
  store double %285, double* %value467, align 4
  %286 = load i32* %j, align 4
  %parts468 = bitcast %union.ieee_double_shape_type* %sh_u466 to %struct.anon*
  %msw469 = getelementptr inbounds %struct.anon* %parts468, i32 0, i32 1
  store i32 %286, i32* %msw469, align 4
  %value470 = bitcast %union.ieee_double_shape_type* %sh_u466 to double*
  %287 = load double* %value470, align 4
  store double %287, double* %z, align 8
  br label %do.end471

do.end471:                                        ; preds = %do.body465
  br label %if.end472

if.end472:                                        ; preds = %do.end471, %if.then462
  %288 = load double* %s, align 8
  %289 = load double* %z, align 8
  %mul473 = fmul double %288, %289
  store double %mul473, double* %retval
  br label %return

return:                                           ; preds = %if.end472, %if.then376, %if.then369, %if.then355, %if.then347, %if.then158, %if.then153, %if.then147, %if.then142, %if.then132, %if.end125, %if.then92, %if.then87, %if.else84, %if.then83, %cond.end77, %cond.end, %if.then67, %if.else, %if.then23, %if.then
  %290 = load double* %retval
  ret double %290
}

; Function Attrs: nounwind
define double @__ieee754_remainder(double %x, double %p) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %p.addr = alloca double, align 8
  %hx = alloca i32, align 4
  %hp = alloca i32, align 4
  %sx = alloca i32, align 4
  %lx = alloca i32, align 4
  %lp = alloca i32, align 4
  %p_half = alloca double, align 8
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %ew_u3 = alloca %union.ieee_double_shape_type, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double %p, double* %p.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body2

do.body2:                                         ; preds = %do.end
  %3 = load double* %p.addr, align 8
  %value4 = bitcast %union.ieee_double_shape_type* %ew_u3 to double*
  store double %3, double* %value4, align 4
  %parts5 = bitcast %union.ieee_double_shape_type* %ew_u3 to %struct.anon*
  %msw6 = getelementptr inbounds %struct.anon* %parts5, i32 0, i32 1
  %4 = load i32* %msw6, align 4
  store i32 %4, i32* %hp, align 4
  %parts7 = bitcast %union.ieee_double_shape_type* %ew_u3 to %struct.anon*
  %lsw8 = getelementptr inbounds %struct.anon* %parts7, i32 0, i32 0
  %5 = load i32* %lsw8, align 4
  store i32 %5, i32* %lp, align 4
  br label %do.end9

do.end9:                                          ; preds = %do.body2
  %6 = load i32* %hx, align 4
  %and = and i32 %6, -2147483648
  store i32 %and, i32* %sx, align 4
  %7 = load i32* %hp, align 4
  %and10 = and i32 %7, 2147483647
  store i32 %and10, i32* %hp, align 4
  %8 = load i32* %hx, align 4
  %and11 = and i32 %8, 2147483647
  store i32 %and11, i32* %hx, align 4
  %9 = load i32* %hp, align 4
  %10 = load i32* %lp, align 4
  %or = or i32 %9, %10
  %cmp = icmp eq i32 %or, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end9
  %11 = load double* %x.addr, align 8
  %12 = load double* %p.addr, align 8
  %mul = fmul double %11, %12
  %13 = load double* %x.addr, align 8
  %14 = load double* %p.addr, align 8
  %mul12 = fmul double %13, %14
  %div = fdiv double %mul, %mul12
  store double %div, double* %retval
  br label %return

if.end:                                           ; preds = %do.end9
  %15 = load i32* %hx, align 4
  %cmp13 = icmp sge i32 %15, 2146435072
  br i1 %cmp13, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end
  %16 = load i32* %hp, align 4
  %cmp14 = icmp sge i32 %16, 2146435072
  br i1 %cmp14, label %land.lhs.true, label %if.end21

land.lhs.true:                                    ; preds = %lor.lhs.false
  %17 = load i32* %hp, align 4
  %sub = sub nsw i32 %17, 2146435072
  %18 = load i32* %lp, align 4
  %or15 = or i32 %sub, %18
  %cmp16 = icmp ne i32 %or15, 0
  br i1 %cmp16, label %if.then17, label %if.end21

if.then17:                                        ; preds = %land.lhs.true, %if.end
  %19 = load double* %x.addr, align 8
  %20 = load double* %p.addr, align 8
  %mul18 = fmul double %19, %20
  %21 = load double* %x.addr, align 8
  %22 = load double* %p.addr, align 8
  %mul19 = fmul double %21, %22
  %div20 = fdiv double %mul18, %mul19
  store double %div20, double* %retval
  br label %return

if.end21:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %23 = load i32* %hp, align 4
  %cmp22 = icmp sle i32 %23, 2145386495
  br i1 %cmp22, label %if.then23, label %if.end24

if.then23:                                        ; preds = %if.end21
  %24 = load double* %x.addr, align 8
  %25 = load double* %p.addr, align 8
  %26 = load double* %p.addr, align 8
  %add = fadd double %25, %26
  %call = call double @__ieee754_fmod(double %24, double %add) #5
  store double %call, double* %x.addr, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.then23, %if.end21
  %27 = load i32* %hx, align 4
  %28 = load i32* %hp, align 4
  %sub25 = sub nsw i32 %27, %28
  %29 = load i32* %lx, align 4
  %30 = load i32* %lp, align 4
  %sub26 = sub i32 %29, %30
  %or27 = or i32 %sub25, %sub26
  %cmp28 = icmp eq i32 %or27, 0
  br i1 %cmp28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %if.end24
  %31 = load double* %x.addr, align 8
  %mul30 = fmul double 0.000000e+00, %31
  store double %mul30, double* %retval
  br label %return

if.end31:                                         ; preds = %if.end24
  %32 = load double* %x.addr, align 8
  %call32 = call double @fabs(double %32) #6
  store double %call32, double* %x.addr, align 8
  %33 = load double* %p.addr, align 8
  %call33 = call double @fabs(double %33) #6
  store double %call33, double* %p.addr, align 8
  %34 = load i32* %hp, align 4
  %cmp34 = icmp slt i32 %34, 2097152
  br i1 %cmp34, label %if.then35, label %if.else

if.then35:                                        ; preds = %if.end31
  %35 = load double* %x.addr, align 8
  %36 = load double* %x.addr, align 8
  %add36 = fadd double %35, %36
  %37 = load double* %p.addr, align 8
  %cmp37 = fcmp ogt double %add36, %37
  br i1 %cmp37, label %if.then38, label %if.end45

if.then38:                                        ; preds = %if.then35
  %38 = load double* %p.addr, align 8
  %39 = load double* %x.addr, align 8
  %sub39 = fsub double %39, %38
  store double %sub39, double* %x.addr, align 8
  %40 = load double* %x.addr, align 8
  %41 = load double* %x.addr, align 8
  %add40 = fadd double %40, %41
  %42 = load double* %p.addr, align 8
  %cmp41 = fcmp oge double %add40, %42
  br i1 %cmp41, label %if.then42, label %if.end44

if.then42:                                        ; preds = %if.then38
  %43 = load double* %p.addr, align 8
  %44 = load double* %x.addr, align 8
  %sub43 = fsub double %44, %43
  store double %sub43, double* %x.addr, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.then42, %if.then38
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.then35
  br label %if.end55

if.else:                                          ; preds = %if.end31
  %45 = load double* %p.addr, align 8
  %mul46 = fmul double 5.000000e-01, %45
  store double %mul46, double* %p_half, align 8
  %46 = load double* %x.addr, align 8
  %47 = load double* %p_half, align 8
  %cmp47 = fcmp ogt double %46, %47
  br i1 %cmp47, label %if.then48, label %if.end54

if.then48:                                        ; preds = %if.else
  %48 = load double* %p.addr, align 8
  %49 = load double* %x.addr, align 8
  %sub49 = fsub double %49, %48
  store double %sub49, double* %x.addr, align 8
  %50 = load double* %x.addr, align 8
  %51 = load double* %p_half, align 8
  %cmp50 = fcmp oge double %50, %51
  br i1 %cmp50, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.then48
  %52 = load double* %p.addr, align 8
  %53 = load double* %x.addr, align 8
  %sub52 = fsub double %53, %52
  store double %sub52, double* %x.addr, align 8
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.then48
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.else
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end45
  br label %do.body56

do.body56:                                        ; preds = %if.end55
  %54 = load double* %x.addr, align 8
  %value57 = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %54, double* %value57, align 4
  %parts58 = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw59 = getelementptr inbounds %struct.anon* %parts58, i32 0, i32 1
  %55 = load i32* %msw59, align 4
  store i32 %55, i32* %hx, align 4
  br label %do.end60

do.end60:                                         ; preds = %do.body56
  br label %do.body61

do.body61:                                        ; preds = %do.end60
  %56 = load double* %x.addr, align 8
  %value62 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %56, double* %value62, align 4
  %57 = load i32* %hx, align 4
  %58 = load i32* %sx, align 4
  %xor = xor i32 %57, %58
  %parts63 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw64 = getelementptr inbounds %struct.anon* %parts63, i32 0, i32 1
  store i32 %xor, i32* %msw64, align 4
  %value65 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %59 = load double* %value65, align 4
  store double %59, double* %x.addr, align 8
  br label %do.end66

do.end66:                                         ; preds = %do.body61
  %60 = load double* %x.addr, align 8
  store double %60, double* %retval
  br label %return

return:                                           ; preds = %do.end66, %if.then29, %if.then17, %if.then
  %61 = load double* %retval
  ret double %61
}

; Function Attrs: nounwind
define i32 @__ieee754_rem_pio2(double %x, double* %y) #2 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca double, align 8
  %y.addr = alloca double*, align 4
  %z = alloca double, align 8
  %w = alloca double, align 8
  %t = alloca double, align 8
  %r = alloca double, align 8
  %fn = alloca double, align 8
  %tx = alloca [3 x double], align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %hx = alloca i32, align 4
  %e0 = alloca i32, align 4
  %nx = alloca i32, align 4
  %low = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %high = alloca i32, align 4
  %gh_u61 = alloca %union.ieee_double_shape_type, align 4
  %gh_u82 = alloca %union.ieee_double_shape_type, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  %sl_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double* %y, double** %y.addr, align 4
  store double 0.000000e+00, double* %z, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sle i32 %3, 1072243195
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double** %y.addr, align 4
  %arrayidx = getelementptr inbounds double* %5, i32 0
  store double %4, double* %arrayidx, align 4
  %6 = load double** %y.addr, align 4
  %arrayidx1 = getelementptr inbounds double* %6, i32 1
  store double 0.000000e+00, double* %arrayidx1, align 4
  store i32 0, i32* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix, align 4
  %cmp2 = icmp slt i32 %7, 1073928572
  br i1 %cmp2, label %if.then3, label %if.end40

if.then3:                                         ; preds = %if.end
  %8 = load i32* %hx, align 4
  %cmp4 = icmp sgt i32 %8, 0
  br i1 %cmp4, label %if.then5, label %if.else22

if.then5:                                         ; preds = %if.then3
  %9 = load double* %x.addr, align 8
  %sub = fsub double %9, 0x3FF921FB54400000
  store double %sub, double* %z, align 8
  %10 = load i32* %ix, align 4
  %cmp6 = icmp ne i32 %10, 1073291771
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then5
  %11 = load double* %z, align 8
  %sub8 = fsub double %11, 0x3DD0B4611A626331
  %12 = load double** %y.addr, align 4
  %arrayidx9 = getelementptr inbounds double* %12, i32 0
  store double %sub8, double* %arrayidx9, align 4
  %13 = load double* %z, align 8
  %14 = load double** %y.addr, align 4
  %arrayidx10 = getelementptr inbounds double* %14, i32 0
  %15 = load double* %arrayidx10, align 4
  %sub11 = fsub double %13, %15
  %sub12 = fsub double %sub11, 0x3DD0B4611A626331
  %16 = load double** %y.addr, align 4
  %arrayidx13 = getelementptr inbounds double* %16, i32 1
  store double %sub12, double* %arrayidx13, align 4
  br label %if.end21

if.else:                                          ; preds = %if.then5
  %17 = load double* %z, align 8
  %sub14 = fsub double %17, 0x3DD0B4611A600000
  store double %sub14, double* %z, align 8
  %18 = load double* %z, align 8
  %sub15 = fsub double %18, 0x3BA3198A2E037073
  %19 = load double** %y.addr, align 4
  %arrayidx16 = getelementptr inbounds double* %19, i32 0
  store double %sub15, double* %arrayidx16, align 4
  %20 = load double* %z, align 8
  %21 = load double** %y.addr, align 4
  %arrayidx17 = getelementptr inbounds double* %21, i32 0
  %22 = load double* %arrayidx17, align 4
  %sub18 = fsub double %20, %22
  %sub19 = fsub double %sub18, 0x3BA3198A2E037073
  %23 = load double** %y.addr, align 4
  %arrayidx20 = getelementptr inbounds double* %23, i32 1
  store double %sub19, double* %arrayidx20, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then7
  store i32 1, i32* %retval
  br label %return

if.else22:                                        ; preds = %if.then3
  %24 = load double* %x.addr, align 8
  %add = fadd double %24, 0x3FF921FB54400000
  store double %add, double* %z, align 8
  %25 = load i32* %ix, align 4
  %cmp23 = icmp ne i32 %25, 1073291771
  br i1 %cmp23, label %if.then24, label %if.else31

if.then24:                                        ; preds = %if.else22
  %26 = load double* %z, align 8
  %add25 = fadd double %26, 0x3DD0B4611A626331
  %27 = load double** %y.addr, align 4
  %arrayidx26 = getelementptr inbounds double* %27, i32 0
  store double %add25, double* %arrayidx26, align 4
  %28 = load double* %z, align 8
  %29 = load double** %y.addr, align 4
  %arrayidx27 = getelementptr inbounds double* %29, i32 0
  %30 = load double* %arrayidx27, align 4
  %sub28 = fsub double %28, %30
  %add29 = fadd double %sub28, 0x3DD0B4611A626331
  %31 = load double** %y.addr, align 4
  %arrayidx30 = getelementptr inbounds double* %31, i32 1
  store double %add29, double* %arrayidx30, align 4
  br label %if.end39

if.else31:                                        ; preds = %if.else22
  %32 = load double* %z, align 8
  %add32 = fadd double %32, 0x3DD0B4611A600000
  store double %add32, double* %z, align 8
  %33 = load double* %z, align 8
  %add33 = fadd double %33, 0x3BA3198A2E037073
  %34 = load double** %y.addr, align 4
  %arrayidx34 = getelementptr inbounds double* %34, i32 0
  store double %add33, double* %arrayidx34, align 4
  %35 = load double* %z, align 8
  %36 = load double** %y.addr, align 4
  %arrayidx35 = getelementptr inbounds double* %36, i32 0
  %37 = load double* %arrayidx35, align 4
  %sub36 = fsub double %35, %37
  %add37 = fadd double %sub36, 0x3BA3198A2E037073
  %38 = load double** %y.addr, align 4
  %arrayidx38 = getelementptr inbounds double* %38, i32 1
  store double %add37, double* %arrayidx38, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.else31, %if.then24
  store i32 -1, i32* %retval
  br label %return

if.end40:                                         ; preds = %if.end
  %39 = load i32* %ix, align 4
  %cmp41 = icmp sle i32 %39, 1094263291
  br i1 %cmp41, label %if.then42, label %if.end120

if.then42:                                        ; preds = %if.end40
  %40 = load double* %x.addr, align 8
  %call = call double @fabs(double %40) #6
  store double %call, double* %t, align 8
  %41 = load double* %t, align 8
  %mul = fmul double %41, 0x3FE45F306DC9C883
  %add43 = fadd double %mul, 5.000000e-01
  %conv = fptosi double %add43 to i32
  store i32 %conv, i32* %n, align 4
  %42 = load i32* %n, align 4
  %conv44 = sitofp i32 %42 to double
  store double %conv44, double* %fn, align 8
  %43 = load double* %t, align 8
  %44 = load double* %fn, align 8
  %mul45 = fmul double %44, 0x3FF921FB54400000
  %sub46 = fsub double %43, %mul45
  store double %sub46, double* %r, align 8
  %45 = load double* %fn, align 8
  %mul47 = fmul double %45, 0x3DD0B4611A626331
  store double %mul47, double* %w, align 8
  %46 = load i32* %n, align 4
  %cmp48 = icmp slt i32 %46, 32
  br i1 %cmp48, label %land.lhs.true, label %if.else57

land.lhs.true:                                    ; preds = %if.then42
  %47 = load i32* %ix, align 4
  %48 = load i32* %n, align 4
  %sub50 = sub nsw i32 %48, 1
  %arrayidx51 = getelementptr inbounds [32 x i32]* @npio2_hw81, i32 0, i32 %sub50
  %49 = load i32* %arrayidx51, align 4
  %cmp52 = icmp ne i32 %47, %49
  br i1 %cmp52, label %if.then54, label %if.else57

if.then54:                                        ; preds = %land.lhs.true
  %50 = load double* %r, align 8
  %51 = load double* %w, align 8
  %sub55 = fsub double %50, %51
  %52 = load double** %y.addr, align 4
  %arrayidx56 = getelementptr inbounds double* %52, i32 0
  store double %sub55, double* %arrayidx56, align 4
  br label %if.end104

if.else57:                                        ; preds = %land.lhs.true, %if.then42
  %53 = load i32* %ix, align 4
  %shr = ashr i32 %53, 20
  store i32 %shr, i32* %j, align 4
  %54 = load double* %r, align 8
  %55 = load double* %w, align 8
  %sub58 = fsub double %54, %55
  %56 = load double** %y.addr, align 4
  %arrayidx59 = getelementptr inbounds double* %56, i32 0
  store double %sub58, double* %arrayidx59, align 4
  br label %do.body60

do.body60:                                        ; preds = %if.else57
  %57 = load double** %y.addr, align 4
  %arrayidx62 = getelementptr inbounds double* %57, i32 0
  %58 = load double* %arrayidx62, align 4
  %value63 = bitcast %union.ieee_double_shape_type* %gh_u61 to double*
  store double %58, double* %value63, align 4
  %parts64 = bitcast %union.ieee_double_shape_type* %gh_u61 to %struct.anon*
  %msw65 = getelementptr inbounds %struct.anon* %parts64, i32 0, i32 1
  %59 = load i32* %msw65, align 4
  store i32 %59, i32* %high, align 4
  br label %do.end66

do.end66:                                         ; preds = %do.body60
  %60 = load i32* %j, align 4
  %61 = load i32* %high, align 4
  %shr67 = lshr i32 %61, 20
  %and68 = and i32 %shr67, 2047
  %sub69 = sub i32 %60, %and68
  store i32 %sub69, i32* %i, align 4
  %62 = load i32* %i, align 4
  %cmp70 = icmp sgt i32 %62, 16
  br i1 %cmp70, label %if.then72, label %if.end103

if.then72:                                        ; preds = %do.end66
  %63 = load double* %r, align 8
  store double %63, double* %t, align 8
  %64 = load double* %fn, align 8
  %mul73 = fmul double %64, 0x3DD0B4611A600000
  store double %mul73, double* %w, align 8
  %65 = load double* %t, align 8
  %66 = load double* %w, align 8
  %sub74 = fsub double %65, %66
  store double %sub74, double* %r, align 8
  %67 = load double* %fn, align 8
  %mul75 = fmul double %67, 0x3BA3198A2E037073
  %68 = load double* %t, align 8
  %69 = load double* %r, align 8
  %sub76 = fsub double %68, %69
  %70 = load double* %w, align 8
  %sub77 = fsub double %sub76, %70
  %sub78 = fsub double %mul75, %sub77
  store double %sub78, double* %w, align 8
  %71 = load double* %r, align 8
  %72 = load double* %w, align 8
  %sub79 = fsub double %71, %72
  %73 = load double** %y.addr, align 4
  %arrayidx80 = getelementptr inbounds double* %73, i32 0
  store double %sub79, double* %arrayidx80, align 4
  br label %do.body81

do.body81:                                        ; preds = %if.then72
  %74 = load double** %y.addr, align 4
  %arrayidx83 = getelementptr inbounds double* %74, i32 0
  %75 = load double* %arrayidx83, align 4
  %value84 = bitcast %union.ieee_double_shape_type* %gh_u82 to double*
  store double %75, double* %value84, align 4
  %parts85 = bitcast %union.ieee_double_shape_type* %gh_u82 to %struct.anon*
  %msw86 = getelementptr inbounds %struct.anon* %parts85, i32 0, i32 1
  %76 = load i32* %msw86, align 4
  store i32 %76, i32* %high, align 4
  br label %do.end87

do.end87:                                         ; preds = %do.body81
  %77 = load i32* %j, align 4
  %78 = load i32* %high, align 4
  %shr88 = lshr i32 %78, 20
  %and89 = and i32 %shr88, 2047
  %sub90 = sub i32 %77, %and89
  store i32 %sub90, i32* %i, align 4
  %79 = load i32* %i, align 4
  %cmp91 = icmp sgt i32 %79, 49
  br i1 %cmp91, label %if.then93, label %if.end102

if.then93:                                        ; preds = %do.end87
  %80 = load double* %r, align 8
  store double %80, double* %t, align 8
  %81 = load double* %fn, align 8
  %mul94 = fmul double %81, 0x3BA3198A2E000000
  store double %mul94, double* %w, align 8
  %82 = load double* %t, align 8
  %83 = load double* %w, align 8
  %sub95 = fsub double %82, %83
  store double %sub95, double* %r, align 8
  %84 = load double* %fn, align 8
  %mul96 = fmul double %84, 0x397B839A252049C1
  %85 = load double* %t, align 8
  %86 = load double* %r, align 8
  %sub97 = fsub double %85, %86
  %87 = load double* %w, align 8
  %sub98 = fsub double %sub97, %87
  %sub99 = fsub double %mul96, %sub98
  store double %sub99, double* %w, align 8
  %88 = load double* %r, align 8
  %89 = load double* %w, align 8
  %sub100 = fsub double %88, %89
  %90 = load double** %y.addr, align 4
  %arrayidx101 = getelementptr inbounds double* %90, i32 0
  store double %sub100, double* %arrayidx101, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.then93, %do.end87
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %do.end66
  br label %if.end104

if.end104:                                        ; preds = %if.end103, %if.then54
  %91 = load double* %r, align 8
  %92 = load double** %y.addr, align 4
  %arrayidx105 = getelementptr inbounds double* %92, i32 0
  %93 = load double* %arrayidx105, align 4
  %sub106 = fsub double %91, %93
  %94 = load double* %w, align 8
  %sub107 = fsub double %sub106, %94
  %95 = load double** %y.addr, align 4
  %arrayidx108 = getelementptr inbounds double* %95, i32 1
  store double %sub107, double* %arrayidx108, align 4
  %96 = load i32* %hx, align 4
  %cmp109 = icmp slt i32 %96, 0
  br i1 %cmp109, label %if.then111, label %if.else119

if.then111:                                       ; preds = %if.end104
  %97 = load double** %y.addr, align 4
  %arrayidx112 = getelementptr inbounds double* %97, i32 0
  %98 = load double* %arrayidx112, align 4
  %sub113 = fsub double -0.000000e+00, %98
  %99 = load double** %y.addr, align 4
  %arrayidx114 = getelementptr inbounds double* %99, i32 0
  store double %sub113, double* %arrayidx114, align 4
  %100 = load double** %y.addr, align 4
  %arrayidx115 = getelementptr inbounds double* %100, i32 1
  %101 = load double* %arrayidx115, align 4
  %sub116 = fsub double -0.000000e+00, %101
  %102 = load double** %y.addr, align 4
  %arrayidx117 = getelementptr inbounds double* %102, i32 1
  store double %sub116, double* %arrayidx117, align 4
  %103 = load i32* %n, align 4
  %sub118 = sub nsw i32 0, %103
  store i32 %sub118, i32* %retval
  br label %return

if.else119:                                       ; preds = %if.end104
  %104 = load i32* %n, align 4
  store i32 %104, i32* %retval
  br label %return

if.end120:                                        ; preds = %if.end40
  %105 = load i32* %ix, align 4
  %cmp121 = icmp sge i32 %105, 2146435072
  br i1 %cmp121, label %if.then123, label %if.end127

if.then123:                                       ; preds = %if.end120
  %106 = load double* %x.addr, align 8
  %107 = load double* %x.addr, align 8
  %sub124 = fsub double %106, %107
  %108 = load double** %y.addr, align 4
  %arrayidx125 = getelementptr inbounds double* %108, i32 1
  store double %sub124, double* %arrayidx125, align 4
  %109 = load double** %y.addr, align 4
  %arrayidx126 = getelementptr inbounds double* %109, i32 0
  store double %sub124, double* %arrayidx126, align 4
  store i32 0, i32* %retval
  br label %return

if.end127:                                        ; preds = %if.end120
  br label %do.body128

do.body128:                                       ; preds = %if.end127
  %110 = load double* %x.addr, align 8
  %value129 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %110, double* %value129, align 4
  %parts130 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts130, i32 0, i32 0
  %111 = load i32* %lsw, align 4
  store i32 %111, i32* %low, align 4
  br label %do.end131

do.end131:                                        ; preds = %do.body128
  br label %do.body132

do.body132:                                       ; preds = %do.end131
  %112 = load double* %z, align 8
  %value133 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  store double %112, double* %value133, align 4
  %113 = load i32* %low, align 4
  %parts134 = bitcast %union.ieee_double_shape_type* %sl_u to %struct.anon*
  %lsw135 = getelementptr inbounds %struct.anon* %parts134, i32 0, i32 0
  store i32 %113, i32* %lsw135, align 4
  %value136 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  %114 = load double* %value136, align 4
  store double %114, double* %z, align 8
  br label %do.end137

do.end137:                                        ; preds = %do.body132
  %115 = load i32* %ix, align 4
  %shr138 = ashr i32 %115, 20
  %sub139 = sub nsw i32 %shr138, 1046
  store i32 %sub139, i32* %e0, align 4
  br label %do.body140

do.body140:                                       ; preds = %do.end137
  %116 = load double* %z, align 8
  %value141 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %116, double* %value141, align 4
  %117 = load i32* %ix, align 4
  %118 = load i32* %e0, align 4
  %shl = shl i32 %118, 20
  %sub142 = sub nsw i32 %117, %shl
  %parts143 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw144 = getelementptr inbounds %struct.anon* %parts143, i32 0, i32 1
  store i32 %sub142, i32* %msw144, align 4
  %value145 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %119 = load double* %value145, align 4
  store double %119, double* %z, align 8
  br label %do.end146

do.end146:                                        ; preds = %do.body140
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %do.end146
  %120 = load i32* %i, align 4
  %cmp147 = icmp slt i32 %120, 2
  br i1 %cmp147, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %121 = load double* %z, align 8
  %conv149 = fptosi double %121 to i32
  %conv150 = sitofp i32 %conv149 to double
  %122 = load i32* %i, align 4
  %arrayidx151 = getelementptr inbounds [3 x double]* %tx, i32 0, i32 %122
  store double %conv150, double* %arrayidx151, align 4
  %123 = load double* %z, align 8
  %124 = load i32* %i, align 4
  %arrayidx152 = getelementptr inbounds [3 x double]* %tx, i32 0, i32 %124
  %125 = load double* %arrayidx152, align 4
  %sub153 = fsub double %123, %125
  %mul154 = fmul double %sub153, 0x4170000000000000
  store double %mul154, double* %z, align 8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %126 = load i32* %i, align 4
  %inc = add nsw i32 %126, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %127 = load double* %z, align 8
  %arrayidx155 = getelementptr inbounds [3 x double]* %tx, i32 0, i32 2
  store double %127, double* %arrayidx155, align 4
  store i32 3, i32* %nx, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %for.end
  %128 = load i32* %nx, align 4
  %sub156 = sub nsw i32 %128, 1
  %arrayidx157 = getelementptr inbounds [3 x double]* %tx, i32 0, i32 %sub156
  %129 = load double* %arrayidx157, align 4
  %cmp158 = fcmp oeq double %129, 0.000000e+00
  br i1 %cmp158, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %130 = load i32* %nx, align 4
  %dec = add nsw i32 %130, -1
  store i32 %dec, i32* %nx, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %arraydecay = getelementptr inbounds [3 x double]* %tx, i32 0, i32 0
  %131 = load double** %y.addr, align 4
  %132 = load i32* %e0, align 4
  %133 = load i32* %nx, align 4
  %call160 = call i32 @__kernel_rem_pio2(double* %arraydecay, double* %131, i32 %132, i32 %133, i32 2, i32* getelementptr inbounds ([66 x i32]* @two_over_pi82, i32 0, i32 0)) #5
  store i32 %call160, i32* %n, align 4
  %134 = load i32* %hx, align 4
  %cmp161 = icmp slt i32 %134, 0
  br i1 %cmp161, label %if.then163, label %if.end171

if.then163:                                       ; preds = %while.end
  %135 = load double** %y.addr, align 4
  %arrayidx164 = getelementptr inbounds double* %135, i32 0
  %136 = load double* %arrayidx164, align 4
  %sub165 = fsub double -0.000000e+00, %136
  %137 = load double** %y.addr, align 4
  %arrayidx166 = getelementptr inbounds double* %137, i32 0
  store double %sub165, double* %arrayidx166, align 4
  %138 = load double** %y.addr, align 4
  %arrayidx167 = getelementptr inbounds double* %138, i32 1
  %139 = load double* %arrayidx167, align 4
  %sub168 = fsub double -0.000000e+00, %139
  %140 = load double** %y.addr, align 4
  %arrayidx169 = getelementptr inbounds double* %140, i32 1
  store double %sub168, double* %arrayidx169, align 4
  %141 = load i32* %n, align 4
  %sub170 = sub nsw i32 0, %141
  store i32 %sub170, i32* %retval
  br label %return

if.end171:                                        ; preds = %while.end
  %142 = load i32* %n, align 4
  store i32 %142, i32* %retval
  br label %return

return:                                           ; preds = %if.end171, %if.then163, %if.then123, %if.else119, %if.then111, %if.end39, %if.end21, %if.then
  %143 = load i32* %retval
  ret i32 %143
}

; Function Attrs: nounwind
define float @__ieee754_gammaf_r(float %x, i32* %signgamp) #2 {
entry:
  %x.addr = alloca float, align 4
  %signgamp.addr = alloca i32*, align 4
  store float %x, float* %x.addr, align 4
  store i32* %signgamp, i32** %signgamp.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load i32** %signgamp.addr, align 4
  %call = call float @__ieee754_lgammaf_r(float %0, i32* %1) #5
  %call1 = call float @__ieee754_expf(float %call) #5
  ret float %call1
}

; Function Attrs: nounwind
define float @__ieee754_lgammaf_r(float %x, i32* %signgamp) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %signgamp.addr = alloca i32*, align 4
  %t = alloca float, align 4
  %y = alloca float, align 4
  %z = alloca float, align 4
  %nadj = alloca float, align 4
  %p = alloca float, align 4
  %p1 = alloca float, align 4
  %p2 = alloca float, align 4
  %p3 = alloca float, align 4
  %q = alloca float, align 4
  %r = alloca float, align 4
  %w = alloca float, align 4
  %i = alloca i32, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store i32* %signgamp, i32** %signgamp.addr, align 4
  store float 0.000000e+00, float* %nadj, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32** %signgamp.addr, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32* %hx, align 4
  %and = and i32 %3, 2147483647
  store i32 %and, i32* %ix, align 4
  %4 = load i32* %ix, align 4
  %cmp = icmp sge i32 %4, 2139095040
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %5 = load float* %x.addr, align 4
  %6 = load float* %x.addr, align 4
  %mul = fmul float %5, %6
  store float %mul, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix, align 4
  %cmp1 = icmp eq i32 %7, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  store float 0x7FF0000000000000, float* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %8 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %8, 478150656
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %if.end3
  %9 = load i32* %hx, align 4
  %cmp6 = icmp slt i32 %9, 0
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then5
  %10 = load i32** %signgamp.addr, align 4
  store i32 -1, i32* %10, align 4
  %11 = load float* %x.addr, align 4
  %sub = fsub float -0.000000e+00, %11
  %call = call float @__ieee754_logf(float %sub) #5
  %sub8 = fsub float -0.000000e+00, %call
  store float %sub8, float* %retval
  br label %return

if.else:                                          ; preds = %if.then5
  %12 = load float* %x.addr, align 4
  %call9 = call float @__ieee754_logf(float %12) #5
  %sub10 = fsub float -0.000000e+00, %call9
  store float %sub10, float* %retval
  br label %return

if.end11:                                         ; preds = %if.end3
  %13 = load i32* %hx, align 4
  %cmp12 = icmp slt i32 %13, 0
  br i1 %cmp12, label %if.then13, label %if.end28

if.then13:                                        ; preds = %if.end11
  %14 = load i32* %ix, align 4
  %cmp14 = icmp sge i32 %14, 1258291200
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.then13
  store float 0x7FF0000000000000, float* %retval
  br label %return

if.end16:                                         ; preds = %if.then13
  %15 = load float* %x.addr, align 4
  %call17 = call float @sin_pif(float %15) #5
  store float %call17, float* %t, align 4
  %16 = load float* %t, align 4
  %cmp18 = fcmp oeq float %16, 0.000000e+00
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end16
  store float 0x7FF0000000000000, float* %retval
  br label %return

if.end20:                                         ; preds = %if.end16
  %17 = load float* %t, align 4
  %18 = load float* %x.addr, align 4
  %mul21 = fmul float %17, %18
  %call22 = call float @fabsf(float %mul21) #6
  %div = fdiv float 0x400921FB60000000, %call22
  %call23 = call float @__ieee754_logf(float %div) #5
  store float %call23, float* %nadj, align 4
  %19 = load float* %t, align 4
  %cmp24 = fcmp olt float %19, 0.000000e+00
  br i1 %cmp24, label %if.then25, label %if.end26

if.then25:                                        ; preds = %if.end20
  %20 = load i32** %signgamp.addr, align 4
  store i32 -1, i32* %20, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then25, %if.end20
  %21 = load float* %x.addr, align 4
  %sub27 = fsub float -0.000000e+00, %21
  store float %sub27, float* %x.addr, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.end26, %if.end11
  %22 = load i32* %ix, align 4
  %cmp29 = icmp eq i32 %22, 1065353216
  br i1 %cmp29, label %if.then31, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end28
  %23 = load i32* %ix, align 4
  %cmp30 = icmp eq i32 %23, 1073741824
  br i1 %cmp30, label %if.then31, label %if.else32

if.then31:                                        ; preds = %lor.lhs.false, %if.end28
  store float 0.000000e+00, float* %r, align 4
  br label %if.end230

if.else32:                                        ; preds = %lor.lhs.false
  %24 = load i32* %ix, align 4
  %cmp33 = icmp slt i32 %24, 1073741824
  br i1 %cmp33, label %if.then34, label %if.else149

if.then34:                                        ; preds = %if.else32
  %25 = load i32* %ix, align 4
  %cmp35 = icmp sle i32 %25, 1063675494
  br i1 %cmp35, label %if.then36, label %if.else49

if.then36:                                        ; preds = %if.then34
  %26 = load float* %x.addr, align 4
  %call37 = call float @__ieee754_logf(float %26) #5
  %sub38 = fsub float -0.000000e+00, %call37
  store float %sub38, float* %r, align 4
  %27 = load i32* %ix, align 4
  %cmp39 = icmp sge i32 %27, 1060850208
  br i1 %cmp39, label %if.then40, label %if.else42

if.then40:                                        ; preds = %if.then36
  %28 = load float* %x.addr, align 4
  %sub41 = fsub float 1.000000e+00, %28
  store float %sub41, float* %y, align 4
  store i32 0, i32* %i, align 4
  br label %if.end48

if.else42:                                        ; preds = %if.then36
  %29 = load i32* %ix, align 4
  %cmp43 = icmp sge i32 %29, 1047343880
  br i1 %cmp43, label %if.then44, label %if.else46

if.then44:                                        ; preds = %if.else42
  %30 = load float* %x.addr, align 4
  %sub45 = fsub float %30, 0x3FDD8B6180000000
  store float %sub45, float* %y, align 4
  store i32 1, i32* %i, align 4
  br label %if.end47

if.else46:                                        ; preds = %if.else42
  %31 = load float* %x.addr, align 4
  store float %31, float* %y, align 4
  store i32 2, i32* %i, align 4
  br label %if.end47

if.end47:                                         ; preds = %if.else46, %if.then44
  br label %if.end48

if.end48:                                         ; preds = %if.end47, %if.then40
  br label %if.end61

if.else49:                                        ; preds = %if.then34
  store float 0.000000e+00, float* %r, align 4
  %32 = load i32* %ix, align 4
  %cmp50 = icmp sge i32 %32, 1071490584
  br i1 %cmp50, label %if.then51, label %if.else53

if.then51:                                        ; preds = %if.else49
  %33 = load float* %x.addr, align 4
  %sub52 = fsub float 2.000000e+00, %33
  store float %sub52, float* %y, align 4
  store i32 0, i32* %i, align 4
  br label %if.end60

if.else53:                                        ; preds = %if.else49
  %34 = load i32* %ix, align 4
  %cmp54 = icmp sge i32 %34, 1067296288
  br i1 %cmp54, label %if.then55, label %if.else57

if.then55:                                        ; preds = %if.else53
  %35 = load float* %x.addr, align 4
  %sub56 = fsub float %35, 0x3FF762D860000000
  store float %sub56, float* %y, align 4
  store i32 1, i32* %i, align 4
  br label %if.end59

if.else57:                                        ; preds = %if.else53
  %36 = load float* %x.addr, align 4
  %sub58 = fsub float %36, 1.000000e+00
  store float %sub58, float* %y, align 4
  store i32 2, i32* %i, align 4
  br label %if.end59

if.end59:                                         ; preds = %if.else57, %if.then55
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then51
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.end48
  %37 = load i32* %i, align 4
  switch i32 %37, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb88
    i32 2, label %sw.bb123
  ]

sw.bb:                                            ; preds = %if.end61
  %38 = load float* %y, align 4
  %39 = load float* %y, align 4
  %mul62 = fmul float %38, %39
  store float %mul62, float* %z, align 4
  %40 = load float* %z, align 4
  %41 = load float* %z, align 4
  %42 = load float* %z, align 4
  %43 = load float* %z, align 4
  %44 = load float* %z, align 4
  %mul63 = fmul float %44, 0x3EFA707440000000
  %add = fadd float 0x3F2CF2ECE0000000, %mul63
  %mul64 = fmul float %43, %add
  %add65 = fadd float 0x3F538A9420000000, %mul64
  %mul66 = fmul float %42, %add65
  %add67 = fadd float 0x3F7E404FC0000000, %mul66
  %mul68 = fmul float %41, %add67
  %add69 = fadd float 0x3FB13E0020000000, %mul68
  %mul70 = fmul float %40, %add69
  %add71 = fadd float 0x3FB3C467E0000000, %mul70
  store float %add71, float* %p1, align 4
  %45 = load float* %z, align 4
  %46 = load float* %z, align 4
  %47 = load float* %z, align 4
  %48 = load float* %z, align 4
  %49 = load float* %z, align 4
  %50 = load float* %z, align 4
  %mul72 = fmul float %50, 0x3F07858EA0000000
  %add73 = fadd float 0x3F1C5088A0000000, %mul72
  %mul74 = fmul float %49, %add73
  %add75 = fadd float 0x3F40B6C680000000, %mul74
  %mul76 = fmul float %48, %add75
  %add77 = fadd float 0x3F67ADD8C0000000, %mul76
  %mul78 = fmul float %47, %add77
  %add79 = fadd float 0x3F951322A0000000, %mul78
  %mul80 = fmul float %46, %add79
  %add81 = fadd float 0x3FD4A34CC0000000, %mul80
  %mul82 = fmul float %45, %add81
  store float %mul82, float* %p2, align 4
  %51 = load float* %y, align 4
  %52 = load float* %p1, align 4
  %mul83 = fmul float %51, %52
  %53 = load float* %p2, align 4
  %add84 = fadd float %mul83, %53
  store float %add84, float* %p, align 4
  %54 = load float* %p, align 4
  %55 = load float* %y, align 4
  %mul85 = fmul float 5.000000e-01, %55
  %sub86 = fsub float %54, %mul85
  %56 = load float* %r, align 4
  %add87 = fadd float %56, %sub86
  store float %add87, float* %r, align 4
  br label %sw.epilog

sw.bb88:                                          ; preds = %if.end61
  %57 = load float* %y, align 4
  %58 = load float* %y, align 4
  %mul89 = fmul float %57, %58
  store float %mul89, float* %z, align 4
  %59 = load float* %z, align 4
  %60 = load float* %y, align 4
  %mul90 = fmul float %59, %60
  store float %mul90, float* %w, align 4
  %61 = load float* %w, align 4
  %62 = load float* %w, align 4
  %63 = load float* %w, align 4
  %64 = load float* %w, align 4
  %mul91 = fmul float %64, 0x3F34AF6D60000000
  %add92 = fadd float 0xBF56FE8EC0000000, %mul91
  %mul93 = fmul float %63, %add92
  %add94 = fadd float 0x3F78FCE0E0000000, %mul93
  %mul95 = fmul float %62, %add94
  %add96 = fadd float 0xBFA0C9A8E0000000, %mul95
  %mul97 = fmul float %61, %add96
  %add98 = fadd float 0x3FDEF72BC0000000, %mul97
  store float %add98, float* %p1, align 4
  %65 = load float* %w, align 4
  %66 = load float* %w, align 4
  %67 = load float* %w, align 4
  %68 = load float* %w, align 4
  %mul99 = fmul float %68, 0xBF347F24E0000000
  %add100 = fadd float 0x3F4CDF0CE0000000, %mul99
  %mul101 = fmul float %67, %add100
  %add102 = fadd float 0xBF6E2EFFC0000000, %mul101
  %mul103 = fmul float %66, %add102
  %add104 = fadd float 0x3F9266E7A0000000, %mul103
  %mul105 = fmul float %65, %add104
  %add106 = fadd float 0xBFC2E42780000000, %mul105
  store float %add106, float* %p2, align 4
  %69 = load float* %w, align 4
  %70 = load float* %w, align 4
  %71 = load float* %w, align 4
  %72 = load float* %w, align 4
  %mul107 = fmul float %72, 0x3F35FD3EE0000000
  %add108 = fadd float 0xBF41A610A0000000, %mul107
  %mul109 = fmul float %71, %add108
  %add110 = fadd float 0x3F6282D320000000, %mul109
  %mul111 = fmul float %70, %add110
  %add112 = fadd float 0xBF851F9FC0000000, %mul111
  %mul113 = fmul float %69, %add112
  %add114 = fadd float 0x3FB08B42A0000000, %mul113
  store float %add114, float* %p3, align 4
  %73 = load float* %z, align 4
  %74 = load float* %p1, align 4
  %mul115 = fmul float %73, %74
  %75 = load float* %w, align 4
  %76 = load float* %p2, align 4
  %77 = load float* %y, align 4
  %78 = load float* %p3, align 4
  %mul116 = fmul float %77, %78
  %add117 = fadd float %76, %mul116
  %mul118 = fmul float %75, %add117
  %sub119 = fsub float 0x3E3CC38A40000000, %mul118
  %sub120 = fsub float %mul115, %sub119
  store float %sub120, float* %p, align 4
  %79 = load float* %p, align 4
  %add121 = fadd float 0xBFBF19B9A0000000, %79
  %80 = load float* %r, align 4
  %add122 = fadd float %80, %add121
  store float %add122, float* %r, align 4
  br label %sw.epilog

sw.bb123:                                         ; preds = %if.end61
  %81 = load float* %y, align 4
  %82 = load float* %y, align 4
  %83 = load float* %y, align 4
  %84 = load float* %y, align 4
  %85 = load float* %y, align 4
  %86 = load float* %y, align 4
  %mul124 = fmul float %86, 0x3F8B678BC0000000
  %add125 = fadd float 0x3FCD4EAF00000000, %mul124
  %mul126 = fmul float %85, %add125
  %add127 = fadd float 0x3FEF497640000000, %mul126
  %mul128 = fmul float %84, %add127
  %add129 = fadd float 0x3FF7475CE0000000, %mul128
  %mul130 = fmul float %83, %add129
  %add131 = fadd float 0x3FE4401E80000000, %mul130
  %mul132 = fmul float %82, %add131
  %add133 = fadd float 0xBFB3C467E0000000, %mul132
  %mul134 = fmul float %81, %add133
  store float %mul134, float* %p1, align 4
  %87 = load float* %y, align 4
  %88 = load float* %y, align 4
  %89 = load float* %y, align 4
  %90 = load float* %y, align 4
  %91 = load float* %y, align 4
  %mul135 = fmul float %91, 0x3F6A5ABB60000000
  %add136 = fadd float 0x3FBAAE55E0000000, %mul135
  %mul137 = fmul float %90, %add136
  %add138 = fadd float 0x3FE89DFBE0000000, %mul137
  %mul139 = fmul float %89, %add138
  %add140 = fadd float 0x40010725A0000000, %mul139
  %mul141 = fmul float %88, %add140
  %add142 = fadd float 0x4003A5D7C0000000, %mul141
  %mul143 = fmul float %87, %add142
  %add144 = fadd float 1.000000e+00, %mul143
  store float %add144, float* %p2, align 4
  %92 = load float* %y, align 4
  %mul145 = fmul float -5.000000e-01, %92
  %93 = load float* %p1, align 4
  %94 = load float* %p2, align 4
  %div146 = fdiv float %93, %94
  %add147 = fadd float %mul145, %div146
  %95 = load float* %r, align 4
  %add148 = fadd float %95, %add147
  store float %add148, float* %r, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb123, %sw.bb88, %sw.bb, %if.end61
  br label %if.end229

if.else149:                                       ; preds = %if.else32
  %96 = load i32* %ix, align 4
  %cmp150 = icmp slt i32 %96, 1090519040
  br i1 %cmp150, label %if.then151, label %if.else200

if.then151:                                       ; preds = %if.else149
  %97 = load float* %x.addr, align 4
  %conv = fptosi float %97 to i32
  store i32 %conv, i32* %i, align 4
  store float 0.000000e+00, float* %t, align 4
  %98 = load float* %x.addr, align 4
  %99 = load i32* %i, align 4
  %conv152 = sitofp i32 %99 to float
  %sub153 = fsub float %98, %conv152
  store float %sub153, float* %y, align 4
  %100 = load float* %y, align 4
  %101 = load float* %y, align 4
  %102 = load float* %y, align 4
  %103 = load float* %y, align 4
  %104 = load float* %y, align 4
  %105 = load float* %y, align 4
  %106 = load float* %y, align 4
  %mul154 = fmul float %106, 0x3F00BFECE0000000
  %add155 = fadd float 0x3F5E26B680000000, %mul154
  %mul156 = fmul float %105, %add155
  %add157 = fadd float 0x3F9B481C80000000, %mul156
  %mul158 = fmul float %104, %add157
  %add159 = fadd float 0x3FC2BB9CC0000000, %mul158
  %mul160 = fmul float %103, %add159
  %add161 = fadd float 0x3FD4D98F40000000, %mul160
  %mul162 = fmul float %102, %add161
  %add163 = fadd float 0x3FCB848B40000000, %mul162
  %mul164 = fmul float %101, %add163
  %add165 = fadd float 0xBFB3C467E0000000, %mul164
  %mul166 = fmul float %100, %add165
  store float %mul166, float* %p, align 4
  %107 = load float* %y, align 4
  %108 = load float* %y, align 4
  %109 = load float* %y, align 4
  %110 = load float* %y, align 4
  %111 = load float* %y, align 4
  %112 = load float* %y, align 4
  %mul167 = fmul float %112, 0x3EDEBAF7A0000000
  %add168 = fadd float 0x3F497DDAC0000000, %mul167
  %mul169 = fmul float %111, %add168
  %add170 = fadd float 0x3F9317EA80000000, %mul169
  %mul171 = fmul float %110, %add170
  %add172 = fadd float 0x3FC601EDC0000000, %mul171
  %mul173 = fmul float %109, %add172
  %add174 = fadd float 0x3FE71A18A0000000, %mul173
  %mul175 = fmul float %108, %add174
  %add176 = fadd float 0x3FF645A760000000, %mul175
  %mul177 = fmul float %107, %add176
  %add178 = fadd float 1.000000e+00, %mul177
  store float %add178, float* %q, align 4
  %113 = load float* %y, align 4
  %mul179 = fmul float 5.000000e-01, %113
  %114 = load float* %p, align 4
  %115 = load float* %q, align 4
  %div180 = fdiv float %114, %115
  %add181 = fadd float %mul179, %div180
  store float %add181, float* %r, align 4
  store float 1.000000e+00, float* %z, align 4
  %116 = load i32* %i, align 4
  switch i32 %116, label %sw.epilog199 [
    i32 7, label %sw.bb182
    i32 6, label %sw.bb185
    i32 5, label %sw.bb188
    i32 4, label %sw.bb191
    i32 3, label %sw.bb194
  ]

sw.bb182:                                         ; preds = %if.then151
  %117 = load float* %y, align 4
  %add183 = fadd float %117, 6.000000e+00
  %118 = load float* %z, align 4
  %mul184 = fmul float %118, %add183
  store float %mul184, float* %z, align 4
  br label %sw.bb185

sw.bb185:                                         ; preds = %sw.bb182, %if.then151
  %119 = load float* %y, align 4
  %add186 = fadd float %119, 5.000000e+00
  %120 = load float* %z, align 4
  %mul187 = fmul float %120, %add186
  store float %mul187, float* %z, align 4
  br label %sw.bb188

sw.bb188:                                         ; preds = %sw.bb185, %if.then151
  %121 = load float* %y, align 4
  %add189 = fadd float %121, 4.000000e+00
  %122 = load float* %z, align 4
  %mul190 = fmul float %122, %add189
  store float %mul190, float* %z, align 4
  br label %sw.bb191

sw.bb191:                                         ; preds = %sw.bb188, %if.then151
  %123 = load float* %y, align 4
  %add192 = fadd float %123, 3.000000e+00
  %124 = load float* %z, align 4
  %mul193 = fmul float %124, %add192
  store float %mul193, float* %z, align 4
  br label %sw.bb194

sw.bb194:                                         ; preds = %sw.bb191, %if.then151
  %125 = load float* %y, align 4
  %add195 = fadd float %125, 2.000000e+00
  %126 = load float* %z, align 4
  %mul196 = fmul float %126, %add195
  store float %mul196, float* %z, align 4
  %127 = load float* %z, align 4
  %call197 = call float @__ieee754_logf(float %127) #5
  %128 = load float* %r, align 4
  %add198 = fadd float %128, %call197
  store float %add198, float* %r, align 4
  br label %sw.epilog199

sw.epilog199:                                     ; preds = %sw.bb194, %if.then151
  br label %if.end228

if.else200:                                       ; preds = %if.else149
  %129 = load i32* %ix, align 4
  %cmp201 = icmp slt i32 %129, 1551892480
  br i1 %cmp201, label %if.then203, label %if.else223

if.then203:                                       ; preds = %if.else200
  %130 = load float* %x.addr, align 4
  %call204 = call float @__ieee754_logf(float %130) #5
  store float %call204, float* %t, align 4
  %131 = load float* %x.addr, align 4
  %div205 = fdiv float 1.000000e+00, %131
  store float %div205, float* %z, align 4
  %132 = load float* %z, align 4
  %133 = load float* %z, align 4
  %mul206 = fmul float %132, %133
  store float %mul206, float* %y, align 4
  %134 = load float* %z, align 4
  %135 = load float* %y, align 4
  %136 = load float* %y, align 4
  %137 = load float* %y, align 4
  %138 = load float* %y, align 4
  %139 = load float* %y, align 4
  %mul207 = fmul float %139, 0xBF5AB89D00000000
  %add208 = fadd float 0x3F4B67BA40000000, %mul207
  %mul209 = fmul float %138, %add208
  %add210 = fadd float 0xBF4380CB80000000, %mul209
  %mul211 = fmul float %137, %add210
  %add212 = fadd float 0x3F4A019FA0000000, %mul211
  %mul213 = fmul float %136, %add212
  %add214 = fadd float 0xBF66C16C20000000, %mul213
  %mul215 = fmul float %135, %add214
  %add216 = fadd float 0x3FB5555560000000, %mul215
  %mul217 = fmul float %134, %add216
  %add218 = fadd float 0x3FDACFE3A0000000, %mul217
  store float %add218, float* %w, align 4
  %140 = load float* %x.addr, align 4
  %sub219 = fsub float %140, 5.000000e-01
  %141 = load float* %t, align 4
  %sub220 = fsub float %141, 1.000000e+00
  %mul221 = fmul float %sub219, %sub220
  %142 = load float* %w, align 4
  %add222 = fadd float %mul221, %142
  store float %add222, float* %r, align 4
  br label %if.end227

if.else223:                                       ; preds = %if.else200
  %143 = load float* %x.addr, align 4
  %144 = load float* %x.addr, align 4
  %call224 = call float @__ieee754_logf(float %144) #5
  %sub225 = fsub float %call224, 1.000000e+00
  %mul226 = fmul float %143, %sub225
  store float %mul226, float* %r, align 4
  br label %if.end227

if.end227:                                        ; preds = %if.else223, %if.then203
  br label %if.end228

if.end228:                                        ; preds = %if.end227, %sw.epilog199
  br label %if.end229

if.end229:                                        ; preds = %if.end228, %sw.epilog
  br label %if.end230

if.end230:                                        ; preds = %if.end229, %if.then31
  %145 = load i32* %hx, align 4
  %cmp231 = icmp slt i32 %145, 0
  br i1 %cmp231, label %if.then233, label %if.end235

if.then233:                                       ; preds = %if.end230
  %146 = load float* %nadj, align 4
  %147 = load float* %r, align 4
  %sub234 = fsub float %146, %147
  store float %sub234, float* %r, align 4
  br label %if.end235

if.end235:                                        ; preds = %if.then233, %if.end230
  %148 = load float* %r, align 4
  store float %148, float* %retval
  br label %return

return:                                           ; preds = %if.end235, %if.then19, %if.then15, %if.else, %if.then7, %if.then2, %if.then
  %149 = load float* %retval
  ret float %149
}

; Function Attrs: nounwind
define double @__ieee754_gamma_r(double %x, i32* %signgamp) #2 {
entry:
  %x.addr = alloca double, align 8
  %signgamp.addr = alloca i32*, align 4
  store double %x, double* %x.addr, align 8
  store i32* %signgamp, i32** %signgamp.addr, align 4
  %0 = load double* %x.addr, align 8
  %1 = load i32** %signgamp.addr, align 4
  %call = call double @__ieee754_lgamma_r(double %0, i32* %1) #5
  %call1 = call double @__ieee754_exp(double %call) #5
  ret double %call1
}

; Function Attrs: nounwind
define double @__ieee754_lgamma_r(double %x, i32* %signgamp) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %signgamp.addr = alloca i32*, align 4
  %t = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  %nadj = alloca double, align 8
  %p = alloca double, align 8
  %p1 = alloca double, align 8
  %p2 = alloca double, align 8
  %p3 = alloca double, align 8
  %q = alloca double, align 8
  %r = alloca double, align 8
  %w = alloca double, align 8
  %i = alloca i32, align 4
  %hx = alloca i32, align 4
  %lx = alloca i32, align 4
  %ix = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store i32* %signgamp, i32** %signgamp.addr, align 4
  store double 0.000000e+00, double* %nadj, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32** %signgamp.addr, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32* %hx, align 4
  %and = and i32 %4, 2147483647
  store i32 %and, i32* %ix, align 4
  %5 = load i32* %ix, align 4
  %cmp = icmp sge i32 %5, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %mul = fmul double %6, %7
  store double %mul, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %8 = load i32* %ix, align 4
  %9 = load i32* %lx, align 4
  %or = or i32 %8, %9
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.end
  store double 0x7FF0000000000000, double* %retval
  br label %return

if.end4:                                          ; preds = %if.end
  %10 = load i32* %ix, align 4
  %cmp5 = icmp slt i32 %10, 999292928
  br i1 %cmp5, label %if.then6, label %if.end12

if.then6:                                         ; preds = %if.end4
  %11 = load i32* %hx, align 4
  %cmp7 = icmp slt i32 %11, 0
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.then6
  %12 = load i32** %signgamp.addr, align 4
  store i32 -1, i32* %12, align 4
  %13 = load double* %x.addr, align 8
  %sub = fsub double -0.000000e+00, %13
  %call = call double @__ieee754_log(double %sub) #5
  %sub9 = fsub double -0.000000e+00, %call
  store double %sub9, double* %retval
  br label %return

if.else:                                          ; preds = %if.then6
  %14 = load double* %x.addr, align 8
  %call10 = call double @__ieee754_log(double %14) #5
  %sub11 = fsub double -0.000000e+00, %call10
  store double %sub11, double* %retval
  br label %return

if.end12:                                         ; preds = %if.end4
  %15 = load i32* %hx, align 4
  %cmp13 = icmp slt i32 %15, 0
  br i1 %cmp13, label %if.then14, label %if.end29

if.then14:                                        ; preds = %if.end12
  %16 = load i32* %ix, align 4
  %cmp15 = icmp sge i32 %16, 1127219200
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.then14
  store double 0x7FF0000000000000, double* %retval
  br label %return

if.end17:                                         ; preds = %if.then14
  %17 = load double* %x.addr, align 8
  %call18 = call double @sin_pi(double %17) #5
  store double %call18, double* %t, align 8
  %18 = load double* %t, align 8
  %cmp19 = fcmp oeq double %18, 0.000000e+00
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end17
  store double 0x7FF0000000000000, double* %retval
  br label %return

if.end21:                                         ; preds = %if.end17
  %19 = load double* %t, align 8
  %20 = load double* %x.addr, align 8
  %mul22 = fmul double %19, %20
  %call23 = call double @fabs(double %mul22) #6
  %div = fdiv double 0x400921FB54442D18, %call23
  %call24 = call double @__ieee754_log(double %div) #5
  store double %call24, double* %nadj, align 8
  %21 = load double* %t, align 8
  %cmp25 = fcmp olt double %21, 0.000000e+00
  br i1 %cmp25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.end21
  %22 = load i32** %signgamp.addr, align 4
  store i32 -1, i32* %22, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then26, %if.end21
  %23 = load double* %x.addr, align 8
  %sub28 = fsub double -0.000000e+00, %23
  store double %sub28, double* %x.addr, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.end27, %if.end12
  %24 = load i32* %ix, align 4
  %sub30 = sub nsw i32 %24, 1072693248
  %25 = load i32* %lx, align 4
  %or31 = or i32 %sub30, %25
  %cmp32 = icmp eq i32 %or31, 0
  br i1 %cmp32, label %if.then36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end29
  %26 = load i32* %ix, align 4
  %sub33 = sub nsw i32 %26, 1073741824
  %27 = load i32* %lx, align 4
  %or34 = or i32 %sub33, %27
  %cmp35 = icmp eq i32 %or34, 0
  br i1 %cmp35, label %if.then36, label %if.else37

if.then36:                                        ; preds = %lor.lhs.false, %if.end29
  store double 0.000000e+00, double* %r, align 8
  br label %if.end235

if.else37:                                        ; preds = %lor.lhs.false
  %28 = load i32* %ix, align 4
  %cmp38 = icmp slt i32 %28, 1073741824
  br i1 %cmp38, label %if.then39, label %if.else154

if.then39:                                        ; preds = %if.else37
  %29 = load i32* %ix, align 4
  %cmp40 = icmp sle i32 %29, 1072483532
  br i1 %cmp40, label %if.then41, label %if.else54

if.then41:                                        ; preds = %if.then39
  %30 = load double* %x.addr, align 8
  %call42 = call double @__ieee754_log(double %30) #5
  %sub43 = fsub double -0.000000e+00, %call42
  store double %sub43, double* %r, align 8
  %31 = load i32* %ix, align 4
  %cmp44 = icmp sge i32 %31, 1072130372
  br i1 %cmp44, label %if.then45, label %if.else47

if.then45:                                        ; preds = %if.then41
  %32 = load double* %x.addr, align 8
  %sub46 = fsub double 1.000000e+00, %32
  store double %sub46, double* %y, align 8
  store i32 0, i32* %i, align 4
  br label %if.end53

if.else47:                                        ; preds = %if.then41
  %33 = load i32* %ix, align 4
  %cmp48 = icmp sge i32 %33, 1070442081
  br i1 %cmp48, label %if.then49, label %if.else51

if.then49:                                        ; preds = %if.else47
  %34 = load double* %x.addr, align 8
  %sub50 = fsub double %34, 0x3FDD8B618D5AF8FC
  store double %sub50, double* %y, align 8
  store i32 1, i32* %i, align 4
  br label %if.end52

if.else51:                                        ; preds = %if.else47
  %35 = load double* %x.addr, align 8
  store double %35, double* %y, align 8
  store i32 2, i32* %i, align 4
  br label %if.end52

if.end52:                                         ; preds = %if.else51, %if.then49
  br label %if.end53

if.end53:                                         ; preds = %if.end52, %if.then45
  br label %if.end66

if.else54:                                        ; preds = %if.then39
  store double 0.000000e+00, double* %r, align 8
  %36 = load i32* %ix, align 4
  %cmp55 = icmp sge i32 %36, 1073460419
  br i1 %cmp55, label %if.then56, label %if.else58

if.then56:                                        ; preds = %if.else54
  %37 = load double* %x.addr, align 8
  %sub57 = fsub double 2.000000e+00, %37
  store double %sub57, double* %y, align 8
  store i32 0, i32* %i, align 4
  br label %if.end65

if.else58:                                        ; preds = %if.else54
  %38 = load i32* %ix, align 4
  %cmp59 = icmp sge i32 %38, 1072936132
  br i1 %cmp59, label %if.then60, label %if.else62

if.then60:                                        ; preds = %if.else58
  %39 = load double* %x.addr, align 8
  %sub61 = fsub double %39, 0x3FF762D86356BE3F
  store double %sub61, double* %y, align 8
  store i32 1, i32* %i, align 4
  br label %if.end64

if.else62:                                        ; preds = %if.else58
  %40 = load double* %x.addr, align 8
  %sub63 = fsub double %40, 1.000000e+00
  store double %sub63, double* %y, align 8
  store i32 2, i32* %i, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.else62, %if.then60
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then56
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.end53
  %41 = load i32* %i, align 4
  switch i32 %41, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb93
    i32 2, label %sw.bb128
  ]

sw.bb:                                            ; preds = %if.end66
  %42 = load double* %y, align 8
  %43 = load double* %y, align 8
  %mul67 = fmul double %42, %43
  store double %mul67, double* %z, align 8
  %44 = load double* %z, align 8
  %45 = load double* %z, align 8
  %46 = load double* %z, align 8
  %47 = load double* %z, align 8
  %48 = load double* %z, align 8
  %mul68 = fmul double %48, 0x3EFA7074428CFA52
  %add = fadd double 0x3F2CF2ECED10E54D, %mul68
  %mul69 = fmul double %47, %add
  %add70 = fadd double 0x3F538A94116F3F5D, %mul69
  %mul71 = fmul double %46, %add70
  %add72 = fadd double 0x3F7E404FB68FEFE8, %mul71
  %mul73 = fmul double %45, %add72
  %add74 = fadd double 0x3FB13E001A5562A7, %mul73
  %mul75 = fmul double %44, %add74
  %add76 = fadd double 0x3FB3C467E37DB0C8, %mul75
  store double %add76, double* %p1, align 8
  %49 = load double* %z, align 8
  %50 = load double* %z, align 8
  %51 = load double* %z, align 8
  %52 = load double* %z, align 8
  %53 = load double* %z, align 8
  %54 = load double* %z, align 8
  %mul77 = fmul double %54, 0x3F07858E90A45837
  %add78 = fadd double 0x3F1C5088987DFB07, %mul77
  %mul79 = fmul double %53, %add78
  %add80 = fadd double 0x3F40B6C689B99C00, %mul79
  %mul81 = fmul double %52, %add80
  %add82 = fadd double 0x3F67ADD8CCB7926B, %mul81
  %mul83 = fmul double %51, %add82
  %add84 = fadd double 0x3F951322AC92547B, %mul83
  %mul85 = fmul double %50, %add84
  %add86 = fadd double 0x3FD4A34CC4A60FAD, %mul85
  %mul87 = fmul double %49, %add86
  store double %mul87, double* %p2, align 8
  %55 = load double* %y, align 8
  %56 = load double* %p1, align 8
  %mul88 = fmul double %55, %56
  %57 = load double* %p2, align 8
  %add89 = fadd double %mul88, %57
  store double %add89, double* %p, align 8
  %58 = load double* %p, align 8
  %59 = load double* %y, align 8
  %mul90 = fmul double 5.000000e-01, %59
  %sub91 = fsub double %58, %mul90
  %60 = load double* %r, align 8
  %add92 = fadd double %60, %sub91
  store double %add92, double* %r, align 8
  br label %sw.epilog

sw.bb93:                                          ; preds = %if.end66
  %61 = load double* %y, align 8
  %62 = load double* %y, align 8
  %mul94 = fmul double %61, %62
  store double %mul94, double* %z, align 8
  %63 = load double* %z, align 8
  %64 = load double* %y, align 8
  %mul95 = fmul double %63, %64
  store double %mul95, double* %w, align 8
  %65 = load double* %w, align 8
  %66 = load double* %w, align 8
  %67 = load double* %w, align 8
  %68 = load double* %w, align 8
  %mul96 = fmul double %68, 0x3F34AF6D6C0EBBF7
  %add97 = fadd double 0xBF56FE8EBF2D1AF1, %mul96
  %mul98 = fmul double %67, %add97
  %add99 = fadd double 0x3F78FCE0E370E344, %mul98
  %mul100 = fmul double %66, %add99
  %add101 = fadd double 0xBFA0C9A8DF35B713, %mul100
  %mul102 = fmul double %65, %add101
  %add103 = fadd double 0x3FDEF72BC8EE38A2, %mul102
  store double %add103, double* %p1, align 8
  %69 = load double* %w, align 8
  %70 = load double* %w, align 8
  %71 = load double* %w, align 8
  %72 = load double* %w, align 8
  %mul104 = fmul double %72, 0xBF347F24ECC38C38
  %add105 = fadd double 0x3F4CDF0CEF61A8E9, %mul104
  %mul106 = fmul double %71, %add105
  %add107 = fadd double 0xBF6E2EFFB3E914D7, %mul106
  %mul108 = fmul double %70, %add107
  %add109 = fadd double 0x3F9266E7970AF9EC, %mul108
  %mul110 = fmul double %69, %add109
  %add111 = fadd double 0xBFC2E4278DC6C509, %mul110
  store double %add111, double* %p2, align 8
  %73 = load double* %w, align 8
  %74 = load double* %w, align 8
  %75 = load double* %w, align 8
  %76 = load double* %w, align 8
  %mul112 = fmul double %76, 0x3F35FD3EE8C2D3F4
  %add113 = fadd double 0xBF41A6109C73E0EC, %mul112
  %mul114 = fmul double %75, %add113
  %add115 = fadd double 0x3F6282D32E15C915, %mul114
  %mul116 = fmul double %74, %add115
  %add117 = fadd double 0xBF851F9FBA91EC6A, %mul116
  %mul118 = fmul double %73, %add117
  %add119 = fadd double 0x3FB08B4294D5419B, %mul118
  store double %add119, double* %p3, align 8
  %77 = load double* %z, align 8
  %78 = load double* %p1, align 8
  %mul120 = fmul double %77, %78
  %79 = load double* %w, align 8
  %80 = load double* %p2, align 8
  %81 = load double* %y, align 8
  %82 = load double* %p3, align 8
  %mul121 = fmul double %81, %82
  %add122 = fadd double %80, %mul121
  %mul123 = fmul double %79, %add122
  %sub124 = fsub double 0xBC50C7CAA48A971F, %mul123
  %sub125 = fsub double %mul120, %sub124
  store double %sub125, double* %p, align 8
  %83 = load double* %p, align 8
  %add126 = fadd double 0xBFBF19B9BCC38A42, %83
  %84 = load double* %r, align 8
  %add127 = fadd double %84, %add126
  store double %add127, double* %r, align 8
  br label %sw.epilog

sw.bb128:                                         ; preds = %if.end66
  %85 = load double* %y, align 8
  %86 = load double* %y, align 8
  %87 = load double* %y, align 8
  %88 = load double* %y, align 8
  %89 = load double* %y, align 8
  %90 = load double* %y, align 8
  %mul129 = fmul double %90, 0x3F8B678BBF2BAB09
  %add130 = fadd double 0x3FCD4EAEF6010924, %mul129
  %mul131 = fmul double %89, %add130
  %add132 = fadd double 0x3FEF497644EA8450, %mul131
  %mul133 = fmul double %88, %add132
  %add134 = fadd double 0x3FF7475CD119BD6F, %mul133
  %mul135 = fmul double %87, %add134
  %add136 = fadd double 0x3FE4401E8B005DFF, %mul135
  %mul137 = fmul double %86, %add136
  %add138 = fadd double 0xBFB3C467E37DB0C8, %mul137
  %mul139 = fmul double %85, %add138
  store double %mul139, double* %p1, align 8
  %91 = load double* %y, align 8
  %92 = load double* %y, align 8
  %93 = load double* %y, align 8
  %94 = load double* %y, align 8
  %95 = load double* %y, align 8
  %mul140 = fmul double %95, 0x3F6A5ABB57D0CF61
  %add141 = fadd double 0x3FBAAE55D6537C88, %mul140
  %mul142 = fmul double %94, %add141
  %add143 = fadd double 0x3FE89DFBE45050AF, %mul142
  %mul144 = fmul double %93, %add143
  %add145 = fadd double 0x40010725A42B18F5, %mul144
  %mul146 = fmul double %92, %add145
  %add147 = fadd double 0x4003A5D7C2BD619C, %mul146
  %mul148 = fmul double %91, %add147
  %add149 = fadd double 1.000000e+00, %mul148
  store double %add149, double* %p2, align 8
  %96 = load double* %y, align 8
  %mul150 = fmul double -5.000000e-01, %96
  %97 = load double* %p1, align 8
  %98 = load double* %p2, align 8
  %div151 = fdiv double %97, %98
  %add152 = fadd double %mul150, %div151
  %99 = load double* %r, align 8
  %add153 = fadd double %99, %add152
  store double %add153, double* %r, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb128, %sw.bb93, %sw.bb, %if.end66
  br label %if.end234

if.else154:                                       ; preds = %if.else37
  %100 = load i32* %ix, align 4
  %cmp155 = icmp slt i32 %100, 1075838976
  br i1 %cmp155, label %if.then156, label %if.else205

if.then156:                                       ; preds = %if.else154
  %101 = load double* %x.addr, align 8
  %conv = fptosi double %101 to i32
  store i32 %conv, i32* %i, align 4
  store double 0.000000e+00, double* %t, align 8
  %102 = load double* %x.addr, align 8
  %103 = load i32* %i, align 4
  %conv157 = sitofp i32 %103 to double
  %sub158 = fsub double %102, %conv157
  store double %sub158, double* %y, align 8
  %104 = load double* %y, align 8
  %105 = load double* %y, align 8
  %106 = load double* %y, align 8
  %107 = load double* %y, align 8
  %108 = load double* %y, align 8
  %109 = load double* %y, align 8
  %110 = load double* %y, align 8
  %mul159 = fmul double %110, 0x3F00BFECDD17E945
  %add160 = fadd double 0x3F5E26B67368F239, %mul159
  %mul161 = fmul double %109, %add160
  %add162 = fadd double 0x3F9B481C7E939961, %mul161
  %mul163 = fmul double %108, %add162
  %add164 = fadd double 0x3FC2BB9CBEE5F2F7, %mul163
  %mul165 = fmul double %107, %add164
  %add166 = fadd double 0x3FD4D98F4F139F59, %mul165
  %mul167 = fmul double %106, %add166
  %add168 = fadd double 0x3FCB848B36E20878, %mul167
  %mul169 = fmul double %105, %add168
  %add170 = fadd double 0xBFB3C467E37DB0C8, %mul169
  %mul171 = fmul double %104, %add170
  store double %mul171, double* %p, align 8
  %111 = load double* %y, align 8
  %112 = load double* %y, align 8
  %113 = load double* %y, align 8
  %114 = load double* %y, align 8
  %115 = load double* %y, align 8
  %116 = load double* %y, align 8
  %mul172 = fmul double %116, 0x3EDEBAF7A5B38140
  %add173 = fadd double 0x3F497DDACA41A95B, %mul172
  %mul174 = fmul double %115, %add173
  %add175 = fadd double 0x3F9317EA742ED475, %mul174
  %mul176 = fmul double %114, %add175
  %add177 = fadd double 0x3FC601EDCCFBDF27, %mul176
  %mul178 = fmul double %113, %add177
  %add179 = fadd double 0x3FE71A1893D3DCDC, %mul178
  %mul180 = fmul double %112, %add179
  %add181 = fadd double 0x3FF645A762C4AB74, %mul180
  %mul182 = fmul double %111, %add181
  %add183 = fadd double 1.000000e+00, %mul182
  store double %add183, double* %q, align 8
  %117 = load double* %y, align 8
  %mul184 = fmul double 5.000000e-01, %117
  %118 = load double* %p, align 8
  %119 = load double* %q, align 8
  %div185 = fdiv double %118, %119
  %add186 = fadd double %mul184, %div185
  store double %add186, double* %r, align 8
  store double 1.000000e+00, double* %z, align 8
  %120 = load i32* %i, align 4
  switch i32 %120, label %sw.epilog204 [
    i32 7, label %sw.bb187
    i32 6, label %sw.bb190
    i32 5, label %sw.bb193
    i32 4, label %sw.bb196
    i32 3, label %sw.bb199
  ]

sw.bb187:                                         ; preds = %if.then156
  %121 = load double* %y, align 8
  %add188 = fadd double %121, 6.000000e+00
  %122 = load double* %z, align 8
  %mul189 = fmul double %122, %add188
  store double %mul189, double* %z, align 8
  br label %sw.bb190

sw.bb190:                                         ; preds = %sw.bb187, %if.then156
  %123 = load double* %y, align 8
  %add191 = fadd double %123, 5.000000e+00
  %124 = load double* %z, align 8
  %mul192 = fmul double %124, %add191
  store double %mul192, double* %z, align 8
  br label %sw.bb193

sw.bb193:                                         ; preds = %sw.bb190, %if.then156
  %125 = load double* %y, align 8
  %add194 = fadd double %125, 4.000000e+00
  %126 = load double* %z, align 8
  %mul195 = fmul double %126, %add194
  store double %mul195, double* %z, align 8
  br label %sw.bb196

sw.bb196:                                         ; preds = %sw.bb193, %if.then156
  %127 = load double* %y, align 8
  %add197 = fadd double %127, 3.000000e+00
  %128 = load double* %z, align 8
  %mul198 = fmul double %128, %add197
  store double %mul198, double* %z, align 8
  br label %sw.bb199

sw.bb199:                                         ; preds = %sw.bb196, %if.then156
  %129 = load double* %y, align 8
  %add200 = fadd double %129, 2.000000e+00
  %130 = load double* %z, align 8
  %mul201 = fmul double %130, %add200
  store double %mul201, double* %z, align 8
  %131 = load double* %z, align 8
  %call202 = call double @__ieee754_log(double %131) #5
  %132 = load double* %r, align 8
  %add203 = fadd double %132, %call202
  store double %add203, double* %r, align 8
  br label %sw.epilog204

sw.epilog204:                                     ; preds = %sw.bb199, %if.then156
  br label %if.end233

if.else205:                                       ; preds = %if.else154
  %133 = load i32* %ix, align 4
  %cmp206 = icmp slt i32 %133, 1133510656
  br i1 %cmp206, label %if.then208, label %if.else228

if.then208:                                       ; preds = %if.else205
  %134 = load double* %x.addr, align 8
  %call209 = call double @__ieee754_log(double %134) #5
  store double %call209, double* %t, align 8
  %135 = load double* %x.addr, align 8
  %div210 = fdiv double 1.000000e+00, %135
  store double %div210, double* %z, align 8
  %136 = load double* %z, align 8
  %137 = load double* %z, align 8
  %mul211 = fmul double %136, %137
  store double %mul211, double* %y, align 8
  %138 = load double* %z, align 8
  %139 = load double* %y, align 8
  %140 = load double* %y, align 8
  %141 = load double* %y, align 8
  %142 = load double* %y, align 8
  %143 = load double* %y, align 8
  %mul212 = fmul double %143, 0xBF5AB89D0B9E43E4
  %add213 = fadd double 0x3F4B67BA4CDAD5D1, %mul212
  %mul214 = fmul double %142, %add213
  %add215 = fadd double 0xBF4380CB8C0FE741, %mul214
  %mul216 = fmul double %141, %add215
  %add217 = fadd double 0x3F4A019F98CF38B6, %mul216
  %mul218 = fmul double %140, %add217
  %add219 = fadd double 0xBF66C16C16B02E5C, %mul218
  %mul220 = fmul double %139, %add219
  %add221 = fadd double 0x3FB555555555553B, %mul220
  %mul222 = fmul double %138, %add221
  %add223 = fadd double 0x3FDACFE390C97D69, %mul222
  store double %add223, double* %w, align 8
  %144 = load double* %x.addr, align 8
  %sub224 = fsub double %144, 5.000000e-01
  %145 = load double* %t, align 8
  %sub225 = fsub double %145, 1.000000e+00
  %mul226 = fmul double %sub224, %sub225
  %146 = load double* %w, align 8
  %add227 = fadd double %mul226, %146
  store double %add227, double* %r, align 8
  br label %if.end232

if.else228:                                       ; preds = %if.else205
  %147 = load double* %x.addr, align 8
  %148 = load double* %x.addr, align 8
  %call229 = call double @__ieee754_log(double %148) #5
  %sub230 = fsub double %call229, 1.000000e+00
  %mul231 = fmul double %147, %sub230
  store double %mul231, double* %r, align 8
  br label %if.end232

if.end232:                                        ; preds = %if.else228, %if.then208
  br label %if.end233

if.end233:                                        ; preds = %if.end232, %sw.epilog204
  br label %if.end234

if.end234:                                        ; preds = %if.end233, %sw.epilog
  br label %if.end235

if.end235:                                        ; preds = %if.end234, %if.then36
  %149 = load i32* %hx, align 4
  %cmp236 = icmp slt i32 %149, 0
  br i1 %cmp236, label %if.then238, label %if.end240

if.then238:                                       ; preds = %if.end235
  %150 = load double* %nadj, align 8
  %151 = load double* %r, align 8
  %sub239 = fsub double %150, %151
  store double %sub239, double* %r, align 8
  br label %if.end240

if.end240:                                        ; preds = %if.then238, %if.end235
  %152 = load double* %r, align 8
  store double %152, double* %retval
  br label %return

return:                                           ; preds = %if.end240, %if.then20, %if.then16, %if.else, %if.then8, %if.then3, %if.then
  %153 = load double* %retval
  ret double %153
}

; Function Attrs: nounwind
define double @__ieee754_scalb(double %x, double %fn) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %fn.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %fn, double* %fn.addr, align 8
  br i1 false, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = load double* %x.addr, align 8
  %conv = fptrunc double %0 to float
  %call = call i32 @__isnanf(float %conv) #6
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %lor.lhs.false

cond.false:                                       ; preds = %entry
  br i1 true, label %cond.true1, label %cond.false4

cond.true1:                                       ; preds = %cond.false
  %1 = load double* %x.addr, align 8
  %call2 = call i32 @__isnan(double %1) #6
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %if.then, label %lor.lhs.false

cond.false4:                                      ; preds = %cond.false
  %2 = load double* %x.addr, align 8
  %conv5 = fpext double %2 to x86_fp80
  %call6 = call i32 @__isnanl(x86_fp80 %conv5) #6
  %tobool7 = icmp ne i32 %call6, 0
  br i1 %tobool7, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %cond.false4, %cond.true1, %cond.true
  br i1 false, label %cond.true8, label %cond.false12

cond.true8:                                       ; preds = %lor.lhs.false
  %3 = load double* %fn.addr, align 8
  %conv9 = fptrunc double %3 to float
  %call10 = call i32 @__isnanf(float %conv9) #6
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then, label %if.end

cond.false12:                                     ; preds = %lor.lhs.false
  br i1 true, label %cond.true13, label %cond.false16

cond.true13:                                      ; preds = %cond.false12
  %4 = load double* %fn.addr, align 8
  %call14 = call i32 @__isnan(double %4) #6
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then, label %if.end

cond.false16:                                     ; preds = %cond.false12
  %5 = load double* %fn.addr, align 8
  %conv17 = fpext double %5 to x86_fp80
  %call18 = call i32 @__isnanl(x86_fp80 %conv17) #6
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then, label %if.end

if.then:                                          ; preds = %cond.false16, %cond.true13, %cond.true8, %cond.false4, %cond.true1, %cond.true
  %6 = load double* %x.addr, align 8
  %7 = load double* %fn.addr, align 8
  %mul = fmul double %6, %7
  store double %mul, double* %retval
  br label %return

if.end:                                           ; preds = %cond.false16, %cond.true13, %cond.true8
  %8 = load double* %fn.addr, align 8
  %call20 = call i32 @finite(double %8) #6
  %tobool21 = icmp ne i32 %call20, 0
  br i1 %tobool21, label %if.end26, label %if.then22

if.then22:                                        ; preds = %if.end
  %9 = load double* %fn.addr, align 8
  %cmp = fcmp ogt double %9, 0.000000e+00
  br i1 %cmp, label %if.then24, label %if.else

if.then24:                                        ; preds = %if.then22
  %10 = load double* %x.addr, align 8
  %11 = load double* %fn.addr, align 8
  %mul25 = fmul double %10, %11
  store double %mul25, double* %retval
  br label %return

if.else:                                          ; preds = %if.then22
  %12 = load double* %x.addr, align 8
  %13 = load double* %fn.addr, align 8
  %sub = fsub double -0.000000e+00, %13
  %div = fdiv double %12, %sub
  store double %div, double* %retval
  br label %return

if.end26:                                         ; preds = %if.end
  %14 = load double* %fn.addr, align 8
  %call27 = call double @rint(double %14) #4
  %15 = load double* %fn.addr, align 8
  %cmp28 = fcmp une double %call27, %15
  br i1 %cmp28, label %if.then30, label %if.end34

if.then30:                                        ; preds = %if.end26
  %16 = load double* %fn.addr, align 8
  %17 = load double* %fn.addr, align 8
  %sub31 = fsub double %16, %17
  %18 = load double* %fn.addr, align 8
  %19 = load double* %fn.addr, align 8
  %sub32 = fsub double %18, %19
  %div33 = fdiv double %sub31, %sub32
  store double %div33, double* %retval
  br label %return

if.end34:                                         ; preds = %if.end26
  %20 = load double* %fn.addr, align 8
  %cmp35 = fcmp ogt double %20, 6.500000e+04
  br i1 %cmp35, label %if.then37, label %if.end39

if.then37:                                        ; preds = %if.end34
  %21 = load double* %x.addr, align 8
  %call38 = call double @scalbn(double %21, i32 65000) #4
  store double %call38, double* %retval
  br label %return

if.end39:                                         ; preds = %if.end34
  %22 = load double* %fn.addr, align 8
  %sub40 = fsub double -0.000000e+00, %22
  %cmp41 = fcmp ogt double %sub40, 6.500000e+04
  br i1 %cmp41, label %if.then43, label %if.end45

if.then43:                                        ; preds = %if.end39
  %23 = load double* %x.addr, align 8
  %call44 = call double @scalbn(double %23, i32 -65000) #4
  store double %call44, double* %retval
  br label %return

if.end45:                                         ; preds = %if.end39
  %24 = load double* %x.addr, align 8
  %25 = load double* %fn.addr, align 8
  %conv46 = fptosi double %25 to i32
  %call47 = call double @scalbn(double %24, i32 %conv46) #4
  store double %call47, double* %retval
  br label %return

return:                                           ; preds = %if.end45, %if.then43, %if.then37, %if.then30, %if.else, %if.then24, %if.then
  %26 = load double* %retval
  ret double %26
}

; Function Attrs: nounwind
define double @__ieee754_sinh(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %t = alloca double, align 8
  %w = alloca double, align 8
  %h = alloca double, align 8
  %ix = alloca i32, align 4
  %jx = alloca i32, align 4
  %lx = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %jx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %jx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double* %x.addr, align 8
  %add = fadd double %4, %5
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  store double 5.000000e-01, double* %h, align 8
  %6 = load i32* %jx, align 4
  %cmp1 = icmp slt i32 %6, 0
  br i1 %cmp1, label %if.then2, label %if.end3

if.then2:                                         ; preds = %if.end
  %7 = load double* %h, align 8
  %sub = fsub double -0.000000e+00, %7
  store double %sub, double* %h, align 8
  br label %if.end3

if.end3:                                          ; preds = %if.then2, %if.end
  %8 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %8, 1077280768
  br i1 %cmp4, label %if.then5, label %if.end25

if.then5:                                         ; preds = %if.end3
  %9 = load i32* %ix, align 4
  %cmp6 = icmp slt i32 %9, 1043333120
  br i1 %cmp6, label %if.then7, label %if.end12

if.then7:                                         ; preds = %if.then5
  %10 = load double* %x.addr, align 8
  %add8 = fadd double 1.000000e+307, %10
  %cmp9 = fcmp ogt double %add8, 1.000000e+00
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %if.then7
  %11 = load double* %x.addr, align 8
  store double %11, double* %retval
  br label %return

if.end11:                                         ; preds = %if.then7
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then5
  %12 = load double* %x.addr, align 8
  %call = call double @fabs(double %12) #6
  %call13 = call double @expm1(double %call) #4
  store double %call13, double* %t, align 8
  %13 = load i32* %ix, align 4
  %cmp14 = icmp slt i32 %13, 1072693248
  br i1 %cmp14, label %if.then15, label %if.end20

if.then15:                                        ; preds = %if.end12
  %14 = load double* %h, align 8
  %15 = load double* %t, align 8
  %mul = fmul double 2.000000e+00, %15
  %16 = load double* %t, align 8
  %17 = load double* %t, align 8
  %mul16 = fmul double %16, %17
  %18 = load double* %t, align 8
  %add17 = fadd double %18, 1.000000e+00
  %div = fdiv double %mul16, %add17
  %sub18 = fsub double %mul, %div
  %mul19 = fmul double %14, %sub18
  store double %mul19, double* %retval
  br label %return

if.end20:                                         ; preds = %if.end12
  %19 = load double* %h, align 8
  %20 = load double* %t, align 8
  %21 = load double* %t, align 8
  %22 = load double* %t, align 8
  %add21 = fadd double %22, 1.000000e+00
  %div22 = fdiv double %21, %add21
  %add23 = fadd double %20, %div22
  %mul24 = fmul double %19, %add23
  store double %mul24, double* %retval
  br label %return

if.end25:                                         ; preds = %if.end3
  %23 = load i32* %ix, align 4
  %cmp26 = icmp slt i32 %23, 1082535490
  br i1 %cmp26, label %if.then27, label %if.end31

if.then27:                                        ; preds = %if.end25
  %24 = load double* %h, align 8
  %25 = load double* %x.addr, align 8
  %call28 = call double @fabs(double %25) #6
  %call29 = call double @__ieee754_exp(double %call28) #5
  %mul30 = fmul double %24, %call29
  store double %mul30, double* %retval
  br label %return

if.end31:                                         ; preds = %if.end25
  br label %do.body32

do.body32:                                        ; preds = %if.end31
  %26 = load double* %x.addr, align 8
  %value33 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %26, double* %value33, align 4
  %parts34 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts34, i32 0, i32 0
  %27 = load i32* %lsw, align 4
  store i32 %27, i32* %lx, align 4
  br label %do.end35

do.end35:                                         ; preds = %do.body32
  %28 = load i32* %ix, align 4
  %cmp36 = icmp slt i32 %28, 1082536910
  br i1 %cmp36, label %if.then39, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end35
  %29 = load i32* %ix, align 4
  %cmp37 = icmp eq i32 %29, 1082536910
  br i1 %cmp37, label %land.lhs.true, label %if.end45

land.lhs.true:                                    ; preds = %lor.lhs.false
  %30 = load i32* %lx, align 4
  %cmp38 = icmp ule i32 %30, -1883637635
  br i1 %cmp38, label %if.then39, label %if.end45

if.then39:                                        ; preds = %land.lhs.true, %do.end35
  %31 = load double* %x.addr, align 8
  %call40 = call double @fabs(double %31) #6
  %mul41 = fmul double 5.000000e-01, %call40
  %call42 = call double @__ieee754_exp(double %mul41) #5
  store double %call42, double* %w, align 8
  %32 = load double* %h, align 8
  %33 = load double* %w, align 8
  %mul43 = fmul double %32, %33
  store double %mul43, double* %t, align 8
  %34 = load double* %t, align 8
  %35 = load double* %w, align 8
  %mul44 = fmul double %34, %35
  store double %mul44, double* %retval
  br label %return

if.end45:                                         ; preds = %land.lhs.true, %lor.lhs.false
  %36 = load double* %x.addr, align 8
  %mul46 = fmul double %36, 1.000000e+307
  store double %mul46, double* %retval
  br label %return

return:                                           ; preds = %if.end45, %if.then39, %if.then27, %if.end20, %if.then15, %if.then10, %if.then
  %37 = load double* %retval
  ret double %37
}

; Function Attrs: nounwind
define double @__ieee754_sqrt(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %z = alloca double, align 8
  %sign = alloca i32, align 4
  %r = alloca i32, align 4
  %t1 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %ix1 = alloca i32, align 4
  %q1 = alloca i32, align 4
  %ix0 = alloca i32, align 4
  %s0 = alloca i32, align 4
  %q = alloca i32, align 4
  %m = alloca i32, align 4
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %iw_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store i32 -2147483648, i32* %sign, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix0, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %ix1, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %ix0, align 4
  %and = and i32 %3, 2146435072
  %cmp = icmp eq i32 %and, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double* %x.addr, align 8
  %mul = fmul double %4, %5
  %6 = load double* %x.addr, align 8
  %add = fadd double %mul, %6
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix0, align 4
  %cmp2 = icmp sle i32 %7, 0
  br i1 %cmp2, label %if.then3, label %if.end12

if.then3:                                         ; preds = %if.end
  %8 = load i32* %ix0, align 4
  %9 = load i32* %sign, align 4
  %neg = xor i32 %9, -1
  %and4 = and i32 %8, %neg
  %10 = load i32* %ix1, align 4
  %or = or i32 %and4, %10
  %cmp5 = icmp eq i32 %or, 0
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then3
  %11 = load double* %x.addr, align 8
  store double %11, double* %retval
  br label %return

if.else:                                          ; preds = %if.then3
  %12 = load i32* %ix0, align 4
  %cmp7 = icmp slt i32 %12, 0
  br i1 %cmp7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.else
  %13 = load double* %x.addr, align 8
  %14 = load double* %x.addr, align 8
  %sub = fsub double %13, %14
  %15 = load double* %x.addr, align 8
  %16 = load double* %x.addr, align 8
  %sub9 = fsub double %15, %16
  %div = fdiv double %sub, %sub9
  store double %div, double* %retval
  br label %return

if.end10:                                         ; preds = %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end10
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.end
  %17 = load i32* %ix0, align 4
  %shr = ashr i32 %17, 20
  store i32 %shr, i32* %m, align 4
  %18 = load i32* %m, align 4
  %cmp13 = icmp eq i32 %18, 0
  br i1 %cmp13, label %if.then14, label %if.end28

if.then14:                                        ; preds = %if.end12
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then14
  %19 = load i32* %ix0, align 4
  %cmp15 = icmp eq i32 %19, 0
  br i1 %cmp15, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %20 = load i32* %m, align 4
  %sub16 = sub nsw i32 %20, 21
  store i32 %sub16, i32* %m, align 4
  %21 = load i32* %ix1, align 4
  %shr17 = lshr i32 %21, 11
  %22 = load i32* %ix0, align 4
  %or18 = or i32 %22, %shr17
  store i32 %or18, i32* %ix0, align 4
  %23 = load i32* %ix1, align 4
  %shl = shl i32 %23, 21
  store i32 %shl, i32* %ix1, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.end
  %24 = load i32* %ix0, align 4
  %and19 = and i32 %24, 1048576
  %cmp20 = icmp eq i32 %and19, 0
  br i1 %cmp20, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %25 = load i32* %ix0, align 4
  %shl21 = shl i32 %25, 1
  store i32 %shl21, i32* %ix0, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %26 = load i32* %i, align 4
  %inc = add nsw i32 %26, 1
  store i32 %inc, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %27 = load i32* %i, align 4
  %sub22 = sub nsw i32 %27, 1
  %28 = load i32* %m, align 4
  %sub23 = sub nsw i32 %28, %sub22
  store i32 %sub23, i32* %m, align 4
  %29 = load i32* %ix1, align 4
  %30 = load i32* %i, align 4
  %sub24 = sub nsw i32 32, %30
  %shr25 = lshr i32 %29, %sub24
  %31 = load i32* %ix0, align 4
  %or26 = or i32 %31, %shr25
  store i32 %or26, i32* %ix0, align 4
  %32 = load i32* %i, align 4
  %33 = load i32* %ix1, align 4
  %shl27 = shl i32 %33, %32
  store i32 %shl27, i32* %ix1, align 4
  br label %if.end28

if.end28:                                         ; preds = %for.end, %if.end12
  %34 = load i32* %m, align 4
  %sub29 = sub nsw i32 %34, 1023
  store i32 %sub29, i32* %m, align 4
  %35 = load i32* %ix0, align 4
  %and30 = and i32 %35, 1048575
  %or31 = or i32 %and30, 1048576
  store i32 %or31, i32* %ix0, align 4
  %36 = load i32* %m, align 4
  %and32 = and i32 %36, 1
  %tobool = icmp ne i32 %and32, 0
  br i1 %tobool, label %if.then33, label %if.end39

if.then33:                                        ; preds = %if.end28
  %37 = load i32* %ix0, align 4
  %38 = load i32* %ix1, align 4
  %39 = load i32* %sign, align 4
  %and34 = and i32 %38, %39
  %shr35 = lshr i32 %and34, 31
  %add36 = add i32 %37, %shr35
  %40 = load i32* %ix0, align 4
  %add37 = add i32 %40, %add36
  store i32 %add37, i32* %ix0, align 4
  %41 = load i32* %ix1, align 4
  %42 = load i32* %ix1, align 4
  %add38 = add i32 %42, %41
  store i32 %add38, i32* %ix1, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.then33, %if.end28
  %43 = load i32* %m, align 4
  %shr40 = ashr i32 %43, 1
  store i32 %shr40, i32* %m, align 4
  %44 = load i32* %ix0, align 4
  %45 = load i32* %ix1, align 4
  %46 = load i32* %sign, align 4
  %and41 = and i32 %45, %46
  %shr42 = lshr i32 %and41, 31
  %add43 = add i32 %44, %shr42
  %47 = load i32* %ix0, align 4
  %add44 = add i32 %47, %add43
  store i32 %add44, i32* %ix0, align 4
  %48 = load i32* %ix1, align 4
  %49 = load i32* %ix1, align 4
  %add45 = add i32 %49, %48
  store i32 %add45, i32* %ix1, align 4
  store i32 0, i32* %s1, align 4
  store i32 0, i32* %s0, align 4
  store i32 0, i32* %q1, align 4
  store i32 0, i32* %q, align 4
  store i32 2097152, i32* %r, align 4
  br label %while.cond46

while.cond46:                                     ; preds = %if.end55, %if.end39
  %50 = load i32* %r, align 4
  %cmp47 = icmp ne i32 %50, 0
  br i1 %cmp47, label %while.body48, label %while.end62

while.body48:                                     ; preds = %while.cond46
  %51 = load i32* %s0, align 4
  %52 = load i32* %r, align 4
  %add49 = add i32 %51, %52
  store i32 %add49, i32* %t, align 4
  %53 = load i32* %t, align 4
  %54 = load i32* %ix0, align 4
  %cmp50 = icmp sle i32 %53, %54
  br i1 %cmp50, label %if.then51, label %if.end55

if.then51:                                        ; preds = %while.body48
  %55 = load i32* %t, align 4
  %56 = load i32* %r, align 4
  %add52 = add i32 %55, %56
  store i32 %add52, i32* %s0, align 4
  %57 = load i32* %t, align 4
  %58 = load i32* %ix0, align 4
  %sub53 = sub nsw i32 %58, %57
  store i32 %sub53, i32* %ix0, align 4
  %59 = load i32* %r, align 4
  %60 = load i32* %q, align 4
  %add54 = add i32 %60, %59
  store i32 %add54, i32* %q, align 4
  br label %if.end55

if.end55:                                         ; preds = %if.then51, %while.body48
  %61 = load i32* %ix0, align 4
  %62 = load i32* %ix1, align 4
  %63 = load i32* %sign, align 4
  %and56 = and i32 %62, %63
  %shr57 = lshr i32 %and56, 31
  %add58 = add i32 %61, %shr57
  %64 = load i32* %ix0, align 4
  %add59 = add i32 %64, %add58
  store i32 %add59, i32* %ix0, align 4
  %65 = load i32* %ix1, align 4
  %66 = load i32* %ix1, align 4
  %add60 = add i32 %66, %65
  store i32 %add60, i32* %ix1, align 4
  %67 = load i32* %r, align 4
  %shr61 = lshr i32 %67, 1
  store i32 %shr61, i32* %r, align 4
  br label %while.cond46

while.end62:                                      ; preds = %while.cond46
  %68 = load i32* %sign, align 4
  store i32 %68, i32* %r, align 4
  br label %while.cond63

while.cond63:                                     ; preds = %if.end87, %while.end62
  %69 = load i32* %r, align 4
  %cmp64 = icmp ne i32 %69, 0
  br i1 %cmp64, label %while.body65, label %while.end94

while.body65:                                     ; preds = %while.cond63
  %70 = load i32* %s1, align 4
  %71 = load i32* %r, align 4
  %add66 = add i32 %70, %71
  store i32 %add66, i32* %t1, align 4
  %72 = load i32* %s0, align 4
  store i32 %72, i32* %t, align 4
  %73 = load i32* %t, align 4
  %74 = load i32* %ix0, align 4
  %cmp67 = icmp slt i32 %73, %74
  br i1 %cmp67, label %if.then70, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body65
  %75 = load i32* %t, align 4
  %76 = load i32* %ix0, align 4
  %cmp68 = icmp eq i32 %75, %76
  br i1 %cmp68, label %land.lhs.true, label %if.end87

land.lhs.true:                                    ; preds = %lor.lhs.false
  %77 = load i32* %t1, align 4
  %78 = load i32* %ix1, align 4
  %cmp69 = icmp ule i32 %77, %78
  br i1 %cmp69, label %if.then70, label %if.end87

if.then70:                                        ; preds = %land.lhs.true, %while.body65
  %79 = load i32* %t1, align 4
  %80 = load i32* %r, align 4
  %add71 = add i32 %79, %80
  store i32 %add71, i32* %s1, align 4
  %81 = load i32* %t1, align 4
  %82 = load i32* %sign, align 4
  %and72 = and i32 %81, %82
  %83 = load i32* %sign, align 4
  %cmp73 = icmp eq i32 %and72, %83
  br i1 %cmp73, label %land.lhs.true74, label %if.end79

land.lhs.true74:                                  ; preds = %if.then70
  %84 = load i32* %s1, align 4
  %85 = load i32* %sign, align 4
  %and75 = and i32 %84, %85
  %cmp76 = icmp eq i32 %and75, 0
  br i1 %cmp76, label %if.then77, label %if.end79

if.then77:                                        ; preds = %land.lhs.true74
  %86 = load i32* %s0, align 4
  %add78 = add nsw i32 %86, 1
  store i32 %add78, i32* %s0, align 4
  br label %if.end79

if.end79:                                         ; preds = %if.then77, %land.lhs.true74, %if.then70
  %87 = load i32* %t, align 4
  %88 = load i32* %ix0, align 4
  %sub80 = sub nsw i32 %88, %87
  store i32 %sub80, i32* %ix0, align 4
  %89 = load i32* %ix1, align 4
  %90 = load i32* %t1, align 4
  %cmp81 = icmp ult i32 %89, %90
  br i1 %cmp81, label %if.then82, label %if.end84

if.then82:                                        ; preds = %if.end79
  %91 = load i32* %ix0, align 4
  %sub83 = sub nsw i32 %91, 1
  store i32 %sub83, i32* %ix0, align 4
  br label %if.end84

if.end84:                                         ; preds = %if.then82, %if.end79
  %92 = load i32* %t1, align 4
  %93 = load i32* %ix1, align 4
  %sub85 = sub i32 %93, %92
  store i32 %sub85, i32* %ix1, align 4
  %94 = load i32* %r, align 4
  %95 = load i32* %q1, align 4
  %add86 = add i32 %95, %94
  store i32 %add86, i32* %q1, align 4
  br label %if.end87

if.end87:                                         ; preds = %if.end84, %land.lhs.true, %lor.lhs.false
  %96 = load i32* %ix0, align 4
  %97 = load i32* %ix1, align 4
  %98 = load i32* %sign, align 4
  %and88 = and i32 %97, %98
  %shr89 = lshr i32 %and88, 31
  %add90 = add i32 %96, %shr89
  %99 = load i32* %ix0, align 4
  %add91 = add i32 %99, %add90
  store i32 %add91, i32* %ix0, align 4
  %100 = load i32* %ix1, align 4
  %101 = load i32* %ix1, align 4
  %add92 = add i32 %101, %100
  store i32 %add92, i32* %ix1, align 4
  %102 = load i32* %r, align 4
  %shr93 = lshr i32 %102, 1
  store i32 %shr93, i32* %r, align 4
  br label %while.cond63

while.end94:                                      ; preds = %while.cond63
  %103 = load i32* %ix0, align 4
  %104 = load i32* %ix1, align 4
  %or95 = or i32 %103, %104
  %cmp96 = icmp ne i32 %or95, 0
  br i1 %cmp96, label %if.then97, label %if.end117

if.then97:                                        ; preds = %while.end94
  store double 1.000000e+00, double* %z, align 8
  %105 = load double* %z, align 8
  %cmp98 = fcmp oge double %105, 1.000000e+00
  br i1 %cmp98, label %if.then99, label %if.end116

if.then99:                                        ; preds = %if.then97
  store double 1.000000e+00, double* %z, align 8
  %106 = load i32* %q1, align 4
  %cmp100 = icmp eq i32 %106, -1
  br i1 %cmp100, label %if.then101, label %if.else103

if.then101:                                       ; preds = %if.then99
  store i32 0, i32* %q1, align 4
  %107 = load i32* %q, align 4
  %add102 = add nsw i32 %107, 1
  store i32 %add102, i32* %q, align 4
  br label %if.end115

if.else103:                                       ; preds = %if.then99
  %108 = load double* %z, align 8
  %cmp104 = fcmp ogt double %108, 1.000000e+00
  br i1 %cmp104, label %if.then105, label %if.else111

if.then105:                                       ; preds = %if.else103
  %109 = load i32* %q1, align 4
  %cmp106 = icmp eq i32 %109, -2
  br i1 %cmp106, label %if.then107, label %if.end109

if.then107:                                       ; preds = %if.then105
  %110 = load i32* %q, align 4
  %add108 = add nsw i32 %110, 1
  store i32 %add108, i32* %q, align 4
  br label %if.end109

if.end109:                                        ; preds = %if.then107, %if.then105
  %111 = load i32* %q1, align 4
  %add110 = add i32 %111, 2
  store i32 %add110, i32* %q1, align 4
  br label %if.end114

if.else111:                                       ; preds = %if.else103
  %112 = load i32* %q1, align 4
  %and112 = and i32 %112, 1
  %113 = load i32* %q1, align 4
  %add113 = add i32 %113, %and112
  store i32 %add113, i32* %q1, align 4
  br label %if.end114

if.end114:                                        ; preds = %if.else111, %if.end109
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.then101
  br label %if.end116

if.end116:                                        ; preds = %if.end115, %if.then97
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %while.end94
  %114 = load i32* %q, align 4
  %shr118 = ashr i32 %114, 1
  %add119 = add nsw i32 %shr118, 1071644672
  store i32 %add119, i32* %ix0, align 4
  %115 = load i32* %q1, align 4
  %shr120 = lshr i32 %115, 1
  store i32 %shr120, i32* %ix1, align 4
  %116 = load i32* %q, align 4
  %and121 = and i32 %116, 1
  %cmp122 = icmp eq i32 %and121, 1
  br i1 %cmp122, label %if.then123, label %if.end125

if.then123:                                       ; preds = %if.end117
  %117 = load i32* %sign, align 4
  %118 = load i32* %ix1, align 4
  %or124 = or i32 %118, %117
  store i32 %or124, i32* %ix1, align 4
  br label %if.end125

if.end125:                                        ; preds = %if.then123, %if.end117
  %119 = load i32* %m, align 4
  %shl126 = shl i32 %119, 20
  %120 = load i32* %ix0, align 4
  %add127 = add nsw i32 %120, %shl126
  store i32 %add127, i32* %ix0, align 4
  br label %do.body128

do.body128:                                       ; preds = %if.end125
  %121 = load i32* %ix0, align 4
  %parts129 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %msw130 = getelementptr inbounds %struct.anon* %parts129, i32 0, i32 1
  store i32 %121, i32* %msw130, align 4
  %122 = load i32* %ix1, align 4
  %parts131 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %lsw132 = getelementptr inbounds %struct.anon* %parts131, i32 0, i32 0
  store i32 %122, i32* %lsw132, align 4
  %value133 = bitcast %union.ieee_double_shape_type* %iw_u to double*
  %123 = load double* %value133, align 4
  store double %123, double* %z, align 8
  br label %do.end134

do.end134:                                        ; preds = %do.body128
  %124 = load double* %z, align 8
  store double %124, double* %retval
  br label %return

return:                                           ; preds = %do.end134, %if.then8, %if.then6, %if.then
  %125 = load double* %retval
  ret double %125
}

; Function Attrs: nounwind
define double @__kernel_cos(double %x, double %y) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  %a = alloca double, align 8
  %hz = alloca double, align 8
  %z = alloca double, align 8
  %r = alloca double, align 8
  %qx = alloca double, align 8
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %iw_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 1044381696
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %conv = fptosi double %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  store double 1.000000e+00, double* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %do.end
  %5 = load double* %x.addr, align 8
  %6 = load double* %x.addr, align 8
  %mul = fmul double %5, %6
  store double %mul, double* %z, align 8
  %7 = load double* %z, align 8
  %8 = load double* %z, align 8
  %9 = load double* %z, align 8
  %10 = load double* %z, align 8
  %11 = load double* %z, align 8
  %12 = load double* %z, align 8
  %mul5 = fmul double %12, 0xBDA8FAE9BE8838D4
  %add = fadd double 0x3E21EE9EBDB4B1C4, %mul5
  %mul6 = fmul double %11, %add
  %add7 = fadd double 0xBE927E4F809C52AD, %mul6
  %mul8 = fmul double %10, %add7
  %add9 = fadd double 0x3EFA01A019CB1590, %mul8
  %mul10 = fmul double %9, %add9
  %add11 = fadd double 0xBF56C16C16C15177, %mul10
  %mul12 = fmul double %8, %add11
  %add13 = fadd double 0x3FA555555555554C, %mul12
  %mul14 = fmul double %7, %add13
  store double %mul14, double* %r, align 8
  %13 = load i32* %ix, align 4
  %cmp15 = icmp slt i32 %13, 1070805811
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end4
  %14 = load double* %z, align 8
  %mul18 = fmul double 5.000000e-01, %14
  %15 = load double* %z, align 8
  %16 = load double* %r, align 8
  %mul19 = fmul double %15, %16
  %17 = load double* %x.addr, align 8
  %18 = load double* %y.addr, align 8
  %mul20 = fmul double %17, %18
  %sub = fsub double %mul19, %mul20
  %sub21 = fsub double %mul18, %sub
  %sub22 = fsub double 1.000000e+00, %sub21
  store double %sub22, double* %retval
  br label %return

if.else:                                          ; preds = %if.end4
  %19 = load i32* %ix, align 4
  %cmp23 = icmp sgt i32 %19, 1072234496
  br i1 %cmp23, label %if.then25, label %if.else26

if.then25:                                        ; preds = %if.else
  store double 2.812500e-01, double* %qx, align 8
  br label %if.end34

if.else26:                                        ; preds = %if.else
  br label %do.body27

do.body27:                                        ; preds = %if.else26
  %20 = load i32* %ix, align 4
  %sub28 = sub nsw i32 %20, 2097152
  %parts29 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %msw30 = getelementptr inbounds %struct.anon* %parts29, i32 0, i32 1
  store i32 %sub28, i32* %msw30, align 4
  %parts31 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts31, i32 0, i32 0
  store i32 0, i32* %lsw, align 4
  %value32 = bitcast %union.ieee_double_shape_type* %iw_u to double*
  %21 = load double* %value32, align 4
  store double %21, double* %qx, align 8
  br label %do.end33

do.end33:                                         ; preds = %do.body27
  br label %if.end34

if.end34:                                         ; preds = %do.end33, %if.then25
  %22 = load double* %z, align 8
  %mul35 = fmul double 5.000000e-01, %22
  %23 = load double* %qx, align 8
  %sub36 = fsub double %mul35, %23
  store double %sub36, double* %hz, align 8
  %24 = load double* %qx, align 8
  %sub37 = fsub double 1.000000e+00, %24
  store double %sub37, double* %a, align 8
  %25 = load double* %a, align 8
  %26 = load double* %hz, align 8
  %27 = load double* %z, align 8
  %28 = load double* %r, align 8
  %mul38 = fmul double %27, %28
  %29 = load double* %x.addr, align 8
  %30 = load double* %y.addr, align 8
  %mul39 = fmul double %29, %30
  %sub40 = fsub double %mul38, %mul39
  %sub41 = fsub double %26, %sub40
  %sub42 = fsub double %25, %sub41
  store double %sub42, double* %retval
  br label %return

return:                                           ; preds = %if.end34, %if.then17, %if.then3
  %31 = load double* %retval
  ret double %31
}

; Function Attrs: nounwind
define float @__kernel_cosf(float %x, float %y) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  %a = alloca float, align 4
  %hz = alloca float, align 4
  %z = alloca float, align 4
  %r = alloca float, align 4
  %qx = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 838860800
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %conv = fptosi float %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  store float 1.000000e+00, float* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %do.end
  %5 = load float* %x.addr, align 4
  %6 = load float* %x.addr, align 4
  %mul = fmul float %5, %6
  store float %mul, float* %z, align 4
  %7 = load float* %z, align 4
  %8 = load float* %z, align 4
  %9 = load float* %z, align 4
  %10 = load float* %z, align 4
  %11 = load float* %z, align 4
  %12 = load float* %z, align 4
  %mul5 = fmul float %12, 0xBDA8FAE9C0000000
  %add = fadd float 0x3E21EE9EC0000000, %mul5
  %mul6 = fmul float %11, %add
  %add7 = fadd float 0xBE927E4F80000000, %mul6
  %mul8 = fmul float %10, %add7
  %add9 = fadd float 0x3EFA01A020000000, %mul8
  %mul10 = fmul float %9, %add9
  %add11 = fadd float 0xBF56C16C20000000, %mul10
  %mul12 = fmul float %8, %add11
  %add13 = fadd float 0x3FA5555560000000, %mul12
  %mul14 = fmul float %7, %add13
  store float %mul14, float* %r, align 4
  %13 = load i32* %ix, align 4
  %cmp15 = icmp slt i32 %13, 1050253722
  br i1 %cmp15, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end4
  %14 = load float* %z, align 4
  %mul18 = fmul float 5.000000e-01, %14
  %15 = load float* %z, align 4
  %16 = load float* %r, align 4
  %mul19 = fmul float %15, %16
  %17 = load float* %x.addr, align 4
  %18 = load float* %y.addr, align 4
  %mul20 = fmul float %17, %18
  %sub = fsub float %mul19, %mul20
  %sub21 = fsub float %mul18, %sub
  %sub22 = fsub float 1.000000e+00, %sub21
  store float %sub22, float* %retval
  br label %return

if.else:                                          ; preds = %if.end4
  %19 = load i32* %ix, align 4
  %cmp23 = icmp sgt i32 %19, 1061683200
  br i1 %cmp23, label %if.then25, label %if.else26

if.then25:                                        ; preds = %if.else
  store float 2.812500e-01, float* %qx, align 4
  br label %if.end32

if.else26:                                        ; preds = %if.else
  br label %do.body27

do.body27:                                        ; preds = %if.else26
  %20 = load i32* %ix, align 4
  %sub28 = sub nsw i32 %20, 16777216
  %word29 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %sub28, i32* %word29, align 4
  %value30 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %21 = load float* %value30, align 4
  store float %21, float* %qx, align 4
  br label %do.end31

do.end31:                                         ; preds = %do.body27
  br label %if.end32

if.end32:                                         ; preds = %do.end31, %if.then25
  %22 = load float* %z, align 4
  %mul33 = fmul float 5.000000e-01, %22
  %23 = load float* %qx, align 4
  %sub34 = fsub float %mul33, %23
  store float %sub34, float* %hz, align 4
  %24 = load float* %qx, align 4
  %sub35 = fsub float 1.000000e+00, %24
  store float %sub35, float* %a, align 4
  %25 = load float* %a, align 4
  %26 = load float* %hz, align 4
  %27 = load float* %z, align 4
  %28 = load float* %r, align 4
  %mul36 = fmul float %27, %28
  %29 = load float* %x.addr, align 4
  %30 = load float* %y.addr, align 4
  %mul37 = fmul float %29, %30
  %sub38 = fsub float %mul36, %mul37
  %sub39 = fsub float %26, %sub38
  %sub40 = fsub float %25, %sub39
  store float %sub40, float* %retval
  br label %return

return:                                           ; preds = %if.end32, %if.then17, %if.then3
  %31 = load float* %retval
  ret float %31
}

; Function Attrs: nounwind
define i32 @__kernel_rem_pio2f(float* %x, float* %y, i32 %e0, i32 %nx, i32 %prec, i32* %ipio2) #2 {
entry:
  %x.addr = alloca float*, align 4
  %y.addr = alloca float*, align 4
  %e0.addr = alloca i32, align 4
  %nx.addr = alloca i32, align 4
  %prec.addr = alloca i32, align 4
  %ipio2.addr = alloca i32*, align 4
  %jz = alloca i32, align 4
  %jx = alloca i32, align 4
  %jv = alloca i32, align 4
  %jp = alloca i32, align 4
  %jk = alloca i32, align 4
  %carry = alloca i32, align 4
  %n = alloca i32, align 4
  %iq = alloca [20 x i32], align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %m = alloca i32, align 4
  %q0 = alloca i32, align 4
  %ih = alloca i32, align 4
  %z = alloca float, align 4
  %fw = alloca float, align 4
  %f = alloca [20 x float], align 4
  %fq = alloca [20 x float], align 4
  %q = alloca [20 x float], align 4
  store float* %x, float** %x.addr, align 4
  store float* %y, float** %y.addr, align 4
  store i32 %e0, i32* %e0.addr, align 4
  store i32 %nx, i32* %nx.addr, align 4
  store i32 %prec, i32* %prec.addr, align 4
  store i32* %ipio2, i32** %ipio2.addr, align 4
  %0 = load i32* %prec.addr, align 4
  %arrayidx = getelementptr inbounds [3 x i32]* @init_jk, i32 0, i32 %0
  %1 = load i32* %arrayidx, align 4
  store i32 %1, i32* %jk, align 4
  %2 = load i32* %jk, align 4
  store i32 %2, i32* %jp, align 4
  %3 = load i32* %nx.addr, align 4
  %sub = sub nsw i32 %3, 1
  store i32 %sub, i32* %jx, align 4
  %4 = load i32* %e0.addr, align 4
  %sub1 = sub nsw i32 %4, 3
  %div = sdiv i32 %sub1, 8
  store i32 %div, i32* %jv, align 4
  %5 = load i32* %jv, align 4
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %jv, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32* %e0.addr, align 4
  %7 = load i32* %jv, align 4
  %add = add nsw i32 %7, 1
  %mul = mul nsw i32 8, %add
  %sub2 = sub nsw i32 %6, %mul
  store i32 %sub2, i32* %q0, align 4
  %8 = load i32* %jv, align 4
  %9 = load i32* %jx, align 4
  %sub3 = sub nsw i32 %8, %9
  store i32 %sub3, i32* %j, align 4
  %10 = load i32* %jx, align 4
  %11 = load i32* %jk, align 4
  %add4 = add nsw i32 %10, %11
  store i32 %add4, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load i32* %i, align 4
  %13 = load i32* %m, align 4
  %cmp5 = icmp sle i32 %12, %13
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 0
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %15 = load i32* %j, align 4
  %16 = load i32** %ipio2.addr, align 4
  %arrayidx7 = getelementptr inbounds i32* %16, i32 %15
  %17 = load i32* %arrayidx7, align 4
  %conv = sitofp i32 %17 to float
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ 0.000000e+00, %cond.true ], [ %conv, %cond.false ]
  %18 = load i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x float]* %f, i32 0, i32 %18
  store float %cond, float* %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %19 = load i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  %20 = load i32* %j, align 4
  %inc9 = add nsw i32 %20, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc28, %for.end
  %21 = load i32* %i, align 4
  %22 = load i32* %jk, align 4
  %cmp11 = icmp sle i32 %21, %22
  br i1 %cmp11, label %for.body13, label %for.end30

for.body13:                                       ; preds = %for.cond10
  store i32 0, i32* %j, align 4
  store float 0.000000e+00, float* %fw, align 4
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc24, %for.body13
  %23 = load i32* %j, align 4
  %24 = load i32* %jx, align 4
  %cmp15 = icmp sle i32 %23, %24
  br i1 %cmp15, label %for.body17, label %for.end26

for.body17:                                       ; preds = %for.cond14
  %25 = load i32* %j, align 4
  %26 = load float** %x.addr, align 4
  %arrayidx18 = getelementptr inbounds float* %26, i32 %25
  %27 = load float* %arrayidx18, align 4
  %28 = load i32* %jx, align 4
  %29 = load i32* %i, align 4
  %add19 = add nsw i32 %28, %29
  %30 = load i32* %j, align 4
  %sub20 = sub nsw i32 %add19, %30
  %arrayidx21 = getelementptr inbounds [20 x float]* %f, i32 0, i32 %sub20
  %31 = load float* %arrayidx21, align 4
  %mul22 = fmul float %27, %31
  %32 = load float* %fw, align 4
  %add23 = fadd float %32, %mul22
  store float %add23, float* %fw, align 4
  br label %for.inc24

for.inc24:                                        ; preds = %for.body17
  %33 = load i32* %j, align 4
  %inc25 = add nsw i32 %33, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond14

for.end26:                                        ; preds = %for.cond14
  %34 = load float* %fw, align 4
  %35 = load i32* %i, align 4
  %arrayidx27 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %35
  store float %34, float* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.end26
  %36 = load i32* %i, align 4
  %inc29 = add nsw i32 %36, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond10

for.end30:                                        ; preds = %for.cond10
  %37 = load i32* %jk, align 4
  store i32 %37, i32* %jz, align 4
  br label %recompute

recompute:                                        ; preds = %for.end182, %for.end30
  store i32 0, i32* %i, align 4
  %38 = load i32* %jz, align 4
  store i32 %38, i32* %j, align 4
  %39 = load i32* %jz, align 4
  %arrayidx31 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %39
  %40 = load float* %arrayidx31, align 4
  store float %40, float* %z, align 4
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc46, %recompute
  %41 = load i32* %j, align 4
  %cmp33 = icmp sgt i32 %41, 0
  br i1 %cmp33, label %for.body35, label %for.end48

for.body35:                                       ; preds = %for.cond32
  %42 = load float* %z, align 4
  %mul36 = fmul float 3.906250e-03, %42
  %conv37 = fptosi float %mul36 to i32
  %conv38 = sitofp i32 %conv37 to float
  store float %conv38, float* %fw, align 4
  %43 = load float* %z, align 4
  %44 = load float* %fw, align 4
  %mul39 = fmul float 2.560000e+02, %44
  %sub40 = fsub float %43, %mul39
  %conv41 = fptosi float %sub40 to i32
  %45 = load i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %45
  store i32 %conv41, i32* %arrayidx42, align 4
  %46 = load i32* %j, align 4
  %sub43 = sub nsw i32 %46, 1
  %arrayidx44 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %sub43
  %47 = load float* %arrayidx44, align 4
  %48 = load float* %fw, align 4
  %add45 = fadd float %47, %48
  store float %add45, float* %z, align 4
  br label %for.inc46

for.inc46:                                        ; preds = %for.body35
  %49 = load i32* %i, align 4
  %inc47 = add nsw i32 %49, 1
  store i32 %inc47, i32* %i, align 4
  %50 = load i32* %j, align 4
  %dec = add nsw i32 %50, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond32

for.end48:                                        ; preds = %for.cond32
  %51 = load float* %z, align 4
  %52 = load i32* %q0, align 4
  %call = call float @scalbnf(float %51, i32 %52) #4
  store float %call, float* %z, align 4
  %53 = load float* %z, align 4
  %mul49 = fmul float %53, 1.250000e-01
  %call50 = call float @floorf(float %mul49) #6
  %mul51 = fmul float 8.000000e+00, %call50
  %54 = load float* %z, align 4
  %sub52 = fsub float %54, %mul51
  store float %sub52, float* %z, align 4
  %55 = load float* %z, align 4
  %conv53 = fptosi float %55 to i32
  store i32 %conv53, i32* %n, align 4
  %56 = load i32* %n, align 4
  %conv54 = sitofp i32 %56 to float
  %57 = load float* %z, align 4
  %sub55 = fsub float %57, %conv54
  store float %sub55, float* %z, align 4
  store i32 0, i32* %ih, align 4
  %58 = load i32* %q0, align 4
  %cmp56 = icmp sgt i32 %58, 0
  br i1 %cmp56, label %if.then58, label %if.else

if.then58:                                        ; preds = %for.end48
  %59 = load i32* %jz, align 4
  %sub59 = sub nsw i32 %59, 1
  %arrayidx60 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub59
  %60 = load i32* %arrayidx60, align 4
  %61 = load i32* %q0, align 4
  %sub61 = sub nsw i32 8, %61
  %shr = ashr i32 %60, %sub61
  store i32 %shr, i32* %i, align 4
  %62 = load i32* %i, align 4
  %63 = load i32* %n, align 4
  %add62 = add nsw i32 %63, %62
  store i32 %add62, i32* %n, align 4
  %64 = load i32* %i, align 4
  %65 = load i32* %q0, align 4
  %sub63 = sub nsw i32 8, %65
  %shl = shl i32 %64, %sub63
  %66 = load i32* %jz, align 4
  %sub64 = sub nsw i32 %66, 1
  %arrayidx65 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub64
  %67 = load i32* %arrayidx65, align 4
  %sub66 = sub nsw i32 %67, %shl
  store i32 %sub66, i32* %arrayidx65, align 4
  %68 = load i32* %jz, align 4
  %sub67 = sub nsw i32 %68, 1
  %arrayidx68 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub67
  %69 = load i32* %arrayidx68, align 4
  %70 = load i32* %q0, align 4
  %sub69 = sub nsw i32 7, %70
  %shr70 = ashr i32 %69, %sub69
  store i32 %shr70, i32* %ih, align 4
  br label %if.end83

if.else:                                          ; preds = %for.end48
  %71 = load i32* %q0, align 4
  %cmp71 = icmp eq i32 %71, 0
  br i1 %cmp71, label %if.then73, label %if.else77

if.then73:                                        ; preds = %if.else
  %72 = load i32* %jz, align 4
  %sub74 = sub nsw i32 %72, 1
  %arrayidx75 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub74
  %73 = load i32* %arrayidx75, align 4
  %shr76 = ashr i32 %73, 8
  store i32 %shr76, i32* %ih, align 4
  br label %if.end82

if.else77:                                        ; preds = %if.else
  %74 = load float* %z, align 4
  %cmp78 = fcmp oge float %74, 5.000000e-01
  br i1 %cmp78, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.else77
  store i32 2, i32* %ih, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.then80, %if.else77
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then73
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then58
  %75 = load i32* %ih, align 4
  %cmp84 = icmp sgt i32 %75, 0
  br i1 %cmp84, label %if.then86, label %if.end130

if.then86:                                        ; preds = %if.end83
  %76 = load i32* %n, align 4
  %add87 = add nsw i32 %76, 1
  store i32 %add87, i32* %n, align 4
  store i32 0, i32* %carry, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond88

for.cond88:                                       ; preds = %for.inc106, %if.then86
  %77 = load i32* %i, align 4
  %78 = load i32* %jz, align 4
  %cmp89 = icmp slt i32 %77, %78
  br i1 %cmp89, label %for.body91, label %for.end108

for.body91:                                       ; preds = %for.cond88
  %79 = load i32* %i, align 4
  %arrayidx92 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %79
  %80 = load i32* %arrayidx92, align 4
  store i32 %80, i32* %j, align 4
  %81 = load i32* %carry, align 4
  %cmp93 = icmp eq i32 %81, 0
  br i1 %cmp93, label %if.then95, label %if.else102

if.then95:                                        ; preds = %for.body91
  %82 = load i32* %j, align 4
  %cmp96 = icmp ne i32 %82, 0
  br i1 %cmp96, label %if.then98, label %if.end101

if.then98:                                        ; preds = %if.then95
  store i32 1, i32* %carry, align 4
  %83 = load i32* %j, align 4
  %sub99 = sub nsw i32 256, %83
  %84 = load i32* %i, align 4
  %arrayidx100 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %84
  store i32 %sub99, i32* %arrayidx100, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.then98, %if.then95
  br label %if.end105

if.else102:                                       ; preds = %for.body91
  %85 = load i32* %j, align 4
  %sub103 = sub nsw i32 255, %85
  %86 = load i32* %i, align 4
  %arrayidx104 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %86
  store i32 %sub103, i32* %arrayidx104, align 4
  br label %if.end105

if.end105:                                        ; preds = %if.else102, %if.end101
  br label %for.inc106

for.inc106:                                       ; preds = %if.end105
  %87 = load i32* %i, align 4
  %inc107 = add nsw i32 %87, 1
  store i32 %inc107, i32* %i, align 4
  br label %for.cond88

for.end108:                                       ; preds = %for.cond88
  %88 = load i32* %q0, align 4
  %cmp109 = icmp sgt i32 %88, 0
  br i1 %cmp109, label %if.then111, label %if.end118

if.then111:                                       ; preds = %for.end108
  %89 = load i32* %q0, align 4
  switch i32 %89, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb114
  ]

sw.bb:                                            ; preds = %if.then111
  %90 = load i32* %jz, align 4
  %sub112 = sub nsw i32 %90, 1
  %arrayidx113 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub112
  %91 = load i32* %arrayidx113, align 4
  %and = and i32 %91, 127
  store i32 %and, i32* %arrayidx113, align 4
  br label %sw.epilog

sw.bb114:                                         ; preds = %if.then111
  %92 = load i32* %jz, align 4
  %sub115 = sub nsw i32 %92, 1
  %arrayidx116 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub115
  %93 = load i32* %arrayidx116, align 4
  %and117 = and i32 %93, 63
  store i32 %and117, i32* %arrayidx116, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb114, %sw.bb, %if.then111
  br label %if.end118

if.end118:                                        ; preds = %sw.epilog, %for.end108
  %94 = load i32* %ih, align 4
  %cmp119 = icmp eq i32 %94, 2
  br i1 %cmp119, label %if.then121, label %if.end129

if.then121:                                       ; preds = %if.end118
  %95 = load float* %z, align 4
  %sub122 = fsub float 1.000000e+00, %95
  store float %sub122, float* %z, align 4
  %96 = load i32* %carry, align 4
  %cmp123 = icmp ne i32 %96, 0
  br i1 %cmp123, label %if.then125, label %if.end128

if.then125:                                       ; preds = %if.then121
  %97 = load i32* %q0, align 4
  %call126 = call float @scalbnf(float 1.000000e+00, i32 %97) #4
  %98 = load float* %z, align 4
  %sub127 = fsub float %98, %call126
  store float %sub127, float* %z, align 4
  br label %if.end128

if.end128:                                        ; preds = %if.then125, %if.then121
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.end118
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end83
  %99 = load float* %z, align 4
  %cmp131 = fcmp oeq float %99, 0.000000e+00
  br i1 %cmp131, label %if.then133, label %if.end185

if.then133:                                       ; preds = %if.end130
  store i32 0, i32* %j, align 4
  %100 = load i32* %jz, align 4
  %sub134 = sub nsw i32 %100, 1
  store i32 %sub134, i32* %i, align 4
  br label %for.cond135

for.cond135:                                      ; preds = %for.inc140, %if.then133
  %101 = load i32* %i, align 4
  %102 = load i32* %jk, align 4
  %cmp136 = icmp sge i32 %101, %102
  br i1 %cmp136, label %for.body138, label %for.end142

for.body138:                                      ; preds = %for.cond135
  %103 = load i32* %i, align 4
  %arrayidx139 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %103
  %104 = load i32* %arrayidx139, align 4
  %105 = load i32* %j, align 4
  %or = or i32 %105, %104
  store i32 %or, i32* %j, align 4
  br label %for.inc140

for.inc140:                                       ; preds = %for.body138
  %106 = load i32* %i, align 4
  %dec141 = add nsw i32 %106, -1
  store i32 %dec141, i32* %i, align 4
  br label %for.cond135

for.end142:                                       ; preds = %for.cond135
  %107 = load i32* %j, align 4
  %cmp143 = icmp eq i32 %107, 0
  br i1 %cmp143, label %if.then145, label %if.end184

if.then145:                                       ; preds = %for.end142
  store i32 1, i32* %k, align 4
  br label %for.cond146

for.cond146:                                      ; preds = %for.inc152, %if.then145
  %108 = load i32* %jk, align 4
  %109 = load i32* %k, align 4
  %sub147 = sub nsw i32 %108, %109
  %arrayidx148 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub147
  %110 = load i32* %arrayidx148, align 4
  %cmp149 = icmp eq i32 %110, 0
  br i1 %cmp149, label %for.body151, label %for.end154

for.body151:                                      ; preds = %for.cond146
  br label %for.inc152

for.inc152:                                       ; preds = %for.body151
  %111 = load i32* %k, align 4
  %inc153 = add nsw i32 %111, 1
  store i32 %inc153, i32* %k, align 4
  br label %for.cond146

for.end154:                                       ; preds = %for.cond146
  %112 = load i32* %jz, align 4
  %add155 = add nsw i32 %112, 1
  store i32 %add155, i32* %i, align 4
  br label %for.cond156

for.cond156:                                      ; preds = %for.inc180, %for.end154
  %113 = load i32* %i, align 4
  %114 = load i32* %jz, align 4
  %115 = load i32* %k, align 4
  %add157 = add nsw i32 %114, %115
  %cmp158 = icmp sle i32 %113, %add157
  br i1 %cmp158, label %for.body160, label %for.end182

for.body160:                                      ; preds = %for.cond156
  %116 = load i32* %jv, align 4
  %117 = load i32* %i, align 4
  %add161 = add nsw i32 %116, %117
  %118 = load i32** %ipio2.addr, align 4
  %arrayidx162 = getelementptr inbounds i32* %118, i32 %add161
  %119 = load i32* %arrayidx162, align 4
  %conv163 = sitofp i32 %119 to float
  %120 = load i32* %jx, align 4
  %121 = load i32* %i, align 4
  %add164 = add nsw i32 %120, %121
  %arrayidx165 = getelementptr inbounds [20 x float]* %f, i32 0, i32 %add164
  store float %conv163, float* %arrayidx165, align 4
  store i32 0, i32* %j, align 4
  store float 0.000000e+00, float* %fw, align 4
  br label %for.cond166

for.cond166:                                      ; preds = %for.inc176, %for.body160
  %122 = load i32* %j, align 4
  %123 = load i32* %jx, align 4
  %cmp167 = icmp sle i32 %122, %123
  br i1 %cmp167, label %for.body169, label %for.end178

for.body169:                                      ; preds = %for.cond166
  %124 = load i32* %j, align 4
  %125 = load float** %x.addr, align 4
  %arrayidx170 = getelementptr inbounds float* %125, i32 %124
  %126 = load float* %arrayidx170, align 4
  %127 = load i32* %jx, align 4
  %128 = load i32* %i, align 4
  %add171 = add nsw i32 %127, %128
  %129 = load i32* %j, align 4
  %sub172 = sub nsw i32 %add171, %129
  %arrayidx173 = getelementptr inbounds [20 x float]* %f, i32 0, i32 %sub172
  %130 = load float* %arrayidx173, align 4
  %mul174 = fmul float %126, %130
  %131 = load float* %fw, align 4
  %add175 = fadd float %131, %mul174
  store float %add175, float* %fw, align 4
  br label %for.inc176

for.inc176:                                       ; preds = %for.body169
  %132 = load i32* %j, align 4
  %inc177 = add nsw i32 %132, 1
  store i32 %inc177, i32* %j, align 4
  br label %for.cond166

for.end178:                                       ; preds = %for.cond166
  %133 = load float* %fw, align 4
  %134 = load i32* %i, align 4
  %arrayidx179 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %134
  store float %133, float* %arrayidx179, align 4
  br label %for.inc180

for.inc180:                                       ; preds = %for.end178
  %135 = load i32* %i, align 4
  %inc181 = add nsw i32 %135, 1
  store i32 %inc181, i32* %i, align 4
  br label %for.cond156

for.end182:                                       ; preds = %for.cond156
  %136 = load i32* %k, align 4
  %137 = load i32* %jz, align 4
  %add183 = add nsw i32 %137, %136
  store i32 %add183, i32* %jz, align 4
  br label %recompute

if.end184:                                        ; preds = %for.end142
  br label %if.end185

if.end185:                                        ; preds = %if.end184, %if.end130
  %138 = load float* %z, align 4
  %cmp186 = fcmp oeq float %138, 0.000000e+00
  br i1 %cmp186, label %if.then188, label %if.else196

if.then188:                                       ; preds = %if.end185
  %139 = load i32* %jz, align 4
  %sub189 = sub nsw i32 %139, 1
  store i32 %sub189, i32* %jz, align 4
  %140 = load i32* %q0, align 4
  %sub190 = sub nsw i32 %140, 8
  store i32 %sub190, i32* %q0, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then188
  %141 = load i32* %jz, align 4
  %arrayidx191 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %141
  %142 = load i32* %arrayidx191, align 4
  %cmp192 = icmp eq i32 %142, 0
  br i1 %cmp192, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %143 = load i32* %jz, align 4
  %dec194 = add nsw i32 %143, -1
  store i32 %dec194, i32* %jz, align 4
  %144 = load i32* %q0, align 4
  %sub195 = sub nsw i32 %144, 8
  store i32 %sub195, i32* %q0, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end217

if.else196:                                       ; preds = %if.end185
  %145 = load float* %z, align 4
  %146 = load i32* %q0, align 4
  %sub197 = sub nsw i32 0, %146
  %call198 = call float @scalbnf(float %145, i32 %sub197) #4
  store float %call198, float* %z, align 4
  %147 = load float* %z, align 4
  %cmp199 = fcmp oge float %147, 2.560000e+02
  br i1 %cmp199, label %if.then201, label %if.else213

if.then201:                                       ; preds = %if.else196
  %148 = load float* %z, align 4
  %mul202 = fmul float 3.906250e-03, %148
  %conv203 = fptosi float %mul202 to i32
  %conv204 = sitofp i32 %conv203 to float
  store float %conv204, float* %fw, align 4
  %149 = load float* %z, align 4
  %150 = load float* %fw, align 4
  %mul205 = fmul float 2.560000e+02, %150
  %sub206 = fsub float %149, %mul205
  %conv207 = fptosi float %sub206 to i32
  %151 = load i32* %jz, align 4
  %arrayidx208 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %151
  store i32 %conv207, i32* %arrayidx208, align 4
  %152 = load i32* %jz, align 4
  %add209 = add nsw i32 %152, 1
  store i32 %add209, i32* %jz, align 4
  %153 = load i32* %q0, align 4
  %add210 = add nsw i32 %153, 8
  store i32 %add210, i32* %q0, align 4
  %154 = load float* %fw, align 4
  %conv211 = fptosi float %154 to i32
  %155 = load i32* %jz, align 4
  %arrayidx212 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %155
  store i32 %conv211, i32* %arrayidx212, align 4
  br label %if.end216

if.else213:                                       ; preds = %if.else196
  %156 = load float* %z, align 4
  %conv214 = fptosi float %156 to i32
  %157 = load i32* %jz, align 4
  %arrayidx215 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %157
  store i32 %conv214, i32* %arrayidx215, align 4
  br label %if.end216

if.end216:                                        ; preds = %if.else213, %if.then201
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %while.end
  %158 = load i32* %q0, align 4
  %call218 = call float @scalbnf(float 1.000000e+00, i32 %158) #4
  store float %call218, float* %fw, align 4
  %159 = load i32* %jz, align 4
  store i32 %159, i32* %i, align 4
  br label %for.cond219

for.cond219:                                      ; preds = %for.inc228, %if.end217
  %160 = load i32* %i, align 4
  %cmp220 = icmp sge i32 %160, 0
  br i1 %cmp220, label %for.body222, label %for.end230

for.body222:                                      ; preds = %for.cond219
  %161 = load float* %fw, align 4
  %162 = load i32* %i, align 4
  %arrayidx223 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %162
  %163 = load i32* %arrayidx223, align 4
  %conv224 = sitofp i32 %163 to float
  %mul225 = fmul float %161, %conv224
  %164 = load i32* %i, align 4
  %arrayidx226 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %164
  store float %mul225, float* %arrayidx226, align 4
  %165 = load float* %fw, align 4
  %mul227 = fmul float %165, 3.906250e-03
  store float %mul227, float* %fw, align 4
  br label %for.inc228

for.inc228:                                       ; preds = %for.body222
  %166 = load i32* %i, align 4
  %dec229 = add nsw i32 %166, -1
  store i32 %dec229, i32* %i, align 4
  br label %for.cond219

for.end230:                                       ; preds = %for.cond219
  %167 = load i32* %jz, align 4
  store i32 %167, i32* %i, align 4
  br label %for.cond231

for.cond231:                                      ; preds = %for.inc252, %for.end230
  %168 = load i32* %i, align 4
  %cmp232 = icmp sge i32 %168, 0
  br i1 %cmp232, label %for.body234, label %for.end254

for.body234:                                      ; preds = %for.cond231
  store float 0.000000e+00, float* %fw, align 4
  store i32 0, i32* %k, align 4
  br label %for.cond235

for.cond235:                                      ; preds = %for.inc247, %for.body234
  %169 = load i32* %k, align 4
  %170 = load i32* %jp, align 4
  %cmp236 = icmp sle i32 %169, %170
  br i1 %cmp236, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond235
  %171 = load i32* %k, align 4
  %172 = load i32* %jz, align 4
  %173 = load i32* %i, align 4
  %sub238 = sub nsw i32 %172, %173
  %cmp239 = icmp sle i32 %171, %sub238
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond235
  %174 = phi i1 [ false, %for.cond235 ], [ %cmp239, %land.rhs ]
  br i1 %174, label %for.body241, label %for.end249

for.body241:                                      ; preds = %land.end
  %175 = load i32* %k, align 4
  %arrayidx242 = getelementptr inbounds [11 x float]* @PIo2, i32 0, i32 %175
  %176 = load float* %arrayidx242, align 4
  %177 = load i32* %i, align 4
  %178 = load i32* %k, align 4
  %add243 = add nsw i32 %177, %178
  %arrayidx244 = getelementptr inbounds [20 x float]* %q, i32 0, i32 %add243
  %179 = load float* %arrayidx244, align 4
  %mul245 = fmul float %176, %179
  %180 = load float* %fw, align 4
  %add246 = fadd float %180, %mul245
  store float %add246, float* %fw, align 4
  br label %for.inc247

for.inc247:                                       ; preds = %for.body241
  %181 = load i32* %k, align 4
  %inc248 = add nsw i32 %181, 1
  store i32 %inc248, i32* %k, align 4
  br label %for.cond235

for.end249:                                       ; preds = %land.end
  %182 = load float* %fw, align 4
  %183 = load i32* %jz, align 4
  %184 = load i32* %i, align 4
  %sub250 = sub nsw i32 %183, %184
  %arrayidx251 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub250
  store float %182, float* %arrayidx251, align 4
  br label %for.inc252

for.inc252:                                       ; preds = %for.end249
  %185 = load i32* %i, align 4
  %dec253 = add nsw i32 %185, -1
  store i32 %dec253, i32* %i, align 4
  br label %for.cond231

for.end254:                                       ; preds = %for.cond231
  %186 = load i32* %prec.addr, align 4
  switch i32 %186, label %sw.epilog374 [
    i32 0, label %sw.bb255
    i32 1, label %sw.bb273
    i32 2, label %sw.bb273
    i32 3, label %sw.bb310
  ]

sw.bb255:                                         ; preds = %for.end254
  store float 0.000000e+00, float* %fw, align 4
  %187 = load i32* %jz, align 4
  store i32 %187, i32* %i, align 4
  br label %for.cond256

for.cond256:                                      ; preds = %for.inc262, %sw.bb255
  %188 = load i32* %i, align 4
  %cmp257 = icmp sge i32 %188, 0
  br i1 %cmp257, label %for.body259, label %for.end264

for.body259:                                      ; preds = %for.cond256
  %189 = load i32* %i, align 4
  %arrayidx260 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %189
  %190 = load float* %arrayidx260, align 4
  %191 = load float* %fw, align 4
  %add261 = fadd float %191, %190
  store float %add261, float* %fw, align 4
  br label %for.inc262

for.inc262:                                       ; preds = %for.body259
  %192 = load i32* %i, align 4
  %dec263 = add nsw i32 %192, -1
  store i32 %dec263, i32* %i, align 4
  br label %for.cond256

for.end264:                                       ; preds = %for.cond256
  %193 = load i32* %ih, align 4
  %cmp265 = icmp eq i32 %193, 0
  br i1 %cmp265, label %cond.true267, label %cond.false268

cond.true267:                                     ; preds = %for.end264
  %194 = load float* %fw, align 4
  br label %cond.end270

cond.false268:                                    ; preds = %for.end264
  %195 = load float* %fw, align 4
  %sub269 = fsub float -0.000000e+00, %195
  br label %cond.end270

cond.end270:                                      ; preds = %cond.false268, %cond.true267
  %cond271 = phi float [ %194, %cond.true267 ], [ %sub269, %cond.false268 ]
  %196 = load float** %y.addr, align 4
  %arrayidx272 = getelementptr inbounds float* %196, i32 0
  store float %cond271, float* %arrayidx272, align 4
  br label %sw.epilog374

sw.bb273:                                         ; preds = %for.end254, %for.end254
  store float 0.000000e+00, float* %fw, align 4
  %197 = load i32* %jz, align 4
  store i32 %197, i32* %i, align 4
  br label %for.cond274

for.cond274:                                      ; preds = %for.inc280, %sw.bb273
  %198 = load i32* %i, align 4
  %cmp275 = icmp sge i32 %198, 0
  br i1 %cmp275, label %for.body277, label %for.end282

for.body277:                                      ; preds = %for.cond274
  %199 = load i32* %i, align 4
  %arrayidx278 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %199
  %200 = load float* %arrayidx278, align 4
  %201 = load float* %fw, align 4
  %add279 = fadd float %201, %200
  store float %add279, float* %fw, align 4
  br label %for.inc280

for.inc280:                                       ; preds = %for.body277
  %202 = load i32* %i, align 4
  %dec281 = add nsw i32 %202, -1
  store i32 %dec281, i32* %i, align 4
  br label %for.cond274

for.end282:                                       ; preds = %for.cond274
  %203 = load i32* %ih, align 4
  %cmp283 = icmp eq i32 %203, 0
  br i1 %cmp283, label %cond.true285, label %cond.false286

cond.true285:                                     ; preds = %for.end282
  %204 = load float* %fw, align 4
  br label %cond.end288

cond.false286:                                    ; preds = %for.end282
  %205 = load float* %fw, align 4
  %sub287 = fsub float -0.000000e+00, %205
  br label %cond.end288

cond.end288:                                      ; preds = %cond.false286, %cond.true285
  %cond289 = phi float [ %204, %cond.true285 ], [ %sub287, %cond.false286 ]
  %206 = load float** %y.addr, align 4
  %arrayidx290 = getelementptr inbounds float* %206, i32 0
  store float %cond289, float* %arrayidx290, align 4
  %arrayidx291 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 0
  %207 = load float* %arrayidx291, align 4
  %208 = load float* %fw, align 4
  %sub292 = fsub float %207, %208
  store float %sub292, float* %fw, align 4
  store i32 1, i32* %i, align 4
  br label %for.cond293

for.cond293:                                      ; preds = %for.inc299, %cond.end288
  %209 = load i32* %i, align 4
  %210 = load i32* %jz, align 4
  %cmp294 = icmp sle i32 %209, %210
  br i1 %cmp294, label %for.body296, label %for.end301

for.body296:                                      ; preds = %for.cond293
  %211 = load i32* %i, align 4
  %arrayidx297 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %211
  %212 = load float* %arrayidx297, align 4
  %213 = load float* %fw, align 4
  %add298 = fadd float %213, %212
  store float %add298, float* %fw, align 4
  br label %for.inc299

for.inc299:                                       ; preds = %for.body296
  %214 = load i32* %i, align 4
  %inc300 = add nsw i32 %214, 1
  store i32 %inc300, i32* %i, align 4
  br label %for.cond293

for.end301:                                       ; preds = %for.cond293
  %215 = load i32* %ih, align 4
  %cmp302 = icmp eq i32 %215, 0
  br i1 %cmp302, label %cond.true304, label %cond.false305

cond.true304:                                     ; preds = %for.end301
  %216 = load float* %fw, align 4
  br label %cond.end307

cond.false305:                                    ; preds = %for.end301
  %217 = load float* %fw, align 4
  %sub306 = fsub float -0.000000e+00, %217
  br label %cond.end307

cond.end307:                                      ; preds = %cond.false305, %cond.true304
  %cond308 = phi float [ %216, %cond.true304 ], [ %sub306, %cond.false305 ]
  %218 = load float** %y.addr, align 4
  %arrayidx309 = getelementptr inbounds float* %218, i32 1
  store float %cond308, float* %arrayidx309, align 4
  br label %sw.epilog374

sw.bb310:                                         ; preds = %for.end254
  %219 = load i32* %jz, align 4
  store i32 %219, i32* %i, align 4
  br label %for.cond311

for.cond311:                                      ; preds = %for.inc326, %sw.bb310
  %220 = load i32* %i, align 4
  %cmp312 = icmp sgt i32 %220, 0
  br i1 %cmp312, label %for.body314, label %for.end328

for.body314:                                      ; preds = %for.cond311
  %221 = load i32* %i, align 4
  %sub315 = sub nsw i32 %221, 1
  %arrayidx316 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub315
  %222 = load float* %arrayidx316, align 4
  %223 = load i32* %i, align 4
  %arrayidx317 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %223
  %224 = load float* %arrayidx317, align 4
  %add318 = fadd float %222, %224
  store float %add318, float* %fw, align 4
  %225 = load i32* %i, align 4
  %sub319 = sub nsw i32 %225, 1
  %arrayidx320 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub319
  %226 = load float* %arrayidx320, align 4
  %227 = load float* %fw, align 4
  %sub321 = fsub float %226, %227
  %228 = load i32* %i, align 4
  %arrayidx322 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %228
  %229 = load float* %arrayidx322, align 4
  %add323 = fadd float %229, %sub321
  store float %add323, float* %arrayidx322, align 4
  %230 = load float* %fw, align 4
  %231 = load i32* %i, align 4
  %sub324 = sub nsw i32 %231, 1
  %arrayidx325 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub324
  store float %230, float* %arrayidx325, align 4
  br label %for.inc326

for.inc326:                                       ; preds = %for.body314
  %232 = load i32* %i, align 4
  %dec327 = add nsw i32 %232, -1
  store i32 %dec327, i32* %i, align 4
  br label %for.cond311

for.end328:                                       ; preds = %for.cond311
  %233 = load i32* %jz, align 4
  store i32 %233, i32* %i, align 4
  br label %for.cond329

for.cond329:                                      ; preds = %for.inc344, %for.end328
  %234 = load i32* %i, align 4
  %cmp330 = icmp sgt i32 %234, 1
  br i1 %cmp330, label %for.body332, label %for.end346

for.body332:                                      ; preds = %for.cond329
  %235 = load i32* %i, align 4
  %sub333 = sub nsw i32 %235, 1
  %arrayidx334 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub333
  %236 = load float* %arrayidx334, align 4
  %237 = load i32* %i, align 4
  %arrayidx335 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %237
  %238 = load float* %arrayidx335, align 4
  %add336 = fadd float %236, %238
  store float %add336, float* %fw, align 4
  %239 = load i32* %i, align 4
  %sub337 = sub nsw i32 %239, 1
  %arrayidx338 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub337
  %240 = load float* %arrayidx338, align 4
  %241 = load float* %fw, align 4
  %sub339 = fsub float %240, %241
  %242 = load i32* %i, align 4
  %arrayidx340 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %242
  %243 = load float* %arrayidx340, align 4
  %add341 = fadd float %243, %sub339
  store float %add341, float* %arrayidx340, align 4
  %244 = load float* %fw, align 4
  %245 = load i32* %i, align 4
  %sub342 = sub nsw i32 %245, 1
  %arrayidx343 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %sub342
  store float %244, float* %arrayidx343, align 4
  br label %for.inc344

for.inc344:                                       ; preds = %for.body332
  %246 = load i32* %i, align 4
  %dec345 = add nsw i32 %246, -1
  store i32 %dec345, i32* %i, align 4
  br label %for.cond329

for.end346:                                       ; preds = %for.cond329
  store float 0.000000e+00, float* %fw, align 4
  %247 = load i32* %jz, align 4
  store i32 %247, i32* %i, align 4
  br label %for.cond347

for.cond347:                                      ; preds = %for.inc353, %for.end346
  %248 = load i32* %i, align 4
  %cmp348 = icmp sge i32 %248, 2
  br i1 %cmp348, label %for.body350, label %for.end355

for.body350:                                      ; preds = %for.cond347
  %249 = load i32* %i, align 4
  %arrayidx351 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 %249
  %250 = load float* %arrayidx351, align 4
  %251 = load float* %fw, align 4
  %add352 = fadd float %251, %250
  store float %add352, float* %fw, align 4
  br label %for.inc353

for.inc353:                                       ; preds = %for.body350
  %252 = load i32* %i, align 4
  %dec354 = add nsw i32 %252, -1
  store i32 %dec354, i32* %i, align 4
  br label %for.cond347

for.end355:                                       ; preds = %for.cond347
  %253 = load i32* %ih, align 4
  %cmp356 = icmp eq i32 %253, 0
  br i1 %cmp356, label %if.then358, label %if.else364

if.then358:                                       ; preds = %for.end355
  %arrayidx359 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 0
  %254 = load float* %arrayidx359, align 4
  %255 = load float** %y.addr, align 4
  %arrayidx360 = getelementptr inbounds float* %255, i32 0
  store float %254, float* %arrayidx360, align 4
  %arrayidx361 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 1
  %256 = load float* %arrayidx361, align 4
  %257 = load float** %y.addr, align 4
  %arrayidx362 = getelementptr inbounds float* %257, i32 1
  store float %256, float* %arrayidx362, align 4
  %258 = load float* %fw, align 4
  %259 = load float** %y.addr, align 4
  %arrayidx363 = getelementptr inbounds float* %259, i32 2
  store float %258, float* %arrayidx363, align 4
  br label %if.end373

if.else364:                                       ; preds = %for.end355
  %arrayidx365 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 0
  %260 = load float* %arrayidx365, align 4
  %sub366 = fsub float -0.000000e+00, %260
  %261 = load float** %y.addr, align 4
  %arrayidx367 = getelementptr inbounds float* %261, i32 0
  store float %sub366, float* %arrayidx367, align 4
  %arrayidx368 = getelementptr inbounds [20 x float]* %fq, i32 0, i32 1
  %262 = load float* %arrayidx368, align 4
  %sub369 = fsub float -0.000000e+00, %262
  %263 = load float** %y.addr, align 4
  %arrayidx370 = getelementptr inbounds float* %263, i32 1
  store float %sub369, float* %arrayidx370, align 4
  %264 = load float* %fw, align 4
  %sub371 = fsub float -0.000000e+00, %264
  %265 = load float** %y.addr, align 4
  %arrayidx372 = getelementptr inbounds float* %265, i32 2
  store float %sub371, float* %arrayidx372, align 4
  br label %if.end373

if.end373:                                        ; preds = %if.else364, %if.then358
  br label %sw.epilog374

sw.epilog374:                                     ; preds = %if.end373, %cond.end307, %cond.end270, %for.end254
  %266 = load i32* %n, align 4
  %and375 = and i32 %266, 7
  ret i32 %and375
}

; Function Attrs: nounwind
define float @__kernel_sinf(float %x, float %y, i32 %iy) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  %iy.addr = alloca i32, align 4
  %z = alloca float, align 4
  %r = alloca float, align 4
  %v = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  store i32 %iy, i32* %iy.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 838860800
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %conv = fptosi float %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %5 = load float* %x.addr, align 4
  store float %5, float* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %do.end
  %6 = load float* %x.addr, align 4
  %7 = load float* %x.addr, align 4
  %mul = fmul float %6, %7
  store float %mul, float* %z, align 4
  %8 = load float* %z, align 4
  %9 = load float* %x.addr, align 4
  %mul5 = fmul float %8, %9
  store float %mul5, float* %v, align 4
  %10 = load float* %z, align 4
  %11 = load float* %z, align 4
  %12 = load float* %z, align 4
  %13 = load float* %z, align 4
  %mul6 = fmul float %13, 0x3DE5D93A60000000
  %add = fadd float 0xBE5AE5E680000000, %mul6
  %mul7 = fmul float %12, %add
  %add8 = fadd float 0x3EC71DE360000000, %mul7
  %mul9 = fmul float %11, %add8
  %add10 = fadd float 0xBF2A01A020000000, %mul9
  %mul11 = fmul float %10, %add10
  %add12 = fadd float 0x3F81111120000000, %mul11
  store float %add12, float* %r, align 4
  %14 = load i32* %iy.addr, align 4
  %cmp13 = icmp eq i32 %14, 0
  br i1 %cmp13, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end4
  %15 = load float* %x.addr, align 4
  %16 = load float* %v, align 4
  %17 = load float* %z, align 4
  %18 = load float* %r, align 4
  %mul16 = fmul float %17, %18
  %add17 = fadd float 0xBFC5555560000000, %mul16
  %mul18 = fmul float %16, %add17
  %add19 = fadd float %15, %mul18
  store float %add19, float* %retval
  br label %return

if.else:                                          ; preds = %if.end4
  %19 = load float* %x.addr, align 4
  %20 = load float* %z, align 4
  %21 = load float* %y.addr, align 4
  %mul20 = fmul float 5.000000e-01, %21
  %22 = load float* %v, align 4
  %23 = load float* %r, align 4
  %mul21 = fmul float %22, %23
  %sub = fsub float %mul20, %mul21
  %mul22 = fmul float %20, %sub
  %24 = load float* %y.addr, align 4
  %sub23 = fsub float %mul22, %24
  %25 = load float* %v, align 4
  %mul24 = fmul float %25, 0xBFC5555560000000
  %sub25 = fsub float %sub23, %mul24
  %sub26 = fsub float %19, %sub25
  store float %sub26, float* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then15, %if.then3
  %26 = load float* %retval
  ret float %26
}

; Function Attrs: nounwind
define float @__kernel_tanf(float %x, float %y, i32 %iy) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  %iy.addr = alloca i32, align 4
  %z = alloca float, align 4
  %r = alloca float, align 4
  %v = alloca float, align 4
  %w = alloca float, align 4
  %s = alloca float, align 4
  %ix = alloca i32, align 4
  %hx = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %a = alloca float, align 4
  %t = alloca float, align 4
  %i = alloca i32, align 4
  %gf_u75 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u88 = alloca %union.ieee_float_shape_type, align 4
  %sf_u93 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  store i32 %iy, i32* %iy.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 830472192
  br i1 %cmp, label %if.then, label %if.end10

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %conv = fptosi float %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %5 = load i32* %ix, align 4
  %6 = load i32* %iy.addr, align 4
  %add = add nsw i32 %6, 1
  %or = or i32 %5, %add
  %cmp4 = icmp eq i32 %or, 0
  br i1 %cmp4, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then3
  %7 = load float* %x.addr, align 4
  %call = call float @fabsf(float %7) #6
  %div = fdiv float 1.000000e+00, %call
  store float %div, float* %retval
  br label %return

if.else:                                          ; preds = %if.then3
  %8 = load i32* %iy.addr, align 4
  %cmp7 = icmp eq i32 %8, 1
  br i1 %cmp7, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %9 = load float* %x.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %10 = load float* %x.addr, align 4
  %div9 = fdiv float -1.000000e+00, %10
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %9, %cond.true ], [ %div9, %cond.false ]
  store float %cond, float* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end10

if.end10:                                         ; preds = %if.end, %do.end
  %11 = load i32* %ix, align 4
  %cmp11 = icmp sge i32 %11, 1059889472
  br i1 %cmp11, label %if.then13, label %if.end22

if.then13:                                        ; preds = %if.end10
  %12 = load i32* %hx, align 4
  %cmp14 = icmp slt i32 %12, 0
  br i1 %cmp14, label %if.then16, label %if.end18

if.then16:                                        ; preds = %if.then13
  %13 = load float* %x.addr, align 4
  %sub = fsub float -0.000000e+00, %13
  store float %sub, float* %x.addr, align 4
  %14 = load float* %y.addr, align 4
  %sub17 = fsub float -0.000000e+00, %14
  store float %sub17, float* %y.addr, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %if.then13
  %15 = load float* %x.addr, align 4
  %sub19 = fsub float 0x3FE921FB40000000, %15
  store float %sub19, float* %z, align 4
  %16 = load float* %y.addr, align 4
  %sub20 = fsub float 0x3E64442D00000000, %16
  store float %sub20, float* %w, align 4
  %17 = load float* %z, align 4
  %18 = load float* %w, align 4
  %add21 = fadd float %17, %18
  store float %add21, float* %x.addr, align 4
  store float 0.000000e+00, float* %y.addr, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.end18, %if.end10
  %19 = load float* %x.addr, align 4
  %20 = load float* %x.addr, align 4
  %mul = fmul float %19, %20
  store float %mul, float* %z, align 4
  %21 = load float* %z, align 4
  %22 = load float* %z, align 4
  %mul23 = fmul float %21, %22
  store float %mul23, float* %w, align 4
  %23 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 1), align 4
  %24 = load float* %w, align 4
  %25 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 3), align 4
  %26 = load float* %w, align 4
  %27 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 5), align 4
  %28 = load float* %w, align 4
  %29 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 7), align 4
  %30 = load float* %w, align 4
  %31 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 9), align 4
  %32 = load float* %w, align 4
  %33 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 11), align 4
  %mul24 = fmul float %32, %33
  %add25 = fadd float %31, %mul24
  %mul26 = fmul float %30, %add25
  %add27 = fadd float %29, %mul26
  %mul28 = fmul float %28, %add27
  %add29 = fadd float %27, %mul28
  %mul30 = fmul float %26, %add29
  %add31 = fadd float %25, %mul30
  %mul32 = fmul float %24, %add31
  %add33 = fadd float %23, %mul32
  store float %add33, float* %r, align 4
  %34 = load float* %z, align 4
  %35 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 2), align 4
  %36 = load float* %w, align 4
  %37 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 4), align 4
  %38 = load float* %w, align 4
  %39 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 6), align 4
  %40 = load float* %w, align 4
  %41 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 8), align 4
  %42 = load float* %w, align 4
  %43 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 10), align 4
  %44 = load float* %w, align 4
  %45 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 12), align 4
  %mul34 = fmul float %44, %45
  %add35 = fadd float %43, %mul34
  %mul36 = fmul float %42, %add35
  %add37 = fadd float %41, %mul36
  %mul38 = fmul float %40, %add37
  %add39 = fadd float %39, %mul38
  %mul40 = fmul float %38, %add39
  %add41 = fadd float %37, %mul40
  %mul42 = fmul float %36, %add41
  %add43 = fadd float %35, %mul42
  %mul44 = fmul float %34, %add43
  store float %mul44, float* %v, align 4
  %46 = load float* %z, align 4
  %47 = load float* %x.addr, align 4
  %mul45 = fmul float %46, %47
  store float %mul45, float* %s, align 4
  %48 = load float* %y.addr, align 4
  %49 = load float* %z, align 4
  %50 = load float* %s, align 4
  %51 = load float* %r, align 4
  %52 = load float* %v, align 4
  %add46 = fadd float %51, %52
  %mul47 = fmul float %50, %add46
  %53 = load float* %y.addr, align 4
  %add48 = fadd float %mul47, %53
  %mul49 = fmul float %49, %add48
  %add50 = fadd float %48, %mul49
  store float %add50, float* %r, align 4
  %54 = load float* getelementptr inbounds ([13 x float]* @T, i32 0, i32 0), align 4
  %55 = load float* %s, align 4
  %mul51 = fmul float %54, %55
  %56 = load float* %r, align 4
  %add52 = fadd float %56, %mul51
  store float %add52, float* %r, align 4
  %57 = load float* %x.addr, align 4
  %58 = load float* %r, align 4
  %add53 = fadd float %57, %58
  store float %add53, float* %w, align 4
  %59 = load i32* %ix, align 4
  %cmp54 = icmp sge i32 %59, 1059889472
  br i1 %cmp54, label %if.then56, label %if.end69

if.then56:                                        ; preds = %if.end22
  %60 = load i32* %iy.addr, align 4
  %conv57 = sitofp i32 %60 to float
  store float %conv57, float* %v, align 4
  %61 = load i32* %hx, align 4
  %shr = ashr i32 %61, 30
  %and58 = and i32 %shr, 2
  %sub59 = sub nsw i32 1, %and58
  %conv60 = sitofp i32 %sub59 to float
  %62 = load float* %v, align 4
  %63 = load float* %x.addr, align 4
  %64 = load float* %w, align 4
  %65 = load float* %w, align 4
  %mul61 = fmul float %64, %65
  %66 = load float* %w, align 4
  %67 = load float* %v, align 4
  %add62 = fadd float %66, %67
  %div63 = fdiv float %mul61, %add62
  %68 = load float* %r, align 4
  %sub64 = fsub float %div63, %68
  %sub65 = fsub float %63, %sub64
  %mul66 = fmul float 2.000000e+00, %sub65
  %sub67 = fsub float %62, %mul66
  %mul68 = fmul float %conv60, %sub67
  store float %mul68, float* %retval
  br label %return

if.end69:                                         ; preds = %if.end22
  %69 = load i32* %iy.addr, align 4
  %cmp70 = icmp eq i32 %69, 1
  br i1 %cmp70, label %if.then72, label %if.else73

if.then72:                                        ; preds = %if.end69
  %70 = load float* %w, align 4
  store float %70, float* %retval
  br label %return

if.else73:                                        ; preds = %if.end69
  %71 = load float* %w, align 4
  store float %71, float* %z, align 4
  br label %do.body74

do.body74:                                        ; preds = %if.else73
  %72 = load float* %z, align 4
  %value76 = bitcast %union.ieee_float_shape_type* %gf_u75 to float*
  store float %72, float* %value76, align 4
  %word77 = bitcast %union.ieee_float_shape_type* %gf_u75 to i32*
  %73 = load i32* %word77, align 4
  store i32 %73, i32* %i, align 4
  br label %do.end78

do.end78:                                         ; preds = %do.body74
  br label %do.body79

do.body79:                                        ; preds = %do.end78
  %74 = load i32* %i, align 4
  %and80 = and i32 %74, -4096
  %word81 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %and80, i32* %word81, align 4
  %value82 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %75 = load float* %value82, align 4
  store float %75, float* %z, align 4
  br label %do.end83

do.end83:                                         ; preds = %do.body79
  %76 = load float* %r, align 4
  %77 = load float* %z, align 4
  %78 = load float* %x.addr, align 4
  %sub84 = fsub float %77, %78
  %sub85 = fsub float %76, %sub84
  store float %sub85, float* %v, align 4
  %79 = load float* %w, align 4
  %div86 = fdiv float -1.000000e+00, %79
  store float %div86, float* %a, align 4
  store float %div86, float* %t, align 4
  br label %do.body87

do.body87:                                        ; preds = %do.end83
  %80 = load float* %t, align 4
  %value89 = bitcast %union.ieee_float_shape_type* %gf_u88 to float*
  store float %80, float* %value89, align 4
  %word90 = bitcast %union.ieee_float_shape_type* %gf_u88 to i32*
  %81 = load i32* %word90, align 4
  store i32 %81, i32* %i, align 4
  br label %do.end91

do.end91:                                         ; preds = %do.body87
  br label %do.body92

do.body92:                                        ; preds = %do.end91
  %82 = load i32* %i, align 4
  %and94 = and i32 %82, -4096
  %word95 = bitcast %union.ieee_float_shape_type* %sf_u93 to i32*
  store i32 %and94, i32* %word95, align 4
  %value96 = bitcast %union.ieee_float_shape_type* %sf_u93 to float*
  %83 = load float* %value96, align 4
  store float %83, float* %t, align 4
  br label %do.end97

do.end97:                                         ; preds = %do.body92
  %84 = load float* %t, align 4
  %85 = load float* %z, align 4
  %mul98 = fmul float %84, %85
  %add99 = fadd float 1.000000e+00, %mul98
  store float %add99, float* %s, align 4
  %86 = load float* %t, align 4
  %87 = load float* %a, align 4
  %88 = load float* %s, align 4
  %89 = load float* %t, align 4
  %90 = load float* %v, align 4
  %mul100 = fmul float %89, %90
  %add101 = fadd float %88, %mul100
  %mul102 = fmul float %87, %add101
  %add103 = fadd float %86, %mul102
  store float %add103, float* %retval
  br label %return

return:                                           ; preds = %do.end97, %if.then72, %if.then56, %cond.end, %if.then6
  %91 = load float* %retval
  ret float %91
}

; Function Attrs: nounwind
define i32 @__kernel_rem_pio2(double* %x, double* %y, i32 %e0, i32 %nx, i32 %prec, i32* %ipio2) #2 {
entry:
  %x.addr = alloca double*, align 4
  %y.addr = alloca double*, align 4
  %e0.addr = alloca i32, align 4
  %nx.addr = alloca i32, align 4
  %prec.addr = alloca i32, align 4
  %ipio2.addr = alloca i32*, align 4
  %jz = alloca i32, align 4
  %jx = alloca i32, align 4
  %jv = alloca i32, align 4
  %jp = alloca i32, align 4
  %jk = alloca i32, align 4
  %carry = alloca i32, align 4
  %n = alloca i32, align 4
  %iq = alloca [20 x i32], align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %k = alloca i32, align 4
  %m = alloca i32, align 4
  %q0 = alloca i32, align 4
  %ih = alloca i32, align 4
  %z = alloca double, align 8
  %fw = alloca double, align 8
  %f = alloca [20 x double], align 8
  %fq = alloca [20 x double], align 8
  %q = alloca [20 x double], align 8
  store double* %x, double** %x.addr, align 4
  store double* %y, double** %y.addr, align 4
  store i32 %e0, i32* %e0.addr, align 4
  store i32 %nx, i32* %nx.addr, align 4
  store i32 %prec, i32* %prec.addr, align 4
  store i32* %ipio2, i32** %ipio2.addr, align 4
  %0 = load i32* %prec.addr, align 4
  %arrayidx = getelementptr inbounds [4 x i32]* @init_jk97, i32 0, i32 %0
  %1 = load i32* %arrayidx, align 4
  store i32 %1, i32* %jk, align 4
  %2 = load i32* %jk, align 4
  store i32 %2, i32* %jp, align 4
  %3 = load i32* %nx.addr, align 4
  %sub = sub nsw i32 %3, 1
  store i32 %sub, i32* %jx, align 4
  %4 = load i32* %e0.addr, align 4
  %sub1 = sub nsw i32 %4, 3
  %div = sdiv i32 %sub1, 24
  store i32 %div, i32* %jv, align 4
  %5 = load i32* %jv, align 4
  %cmp = icmp slt i32 %5, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* %jv, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32* %e0.addr, align 4
  %7 = load i32* %jv, align 4
  %add = add nsw i32 %7, 1
  %mul = mul nsw i32 24, %add
  %sub2 = sub nsw i32 %6, %mul
  store i32 %sub2, i32* %q0, align 4
  %8 = load i32* %jv, align 4
  %9 = load i32* %jx, align 4
  %sub3 = sub nsw i32 %8, %9
  store i32 %sub3, i32* %j, align 4
  %10 = load i32* %jx, align 4
  %11 = load i32* %jk, align 4
  %add4 = add nsw i32 %10, %11
  store i32 %add4, i32* %m, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %12 = load i32* %i, align 4
  %13 = load i32* %m, align 4
  %cmp5 = icmp sle i32 %12, %13
  br i1 %cmp5, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %14 = load i32* %j, align 4
  %cmp6 = icmp slt i32 %14, 0
  br i1 %cmp6, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body
  br label %cond.end

cond.false:                                       ; preds = %for.body
  %15 = load i32* %j, align 4
  %16 = load i32** %ipio2.addr, align 4
  %arrayidx7 = getelementptr inbounds i32* %16, i32 %15
  %17 = load i32* %arrayidx7, align 4
  %conv = sitofp i32 %17 to double
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ 0.000000e+00, %cond.true ], [ %conv, %cond.false ]
  %18 = load i32* %i, align 4
  %arrayidx8 = getelementptr inbounds [20 x double]* %f, i32 0, i32 %18
  store double %cond, double* %arrayidx8, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %19 = load i32* %i, align 4
  %inc = add nsw i32 %19, 1
  store i32 %inc, i32* %i, align 4
  %20 = load i32* %j, align 4
  %inc9 = add nsw i32 %20, 1
  store i32 %inc9, i32* %j, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4
  br label %for.cond10

for.cond10:                                       ; preds = %for.inc28, %for.end
  %21 = load i32* %i, align 4
  %22 = load i32* %jk, align 4
  %cmp11 = icmp sle i32 %21, %22
  br i1 %cmp11, label %for.body13, label %for.end30

for.body13:                                       ; preds = %for.cond10
  store i32 0, i32* %j, align 4
  store double 0.000000e+00, double* %fw, align 8
  br label %for.cond14

for.cond14:                                       ; preds = %for.inc24, %for.body13
  %23 = load i32* %j, align 4
  %24 = load i32* %jx, align 4
  %cmp15 = icmp sle i32 %23, %24
  br i1 %cmp15, label %for.body17, label %for.end26

for.body17:                                       ; preds = %for.cond14
  %25 = load i32* %j, align 4
  %26 = load double** %x.addr, align 4
  %arrayidx18 = getelementptr inbounds double* %26, i32 %25
  %27 = load double* %arrayidx18, align 4
  %28 = load i32* %jx, align 4
  %29 = load i32* %i, align 4
  %add19 = add nsw i32 %28, %29
  %30 = load i32* %j, align 4
  %sub20 = sub nsw i32 %add19, %30
  %arrayidx21 = getelementptr inbounds [20 x double]* %f, i32 0, i32 %sub20
  %31 = load double* %arrayidx21, align 4
  %mul22 = fmul double %27, %31
  %32 = load double* %fw, align 8
  %add23 = fadd double %32, %mul22
  store double %add23, double* %fw, align 8
  br label %for.inc24

for.inc24:                                        ; preds = %for.body17
  %33 = load i32* %j, align 4
  %inc25 = add nsw i32 %33, 1
  store i32 %inc25, i32* %j, align 4
  br label %for.cond14

for.end26:                                        ; preds = %for.cond14
  %34 = load double* %fw, align 8
  %35 = load i32* %i, align 4
  %arrayidx27 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %35
  store double %34, double* %arrayidx27, align 4
  br label %for.inc28

for.inc28:                                        ; preds = %for.end26
  %36 = load i32* %i, align 4
  %inc29 = add nsw i32 %36, 1
  store i32 %inc29, i32* %i, align 4
  br label %for.cond10

for.end30:                                        ; preds = %for.cond10
  %37 = load i32* %jk, align 4
  store i32 %37, i32* %jz, align 4
  br label %recompute

recompute:                                        ; preds = %for.end182, %for.end30
  store i32 0, i32* %i, align 4
  %38 = load i32* %jz, align 4
  store i32 %38, i32* %j, align 4
  %39 = load i32* %jz, align 4
  %arrayidx31 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %39
  %40 = load double* %arrayidx31, align 4
  store double %40, double* %z, align 8
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc46, %recompute
  %41 = load i32* %j, align 4
  %cmp33 = icmp sgt i32 %41, 0
  br i1 %cmp33, label %for.body35, label %for.end48

for.body35:                                       ; preds = %for.cond32
  %42 = load double* %z, align 8
  %mul36 = fmul double 0x3E70000000000000, %42
  %conv37 = fptosi double %mul36 to i32
  %conv38 = sitofp i32 %conv37 to double
  store double %conv38, double* %fw, align 8
  %43 = load double* %z, align 8
  %44 = load double* %fw, align 8
  %mul39 = fmul double 0x4170000000000000, %44
  %sub40 = fsub double %43, %mul39
  %conv41 = fptosi double %sub40 to i32
  %45 = load i32* %i, align 4
  %arrayidx42 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %45
  store i32 %conv41, i32* %arrayidx42, align 4
  %46 = load i32* %j, align 4
  %sub43 = sub nsw i32 %46, 1
  %arrayidx44 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %sub43
  %47 = load double* %arrayidx44, align 4
  %48 = load double* %fw, align 8
  %add45 = fadd double %47, %48
  store double %add45, double* %z, align 8
  br label %for.inc46

for.inc46:                                        ; preds = %for.body35
  %49 = load i32* %i, align 4
  %inc47 = add nsw i32 %49, 1
  store i32 %inc47, i32* %i, align 4
  %50 = load i32* %j, align 4
  %dec = add nsw i32 %50, -1
  store i32 %dec, i32* %j, align 4
  br label %for.cond32

for.end48:                                        ; preds = %for.cond32
  %51 = load double* %z, align 8
  %52 = load i32* %q0, align 4
  %call = call double @scalbn(double %51, i32 %52) #4
  store double %call, double* %z, align 8
  %53 = load double* %z, align 8
  %mul49 = fmul double %53, 1.250000e-01
  %call50 = call double @floor(double %mul49) #6
  %mul51 = fmul double 8.000000e+00, %call50
  %54 = load double* %z, align 8
  %sub52 = fsub double %54, %mul51
  store double %sub52, double* %z, align 8
  %55 = load double* %z, align 8
  %conv53 = fptosi double %55 to i32
  store i32 %conv53, i32* %n, align 4
  %56 = load i32* %n, align 4
  %conv54 = sitofp i32 %56 to double
  %57 = load double* %z, align 8
  %sub55 = fsub double %57, %conv54
  store double %sub55, double* %z, align 8
  store i32 0, i32* %ih, align 4
  %58 = load i32* %q0, align 4
  %cmp56 = icmp sgt i32 %58, 0
  br i1 %cmp56, label %if.then58, label %if.else

if.then58:                                        ; preds = %for.end48
  %59 = load i32* %jz, align 4
  %sub59 = sub nsw i32 %59, 1
  %arrayidx60 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub59
  %60 = load i32* %arrayidx60, align 4
  %61 = load i32* %q0, align 4
  %sub61 = sub nsw i32 24, %61
  %shr = ashr i32 %60, %sub61
  store i32 %shr, i32* %i, align 4
  %62 = load i32* %i, align 4
  %63 = load i32* %n, align 4
  %add62 = add nsw i32 %63, %62
  store i32 %add62, i32* %n, align 4
  %64 = load i32* %i, align 4
  %65 = load i32* %q0, align 4
  %sub63 = sub nsw i32 24, %65
  %shl = shl i32 %64, %sub63
  %66 = load i32* %jz, align 4
  %sub64 = sub nsw i32 %66, 1
  %arrayidx65 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub64
  %67 = load i32* %arrayidx65, align 4
  %sub66 = sub nsw i32 %67, %shl
  store i32 %sub66, i32* %arrayidx65, align 4
  %68 = load i32* %jz, align 4
  %sub67 = sub nsw i32 %68, 1
  %arrayidx68 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub67
  %69 = load i32* %arrayidx68, align 4
  %70 = load i32* %q0, align 4
  %sub69 = sub nsw i32 23, %70
  %shr70 = ashr i32 %69, %sub69
  store i32 %shr70, i32* %ih, align 4
  br label %if.end83

if.else:                                          ; preds = %for.end48
  %71 = load i32* %q0, align 4
  %cmp71 = icmp eq i32 %71, 0
  br i1 %cmp71, label %if.then73, label %if.else77

if.then73:                                        ; preds = %if.else
  %72 = load i32* %jz, align 4
  %sub74 = sub nsw i32 %72, 1
  %arrayidx75 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub74
  %73 = load i32* %arrayidx75, align 4
  %shr76 = ashr i32 %73, 23
  store i32 %shr76, i32* %ih, align 4
  br label %if.end82

if.else77:                                        ; preds = %if.else
  %74 = load double* %z, align 8
  %cmp78 = fcmp oge double %74, 5.000000e-01
  br i1 %cmp78, label %if.then80, label %if.end81

if.then80:                                        ; preds = %if.else77
  store i32 2, i32* %ih, align 4
  br label %if.end81

if.end81:                                         ; preds = %if.then80, %if.else77
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then73
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then58
  %75 = load i32* %ih, align 4
  %cmp84 = icmp sgt i32 %75, 0
  br i1 %cmp84, label %if.then86, label %if.end130

if.then86:                                        ; preds = %if.end83
  %76 = load i32* %n, align 4
  %add87 = add nsw i32 %76, 1
  store i32 %add87, i32* %n, align 4
  store i32 0, i32* %carry, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond88

for.cond88:                                       ; preds = %for.inc106, %if.then86
  %77 = load i32* %i, align 4
  %78 = load i32* %jz, align 4
  %cmp89 = icmp slt i32 %77, %78
  br i1 %cmp89, label %for.body91, label %for.end108

for.body91:                                       ; preds = %for.cond88
  %79 = load i32* %i, align 4
  %arrayidx92 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %79
  %80 = load i32* %arrayidx92, align 4
  store i32 %80, i32* %j, align 4
  %81 = load i32* %carry, align 4
  %cmp93 = icmp eq i32 %81, 0
  br i1 %cmp93, label %if.then95, label %if.else102

if.then95:                                        ; preds = %for.body91
  %82 = load i32* %j, align 4
  %cmp96 = icmp ne i32 %82, 0
  br i1 %cmp96, label %if.then98, label %if.end101

if.then98:                                        ; preds = %if.then95
  store i32 1, i32* %carry, align 4
  %83 = load i32* %j, align 4
  %sub99 = sub nsw i32 16777216, %83
  %84 = load i32* %i, align 4
  %arrayidx100 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %84
  store i32 %sub99, i32* %arrayidx100, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.then98, %if.then95
  br label %if.end105

if.else102:                                       ; preds = %for.body91
  %85 = load i32* %j, align 4
  %sub103 = sub nsw i32 16777215, %85
  %86 = load i32* %i, align 4
  %arrayidx104 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %86
  store i32 %sub103, i32* %arrayidx104, align 4
  br label %if.end105

if.end105:                                        ; preds = %if.else102, %if.end101
  br label %for.inc106

for.inc106:                                       ; preds = %if.end105
  %87 = load i32* %i, align 4
  %inc107 = add nsw i32 %87, 1
  store i32 %inc107, i32* %i, align 4
  br label %for.cond88

for.end108:                                       ; preds = %for.cond88
  %88 = load i32* %q0, align 4
  %cmp109 = icmp sgt i32 %88, 0
  br i1 %cmp109, label %if.then111, label %if.end118

if.then111:                                       ; preds = %for.end108
  %89 = load i32* %q0, align 4
  switch i32 %89, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb114
  ]

sw.bb:                                            ; preds = %if.then111
  %90 = load i32* %jz, align 4
  %sub112 = sub nsw i32 %90, 1
  %arrayidx113 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub112
  %91 = load i32* %arrayidx113, align 4
  %and = and i32 %91, 8388607
  store i32 %and, i32* %arrayidx113, align 4
  br label %sw.epilog

sw.bb114:                                         ; preds = %if.then111
  %92 = load i32* %jz, align 4
  %sub115 = sub nsw i32 %92, 1
  %arrayidx116 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub115
  %93 = load i32* %arrayidx116, align 4
  %and117 = and i32 %93, 4194303
  store i32 %and117, i32* %arrayidx116, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb114, %sw.bb, %if.then111
  br label %if.end118

if.end118:                                        ; preds = %sw.epilog, %for.end108
  %94 = load i32* %ih, align 4
  %cmp119 = icmp eq i32 %94, 2
  br i1 %cmp119, label %if.then121, label %if.end129

if.then121:                                       ; preds = %if.end118
  %95 = load double* %z, align 8
  %sub122 = fsub double 1.000000e+00, %95
  store double %sub122, double* %z, align 8
  %96 = load i32* %carry, align 4
  %cmp123 = icmp ne i32 %96, 0
  br i1 %cmp123, label %if.then125, label %if.end128

if.then125:                                       ; preds = %if.then121
  %97 = load i32* %q0, align 4
  %call126 = call double @scalbn(double 1.000000e+00, i32 %97) #4
  %98 = load double* %z, align 8
  %sub127 = fsub double %98, %call126
  store double %sub127, double* %z, align 8
  br label %if.end128

if.end128:                                        ; preds = %if.then125, %if.then121
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.end118
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.end83
  %99 = load double* %z, align 8
  %cmp131 = fcmp oeq double %99, 0.000000e+00
  br i1 %cmp131, label %if.then133, label %if.end185

if.then133:                                       ; preds = %if.end130
  store i32 0, i32* %j, align 4
  %100 = load i32* %jz, align 4
  %sub134 = sub nsw i32 %100, 1
  store i32 %sub134, i32* %i, align 4
  br label %for.cond135

for.cond135:                                      ; preds = %for.inc140, %if.then133
  %101 = load i32* %i, align 4
  %102 = load i32* %jk, align 4
  %cmp136 = icmp sge i32 %101, %102
  br i1 %cmp136, label %for.body138, label %for.end142

for.body138:                                      ; preds = %for.cond135
  %103 = load i32* %i, align 4
  %arrayidx139 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %103
  %104 = load i32* %arrayidx139, align 4
  %105 = load i32* %j, align 4
  %or = or i32 %105, %104
  store i32 %or, i32* %j, align 4
  br label %for.inc140

for.inc140:                                       ; preds = %for.body138
  %106 = load i32* %i, align 4
  %dec141 = add nsw i32 %106, -1
  store i32 %dec141, i32* %i, align 4
  br label %for.cond135

for.end142:                                       ; preds = %for.cond135
  %107 = load i32* %j, align 4
  %cmp143 = icmp eq i32 %107, 0
  br i1 %cmp143, label %if.then145, label %if.end184

if.then145:                                       ; preds = %for.end142
  store i32 1, i32* %k, align 4
  br label %for.cond146

for.cond146:                                      ; preds = %for.inc152, %if.then145
  %108 = load i32* %jk, align 4
  %109 = load i32* %k, align 4
  %sub147 = sub nsw i32 %108, %109
  %arrayidx148 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %sub147
  %110 = load i32* %arrayidx148, align 4
  %cmp149 = icmp eq i32 %110, 0
  br i1 %cmp149, label %for.body151, label %for.end154

for.body151:                                      ; preds = %for.cond146
  br label %for.inc152

for.inc152:                                       ; preds = %for.body151
  %111 = load i32* %k, align 4
  %inc153 = add nsw i32 %111, 1
  store i32 %inc153, i32* %k, align 4
  br label %for.cond146

for.end154:                                       ; preds = %for.cond146
  %112 = load i32* %jz, align 4
  %add155 = add nsw i32 %112, 1
  store i32 %add155, i32* %i, align 4
  br label %for.cond156

for.cond156:                                      ; preds = %for.inc180, %for.end154
  %113 = load i32* %i, align 4
  %114 = load i32* %jz, align 4
  %115 = load i32* %k, align 4
  %add157 = add nsw i32 %114, %115
  %cmp158 = icmp sle i32 %113, %add157
  br i1 %cmp158, label %for.body160, label %for.end182

for.body160:                                      ; preds = %for.cond156
  %116 = load i32* %jv, align 4
  %117 = load i32* %i, align 4
  %add161 = add nsw i32 %116, %117
  %118 = load i32** %ipio2.addr, align 4
  %arrayidx162 = getelementptr inbounds i32* %118, i32 %add161
  %119 = load i32* %arrayidx162, align 4
  %conv163 = sitofp i32 %119 to double
  %120 = load i32* %jx, align 4
  %121 = load i32* %i, align 4
  %add164 = add nsw i32 %120, %121
  %arrayidx165 = getelementptr inbounds [20 x double]* %f, i32 0, i32 %add164
  store double %conv163, double* %arrayidx165, align 4
  store i32 0, i32* %j, align 4
  store double 0.000000e+00, double* %fw, align 8
  br label %for.cond166

for.cond166:                                      ; preds = %for.inc176, %for.body160
  %122 = load i32* %j, align 4
  %123 = load i32* %jx, align 4
  %cmp167 = icmp sle i32 %122, %123
  br i1 %cmp167, label %for.body169, label %for.end178

for.body169:                                      ; preds = %for.cond166
  %124 = load i32* %j, align 4
  %125 = load double** %x.addr, align 4
  %arrayidx170 = getelementptr inbounds double* %125, i32 %124
  %126 = load double* %arrayidx170, align 4
  %127 = load i32* %jx, align 4
  %128 = load i32* %i, align 4
  %add171 = add nsw i32 %127, %128
  %129 = load i32* %j, align 4
  %sub172 = sub nsw i32 %add171, %129
  %arrayidx173 = getelementptr inbounds [20 x double]* %f, i32 0, i32 %sub172
  %130 = load double* %arrayidx173, align 4
  %mul174 = fmul double %126, %130
  %131 = load double* %fw, align 8
  %add175 = fadd double %131, %mul174
  store double %add175, double* %fw, align 8
  br label %for.inc176

for.inc176:                                       ; preds = %for.body169
  %132 = load i32* %j, align 4
  %inc177 = add nsw i32 %132, 1
  store i32 %inc177, i32* %j, align 4
  br label %for.cond166

for.end178:                                       ; preds = %for.cond166
  %133 = load double* %fw, align 8
  %134 = load i32* %i, align 4
  %arrayidx179 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %134
  store double %133, double* %arrayidx179, align 4
  br label %for.inc180

for.inc180:                                       ; preds = %for.end178
  %135 = load i32* %i, align 4
  %inc181 = add nsw i32 %135, 1
  store i32 %inc181, i32* %i, align 4
  br label %for.cond156

for.end182:                                       ; preds = %for.cond156
  %136 = load i32* %k, align 4
  %137 = load i32* %jz, align 4
  %add183 = add nsw i32 %137, %136
  store i32 %add183, i32* %jz, align 4
  br label %recompute

if.end184:                                        ; preds = %for.end142
  br label %if.end185

if.end185:                                        ; preds = %if.end184, %if.end130
  %138 = load double* %z, align 8
  %cmp186 = fcmp oeq double %138, 0.000000e+00
  br i1 %cmp186, label %if.then188, label %if.else196

if.then188:                                       ; preds = %if.end185
  %139 = load i32* %jz, align 4
  %sub189 = sub nsw i32 %139, 1
  store i32 %sub189, i32* %jz, align 4
  %140 = load i32* %q0, align 4
  %sub190 = sub nsw i32 %140, 24
  store i32 %sub190, i32* %q0, align 4
  br label %while.cond

while.cond:                                       ; preds = %while.body, %if.then188
  %141 = load i32* %jz, align 4
  %arrayidx191 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %141
  %142 = load i32* %arrayidx191, align 4
  %cmp192 = icmp eq i32 %142, 0
  br i1 %cmp192, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %143 = load i32* %jz, align 4
  %dec194 = add nsw i32 %143, -1
  store i32 %dec194, i32* %jz, align 4
  %144 = load i32* %q0, align 4
  %sub195 = sub nsw i32 %144, 24
  store i32 %sub195, i32* %q0, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end217

if.else196:                                       ; preds = %if.end185
  %145 = load double* %z, align 8
  %146 = load i32* %q0, align 4
  %sub197 = sub nsw i32 0, %146
  %call198 = call double @scalbn(double %145, i32 %sub197) #4
  store double %call198, double* %z, align 8
  %147 = load double* %z, align 8
  %cmp199 = fcmp oge double %147, 0x4170000000000000
  br i1 %cmp199, label %if.then201, label %if.else213

if.then201:                                       ; preds = %if.else196
  %148 = load double* %z, align 8
  %mul202 = fmul double 0x3E70000000000000, %148
  %conv203 = fptosi double %mul202 to i32
  %conv204 = sitofp i32 %conv203 to double
  store double %conv204, double* %fw, align 8
  %149 = load double* %z, align 8
  %150 = load double* %fw, align 8
  %mul205 = fmul double 0x4170000000000000, %150
  %sub206 = fsub double %149, %mul205
  %conv207 = fptosi double %sub206 to i32
  %151 = load i32* %jz, align 4
  %arrayidx208 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %151
  store i32 %conv207, i32* %arrayidx208, align 4
  %152 = load i32* %jz, align 4
  %add209 = add nsw i32 %152, 1
  store i32 %add209, i32* %jz, align 4
  %153 = load i32* %q0, align 4
  %add210 = add nsw i32 %153, 24
  store i32 %add210, i32* %q0, align 4
  %154 = load double* %fw, align 8
  %conv211 = fptosi double %154 to i32
  %155 = load i32* %jz, align 4
  %arrayidx212 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %155
  store i32 %conv211, i32* %arrayidx212, align 4
  br label %if.end216

if.else213:                                       ; preds = %if.else196
  %156 = load double* %z, align 8
  %conv214 = fptosi double %156 to i32
  %157 = load i32* %jz, align 4
  %arrayidx215 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %157
  store i32 %conv214, i32* %arrayidx215, align 4
  br label %if.end216

if.end216:                                        ; preds = %if.else213, %if.then201
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %while.end
  %158 = load i32* %q0, align 4
  %call218 = call double @scalbn(double 1.000000e+00, i32 %158) #4
  store double %call218, double* %fw, align 8
  %159 = load i32* %jz, align 4
  store i32 %159, i32* %i, align 4
  br label %for.cond219

for.cond219:                                      ; preds = %for.inc228, %if.end217
  %160 = load i32* %i, align 4
  %cmp220 = icmp sge i32 %160, 0
  br i1 %cmp220, label %for.body222, label %for.end230

for.body222:                                      ; preds = %for.cond219
  %161 = load double* %fw, align 8
  %162 = load i32* %i, align 4
  %arrayidx223 = getelementptr inbounds [20 x i32]* %iq, i32 0, i32 %162
  %163 = load i32* %arrayidx223, align 4
  %conv224 = sitofp i32 %163 to double
  %mul225 = fmul double %161, %conv224
  %164 = load i32* %i, align 4
  %arrayidx226 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %164
  store double %mul225, double* %arrayidx226, align 4
  %165 = load double* %fw, align 8
  %mul227 = fmul double %165, 0x3E70000000000000
  store double %mul227, double* %fw, align 8
  br label %for.inc228

for.inc228:                                       ; preds = %for.body222
  %166 = load i32* %i, align 4
  %dec229 = add nsw i32 %166, -1
  store i32 %dec229, i32* %i, align 4
  br label %for.cond219

for.end230:                                       ; preds = %for.cond219
  %167 = load i32* %jz, align 4
  store i32 %167, i32* %i, align 4
  br label %for.cond231

for.cond231:                                      ; preds = %for.inc252, %for.end230
  %168 = load i32* %i, align 4
  %cmp232 = icmp sge i32 %168, 0
  br i1 %cmp232, label %for.body234, label %for.end254

for.body234:                                      ; preds = %for.cond231
  store double 0.000000e+00, double* %fw, align 8
  store i32 0, i32* %k, align 4
  br label %for.cond235

for.cond235:                                      ; preds = %for.inc247, %for.body234
  %169 = load i32* %k, align 4
  %170 = load i32* %jp, align 4
  %cmp236 = icmp sle i32 %169, %170
  br i1 %cmp236, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond235
  %171 = load i32* %k, align 4
  %172 = load i32* %jz, align 4
  %173 = load i32* %i, align 4
  %sub238 = sub nsw i32 %172, %173
  %cmp239 = icmp sle i32 %171, %sub238
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond235
  %174 = phi i1 [ false, %for.cond235 ], [ %cmp239, %land.rhs ]
  br i1 %174, label %for.body241, label %for.end249

for.body241:                                      ; preds = %land.end
  %175 = load i32* %k, align 4
  %arrayidx242 = getelementptr inbounds [8 x double]* @PIo298, i32 0, i32 %175
  %176 = load double* %arrayidx242, align 4
  %177 = load i32* %i, align 4
  %178 = load i32* %k, align 4
  %add243 = add nsw i32 %177, %178
  %arrayidx244 = getelementptr inbounds [20 x double]* %q, i32 0, i32 %add243
  %179 = load double* %arrayidx244, align 4
  %mul245 = fmul double %176, %179
  %180 = load double* %fw, align 8
  %add246 = fadd double %180, %mul245
  store double %add246, double* %fw, align 8
  br label %for.inc247

for.inc247:                                       ; preds = %for.body241
  %181 = load i32* %k, align 4
  %inc248 = add nsw i32 %181, 1
  store i32 %inc248, i32* %k, align 4
  br label %for.cond235

for.end249:                                       ; preds = %land.end
  %182 = load double* %fw, align 8
  %183 = load i32* %jz, align 4
  %184 = load i32* %i, align 4
  %sub250 = sub nsw i32 %183, %184
  %arrayidx251 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub250
  store double %182, double* %arrayidx251, align 4
  br label %for.inc252

for.inc252:                                       ; preds = %for.end249
  %185 = load i32* %i, align 4
  %dec253 = add nsw i32 %185, -1
  store i32 %dec253, i32* %i, align 4
  br label %for.cond231

for.end254:                                       ; preds = %for.cond231
  %186 = load i32* %prec.addr, align 4
  switch i32 %186, label %sw.epilog374 [
    i32 0, label %sw.bb255
    i32 1, label %sw.bb273
    i32 2, label %sw.bb273
    i32 3, label %sw.bb310
  ]

sw.bb255:                                         ; preds = %for.end254
  store double 0.000000e+00, double* %fw, align 8
  %187 = load i32* %jz, align 4
  store i32 %187, i32* %i, align 4
  br label %for.cond256

for.cond256:                                      ; preds = %for.inc262, %sw.bb255
  %188 = load i32* %i, align 4
  %cmp257 = icmp sge i32 %188, 0
  br i1 %cmp257, label %for.body259, label %for.end264

for.body259:                                      ; preds = %for.cond256
  %189 = load i32* %i, align 4
  %arrayidx260 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %189
  %190 = load double* %arrayidx260, align 4
  %191 = load double* %fw, align 8
  %add261 = fadd double %191, %190
  store double %add261, double* %fw, align 8
  br label %for.inc262

for.inc262:                                       ; preds = %for.body259
  %192 = load i32* %i, align 4
  %dec263 = add nsw i32 %192, -1
  store i32 %dec263, i32* %i, align 4
  br label %for.cond256

for.end264:                                       ; preds = %for.cond256
  %193 = load i32* %ih, align 4
  %cmp265 = icmp eq i32 %193, 0
  br i1 %cmp265, label %cond.true267, label %cond.false268

cond.true267:                                     ; preds = %for.end264
  %194 = load double* %fw, align 8
  br label %cond.end270

cond.false268:                                    ; preds = %for.end264
  %195 = load double* %fw, align 8
  %sub269 = fsub double -0.000000e+00, %195
  br label %cond.end270

cond.end270:                                      ; preds = %cond.false268, %cond.true267
  %cond271 = phi double [ %194, %cond.true267 ], [ %sub269, %cond.false268 ]
  %196 = load double** %y.addr, align 4
  %arrayidx272 = getelementptr inbounds double* %196, i32 0
  store double %cond271, double* %arrayidx272, align 4
  br label %sw.epilog374

sw.bb273:                                         ; preds = %for.end254, %for.end254
  store double 0.000000e+00, double* %fw, align 8
  %197 = load i32* %jz, align 4
  store i32 %197, i32* %i, align 4
  br label %for.cond274

for.cond274:                                      ; preds = %for.inc280, %sw.bb273
  %198 = load i32* %i, align 4
  %cmp275 = icmp sge i32 %198, 0
  br i1 %cmp275, label %for.body277, label %for.end282

for.body277:                                      ; preds = %for.cond274
  %199 = load i32* %i, align 4
  %arrayidx278 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %199
  %200 = load double* %arrayidx278, align 4
  %201 = load double* %fw, align 8
  %add279 = fadd double %201, %200
  store double %add279, double* %fw, align 8
  br label %for.inc280

for.inc280:                                       ; preds = %for.body277
  %202 = load i32* %i, align 4
  %dec281 = add nsw i32 %202, -1
  store i32 %dec281, i32* %i, align 4
  br label %for.cond274

for.end282:                                       ; preds = %for.cond274
  %203 = load i32* %ih, align 4
  %cmp283 = icmp eq i32 %203, 0
  br i1 %cmp283, label %cond.true285, label %cond.false286

cond.true285:                                     ; preds = %for.end282
  %204 = load double* %fw, align 8
  br label %cond.end288

cond.false286:                                    ; preds = %for.end282
  %205 = load double* %fw, align 8
  %sub287 = fsub double -0.000000e+00, %205
  br label %cond.end288

cond.end288:                                      ; preds = %cond.false286, %cond.true285
  %cond289 = phi double [ %204, %cond.true285 ], [ %sub287, %cond.false286 ]
  %206 = load double** %y.addr, align 4
  %arrayidx290 = getelementptr inbounds double* %206, i32 0
  store double %cond289, double* %arrayidx290, align 4
  %arrayidx291 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 0
  %207 = load double* %arrayidx291, align 4
  %208 = load double* %fw, align 8
  %sub292 = fsub double %207, %208
  store double %sub292, double* %fw, align 8
  store i32 1, i32* %i, align 4
  br label %for.cond293

for.cond293:                                      ; preds = %for.inc299, %cond.end288
  %209 = load i32* %i, align 4
  %210 = load i32* %jz, align 4
  %cmp294 = icmp sle i32 %209, %210
  br i1 %cmp294, label %for.body296, label %for.end301

for.body296:                                      ; preds = %for.cond293
  %211 = load i32* %i, align 4
  %arrayidx297 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %211
  %212 = load double* %arrayidx297, align 4
  %213 = load double* %fw, align 8
  %add298 = fadd double %213, %212
  store double %add298, double* %fw, align 8
  br label %for.inc299

for.inc299:                                       ; preds = %for.body296
  %214 = load i32* %i, align 4
  %inc300 = add nsw i32 %214, 1
  store i32 %inc300, i32* %i, align 4
  br label %for.cond293

for.end301:                                       ; preds = %for.cond293
  %215 = load i32* %ih, align 4
  %cmp302 = icmp eq i32 %215, 0
  br i1 %cmp302, label %cond.true304, label %cond.false305

cond.true304:                                     ; preds = %for.end301
  %216 = load double* %fw, align 8
  br label %cond.end307

cond.false305:                                    ; preds = %for.end301
  %217 = load double* %fw, align 8
  %sub306 = fsub double -0.000000e+00, %217
  br label %cond.end307

cond.end307:                                      ; preds = %cond.false305, %cond.true304
  %cond308 = phi double [ %216, %cond.true304 ], [ %sub306, %cond.false305 ]
  %218 = load double** %y.addr, align 4
  %arrayidx309 = getelementptr inbounds double* %218, i32 1
  store double %cond308, double* %arrayidx309, align 4
  br label %sw.epilog374

sw.bb310:                                         ; preds = %for.end254
  %219 = load i32* %jz, align 4
  store i32 %219, i32* %i, align 4
  br label %for.cond311

for.cond311:                                      ; preds = %for.inc326, %sw.bb310
  %220 = load i32* %i, align 4
  %cmp312 = icmp sgt i32 %220, 0
  br i1 %cmp312, label %for.body314, label %for.end328

for.body314:                                      ; preds = %for.cond311
  %221 = load i32* %i, align 4
  %sub315 = sub nsw i32 %221, 1
  %arrayidx316 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub315
  %222 = load double* %arrayidx316, align 4
  %223 = load i32* %i, align 4
  %arrayidx317 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %223
  %224 = load double* %arrayidx317, align 4
  %add318 = fadd double %222, %224
  store double %add318, double* %fw, align 8
  %225 = load i32* %i, align 4
  %sub319 = sub nsw i32 %225, 1
  %arrayidx320 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub319
  %226 = load double* %arrayidx320, align 4
  %227 = load double* %fw, align 8
  %sub321 = fsub double %226, %227
  %228 = load i32* %i, align 4
  %arrayidx322 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %228
  %229 = load double* %arrayidx322, align 4
  %add323 = fadd double %229, %sub321
  store double %add323, double* %arrayidx322, align 4
  %230 = load double* %fw, align 8
  %231 = load i32* %i, align 4
  %sub324 = sub nsw i32 %231, 1
  %arrayidx325 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub324
  store double %230, double* %arrayidx325, align 4
  br label %for.inc326

for.inc326:                                       ; preds = %for.body314
  %232 = load i32* %i, align 4
  %dec327 = add nsw i32 %232, -1
  store i32 %dec327, i32* %i, align 4
  br label %for.cond311

for.end328:                                       ; preds = %for.cond311
  %233 = load i32* %jz, align 4
  store i32 %233, i32* %i, align 4
  br label %for.cond329

for.cond329:                                      ; preds = %for.inc344, %for.end328
  %234 = load i32* %i, align 4
  %cmp330 = icmp sgt i32 %234, 1
  br i1 %cmp330, label %for.body332, label %for.end346

for.body332:                                      ; preds = %for.cond329
  %235 = load i32* %i, align 4
  %sub333 = sub nsw i32 %235, 1
  %arrayidx334 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub333
  %236 = load double* %arrayidx334, align 4
  %237 = load i32* %i, align 4
  %arrayidx335 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %237
  %238 = load double* %arrayidx335, align 4
  %add336 = fadd double %236, %238
  store double %add336, double* %fw, align 8
  %239 = load i32* %i, align 4
  %sub337 = sub nsw i32 %239, 1
  %arrayidx338 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub337
  %240 = load double* %arrayidx338, align 4
  %241 = load double* %fw, align 8
  %sub339 = fsub double %240, %241
  %242 = load i32* %i, align 4
  %arrayidx340 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %242
  %243 = load double* %arrayidx340, align 4
  %add341 = fadd double %243, %sub339
  store double %add341, double* %arrayidx340, align 4
  %244 = load double* %fw, align 8
  %245 = load i32* %i, align 4
  %sub342 = sub nsw i32 %245, 1
  %arrayidx343 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %sub342
  store double %244, double* %arrayidx343, align 4
  br label %for.inc344

for.inc344:                                       ; preds = %for.body332
  %246 = load i32* %i, align 4
  %dec345 = add nsw i32 %246, -1
  store i32 %dec345, i32* %i, align 4
  br label %for.cond329

for.end346:                                       ; preds = %for.cond329
  store double 0.000000e+00, double* %fw, align 8
  %247 = load i32* %jz, align 4
  store i32 %247, i32* %i, align 4
  br label %for.cond347

for.cond347:                                      ; preds = %for.inc353, %for.end346
  %248 = load i32* %i, align 4
  %cmp348 = icmp sge i32 %248, 2
  br i1 %cmp348, label %for.body350, label %for.end355

for.body350:                                      ; preds = %for.cond347
  %249 = load i32* %i, align 4
  %arrayidx351 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 %249
  %250 = load double* %arrayidx351, align 4
  %251 = load double* %fw, align 8
  %add352 = fadd double %251, %250
  store double %add352, double* %fw, align 8
  br label %for.inc353

for.inc353:                                       ; preds = %for.body350
  %252 = load i32* %i, align 4
  %dec354 = add nsw i32 %252, -1
  store i32 %dec354, i32* %i, align 4
  br label %for.cond347

for.end355:                                       ; preds = %for.cond347
  %253 = load i32* %ih, align 4
  %cmp356 = icmp eq i32 %253, 0
  br i1 %cmp356, label %if.then358, label %if.else364

if.then358:                                       ; preds = %for.end355
  %arrayidx359 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 0
  %254 = load double* %arrayidx359, align 4
  %255 = load double** %y.addr, align 4
  %arrayidx360 = getelementptr inbounds double* %255, i32 0
  store double %254, double* %arrayidx360, align 4
  %arrayidx361 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 1
  %256 = load double* %arrayidx361, align 4
  %257 = load double** %y.addr, align 4
  %arrayidx362 = getelementptr inbounds double* %257, i32 1
  store double %256, double* %arrayidx362, align 4
  %258 = load double* %fw, align 8
  %259 = load double** %y.addr, align 4
  %arrayidx363 = getelementptr inbounds double* %259, i32 2
  store double %258, double* %arrayidx363, align 4
  br label %if.end373

if.else364:                                       ; preds = %for.end355
  %arrayidx365 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 0
  %260 = load double* %arrayidx365, align 4
  %sub366 = fsub double -0.000000e+00, %260
  %261 = load double** %y.addr, align 4
  %arrayidx367 = getelementptr inbounds double* %261, i32 0
  store double %sub366, double* %arrayidx367, align 4
  %arrayidx368 = getelementptr inbounds [20 x double]* %fq, i32 0, i32 1
  %262 = load double* %arrayidx368, align 4
  %sub369 = fsub double -0.000000e+00, %262
  %263 = load double** %y.addr, align 4
  %arrayidx370 = getelementptr inbounds double* %263, i32 1
  store double %sub369, double* %arrayidx370, align 4
  %264 = load double* %fw, align 8
  %sub371 = fsub double -0.000000e+00, %264
  %265 = load double** %y.addr, align 4
  %arrayidx372 = getelementptr inbounds double* %265, i32 2
  store double %sub371, double* %arrayidx372, align 4
  br label %if.end373

if.end373:                                        ; preds = %if.else364, %if.then358
  br label %sw.epilog374

sw.epilog374:                                     ; preds = %if.end373, %cond.end307, %cond.end270, %for.end254
  %266 = load i32* %n, align 4
  %and375 = and i32 %266, 7
  ret i32 %and375
}

; Function Attrs: nounwind
define double @__kernel_sin(double %x, double %y, i32 %iy) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  %iy.addr = alloca i32, align 4
  %z = alloca double, align 8
  %r = alloca double, align 8
  %v = alloca double, align 8
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  store i32 %iy, i32* %iy.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 1044381696
  br i1 %cmp, label %if.then, label %if.end4

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %conv = fptosi double %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  %5 = load double* %x.addr, align 8
  store double %5, double* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end4

if.end4:                                          ; preds = %if.end, %do.end
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %mul = fmul double %6, %7
  store double %mul, double* %z, align 8
  %8 = load double* %z, align 8
  %9 = load double* %x.addr, align 8
  %mul5 = fmul double %8, %9
  store double %mul5, double* %v, align 8
  %10 = load double* %z, align 8
  %11 = load double* %z, align 8
  %12 = load double* %z, align 8
  %13 = load double* %z, align 8
  %mul6 = fmul double %13, 0x3DE5D93A5ACFD57C
  %add = fadd double 0xBE5AE5E68A2B9CEB, %mul6
  %mul7 = fmul double %12, %add
  %add8 = fadd double 0x3EC71DE357B1FE7D, %mul7
  %mul9 = fmul double %11, %add8
  %add10 = fadd double 0xBF2A01A019C161D5, %mul9
  %mul11 = fmul double %10, %add10
  %add12 = fadd double 0x3F8111111110F8A6, %mul11
  store double %add12, double* %r, align 8
  %14 = load i32* %iy.addr, align 4
  %cmp13 = icmp eq i32 %14, 0
  br i1 %cmp13, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end4
  %15 = load double* %x.addr, align 8
  %16 = load double* %v, align 8
  %17 = load double* %z, align 8
  %18 = load double* %r, align 8
  %mul16 = fmul double %17, %18
  %add17 = fadd double 0xBFC5555555555549, %mul16
  %mul18 = fmul double %16, %add17
  %add19 = fadd double %15, %mul18
  store double %add19, double* %retval
  br label %return

if.else:                                          ; preds = %if.end4
  %19 = load double* %x.addr, align 8
  %20 = load double* %z, align 8
  %21 = load double* %y.addr, align 8
  %mul20 = fmul double 5.000000e-01, %21
  %22 = load double* %v, align 8
  %23 = load double* %r, align 8
  %mul21 = fmul double %22, %23
  %sub = fsub double %mul20, %mul21
  %mul22 = fmul double %20, %sub
  %24 = load double* %y.addr, align 8
  %sub23 = fsub double %mul22, %24
  %25 = load double* %v, align 8
  %mul24 = fmul double %25, 0xBFC5555555555549
  %sub25 = fsub double %sub23, %mul24
  %sub26 = fsub double %19, %sub25
  store double %sub26, double* %retval
  br label %return

return:                                           ; preds = %if.else, %if.then15, %if.then3
  %26 = load double* %retval
  ret double %26
}

; Function Attrs: nounwind
define double @__kernel_tan(double %x, double %y, i32 %iy) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  %iy.addr = alloca i32, align 4
  %z = alloca double, align 8
  %r = alloca double, align 8
  %v = alloca double, align 8
  %w = alloca double, align 8
  %s = alloca double, align 8
  %ix = alloca i32, align 4
  %hx = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %low = alloca i32, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  %a = alloca double, align 8
  %t = alloca double, align 8
  %sl_u = alloca %union.ieee_double_shape_type, align 4
  %sl_u89 = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  store i32 %iy, i32* %iy.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 1043333120
  br i1 %cmp, label %if.then, label %if.end15

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %conv = fptosi double %4 to i32
  %cmp1 = icmp eq i32 %conv, 0
  br i1 %cmp1, label %if.then3, label %if.end

if.then3:                                         ; preds = %if.then
  br label %do.body4

do.body4:                                         ; preds = %if.then3
  %5 = load double* %x.addr, align 8
  %value5 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %5, double* %value5, align 4
  %parts6 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts6, i32 0, i32 0
  %6 = load i32* %lsw, align 4
  store i32 %6, i32* %low, align 4
  br label %do.end7

do.end7:                                          ; preds = %do.body4
  %7 = load i32* %ix, align 4
  %8 = load i32* %low, align 4
  %or = or i32 %7, %8
  %9 = load i32* %iy.addr, align 4
  %add = add nsw i32 %9, 1
  %or8 = or i32 %or, %add
  %cmp9 = icmp eq i32 %or8, 0
  br i1 %cmp9, label %if.then11, label %if.else

if.then11:                                        ; preds = %do.end7
  %10 = load double* %x.addr, align 8
  %call = call double @fabs(double %10) #6
  %div = fdiv double 1.000000e+00, %call
  store double %div, double* %retval
  br label %return

if.else:                                          ; preds = %do.end7
  %11 = load i32* %iy.addr, align 4
  %cmp12 = icmp eq i32 %11, 1
  br i1 %cmp12, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else
  %12 = load double* %x.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else
  %13 = load double* %x.addr, align 8
  %div14 = fdiv double -1.000000e+00, %13
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %12, %cond.true ], [ %div14, %cond.false ]
  store double %cond, double* %retval
  br label %return

if.end:                                           ; preds = %if.then
  br label %if.end15

if.end15:                                         ; preds = %if.end, %do.end
  %14 = load i32* %ix, align 4
  %cmp16 = icmp sge i32 %14, 1072010280
  br i1 %cmp16, label %if.then18, label %if.end27

if.then18:                                        ; preds = %if.end15
  %15 = load i32* %hx, align 4
  %cmp19 = icmp slt i32 %15, 0
  br i1 %cmp19, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.then18
  %16 = load double* %x.addr, align 8
  %sub = fsub double -0.000000e+00, %16
  store double %sub, double* %x.addr, align 8
  %17 = load double* %y.addr, align 8
  %sub22 = fsub double -0.000000e+00, %17
  store double %sub22, double* %y.addr, align 8
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %if.then18
  %18 = load double* %x.addr, align 8
  %sub24 = fsub double 0x3FE921FB54442D18, %18
  store double %sub24, double* %z, align 8
  %19 = load double* %y.addr, align 8
  %sub25 = fsub double 0x3C81A62633145C07, %19
  store double %sub25, double* %w, align 8
  %20 = load double* %z, align 8
  %21 = load double* %w, align 8
  %add26 = fadd double %20, %21
  store double %add26, double* %x.addr, align 8
  store double 0.000000e+00, double* %y.addr, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.end23, %if.end15
  %22 = load double* %x.addr, align 8
  %23 = load double* %x.addr, align 8
  %mul = fmul double %22, %23
  store double %mul, double* %z, align 8
  %24 = load double* %z, align 8
  %25 = load double* %z, align 8
  %mul28 = fmul double %24, %25
  store double %mul28, double* %w, align 8
  %26 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 1), align 4
  %27 = load double* %w, align 8
  %28 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 3), align 4
  %29 = load double* %w, align 8
  %30 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 5), align 4
  %31 = load double* %w, align 8
  %32 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 7), align 4
  %33 = load double* %w, align 8
  %34 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 9), align 4
  %35 = load double* %w, align 8
  %36 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 11), align 4
  %mul29 = fmul double %35, %36
  %add30 = fadd double %34, %mul29
  %mul31 = fmul double %33, %add30
  %add32 = fadd double %32, %mul31
  %mul33 = fmul double %31, %add32
  %add34 = fadd double %30, %mul33
  %mul35 = fmul double %29, %add34
  %add36 = fadd double %28, %mul35
  %mul37 = fmul double %27, %add36
  %add38 = fadd double %26, %mul37
  store double %add38, double* %r, align 8
  %37 = load double* %z, align 8
  %38 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 2), align 4
  %39 = load double* %w, align 8
  %40 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 4), align 4
  %41 = load double* %w, align 8
  %42 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 6), align 4
  %43 = load double* %w, align 8
  %44 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 8), align 4
  %45 = load double* %w, align 8
  %46 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 10), align 4
  %47 = load double* %w, align 8
  %48 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 12), align 4
  %mul39 = fmul double %47, %48
  %add40 = fadd double %46, %mul39
  %mul41 = fmul double %45, %add40
  %add42 = fadd double %44, %mul41
  %mul43 = fmul double %43, %add42
  %add44 = fadd double %42, %mul43
  %mul45 = fmul double %41, %add44
  %add46 = fadd double %40, %mul45
  %mul47 = fmul double %39, %add46
  %add48 = fadd double %38, %mul47
  %mul49 = fmul double %37, %add48
  store double %mul49, double* %v, align 8
  %49 = load double* %z, align 8
  %50 = load double* %x.addr, align 8
  %mul50 = fmul double %49, %50
  store double %mul50, double* %s, align 8
  %51 = load double* %y.addr, align 8
  %52 = load double* %z, align 8
  %53 = load double* %s, align 8
  %54 = load double* %r, align 8
  %55 = load double* %v, align 8
  %add51 = fadd double %54, %55
  %mul52 = fmul double %53, %add51
  %56 = load double* %y.addr, align 8
  %add53 = fadd double %mul52, %56
  %mul54 = fmul double %52, %add53
  %add55 = fadd double %51, %mul54
  store double %add55, double* %r, align 8
  %57 = load double* getelementptr inbounds ([13 x double]* @T103, i32 0, i32 0), align 4
  %58 = load double* %s, align 8
  %mul56 = fmul double %57, %58
  %59 = load double* %r, align 8
  %add57 = fadd double %59, %mul56
  store double %add57, double* %r, align 8
  %60 = load double* %x.addr, align 8
  %61 = load double* %r, align 8
  %add58 = fadd double %60, %61
  store double %add58, double* %w, align 8
  %62 = load i32* %ix, align 4
  %cmp59 = icmp sge i32 %62, 1072010280
  br i1 %cmp59, label %if.then61, label %if.end74

if.then61:                                        ; preds = %if.end27
  %63 = load i32* %iy.addr, align 4
  %conv62 = sitofp i32 %63 to double
  store double %conv62, double* %v, align 8
  %64 = load i32* %hx, align 4
  %shr = ashr i32 %64, 30
  %and63 = and i32 %shr, 2
  %sub64 = sub nsw i32 1, %and63
  %conv65 = sitofp i32 %sub64 to double
  %65 = load double* %v, align 8
  %66 = load double* %x.addr, align 8
  %67 = load double* %w, align 8
  %68 = load double* %w, align 8
  %mul66 = fmul double %67, %68
  %69 = load double* %w, align 8
  %70 = load double* %v, align 8
  %add67 = fadd double %69, %70
  %div68 = fdiv double %mul66, %add67
  %71 = load double* %r, align 8
  %sub69 = fsub double %div68, %71
  %sub70 = fsub double %66, %sub69
  %mul71 = fmul double 2.000000e+00, %sub70
  %sub72 = fsub double %65, %mul71
  %mul73 = fmul double %conv65, %sub72
  store double %mul73, double* %retval
  br label %return

if.end74:                                         ; preds = %if.end27
  %72 = load i32* %iy.addr, align 4
  %cmp75 = icmp eq i32 %72, 1
  br i1 %cmp75, label %if.then77, label %if.else78

if.then77:                                        ; preds = %if.end74
  %73 = load double* %w, align 8
  store double %73, double* %retval
  br label %return

if.else78:                                        ; preds = %if.end74
  %74 = load double* %w, align 8
  store double %74, double* %z, align 8
  br label %do.body79

do.body79:                                        ; preds = %if.else78
  %75 = load double* %z, align 8
  %value80 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  store double %75, double* %value80, align 4
  %parts81 = bitcast %union.ieee_double_shape_type* %sl_u to %struct.anon*
  %lsw82 = getelementptr inbounds %struct.anon* %parts81, i32 0, i32 0
  store i32 0, i32* %lsw82, align 4
  %value83 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  %76 = load double* %value83, align 4
  store double %76, double* %z, align 8
  br label %do.end84

do.end84:                                         ; preds = %do.body79
  %77 = load double* %r, align 8
  %78 = load double* %z, align 8
  %79 = load double* %x.addr, align 8
  %sub85 = fsub double %78, %79
  %sub86 = fsub double %77, %sub85
  store double %sub86, double* %v, align 8
  %80 = load double* %w, align 8
  %div87 = fdiv double -1.000000e+00, %80
  store double %div87, double* %a, align 8
  store double %div87, double* %t, align 8
  br label %do.body88

do.body88:                                        ; preds = %do.end84
  %81 = load double* %t, align 8
  %value90 = bitcast %union.ieee_double_shape_type* %sl_u89 to double*
  store double %81, double* %value90, align 4
  %parts91 = bitcast %union.ieee_double_shape_type* %sl_u89 to %struct.anon*
  %lsw92 = getelementptr inbounds %struct.anon* %parts91, i32 0, i32 0
  store i32 0, i32* %lsw92, align 4
  %value93 = bitcast %union.ieee_double_shape_type* %sl_u89 to double*
  %82 = load double* %value93, align 4
  store double %82, double* %t, align 8
  br label %do.end94

do.end94:                                         ; preds = %do.body88
  %83 = load double* %t, align 8
  %84 = load double* %z, align 8
  %mul95 = fmul double %83, %84
  %add96 = fadd double 1.000000e+00, %mul95
  store double %add96, double* %s, align 8
  %85 = load double* %t, align 8
  %86 = load double* %a, align 8
  %87 = load double* %s, align 8
  %88 = load double* %t, align 8
  %89 = load double* %v, align 8
  %mul97 = fmul double %88, %89
  %add98 = fadd double %87, %mul97
  %mul99 = fmul double %86, %add98
  %add100 = fadd double %85, %mul99
  store double %add100, double* %retval
  br label %return

return:                                           ; preds = %do.end94, %if.then77, %if.then61, %cond.end, %if.then11
  %90 = load double* %retval
  ret double %90
}

; Function Attrs: nounwind
define double @asinh(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %t = alloca double, align 8
  %w = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double* %x.addr, align 8
  %add = fadd double %4, %5
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %6, 1043333120
  br i1 %cmp1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %if.end
  %7 = load double* %x.addr, align 8
  %add3 = fadd double 1.000000e+300, %7
  %cmp4 = fcmp ogt double %add3, 1.000000e+00
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then2
  %8 = load double* %x.addr, align 8
  store double %8, double* %retval
  br label %return

if.end6:                                          ; preds = %if.then2
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.end
  %9 = load i32* %ix, align 4
  %cmp8 = icmp sgt i32 %9, 1102053376
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end7
  %10 = load double* %x.addr, align 8
  %call = call double @fabs(double %10) #6
  %call10 = call double @__ieee754_log(double %call) #5
  %add11 = fadd double %call10, 0x3FE62E42FEFA39EF
  store double %add11, double* %w, align 8
  br label %if.end31

if.else:                                          ; preds = %if.end7
  %11 = load i32* %ix, align 4
  %cmp12 = icmp sgt i32 %11, 1073741824
  br i1 %cmp12, label %if.then13, label %if.else21

if.then13:                                        ; preds = %if.else
  %12 = load double* %x.addr, align 8
  %call14 = call double @fabs(double %12) #6
  store double %call14, double* %t, align 8
  %13 = load double* %t, align 8
  %mul = fmul double 2.000000e+00, %13
  %14 = load double* %x.addr, align 8
  %15 = load double* %x.addr, align 8
  %mul15 = fmul double %14, %15
  %add16 = fadd double %mul15, 1.000000e+00
  %call17 = call double @__ieee754_sqrt(double %add16) #5
  %16 = load double* %t, align 8
  %add18 = fadd double %call17, %16
  %div = fdiv double 1.000000e+00, %add18
  %add19 = fadd double %mul, %div
  %call20 = call double @__ieee754_log(double %add19) #5
  store double %call20, double* %w, align 8
  br label %if.end30

if.else21:                                        ; preds = %if.else
  %17 = load double* %x.addr, align 8
  %18 = load double* %x.addr, align 8
  %mul22 = fmul double %17, %18
  store double %mul22, double* %t, align 8
  %19 = load double* %x.addr, align 8
  %call23 = call double @fabs(double %19) #6
  %20 = load double* %t, align 8
  %21 = load double* %t, align 8
  %add24 = fadd double 1.000000e+00, %21
  %call25 = call double @__ieee754_sqrt(double %add24) #5
  %add26 = fadd double 1.000000e+00, %call25
  %div27 = fdiv double %20, %add26
  %add28 = fadd double %call23, %div27
  %call29 = call double @log1p(double %add28) #4
  store double %call29, double* %w, align 8
  br label %if.end30

if.end30:                                         ; preds = %if.else21, %if.then13
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then9
  %22 = load i32* %hx, align 4
  %cmp32 = icmp sgt i32 %22, 0
  br i1 %cmp32, label %if.then33, label %if.else34

if.then33:                                        ; preds = %if.end31
  %23 = load double* %w, align 8
  store double %23, double* %retval
  br label %return

if.else34:                                        ; preds = %if.end31
  %24 = load double* %w, align 8
  %sub = fsub double -0.000000e+00, %24
  store double %sub, double* %retval
  br label %return

return:                                           ; preds = %if.else34, %if.then33, %if.then5, %if.then
  %25 = load double* %retval
  ret double %25
}

; Function Attrs: nounwind
define double @atan(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %w = alloca double, align 8
  %s1 = alloca double, align 8
  %s2 = alloca double, align 8
  %z = alloca double, align 8
  %ix = alloca i32, align 4
  %hx = alloca i32, align 4
  %id = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %low = alloca i32, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1141899264
  br i1 %cmp, label %if.then, label %if.end13

if.then:                                          ; preds = %do.end
  br label %do.body1

do.body1:                                         ; preds = %if.then
  %4 = load double* %x.addr, align 8
  %value2 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %4, double* %value2, align 4
  %parts3 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts3, i32 0, i32 0
  %5 = load i32* %lsw, align 4
  store i32 %5, i32* %low, align 4
  br label %do.end4

do.end4:                                          ; preds = %do.body1
  %6 = load i32* %ix, align 4
  %cmp5 = icmp sgt i32 %6, 2146435072
  br i1 %cmp5, label %if.then8, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end4
  %7 = load i32* %ix, align 4
  %cmp6 = icmp eq i32 %7, 2146435072
  br i1 %cmp6, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %lor.lhs.false
  %8 = load i32* %low, align 4
  %cmp7 = icmp ne i32 %8, 0
  br i1 %cmp7, label %if.then8, label %if.end

if.then8:                                         ; preds = %land.lhs.true, %do.end4
  %9 = load double* %x.addr, align 8
  %10 = load double* %x.addr, align 8
  %add = fadd double %9, %10
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %11 = load i32* %hx, align 4
  %cmp9 = icmp sgt i32 %11, 0
  br i1 %cmp9, label %if.then10, label %if.else

if.then10:                                        ; preds = %if.end
  %12 = load double* getelementptr inbounds ([4 x double]* @atanhi, i32 0, i32 3), align 4
  %13 = load double* getelementptr inbounds ([4 x double]* @atanlo, i32 0, i32 3), align 4
  %add11 = fadd double %12, %13
  store double %add11, double* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %14 = load double* getelementptr inbounds ([4 x double]* @atanhi, i32 0, i32 3), align 4
  %sub = fsub double -0.000000e+00, %14
  %15 = load double* getelementptr inbounds ([4 x double]* @atanlo, i32 0, i32 3), align 4
  %sub12 = fsub double %sub, %15
  store double %sub12, double* %retval
  br label %return

if.end13:                                         ; preds = %do.end
  %16 = load i32* %ix, align 4
  %cmp14 = icmp slt i32 %16, 1071382528
  br i1 %cmp14, label %if.then15, label %if.else23

if.then15:                                        ; preds = %if.end13
  %17 = load i32* %ix, align 4
  %cmp16 = icmp slt i32 %17, 1042284544
  br i1 %cmp16, label %if.then17, label %if.end22

if.then17:                                        ; preds = %if.then15
  %18 = load double* %x.addr, align 8
  %add18 = fadd double 1.000000e+300, %18
  %cmp19 = fcmp ogt double %add18, 1.000000e+00
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.then17
  %19 = load double* %x.addr, align 8
  store double %19, double* %retval
  br label %return

if.end21:                                         ; preds = %if.then17
  br label %if.end22

if.end22:                                         ; preds = %if.end21, %if.then15
  store i32 -1, i32* %id, align 4
  br label %if.end46

if.else23:                                        ; preds = %if.end13
  %20 = load double* %x.addr, align 8
  %call = call double @fabs(double %20) #6
  store double %call, double* %x.addr, align 8
  %21 = load i32* %ix, align 4
  %cmp24 = icmp slt i32 %21, 1072889856
  br i1 %cmp24, label %if.then25, label %if.else35

if.then25:                                        ; preds = %if.else23
  %22 = load i32* %ix, align 4
  %cmp26 = icmp slt i32 %22, 1072037888
  br i1 %cmp26, label %if.then27, label %if.else30

if.then27:                                        ; preds = %if.then25
  store i32 0, i32* %id, align 4
  %23 = load double* %x.addr, align 8
  %mul = fmul double 2.000000e+00, %23
  %sub28 = fsub double %mul, 1.000000e+00
  %24 = load double* %x.addr, align 8
  %add29 = fadd double 2.000000e+00, %24
  %div = fdiv double %sub28, %add29
  store double %div, double* %x.addr, align 8
  br label %if.end34

if.else30:                                        ; preds = %if.then25
  store i32 1, i32* %id, align 4
  %25 = load double* %x.addr, align 8
  %sub31 = fsub double %25, 1.000000e+00
  %26 = load double* %x.addr, align 8
  %add32 = fadd double %26, 1.000000e+00
  %div33 = fdiv double %sub31, %add32
  store double %div33, double* %x.addr, align 8
  br label %if.end34

if.end34:                                         ; preds = %if.else30, %if.then27
  br label %if.end45

if.else35:                                        ; preds = %if.else23
  %27 = load i32* %ix, align 4
  %cmp36 = icmp slt i32 %27, 1073971200
  br i1 %cmp36, label %if.then37, label %if.else42

if.then37:                                        ; preds = %if.else35
  store i32 2, i32* %id, align 4
  %28 = load double* %x.addr, align 8
  %sub38 = fsub double %28, 1.500000e+00
  %29 = load double* %x.addr, align 8
  %mul39 = fmul double 1.500000e+00, %29
  %add40 = fadd double 1.000000e+00, %mul39
  %div41 = fdiv double %sub38, %add40
  store double %div41, double* %x.addr, align 8
  br label %if.end44

if.else42:                                        ; preds = %if.else35
  store i32 3, i32* %id, align 4
  %30 = load double* %x.addr, align 8
  %div43 = fdiv double -1.000000e+00, %30
  store double %div43, double* %x.addr, align 8
  br label %if.end44

if.end44:                                         ; preds = %if.else42, %if.then37
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %if.end34
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end22
  %31 = load double* %x.addr, align 8
  %32 = load double* %x.addr, align 8
  %mul47 = fmul double %31, %32
  store double %mul47, double* %z, align 8
  %33 = load double* %z, align 8
  %34 = load double* %z, align 8
  %mul48 = fmul double %33, %34
  store double %mul48, double* %w, align 8
  %35 = load double* %z, align 8
  %36 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 0), align 4
  %37 = load double* %w, align 8
  %38 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 2), align 4
  %39 = load double* %w, align 8
  %40 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 4), align 4
  %41 = load double* %w, align 8
  %42 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 6), align 4
  %43 = load double* %w, align 8
  %44 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 8), align 4
  %45 = load double* %w, align 8
  %46 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 10), align 4
  %mul49 = fmul double %45, %46
  %add50 = fadd double %44, %mul49
  %mul51 = fmul double %43, %add50
  %add52 = fadd double %42, %mul51
  %mul53 = fmul double %41, %add52
  %add54 = fadd double %40, %mul53
  %mul55 = fmul double %39, %add54
  %add56 = fadd double %38, %mul55
  %mul57 = fmul double %37, %add56
  %add58 = fadd double %36, %mul57
  %mul59 = fmul double %35, %add58
  store double %mul59, double* %s1, align 8
  %47 = load double* %w, align 8
  %48 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 1), align 4
  %49 = load double* %w, align 8
  %50 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 3), align 4
  %51 = load double* %w, align 8
  %52 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 5), align 4
  %53 = load double* %w, align 8
  %54 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 7), align 4
  %55 = load double* %w, align 8
  %56 = load double* getelementptr inbounds ([11 x double]* @aT, i32 0, i32 9), align 4
  %mul60 = fmul double %55, %56
  %add61 = fadd double %54, %mul60
  %mul62 = fmul double %53, %add61
  %add63 = fadd double %52, %mul62
  %mul64 = fmul double %51, %add63
  %add65 = fadd double %50, %mul64
  %mul66 = fmul double %49, %add65
  %add67 = fadd double %48, %mul66
  %mul68 = fmul double %47, %add67
  store double %mul68, double* %s2, align 8
  %57 = load i32* %id, align 4
  %cmp69 = icmp slt i32 %57, 0
  br i1 %cmp69, label %if.then70, label %if.else74

if.then70:                                        ; preds = %if.end46
  %58 = load double* %x.addr, align 8
  %59 = load double* %x.addr, align 8
  %60 = load double* %s1, align 8
  %61 = load double* %s2, align 8
  %add71 = fadd double %60, %61
  %mul72 = fmul double %59, %add71
  %sub73 = fsub double %58, %mul72
  store double %sub73, double* %retval
  br label %return

if.else74:                                        ; preds = %if.end46
  %62 = load i32* %id, align 4
  %arrayidx = getelementptr inbounds [4 x double]* @atanhi, i32 0, i32 %62
  %63 = load double* %arrayidx, align 4
  %64 = load double* %x.addr, align 8
  %65 = load double* %s1, align 8
  %66 = load double* %s2, align 8
  %add75 = fadd double %65, %66
  %mul76 = fmul double %64, %add75
  %67 = load i32* %id, align 4
  %arrayidx77 = getelementptr inbounds [4 x double]* @atanlo, i32 0, i32 %67
  %68 = load double* %arrayidx77, align 4
  %sub78 = fsub double %mul76, %68
  %69 = load double* %x.addr, align 8
  %sub79 = fsub double %sub78, %69
  %sub80 = fsub double %63, %sub79
  store double %sub80, double* %z, align 8
  %70 = load i32* %hx, align 4
  %cmp81 = icmp slt i32 %70, 0
  br i1 %cmp81, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else74
  %71 = load double* %z, align 8
  %sub82 = fsub double -0.000000e+00, %71
  br label %cond.end

cond.false:                                       ; preds = %if.else74
  %72 = load double* %z, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub82, %cond.true ], [ %72, %cond.false ]
  store double %cond, double* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then70, %if.then20, %if.else, %if.then10, %if.then8
  %73 = load double* %retval
  ret double %73
}

; Function Attrs: nounwind readnone
define double @ceil(double %x) #3 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %i0 = alloca i32, align 4
  %i1 = alloca i32, align 4
  %j0 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %iw_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %i0, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %i1, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %i0, align 4
  %shr = ashr i32 %3, 20
  %and = and i32 %shr, 2047
  %sub = sub nsw i32 %and, 1023
  store i32 %sub, i32* %j0, align 4
  %4 = load i32* %j0, align 4
  %cmp = icmp slt i32 %4, 20
  br i1 %cmp, label %if.then, label %if.else30

if.then:                                          ; preds = %do.end
  %5 = load i32* %j0, align 4
  %cmp2 = icmp slt i32 %5, 0
  br i1 %cmp2, label %if.then3, label %if.else12

if.then3:                                         ; preds = %if.then
  %6 = load double* %x.addr, align 8
  %add = fadd double 1.000000e+300, %6
  %cmp4 = fcmp ogt double %add, 0.000000e+00
  br i1 %cmp4, label %if.then5, label %if.end11

if.then5:                                         ; preds = %if.then3
  %7 = load i32* %i0, align 4
  %cmp6 = icmp slt i32 %7, 0
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then5
  store i32 -2147483648, i32* %i0, align 4
  store i32 0, i32* %i1, align 4
  br label %if.end10

if.else:                                          ; preds = %if.then5
  %8 = load i32* %i0, align 4
  %9 = load i32* %i1, align 4
  %or = or i32 %8, %9
  %cmp8 = icmp ne i32 %or, 0
  br i1 %cmp8, label %if.then9, label %if.end

if.then9:                                         ; preds = %if.else
  store i32 1072693248, i32* %i0, align 4
  store i32 0, i32* %i1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then9, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then7
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.then3
  br label %if.end29

if.else12:                                        ; preds = %if.then
  %10 = load i32* %j0, align 4
  %shr13 = ashr i32 1048575, %10
  store i32 %shr13, i32* %i, align 4
  %11 = load i32* %i0, align 4
  %12 = load i32* %i, align 4
  %and14 = and i32 %11, %12
  %13 = load i32* %i1, align 4
  %or15 = or i32 %and14, %13
  %cmp16 = icmp eq i32 %or15, 0
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %if.else12
  %14 = load double* %x.addr, align 8
  store double %14, double* %retval
  br label %return

if.end18:                                         ; preds = %if.else12
  %15 = load double* %x.addr, align 8
  %add19 = fadd double 1.000000e+300, %15
  %cmp20 = fcmp ogt double %add19, 0.000000e+00
  br i1 %cmp20, label %if.then21, label %if.end28

if.then21:                                        ; preds = %if.end18
  %16 = load i32* %i0, align 4
  %cmp22 = icmp sgt i32 %16, 0
  br i1 %cmp22, label %if.then23, label %if.end26

if.then23:                                        ; preds = %if.then21
  %17 = load i32* %j0, align 4
  %shr24 = ashr i32 1048576, %17
  %18 = load i32* %i0, align 4
  %add25 = add nsw i32 %18, %shr24
  store i32 %add25, i32* %i0, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.then23, %if.then21
  %19 = load i32* %i, align 4
  %neg = xor i32 %19, -1
  %20 = load i32* %i0, align 4
  %and27 = and i32 %20, %neg
  store i32 %and27, i32* %i0, align 4
  store i32 0, i32* %i1, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.end26, %if.end18
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end11
  br label %if.end65

if.else30:                                        ; preds = %do.end
  %21 = load i32* %j0, align 4
  %cmp31 = icmp sgt i32 %21, 51
  br i1 %cmp31, label %if.then32, label %if.else37

if.then32:                                        ; preds = %if.else30
  %22 = load i32* %j0, align 4
  %cmp33 = icmp eq i32 %22, 1024
  br i1 %cmp33, label %if.then34, label %if.else36

if.then34:                                        ; preds = %if.then32
  %23 = load double* %x.addr, align 8
  %24 = load double* %x.addr, align 8
  %add35 = fadd double %23, %24
  store double %add35, double* %retval
  br label %return

if.else36:                                        ; preds = %if.then32
  %25 = load double* %x.addr, align 8
  store double %25, double* %retval
  br label %return

if.else37:                                        ; preds = %if.else30
  %26 = load i32* %j0, align 4
  %sub38 = sub nsw i32 %26, 20
  %shr39 = lshr i32 -1, %sub38
  store i32 %shr39, i32* %i, align 4
  %27 = load i32* %i1, align 4
  %28 = load i32* %i, align 4
  %and40 = and i32 %27, %28
  %cmp41 = icmp eq i32 %and40, 0
  br i1 %cmp41, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.else37
  %29 = load double* %x.addr, align 8
  store double %29, double* %retval
  br label %return

if.end43:                                         ; preds = %if.else37
  %30 = load double* %x.addr, align 8
  %add44 = fadd double 1.000000e+300, %30
  %cmp45 = fcmp ogt double %add44, 0.000000e+00
  br i1 %cmp45, label %if.then46, label %if.end63

if.then46:                                        ; preds = %if.end43
  %31 = load i32* %i0, align 4
  %cmp47 = icmp sgt i32 %31, 0
  br i1 %cmp47, label %if.then48, label %if.end60

if.then48:                                        ; preds = %if.then46
  %32 = load i32* %j0, align 4
  %cmp49 = icmp eq i32 %32, 20
  br i1 %cmp49, label %if.then50, label %if.else52

if.then50:                                        ; preds = %if.then48
  %33 = load i32* %i0, align 4
  %add51 = add nsw i32 %33, 1
  store i32 %add51, i32* %i0, align 4
  br label %if.end59

if.else52:                                        ; preds = %if.then48
  %34 = load i32* %i1, align 4
  %35 = load i32* %j0, align 4
  %sub53 = sub nsw i32 52, %35
  %shl = shl i32 1, %sub53
  %add54 = add nsw i32 %34, %shl
  store i32 %add54, i32* %j, align 4
  %36 = load i32* %j, align 4
  %37 = load i32* %i1, align 4
  %cmp55 = icmp ult i32 %36, %37
  br i1 %cmp55, label %if.then56, label %if.end58

if.then56:                                        ; preds = %if.else52
  %38 = load i32* %i0, align 4
  %add57 = add nsw i32 %38, 1
  store i32 %add57, i32* %i0, align 4
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %if.else52
  %39 = load i32* %j, align 4
  store i32 %39, i32* %i1, align 4
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then50
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then46
  %40 = load i32* %i, align 4
  %neg61 = xor i32 %40, -1
  %41 = load i32* %i1, align 4
  %and62 = and i32 %41, %neg61
  store i32 %and62, i32* %i1, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.end60, %if.end43
  br label %if.end64

if.end64:                                         ; preds = %if.end63
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.end29
  br label %do.body66

do.body66:                                        ; preds = %if.end65
  %42 = load i32* %i0, align 4
  %parts67 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %msw68 = getelementptr inbounds %struct.anon* %parts67, i32 0, i32 1
  store i32 %42, i32* %msw68, align 4
  %43 = load i32* %i1, align 4
  %parts69 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %lsw70 = getelementptr inbounds %struct.anon* %parts69, i32 0, i32 0
  store i32 %43, i32* %lsw70, align 4
  %value71 = bitcast %union.ieee_double_shape_type* %iw_u to double*
  %44 = load double* %value71, align 4
  store double %44, double* %x.addr, align 8
  br label %do.end72

do.end72:                                         ; preds = %do.body66
  %45 = load double* %x.addr, align 8
  store double %45, double* %retval
  br label %return

return:                                           ; preds = %do.end72, %if.then42, %if.else36, %if.then34, %if.then17
  %46 = load double* %retval
  ret double %46
}

; Function Attrs: nounwind
define double @cos(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y = alloca [2 x double], align 8
  %z = alloca double, align 8
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double 0.000000e+00, double* %z, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sle i32 %3, 1072243195
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double* %z, align 8
  %call = call double @__kernel_cos(double %4, double %5) #5
  store double %call, double* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %6, 2146435072
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %7 = load double* %x.addr, align 8
  %8 = load double* %x.addr, align 8
  %sub = fsub double %7, %8
  store double %sub, double* %retval
  br label %return

if.else3:                                         ; preds = %if.else
  %9 = load double* %x.addr, align 8
  %arraydecay = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2(double %9, double* %arraydecay) #5
  store i32 %call4, i32* %n, align 4
  %10 = load i32* %n, align 4
  %and5 = and i32 %10, 3
  switch i32 %and5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb8
    i32 2, label %sw.bb13
  ]

sw.bb:                                            ; preds = %if.else3
  %arrayidx = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %11 = load double* %arrayidx, align 4
  %arrayidx6 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %12 = load double* %arrayidx6, align 4
  %call7 = call double @__kernel_cos(double %11, double %12) #5
  store double %call7, double* %retval
  br label %return

sw.bb8:                                           ; preds = %if.else3
  %arrayidx9 = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %13 = load double* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %14 = load double* %arrayidx10, align 4
  %call11 = call double @__kernel_sin(double %13, double %14, i32 1) #5
  %sub12 = fsub double -0.000000e+00, %call11
  store double %sub12, double* %retval
  br label %return

sw.bb13:                                          ; preds = %if.else3
  %arrayidx14 = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %15 = load double* %arrayidx14, align 4
  %arrayidx15 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %16 = load double* %arrayidx15, align 4
  %call16 = call double @__kernel_cos(double %15, double %16) #5
  %sub17 = fsub double -0.000000e+00, %call16
  store double %sub17, double* %retval
  br label %return

sw.default:                                       ; preds = %if.else3
  %arrayidx18 = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %17 = load double* %arrayidx18, align 4
  %arrayidx19 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %18 = load double* %arrayidx19, align 4
  %call20 = call double @__kernel_sin(double %17, double %18, i32 1) #5
  store double %call20, double* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb13, %sw.bb8, %sw.bb, %if.then2, %if.then
  %19 = load double* %retval
  ret double %19
}

; Function Attrs: nounwind
define double @erf(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %i = alloca i32, align 4
  %R = alloca double, align 8
  %S = alloca double, align 8
  %P = alloca double, align 8
  %Q = alloca double, align 8
  %s = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  %r = alloca double, align 8
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sl_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load i32* %hx, align 4
  %shr = lshr i32 %4, 31
  %shl = shl i32 %shr, 1
  store i32 %shl, i32* %i, align 4
  %5 = load i32* %i, align 4
  %sub = sub nsw i32 1, %5
  %conv = sitofp i32 %sub to double
  %6 = load double* %x.addr, align 8
  %div = fdiv double 1.000000e+00, %6
  %add = fadd double %conv, %div
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %7, 1072365568
  br i1 %cmp1, label %if.then3, label %if.end39

if.then3:                                         ; preds = %if.end
  %8 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %8, 1043333120
  br i1 %cmp4, label %if.then6, label %if.end16

if.then6:                                         ; preds = %if.then3
  %9 = load i32* %ix, align 4
  %cmp7 = icmp slt i32 %9, 8388608
  br i1 %cmp7, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.then6
  %10 = load double* %x.addr, align 8
  %mul = fmul double 8.000000e+00, %10
  %11 = load double* %x.addr, align 8
  %mul10 = fmul double 0x3FF06EBA8214DB69, %11
  %add11 = fadd double %mul, %mul10
  %mul12 = fmul double 1.250000e-01, %add11
  store double %mul12, double* %retval
  br label %return

if.end13:                                         ; preds = %if.then6
  %12 = load double* %x.addr, align 8
  %13 = load double* %x.addr, align 8
  %mul14 = fmul double 0x3FC06EBA8214DB69, %13
  %add15 = fadd double %12, %mul14
  store double %add15, double* %retval
  br label %return

if.end16:                                         ; preds = %if.then3
  %14 = load double* %x.addr, align 8
  %15 = load double* %x.addr, align 8
  %mul17 = fmul double %14, %15
  store double %mul17, double* %z, align 8
  %16 = load double* %z, align 8
  %17 = load double* %z, align 8
  %18 = load double* %z, align 8
  %19 = load double* %z, align 8
  %mul18 = fmul double %19, 0xBEF8EAD6120016AC
  %add19 = fadd double 0xBF77A291236668E4, %mul18
  %mul20 = fmul double %18, %add19
  %add21 = fadd double 0xBF9D2A51DBD7194F, %mul20
  %mul22 = fmul double %17, %add21
  %add23 = fadd double 0xBFD4CD7D691CB913, %mul22
  %mul24 = fmul double %16, %add23
  %add25 = fadd double 0x3FC06EBA8214DB68, %mul24
  store double %add25, double* %r, align 8
  %20 = load double* %z, align 8
  %21 = load double* %z, align 8
  %22 = load double* %z, align 8
  %23 = load double* %z, align 8
  %24 = load double* %z, align 8
  %mul26 = fmul double %24, 0xBED09C4342A26120
  %add27 = fadd double 0x3F215DC9221C1A10, %mul26
  %mul28 = fmul double %23, %add27
  %add29 = fadd double 0x3F74D022C4D36B0F, %mul28
  %mul30 = fmul double %22, %add29
  %add31 = fadd double 0x3FB0A54C5536CEBA, %mul30
  %mul32 = fmul double %21, %add31
  %add33 = fadd double 0x3FD97779CDDADC09, %mul32
  %mul34 = fmul double %20, %add33
  %add35 = fadd double 1.000000e+00, %mul34
  store double %add35, double* %s, align 8
  %25 = load double* %r, align 8
  %26 = load double* %s, align 8
  %div36 = fdiv double %25, %26
  store double %div36, double* %y, align 8
  %27 = load double* %x.addr, align 8
  %28 = load double* %x.addr, align 8
  %29 = load double* %y, align 8
  %mul37 = fmul double %28, %29
  %add38 = fadd double %27, %mul37
  store double %add38, double* %retval
  br label %return

if.end39:                                         ; preds = %if.end
  %30 = load i32* %ix, align 4
  %cmp40 = icmp slt i32 %30, 1072955392
  br i1 %cmp40, label %if.then42, label %if.end75

if.then42:                                        ; preds = %if.end39
  %31 = load double* %x.addr, align 8
  %call = call double @fabs(double %31) #6
  %sub43 = fsub double %call, 1.000000e+00
  store double %sub43, double* %s, align 8
  %32 = load double* %s, align 8
  %33 = load double* %s, align 8
  %34 = load double* %s, align 8
  %35 = load double* %s, align 8
  %36 = load double* %s, align 8
  %37 = load double* %s, align 8
  %mul44 = fmul double %37, 0xBF61BF380A96073F
  %add45 = fadd double 0x3FA22A36599795EB, %mul44
  %mul46 = fmul double %36, %add45
  %add47 = fadd double 0xBFBC63983D3E28EC, %mul46
  %mul48 = fmul double %35, %add47
  %add49 = fadd double 0x3FD45FCA805120E4, %mul48
  %mul50 = fmul double %34, %add49
  %add51 = fadd double 0xBFD7D240FBB8C3F1, %mul50
  %mul52 = fmul double %33, %add51
  %add53 = fadd double 0x3FDA8D00AD92B34D, %mul52
  %mul54 = fmul double %32, %add53
  %add55 = fadd double 0xBF6359B8BEF77538, %mul54
  store double %add55, double* %P, align 8
  %38 = load double* %s, align 8
  %39 = load double* %s, align 8
  %40 = load double* %s, align 8
  %41 = load double* %s, align 8
  %42 = load double* %s, align 8
  %43 = load double* %s, align 8
  %mul56 = fmul double %43, 0x3F888B545735151D
  %add57 = fadd double 0x3F8BEDC26B51DD1C, %mul56
  %mul58 = fmul double %42, %add57
  %add59 = fadd double 0x3FC02660E763351F, %mul58
  %mul60 = fmul double %41, %add59
  %add61 = fadd double 0x3FB2635CD99FE9A7, %mul60
  %mul62 = fmul double %40, %add61
  %add63 = fadd double 0x3FE14AF092EB6F33, %mul62
  %mul64 = fmul double %39, %add63
  %add65 = fadd double 0x3FBB3E6618EEE323, %mul64
  %mul66 = fmul double %38, %add65
  %add67 = fadd double 1.000000e+00, %mul66
  store double %add67, double* %Q, align 8
  %44 = load i32* %hx, align 4
  %cmp68 = icmp sge i32 %44, 0
  br i1 %cmp68, label %if.then70, label %if.else

if.then70:                                        ; preds = %if.then42
  %45 = load double* %P, align 8
  %46 = load double* %Q, align 8
  %div71 = fdiv double %45, %46
  %add72 = fadd double 0x3FEB0AC160000000, %div71
  store double %add72, double* %retval
  br label %return

if.else:                                          ; preds = %if.then42
  %47 = load double* %P, align 8
  %48 = load double* %Q, align 8
  %div73 = fdiv double %47, %48
  %sub74 = fsub double 0xBFEB0AC160000000, %div73
  store double %sub74, double* %retval
  br label %return

if.end75:                                         ; preds = %if.end39
  %49 = load i32* %ix, align 4
  %cmp76 = icmp sge i32 %49, 1075314688
  br i1 %cmp76, label %if.then78, label %if.end83

if.then78:                                        ; preds = %if.end75
  %50 = load i32* %hx, align 4
  %cmp79 = icmp sge i32 %50, 0
  br i1 %cmp79, label %if.then81, label %if.else82

if.then81:                                        ; preds = %if.then78
  store double 1.000000e+00, double* %retval
  br label %return

if.else82:                                        ; preds = %if.then78
  store double -1.000000e+00, double* %retval
  br label %return

if.end83:                                         ; preds = %if.end75
  %51 = load double* %x.addr, align 8
  %call84 = call double @fabs(double %51) #6
  store double %call84, double* %x.addr, align 8
  %52 = load double* %x.addr, align 8
  %53 = load double* %x.addr, align 8
  %mul85 = fmul double %52, %53
  %div86 = fdiv double 1.000000e+00, %mul85
  store double %div86, double* %s, align 8
  %54 = load i32* %ix, align 4
  %cmp87 = icmp slt i32 %54, 1074191214
  br i1 %cmp87, label %if.then89, label %if.else120

if.then89:                                        ; preds = %if.end83
  %55 = load double* %s, align 8
  %56 = load double* %s, align 8
  %57 = load double* %s, align 8
  %58 = load double* %s, align 8
  %59 = load double* %s, align 8
  %60 = load double* %s, align 8
  %61 = load double* %s, align 8
  %mul90 = fmul double %61, 0xC023A0EFC69AC25C
  %add91 = fadd double 0xC054526557E4D2F2, %mul90
  %mul92 = fmul double %60, %add91
  %add93 = fadd double 0xC067135CEBCCABB2, %mul92
  %mul94 = fmul double %59, %add93
  %add95 = fadd double 0xC0644CB184282266, %mul94
  %mul96 = fmul double %58, %add95
  %add97 = fadd double 0xC04F300AE4CBA38D, %mul96
  %mul98 = fmul double %57, %add97
  %add99 = fadd double 0xC0251E0441B0E726, %mul98
  %mul100 = fmul double %56, %add99
  %add101 = fadd double 0xBFE63416E4BA7360, %mul100
  %mul102 = fmul double %55, %add101
  %add103 = fadd double 0xBF843412600D6435, %mul102
  store double %add103, double* %R, align 8
  %62 = load double* %s, align 8
  %63 = load double* %s, align 8
  %64 = load double* %s, align 8
  %65 = load double* %s, align 8
  %66 = load double* %s, align 8
  %67 = load double* %s, align 8
  %68 = load double* %s, align 8
  %69 = load double* %s, align 8
  %mul104 = fmul double %69, 0xBFAEEFF2EE749A62
  %add105 = fadd double 0x401A47EF8E484A93, %mul104
  %mul106 = fmul double %68, %add105
  %add107 = fadd double 0x405B28A3EE48AE2C, %mul106
  %mul108 = fmul double %67, %add107
  %add109 = fadd double 0x407AD02157700314, %mul108
  %mul110 = fmul double %66, %add109
  %add111 = fadd double 0x40842B1921EC2868, %mul110
  %mul112 = fmul double %65, %add111
  %add113 = fadd double 0x407B290DD58A1A71, %mul112
  %mul114 = fmul double %64, %add113
  %add115 = fadd double 0x4061350C526AE721, %mul114
  %mul116 = fmul double %63, %add115
  %add117 = fadd double 0x4033A6B9BD707687, %mul116
  %mul118 = fmul double %62, %add117
  %add119 = fadd double 1.000000e+00, %mul118
  store double %add119, double* %S, align 8
  br label %if.end147

if.else120:                                       ; preds = %if.end83
  %70 = load double* %s, align 8
  %71 = load double* %s, align 8
  %72 = load double* %s, align 8
  %73 = load double* %s, align 8
  %74 = load double* %s, align 8
  %75 = load double* %s, align 8
  %mul121 = fmul double %75, 0xC07E384E9BDC383F
  %add122 = fadd double 0xC09004616A2E5992, %mul121
  %mul123 = fmul double %74, %add122
  %add124 = fadd double 0xC083EC881375F228, %mul123
  %mul125 = fmul double %73, %add124
  %add126 = fadd double 0xC064145D43C5ED98, %mul125
  %mul127 = fmul double %72, %add126
  %add128 = fadd double 0xC031C209555F995A, %mul127
  %mul129 = fmul double %71, %add128
  %add130 = fadd double 0xBFE993BA70C285DE, %mul129
  %mul131 = fmul double %70, %add130
  %add132 = fadd double 0xBF84341239E86F4A, %mul131
  store double %add132, double* %R, align 8
  %76 = load double* %s, align 8
  %77 = load double* %s, align 8
  %78 = load double* %s, align 8
  %79 = load double* %s, align 8
  %80 = load double* %s, align 8
  %81 = load double* %s, align 8
  %82 = load double* %s, align 8
  %mul133 = fmul double %82, 0xC03670E242712D62
  %add134 = fadd double 0x407DA874E79FE763, %mul133
  %mul135 = fmul double %81, %add134
  %add136 = fadd double 0x40A3F219CEDF3BE6, %mul135
  %mul137 = fmul double %80, %add136
  %add138 = fadd double 0x40A8FFB7688C246A, %mul137
  %mul139 = fmul double %79, %add138
  %add140 = fadd double 0x409802EB189D5118, %mul139
  %mul141 = fmul double %78, %add140
  %add142 = fadd double 0x40745CAE221B9F0A, %mul141
  %mul143 = fmul double %77, %add142
  %add144 = fadd double 0x403E568B261D5190, %mul143
  %mul145 = fmul double %76, %add144
  %add146 = fadd double 1.000000e+00, %mul145
  store double %add146, double* %S, align 8
  br label %if.end147

if.end147:                                        ; preds = %if.else120, %if.then89
  %83 = load double* %x.addr, align 8
  store double %83, double* %z, align 8
  br label %do.body148

do.body148:                                       ; preds = %if.end147
  %84 = load double* %z, align 8
  %value149 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  store double %84, double* %value149, align 4
  %parts150 = bitcast %union.ieee_double_shape_type* %sl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts150, i32 0, i32 0
  store i32 0, i32* %lsw, align 4
  %value151 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  %85 = load double* %value151, align 4
  store double %85, double* %z, align 8
  br label %do.end152

do.end152:                                        ; preds = %do.body148
  %86 = load double* %z, align 8
  %sub153 = fsub double -0.000000e+00, %86
  %87 = load double* %z, align 8
  %mul154 = fmul double %sub153, %87
  %sub155 = fsub double %mul154, 5.625000e-01
  %call156 = call double @__ieee754_exp(double %sub155) #5
  %88 = load double* %z, align 8
  %89 = load double* %x.addr, align 8
  %sub157 = fsub double %88, %89
  %90 = load double* %z, align 8
  %91 = load double* %x.addr, align 8
  %add158 = fadd double %90, %91
  %mul159 = fmul double %sub157, %add158
  %92 = load double* %R, align 8
  %93 = load double* %S, align 8
  %div160 = fdiv double %92, %93
  %add161 = fadd double %mul159, %div160
  %call162 = call double @__ieee754_exp(double %add161) #5
  %mul163 = fmul double %call156, %call162
  store double %mul163, double* %r, align 8
  %94 = load i32* %hx, align 4
  %cmp164 = icmp sge i32 %94, 0
  br i1 %cmp164, label %if.then166, label %if.else169

if.then166:                                       ; preds = %do.end152
  %95 = load double* %r, align 8
  %96 = load double* %x.addr, align 8
  %div167 = fdiv double %95, %96
  %sub168 = fsub double 1.000000e+00, %div167
  store double %sub168, double* %retval
  br label %return

if.else169:                                       ; preds = %do.end152
  %97 = load double* %r, align 8
  %98 = load double* %x.addr, align 8
  %div170 = fdiv double %97, %98
  %sub171 = fsub double %div170, 1.000000e+00
  store double %sub171, double* %retval
  br label %return

return:                                           ; preds = %if.else169, %if.then166, %if.else82, %if.then81, %if.else, %if.then70, %if.end16, %if.end13, %if.then9, %if.then
  %99 = load double* %retval
  ret double %99
}

; Function Attrs: nounwind
define double @erfc(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %R = alloca double, align 8
  %S = alloca double, align 8
  %P = alloca double, align 8
  %Q = alloca double, align 8
  %s = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  %r = alloca double, align 8
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sl_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load i32* %hx, align 4
  %shr = lshr i32 %4, 31
  %shl = shl i32 %shr, 1
  %conv = uitofp i32 %shl to double
  %5 = load double* %x.addr, align 8
  %div = fdiv double 1.000000e+00, %5
  %add = fadd double %conv, %div
  store double %add, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %6, 1072365568
  br i1 %cmp1, label %if.then3, label %if.end37

if.then3:                                         ; preds = %if.end
  %7 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %7, 1013972992
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then3
  %8 = load double* %x.addr, align 8
  %sub = fsub double 1.000000e+00, %8
  store double %sub, double* %retval
  br label %return

if.end7:                                          ; preds = %if.then3
  %9 = load double* %x.addr, align 8
  %10 = load double* %x.addr, align 8
  %mul = fmul double %9, %10
  store double %mul, double* %z, align 8
  %11 = load double* %z, align 8
  %12 = load double* %z, align 8
  %13 = load double* %z, align 8
  %14 = load double* %z, align 8
  %mul8 = fmul double %14, 0xBEF8EAD6120016AC
  %add9 = fadd double 0xBF77A291236668E4, %mul8
  %mul10 = fmul double %13, %add9
  %add11 = fadd double 0xBF9D2A51DBD7194F, %mul10
  %mul12 = fmul double %12, %add11
  %add13 = fadd double 0xBFD4CD7D691CB913, %mul12
  %mul14 = fmul double %11, %add13
  %add15 = fadd double 0x3FC06EBA8214DB68, %mul14
  store double %add15, double* %r, align 8
  %15 = load double* %z, align 8
  %16 = load double* %z, align 8
  %17 = load double* %z, align 8
  %18 = load double* %z, align 8
  %19 = load double* %z, align 8
  %mul16 = fmul double %19, 0xBED09C4342A26120
  %add17 = fadd double 0x3F215DC9221C1A10, %mul16
  %mul18 = fmul double %18, %add17
  %add19 = fadd double 0x3F74D022C4D36B0F, %mul18
  %mul20 = fmul double %17, %add19
  %add21 = fadd double 0x3FB0A54C5536CEBA, %mul20
  %mul22 = fmul double %16, %add21
  %add23 = fadd double 0x3FD97779CDDADC09, %mul22
  %mul24 = fmul double %15, %add23
  %add25 = fadd double 1.000000e+00, %mul24
  store double %add25, double* %s, align 8
  %20 = load double* %r, align 8
  %21 = load double* %s, align 8
  %div26 = fdiv double %20, %21
  store double %div26, double* %y, align 8
  %22 = load i32* %hx, align 4
  %cmp27 = icmp slt i32 %22, 1070596096
  br i1 %cmp27, label %if.then29, label %if.else

if.then29:                                        ; preds = %if.end7
  %23 = load double* %x.addr, align 8
  %24 = load double* %x.addr, align 8
  %25 = load double* %y, align 8
  %mul30 = fmul double %24, %25
  %add31 = fadd double %23, %mul30
  %sub32 = fsub double 1.000000e+00, %add31
  store double %sub32, double* %retval
  br label %return

if.else:                                          ; preds = %if.end7
  %26 = load double* %x.addr, align 8
  %27 = load double* %y, align 8
  %mul33 = fmul double %26, %27
  store double %mul33, double* %r, align 8
  %28 = load double* %x.addr, align 8
  %sub34 = fsub double %28, 5.000000e-01
  %29 = load double* %r, align 8
  %add35 = fadd double %29, %sub34
  store double %add35, double* %r, align 8
  %30 = load double* %r, align 8
  %sub36 = fsub double 5.000000e-01, %30
  store double %sub36, double* %retval
  br label %return

if.end37:                                         ; preds = %if.end
  %31 = load i32* %ix, align 4
  %cmp38 = icmp slt i32 %31, 1072955392
  br i1 %cmp38, label %if.then40, label %if.end75

if.then40:                                        ; preds = %if.end37
  %32 = load double* %x.addr, align 8
  %call = call double @fabs(double %32) #6
  %sub41 = fsub double %call, 1.000000e+00
  store double %sub41, double* %s, align 8
  %33 = load double* %s, align 8
  %34 = load double* %s, align 8
  %35 = load double* %s, align 8
  %36 = load double* %s, align 8
  %37 = load double* %s, align 8
  %38 = load double* %s, align 8
  %mul42 = fmul double %38, 0xBF61BF380A96073F
  %add43 = fadd double 0x3FA22A36599795EB, %mul42
  %mul44 = fmul double %37, %add43
  %add45 = fadd double 0xBFBC63983D3E28EC, %mul44
  %mul46 = fmul double %36, %add45
  %add47 = fadd double 0x3FD45FCA805120E4, %mul46
  %mul48 = fmul double %35, %add47
  %add49 = fadd double 0xBFD7D240FBB8C3F1, %mul48
  %mul50 = fmul double %34, %add49
  %add51 = fadd double 0x3FDA8D00AD92B34D, %mul50
  %mul52 = fmul double %33, %add51
  %add53 = fadd double 0xBF6359B8BEF77538, %mul52
  store double %add53, double* %P, align 8
  %39 = load double* %s, align 8
  %40 = load double* %s, align 8
  %41 = load double* %s, align 8
  %42 = load double* %s, align 8
  %43 = load double* %s, align 8
  %44 = load double* %s, align 8
  %mul54 = fmul double %44, 0x3F888B545735151D
  %add55 = fadd double 0x3F8BEDC26B51DD1C, %mul54
  %mul56 = fmul double %43, %add55
  %add57 = fadd double 0x3FC02660E763351F, %mul56
  %mul58 = fmul double %42, %add57
  %add59 = fadd double 0x3FB2635CD99FE9A7, %mul58
  %mul60 = fmul double %41, %add59
  %add61 = fadd double 0x3FE14AF092EB6F33, %mul60
  %mul62 = fmul double %40, %add61
  %add63 = fadd double 0x3FBB3E6618EEE323, %mul62
  %mul64 = fmul double %39, %add63
  %add65 = fadd double 1.000000e+00, %mul64
  store double %add65, double* %Q, align 8
  %45 = load i32* %hx, align 4
  %cmp66 = icmp sge i32 %45, 0
  br i1 %cmp66, label %if.then68, label %if.else71

if.then68:                                        ; preds = %if.then40
  store double 0x3FC3D4FA80000000, double* %z, align 8
  %46 = load double* %z, align 8
  %47 = load double* %P, align 8
  %48 = load double* %Q, align 8
  %div69 = fdiv double %47, %48
  %sub70 = fsub double %46, %div69
  store double %sub70, double* %retval
  br label %return

if.else71:                                        ; preds = %if.then40
  %49 = load double* %P, align 8
  %50 = load double* %Q, align 8
  %div72 = fdiv double %49, %50
  %add73 = fadd double 0x3FEB0AC160000000, %div72
  store double %add73, double* %z, align 8
  %51 = load double* %z, align 8
  %add74 = fadd double 1.000000e+00, %51
  store double %add74, double* %retval
  br label %return

if.end75:                                         ; preds = %if.end37
  %52 = load i32* %ix, align 4
  %cmp76 = icmp slt i32 %52, 1077673984
  br i1 %cmp76, label %if.then78, label %if.else172

if.then78:                                        ; preds = %if.end75
  %53 = load double* %x.addr, align 8
  %call79 = call double @fabs(double %53) #6
  store double %call79, double* %x.addr, align 8
  %54 = load double* %x.addr, align 8
  %55 = load double* %x.addr, align 8
  %mul80 = fmul double %54, %55
  %div81 = fdiv double 1.000000e+00, %mul80
  store double %div81, double* %s, align 8
  %56 = load i32* %ix, align 4
  %cmp82 = icmp slt i32 %56, 1074191213
  br i1 %cmp82, label %if.then84, label %if.else115

if.then84:                                        ; preds = %if.then78
  %57 = load double* %s, align 8
  %58 = load double* %s, align 8
  %59 = load double* %s, align 8
  %60 = load double* %s, align 8
  %61 = load double* %s, align 8
  %62 = load double* %s, align 8
  %63 = load double* %s, align 8
  %mul85 = fmul double %63, 0xC023A0EFC69AC25C
  %add86 = fadd double 0xC054526557E4D2F2, %mul85
  %mul87 = fmul double %62, %add86
  %add88 = fadd double 0xC067135CEBCCABB2, %mul87
  %mul89 = fmul double %61, %add88
  %add90 = fadd double 0xC0644CB184282266, %mul89
  %mul91 = fmul double %60, %add90
  %add92 = fadd double 0xC04F300AE4CBA38D, %mul91
  %mul93 = fmul double %59, %add92
  %add94 = fadd double 0xC0251E0441B0E726, %mul93
  %mul95 = fmul double %58, %add94
  %add96 = fadd double 0xBFE63416E4BA7360, %mul95
  %mul97 = fmul double %57, %add96
  %add98 = fadd double 0xBF843412600D6435, %mul97
  store double %add98, double* %R, align 8
  %64 = load double* %s, align 8
  %65 = load double* %s, align 8
  %66 = load double* %s, align 8
  %67 = load double* %s, align 8
  %68 = load double* %s, align 8
  %69 = load double* %s, align 8
  %70 = load double* %s, align 8
  %71 = load double* %s, align 8
  %mul99 = fmul double %71, 0xBFAEEFF2EE749A62
  %add100 = fadd double 0x401A47EF8E484A93, %mul99
  %mul101 = fmul double %70, %add100
  %add102 = fadd double 0x405B28A3EE48AE2C, %mul101
  %mul103 = fmul double %69, %add102
  %add104 = fadd double 0x407AD02157700314, %mul103
  %mul105 = fmul double %68, %add104
  %add106 = fadd double 0x40842B1921EC2868, %mul105
  %mul107 = fmul double %67, %add106
  %add108 = fadd double 0x407B290DD58A1A71, %mul107
  %mul109 = fmul double %66, %add108
  %add110 = fadd double 0x4061350C526AE721, %mul109
  %mul111 = fmul double %65, %add110
  %add112 = fadd double 0x4033A6B9BD707687, %mul111
  %mul113 = fmul double %64, %add112
  %add114 = fadd double 1.000000e+00, %mul113
  store double %add114, double* %S, align 8
  br label %if.end148

if.else115:                                       ; preds = %if.then78
  %72 = load i32* %hx, align 4
  %cmp116 = icmp slt i32 %72, 0
  br i1 %cmp116, label %land.lhs.true, label %if.end121

land.lhs.true:                                    ; preds = %if.else115
  %73 = load i32* %ix, align 4
  %cmp118 = icmp sge i32 %73, 1075314688
  br i1 %cmp118, label %if.then120, label %if.end121

if.then120:                                       ; preds = %land.lhs.true
  store double 2.000000e+00, double* %retval
  br label %return

if.end121:                                        ; preds = %land.lhs.true, %if.else115
  %74 = load double* %s, align 8
  %75 = load double* %s, align 8
  %76 = load double* %s, align 8
  %77 = load double* %s, align 8
  %78 = load double* %s, align 8
  %79 = load double* %s, align 8
  %mul122 = fmul double %79, 0xC07E384E9BDC383F
  %add123 = fadd double 0xC09004616A2E5992, %mul122
  %mul124 = fmul double %78, %add123
  %add125 = fadd double 0xC083EC881375F228, %mul124
  %mul126 = fmul double %77, %add125
  %add127 = fadd double 0xC064145D43C5ED98, %mul126
  %mul128 = fmul double %76, %add127
  %add129 = fadd double 0xC031C209555F995A, %mul128
  %mul130 = fmul double %75, %add129
  %add131 = fadd double 0xBFE993BA70C285DE, %mul130
  %mul132 = fmul double %74, %add131
  %add133 = fadd double 0xBF84341239E86F4A, %mul132
  store double %add133, double* %R, align 8
  %80 = load double* %s, align 8
  %81 = load double* %s, align 8
  %82 = load double* %s, align 8
  %83 = load double* %s, align 8
  %84 = load double* %s, align 8
  %85 = load double* %s, align 8
  %86 = load double* %s, align 8
  %mul134 = fmul double %86, 0xC03670E242712D62
  %add135 = fadd double 0x407DA874E79FE763, %mul134
  %mul136 = fmul double %85, %add135
  %add137 = fadd double 0x40A3F219CEDF3BE6, %mul136
  %mul138 = fmul double %84, %add137
  %add139 = fadd double 0x40A8FFB7688C246A, %mul138
  %mul140 = fmul double %83, %add139
  %add141 = fadd double 0x409802EB189D5118, %mul140
  %mul142 = fmul double %82, %add141
  %add143 = fadd double 0x40745CAE221B9F0A, %mul142
  %mul144 = fmul double %81, %add143
  %add145 = fadd double 0x403E568B261D5190, %mul144
  %mul146 = fmul double %80, %add145
  %add147 = fadd double 1.000000e+00, %mul146
  store double %add147, double* %S, align 8
  br label %if.end148

if.end148:                                        ; preds = %if.end121, %if.then84
  %87 = load double* %x.addr, align 8
  store double %87, double* %z, align 8
  br label %do.body149

do.body149:                                       ; preds = %if.end148
  %88 = load double* %z, align 8
  %value150 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  store double %88, double* %value150, align 4
  %parts151 = bitcast %union.ieee_double_shape_type* %sl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts151, i32 0, i32 0
  store i32 0, i32* %lsw, align 4
  %value152 = bitcast %union.ieee_double_shape_type* %sl_u to double*
  %89 = load double* %value152, align 4
  store double %89, double* %z, align 8
  br label %do.end153

do.end153:                                        ; preds = %do.body149
  %90 = load double* %z, align 8
  %sub154 = fsub double -0.000000e+00, %90
  %91 = load double* %z, align 8
  %mul155 = fmul double %sub154, %91
  %sub156 = fsub double %mul155, 5.625000e-01
  %call157 = call double @__ieee754_exp(double %sub156) #5
  %92 = load double* %z, align 8
  %93 = load double* %x.addr, align 8
  %sub158 = fsub double %92, %93
  %94 = load double* %z, align 8
  %95 = load double* %x.addr, align 8
  %add159 = fadd double %94, %95
  %mul160 = fmul double %sub158, %add159
  %96 = load double* %R, align 8
  %97 = load double* %S, align 8
  %div161 = fdiv double %96, %97
  %add162 = fadd double %mul160, %div161
  %call163 = call double @__ieee754_exp(double %add162) #5
  %mul164 = fmul double %call157, %call163
  store double %mul164, double* %r, align 8
  %98 = load i32* %hx, align 4
  %cmp165 = icmp sgt i32 %98, 0
  br i1 %cmp165, label %if.then167, label %if.else169

if.then167:                                       ; preds = %do.end153
  %99 = load double* %r, align 8
  %100 = load double* %x.addr, align 8
  %div168 = fdiv double %99, %100
  store double %div168, double* %retval
  br label %return

if.else169:                                       ; preds = %do.end153
  %101 = load double* %r, align 8
  %102 = load double* %x.addr, align 8
  %div170 = fdiv double %101, %102
  %sub171 = fsub double 2.000000e+00, %div170
  store double %sub171, double* %retval
  br label %return

if.else172:                                       ; preds = %if.end75
  %103 = load i32* %hx, align 4
  %cmp173 = icmp sgt i32 %103, 0
  br i1 %cmp173, label %if.then175, label %if.else176

if.then175:                                       ; preds = %if.else172
  store double 0.000000e+00, double* %retval
  br label %return

if.else176:                                       ; preds = %if.else172
  store double 2.000000e+00, double* %retval
  br label %return

return:                                           ; preds = %if.else176, %if.then175, %if.else169, %if.then167, %if.then120, %if.else71, %if.then68, %if.else, %if.then29, %if.then6, %if.then
  %104 = load double* %retval
  ret double %104
}

; Function Attrs: nounwind
define double @expm1(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y = alloca double, align 8
  %hi = alloca double, align 8
  %lo = alloca double, align 8
  %c = alloca double, align 8
  %t = alloca double, align 8
  %e = alloca double, align 8
  %hxs = alloca double, align 8
  %hfx = alloca double, align 8
  %r1 = alloca double, align 8
  %k = alloca i32, align 4
  %xsb = alloca i32, align 4
  %hx = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %low = alloca i32, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  %high = alloca i32, align 4
  %gh_u121 = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  %high138 = alloca i32, align 4
  %sh_u140 = alloca %union.ieee_double_shape_type, align 4
  %gh_u150 = alloca %union.ieee_double_shape_type, align 4
  %sh_u156 = alloca %union.ieee_double_shape_type, align 4
  %high165 = alloca i32, align 4
  %sh_u167 = alloca %union.ieee_double_shape_type, align 4
  %gh_u179 = alloca %union.ieee_double_shape_type, align 4
  %sh_u185 = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, -2147483648
  store i32 %and, i32* %xsb, align 4
  %3 = load i32* %xsb, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  store double %4, double* %y, align 8
  br label %if.end

if.else:                                          ; preds = %do.end
  %5 = load double* %x.addr, align 8
  %sub = fsub double -0.000000e+00, %5
  store double %sub, double* %y, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32* %hx, align 4
  %and1 = and i32 %6, 2147483647
  store i32 %and1, i32* %hx, align 4
  %7 = load i32* %hx, align 4
  %cmp2 = icmp uge i32 %7, 1078159482
  br i1 %cmp2, label %if.then3, label %if.end29

if.then3:                                         ; preds = %if.end
  %8 = load i32* %hx, align 4
  %cmp4 = icmp uge i32 %8, 1082535490
  br i1 %cmp4, label %if.then5, label %if.end21

if.then5:                                         ; preds = %if.then3
  %9 = load i32* %hx, align 4
  %cmp6 = icmp uge i32 %9, 2146435072
  br i1 %cmp6, label %if.then7, label %if.end17

if.then7:                                         ; preds = %if.then5
  br label %do.body8

do.body8:                                         ; preds = %if.then7
  %10 = load double* %x.addr, align 8
  %value9 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %10, double* %value9, align 4
  %parts10 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts10, i32 0, i32 0
  %11 = load i32* %lsw, align 4
  store i32 %11, i32* %low, align 4
  br label %do.end11

do.end11:                                         ; preds = %do.body8
  %12 = load i32* %hx, align 4
  %and12 = and i32 %12, 1048575
  %13 = load i32* %low, align 4
  %or = or i32 %and12, %13
  %cmp13 = icmp ne i32 %or, 0
  br i1 %cmp13, label %if.then14, label %if.else15

if.then14:                                        ; preds = %do.end11
  %14 = load double* %x.addr, align 8
  %15 = load double* %x.addr, align 8
  %add = fadd double %14, %15
  store double %add, double* %retval
  br label %return

if.else15:                                        ; preds = %do.end11
  %16 = load i32* %xsb, align 4
  %cmp16 = icmp eq i32 %16, 0
  br i1 %cmp16, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else15
  %17 = load double* %x.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.else15
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %17, %cond.true ], [ -1.000000e+00, %cond.false ]
  store double %cond, double* %retval
  br label %return

if.end17:                                         ; preds = %if.then5
  %18 = load double* %x.addr, align 8
  %cmp18 = fcmp ogt double %18, 0x40862E42FEFA39EF
  br i1 %cmp18, label %if.then19, label %if.end20

if.then19:                                        ; preds = %if.end17
  store double 0x7FF0000000000000, double* %retval
  br label %return

if.end20:                                         ; preds = %if.end17
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then3
  %19 = load i32* %xsb, align 4
  %cmp22 = icmp ne i32 %19, 0
  br i1 %cmp22, label %if.then23, label %if.end28

if.then23:                                        ; preds = %if.end21
  %20 = load double* %x.addr, align 8
  %add24 = fadd double %20, 1.000000e-300
  %cmp25 = fcmp olt double %add24, 0.000000e+00
  br i1 %cmp25, label %if.then26, label %if.end27

if.then26:                                        ; preds = %if.then23
  store double -1.000000e+00, double* %retval
  br label %return

if.end27:                                         ; preds = %if.then23
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end21
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end
  %21 = load i32* %hx, align 4
  %cmp30 = icmp ugt i32 %21, 1071001154
  br i1 %cmp30, label %if.then31, label %if.else52

if.then31:                                        ; preds = %if.end29
  %22 = load i32* %hx, align 4
  %cmp32 = icmp ult i32 %22, 1072734898
  br i1 %cmp32, label %if.then33, label %if.else40

if.then33:                                        ; preds = %if.then31
  %23 = load i32* %xsb, align 4
  %cmp34 = icmp eq i32 %23, 0
  br i1 %cmp34, label %if.then35, label %if.else37

if.then35:                                        ; preds = %if.then33
  %24 = load double* %x.addr, align 8
  %sub36 = fsub double %24, 0x3FE62E42FEE00000
  store double %sub36, double* %hi, align 8
  store double 0x3DEA39EF35793C76, double* %lo, align 8
  store i32 1, i32* %k, align 4
  br label %if.end39

if.else37:                                        ; preds = %if.then33
  %25 = load double* %x.addr, align 8
  %add38 = fadd double %25, 0x3FE62E42FEE00000
  store double %add38, double* %hi, align 8
  store double 0xBDEA39EF35793C76, double* %lo, align 8
  store i32 -1, i32* %k, align 4
  br label %if.end39

if.end39:                                         ; preds = %if.else37, %if.then35
  br label %if.end48

if.else40:                                        ; preds = %if.then31
  %26 = load double* %x.addr, align 8
  %mul = fmul double 0x3FF71547652B82FE, %26
  %27 = load i32* %xsb, align 4
  %cmp41 = icmp eq i32 %27, 0
  %cond42 = select i1 %cmp41, double 5.000000e-01, double -5.000000e-01
  %add43 = fadd double %mul, %cond42
  %conv = fptosi double %add43 to i32
  store i32 %conv, i32* %k, align 4
  %28 = load i32* %k, align 4
  %conv44 = sitofp i32 %28 to double
  store double %conv44, double* %t, align 8
  %29 = load double* %x.addr, align 8
  %30 = load double* %t, align 8
  %mul45 = fmul double %30, 0x3FE62E42FEE00000
  %sub46 = fsub double %29, %mul45
  store double %sub46, double* %hi, align 8
  %31 = load double* %t, align 8
  %mul47 = fmul double %31, 0x3DEA39EF35793C76
  store double %mul47, double* %lo, align 8
  br label %if.end48

if.end48:                                         ; preds = %if.else40, %if.end39
  %32 = load double* %hi, align 8
  %33 = load double* %lo, align 8
  %sub49 = fsub double %32, %33
  store double %sub49, double* %x.addr, align 8
  %34 = load double* %hi, align 8
  %35 = load double* %x.addr, align 8
  %sub50 = fsub double %34, %35
  %36 = load double* %lo, align 8
  %sub51 = fsub double %sub50, %36
  store double %sub51, double* %c, align 8
  br label %if.end62

if.else52:                                        ; preds = %if.end29
  %37 = load i32* %hx, align 4
  %cmp53 = icmp ult i32 %37, 1016070144
  br i1 %cmp53, label %if.then55, label %if.else60

if.then55:                                        ; preds = %if.else52
  %38 = load double* %x.addr, align 8
  %add56 = fadd double 1.000000e+300, %38
  store double %add56, double* %t, align 8
  %39 = load double* %x.addr, align 8
  %40 = load double* %t, align 8
  %41 = load double* %x.addr, align 8
  %add57 = fadd double 1.000000e+300, %41
  %sub58 = fsub double %40, %add57
  %sub59 = fsub double %39, %sub58
  store double %sub59, double* %retval
  br label %return

if.else60:                                        ; preds = %if.else52
  store i32 0, i32* %k, align 4
  br label %if.end61

if.end61:                                         ; preds = %if.else60
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.end48
  %42 = load double* %x.addr, align 8
  %mul63 = fmul double 5.000000e-01, %42
  store double %mul63, double* %hfx, align 8
  %43 = load double* %x.addr, align 8
  %44 = load double* %hfx, align 8
  %mul64 = fmul double %43, %44
  store double %mul64, double* %hxs, align 8
  %45 = load double* %hxs, align 8
  %46 = load double* %hxs, align 8
  %47 = load double* %hxs, align 8
  %48 = load double* %hxs, align 8
  %49 = load double* %hxs, align 8
  %mul65 = fmul double %49, 0xBE8AFDB76E09C32D
  %add66 = fadd double 0x3ED0CFCA86E65239, %mul65
  %mul67 = fmul double %48, %add66
  %add68 = fadd double 0xBF14CE199EAADBB7, %mul67
  %mul69 = fmul double %47, %add68
  %add70 = fadd double 0x3F5A01A019FE5585, %mul69
  %mul71 = fmul double %46, %add70
  %add72 = fadd double 0xBFA11111111110F4, %mul71
  %mul73 = fmul double %45, %add72
  %add74 = fadd double 1.000000e+00, %mul73
  store double %add74, double* %r1, align 8
  %50 = load double* %r1, align 8
  %51 = load double* %hfx, align 8
  %mul75 = fmul double %50, %51
  %sub76 = fsub double 3.000000e+00, %mul75
  store double %sub76, double* %t, align 8
  %52 = load double* %hxs, align 8
  %53 = load double* %r1, align 8
  %54 = load double* %t, align 8
  %sub77 = fsub double %53, %54
  %55 = load double* %x.addr, align 8
  %56 = load double* %t, align 8
  %mul78 = fmul double %55, %56
  %sub79 = fsub double 6.000000e+00, %mul78
  %div = fdiv double %sub77, %sub79
  %mul80 = fmul double %52, %div
  store double %mul80, double* %e, align 8
  %57 = load i32* %k, align 4
  %cmp81 = icmp eq i32 %57, 0
  br i1 %cmp81, label %if.then83, label %if.else87

if.then83:                                        ; preds = %if.end62
  %58 = load double* %x.addr, align 8
  %59 = load double* %x.addr, align 8
  %60 = load double* %e, align 8
  %mul84 = fmul double %59, %60
  %61 = load double* %hxs, align 8
  %sub85 = fsub double %mul84, %61
  %sub86 = fsub double %58, %sub85
  store double %sub86, double* %retval
  br label %return

if.else87:                                        ; preds = %if.end62
  %62 = load double* %x.addr, align 8
  %63 = load double* %e, align 8
  %64 = load double* %c, align 8
  %sub88 = fsub double %63, %64
  %mul89 = fmul double %62, %sub88
  %65 = load double* %c, align 8
  %sub90 = fsub double %mul89, %65
  store double %sub90, double* %e, align 8
  %66 = load double* %hxs, align 8
  %67 = load double* %e, align 8
  %sub91 = fsub double %67, %66
  store double %sub91, double* %e, align 8
  %68 = load i32* %k, align 4
  %cmp92 = icmp eq i32 %68, -1
  br i1 %cmp92, label %if.then94, label %if.end98

if.then94:                                        ; preds = %if.else87
  %69 = load double* %x.addr, align 8
  %70 = load double* %e, align 8
  %sub95 = fsub double %69, %70
  %mul96 = fmul double 5.000000e-01, %sub95
  %sub97 = fsub double %mul96, 5.000000e-01
  store double %sub97, double* %retval
  br label %return

if.end98:                                         ; preds = %if.else87
  %71 = load i32* %k, align 4
  %cmp99 = icmp eq i32 %71, 1
  br i1 %cmp99, label %if.then101, label %if.end112

if.then101:                                       ; preds = %if.end98
  %72 = load double* %x.addr, align 8
  %cmp102 = fcmp olt double %72, -2.500000e-01
  br i1 %cmp102, label %if.then104, label %if.else108

if.then104:                                       ; preds = %if.then101
  %73 = load double* %e, align 8
  %74 = load double* %x.addr, align 8
  %add105 = fadd double %74, 5.000000e-01
  %sub106 = fsub double %73, %add105
  %mul107 = fmul double -2.000000e+00, %sub106
  store double %mul107, double* %retval
  br label %return

if.else108:                                       ; preds = %if.then101
  %75 = load double* %x.addr, align 8
  %76 = load double* %e, align 8
  %sub109 = fsub double %75, %76
  %mul110 = fmul double 2.000000e+00, %sub109
  %add111 = fadd double 1.000000e+00, %mul110
  store double %add111, double* %retval
  br label %return

if.end112:                                        ; preds = %if.end98
  %77 = load i32* %k, align 4
  %cmp113 = icmp sle i32 %77, -2
  br i1 %cmp113, label %if.then117, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end112
  %78 = load i32* %k, align 4
  %cmp115 = icmp sgt i32 %78, 56
  br i1 %cmp115, label %if.then117, label %if.end134

if.then117:                                       ; preds = %lor.lhs.false, %if.end112
  %79 = load double* %e, align 8
  %80 = load double* %x.addr, align 8
  %sub118 = fsub double %79, %80
  %sub119 = fsub double 1.000000e+00, %sub118
  store double %sub119, double* %y, align 8
  br label %do.body120

do.body120:                                       ; preds = %if.then117
  %81 = load double* %y, align 8
  %value122 = bitcast %union.ieee_double_shape_type* %gh_u121 to double*
  store double %81, double* %value122, align 4
  %parts123 = bitcast %union.ieee_double_shape_type* %gh_u121 to %struct.anon*
  %msw124 = getelementptr inbounds %struct.anon* %parts123, i32 0, i32 1
  %82 = load i32* %msw124, align 4
  store i32 %82, i32* %high, align 4
  br label %do.end125

do.end125:                                        ; preds = %do.body120
  br label %do.body126

do.body126:                                       ; preds = %do.end125
  %83 = load double* %y, align 8
  %value127 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %83, double* %value127, align 4
  %84 = load i32* %high, align 4
  %85 = load i32* %k, align 4
  %shl = shl i32 %85, 20
  %add128 = add i32 %84, %shl
  %parts129 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw130 = getelementptr inbounds %struct.anon* %parts129, i32 0, i32 1
  store i32 %add128, i32* %msw130, align 4
  %value131 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %86 = load double* %value131, align 4
  store double %86, double* %y, align 8
  br label %do.end132

do.end132:                                        ; preds = %do.body126
  %87 = load double* %y, align 8
  %sub133 = fsub double %87, 1.000000e+00
  store double %sub133, double* %retval
  br label %return

if.end134:                                        ; preds = %lor.lhs.false
  store double 1.000000e+00, double* %t, align 8
  %88 = load i32* %k, align 4
  %cmp135 = icmp slt i32 %88, 20
  br i1 %cmp135, label %if.then137, label %if.else164

if.then137:                                       ; preds = %if.end134
  br label %do.body139

do.body139:                                       ; preds = %if.then137
  %89 = load double* %t, align 8
  %value141 = bitcast %union.ieee_double_shape_type* %sh_u140 to double*
  store double %89, double* %value141, align 4
  %90 = load i32* %k, align 4
  %shr = ashr i32 2097152, %90
  %sub142 = sub nsw i32 1072693248, %shr
  %parts143 = bitcast %union.ieee_double_shape_type* %sh_u140 to %struct.anon*
  %msw144 = getelementptr inbounds %struct.anon* %parts143, i32 0, i32 1
  store i32 %sub142, i32* %msw144, align 4
  %value145 = bitcast %union.ieee_double_shape_type* %sh_u140 to double*
  %91 = load double* %value145, align 4
  store double %91, double* %t, align 8
  br label %do.end146

do.end146:                                        ; preds = %do.body139
  %92 = load double* %t, align 8
  %93 = load double* %e, align 8
  %94 = load double* %x.addr, align 8
  %sub147 = fsub double %93, %94
  %sub148 = fsub double %92, %sub147
  store double %sub148, double* %y, align 8
  br label %do.body149

do.body149:                                       ; preds = %do.end146
  %95 = load double* %y, align 8
  %value151 = bitcast %union.ieee_double_shape_type* %gh_u150 to double*
  store double %95, double* %value151, align 4
  %parts152 = bitcast %union.ieee_double_shape_type* %gh_u150 to %struct.anon*
  %msw153 = getelementptr inbounds %struct.anon* %parts152, i32 0, i32 1
  %96 = load i32* %msw153, align 4
  store i32 %96, i32* %high138, align 4
  br label %do.end154

do.end154:                                        ; preds = %do.body149
  br label %do.body155

do.body155:                                       ; preds = %do.end154
  %97 = load double* %y, align 8
  %value157 = bitcast %union.ieee_double_shape_type* %sh_u156 to double*
  store double %97, double* %value157, align 4
  %98 = load i32* %high138, align 4
  %99 = load i32* %k, align 4
  %shl158 = shl i32 %99, 20
  %add159 = add i32 %98, %shl158
  %parts160 = bitcast %union.ieee_double_shape_type* %sh_u156 to %struct.anon*
  %msw161 = getelementptr inbounds %struct.anon* %parts160, i32 0, i32 1
  store i32 %add159, i32* %msw161, align 4
  %value162 = bitcast %union.ieee_double_shape_type* %sh_u156 to double*
  %100 = load double* %value162, align 4
  store double %100, double* %y, align 8
  br label %do.end163

do.end163:                                        ; preds = %do.body155
  br label %if.end193

if.else164:                                       ; preds = %if.end134
  br label %do.body166

do.body166:                                       ; preds = %if.else164
  %101 = load double* %t, align 8
  %value168 = bitcast %union.ieee_double_shape_type* %sh_u167 to double*
  store double %101, double* %value168, align 4
  %102 = load i32* %k, align 4
  %sub169 = sub nsw i32 1023, %102
  %shl170 = shl i32 %sub169, 20
  %parts171 = bitcast %union.ieee_double_shape_type* %sh_u167 to %struct.anon*
  %msw172 = getelementptr inbounds %struct.anon* %parts171, i32 0, i32 1
  store i32 %shl170, i32* %msw172, align 4
  %value173 = bitcast %union.ieee_double_shape_type* %sh_u167 to double*
  %103 = load double* %value173, align 4
  store double %103, double* %t, align 8
  br label %do.end174

do.end174:                                        ; preds = %do.body166
  %104 = load double* %x.addr, align 8
  %105 = load double* %e, align 8
  %106 = load double* %t, align 8
  %add175 = fadd double %105, %106
  %sub176 = fsub double %104, %add175
  store double %sub176, double* %y, align 8
  %107 = load double* %y, align 8
  %add177 = fadd double %107, 1.000000e+00
  store double %add177, double* %y, align 8
  br label %do.body178

do.body178:                                       ; preds = %do.end174
  %108 = load double* %y, align 8
  %value180 = bitcast %union.ieee_double_shape_type* %gh_u179 to double*
  store double %108, double* %value180, align 4
  %parts181 = bitcast %union.ieee_double_shape_type* %gh_u179 to %struct.anon*
  %msw182 = getelementptr inbounds %struct.anon* %parts181, i32 0, i32 1
  %109 = load i32* %msw182, align 4
  store i32 %109, i32* %high165, align 4
  br label %do.end183

do.end183:                                        ; preds = %do.body178
  br label %do.body184

do.body184:                                       ; preds = %do.end183
  %110 = load double* %y, align 8
  %value186 = bitcast %union.ieee_double_shape_type* %sh_u185 to double*
  store double %110, double* %value186, align 4
  %111 = load i32* %high165, align 4
  %112 = load i32* %k, align 4
  %shl187 = shl i32 %112, 20
  %add188 = add i32 %111, %shl187
  %parts189 = bitcast %union.ieee_double_shape_type* %sh_u185 to %struct.anon*
  %msw190 = getelementptr inbounds %struct.anon* %parts189, i32 0, i32 1
  store i32 %add188, i32* %msw190, align 4
  %value191 = bitcast %union.ieee_double_shape_type* %sh_u185 to double*
  %113 = load double* %value191, align 4
  store double %113, double* %y, align 8
  br label %do.end192

do.end192:                                        ; preds = %do.body184
  br label %if.end193

if.end193:                                        ; preds = %do.end192, %do.end163
  br label %if.end194

if.end194:                                        ; preds = %if.end193
  %114 = load double* %y, align 8
  store double %114, double* %retval
  br label %return

return:                                           ; preds = %if.end194, %do.end132, %if.else108, %if.then104, %if.then94, %if.then83, %if.then55, %if.then26, %if.then19, %cond.end, %if.then14
  %115 = load double* %retval
  ret double %115
}

; Function Attrs: nounwind readnone
define double @fabs(double %x) #3 {
entry:
  %x.addr = alloca double, align 8
  %high = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %high, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %2 = load double* %x.addr, align 8
  %value2 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %2, double* %value2, align 4
  %3 = load i32* %high, align 4
  %and = and i32 %3, 2147483647
  %parts3 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw4 = getelementptr inbounds %struct.anon* %parts3, i32 0, i32 1
  store i32 %and, i32* %msw4, align 4
  %value5 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %4 = load double* %value5, align 4
  store double %4, double* %x.addr, align 8
  br label %do.end6

do.end6:                                          ; preds = %do.body1
  %5 = load double* %x.addr, align 8
  ret double %5
}

; Function Attrs: nounwind
define float @asinhf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %t = alloca float, align 4
  %w = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %add = fadd float %4, %5
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %6, 830472192
  br i1 %cmp1, label %if.then2, label %if.end7

if.then2:                                         ; preds = %if.end
  %7 = load float* %x.addr, align 4
  %add3 = fadd float 0x46293E5940000000, %7
  %cmp4 = fcmp ogt float %add3, 1.000000e+00
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then2
  %8 = load float* %x.addr, align 4
  store float %8, float* %retval
  br label %return

if.end6:                                          ; preds = %if.then2
  br label %if.end7

if.end7:                                          ; preds = %if.end6, %if.end
  %9 = load i32* %ix, align 4
  %cmp8 = icmp sgt i32 %9, 1300234240
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end7
  %10 = load float* %x.addr, align 4
  %call = call float @fabsf(float %10) #6
  %call10 = call float @__ieee754_logf(float %call) #5
  %add11 = fadd float %call10, 0x3FE62E4300000000
  store float %add11, float* %w, align 4
  br label %if.end31

if.else:                                          ; preds = %if.end7
  %11 = load i32* %ix, align 4
  %cmp12 = icmp sgt i32 %11, 1073741824
  br i1 %cmp12, label %if.then13, label %if.else21

if.then13:                                        ; preds = %if.else
  %12 = load float* %x.addr, align 4
  %call14 = call float @fabsf(float %12) #6
  store float %call14, float* %t, align 4
  %13 = load float* %t, align 4
  %mul = fmul float 2.000000e+00, %13
  %14 = load float* %x.addr, align 4
  %15 = load float* %x.addr, align 4
  %mul15 = fmul float %14, %15
  %add16 = fadd float %mul15, 1.000000e+00
  %call17 = call float @__ieee754_sqrtf(float %add16) #5
  %16 = load float* %t, align 4
  %add18 = fadd float %call17, %16
  %div = fdiv float 1.000000e+00, %add18
  %add19 = fadd float %mul, %div
  %call20 = call float @__ieee754_logf(float %add19) #5
  store float %call20, float* %w, align 4
  br label %if.end30

if.else21:                                        ; preds = %if.else
  %17 = load float* %x.addr, align 4
  %18 = load float* %x.addr, align 4
  %mul22 = fmul float %17, %18
  store float %mul22, float* %t, align 4
  %19 = load float* %x.addr, align 4
  %call23 = call float @fabsf(float %19) #6
  %20 = load float* %t, align 4
  %21 = load float* %t, align 4
  %add24 = fadd float 1.000000e+00, %21
  %call25 = call float @__ieee754_sqrtf(float %add24) #5
  %add26 = fadd float 1.000000e+00, %call25
  %div27 = fdiv float %20, %add26
  %add28 = fadd float %call23, %div27
  %call29 = call float @log1pf(float %add28) #4
  store float %call29, float* %w, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.else21, %if.then13
  br label %if.end31

if.end31:                                         ; preds = %if.end30, %if.then9
  %22 = load i32* %hx, align 4
  %cmp32 = icmp sgt i32 %22, 0
  br i1 %cmp32, label %if.then33, label %if.else34

if.then33:                                        ; preds = %if.end31
  %23 = load float* %w, align 4
  store float %23, float* %retval
  br label %return

if.else34:                                        ; preds = %if.end31
  %24 = load float* %w, align 4
  %sub = fsub float -0.000000e+00, %24
  store float %sub, float* %retval
  br label %return

return:                                           ; preds = %if.else34, %if.then33, %if.then5, %if.then
  %25 = load float* %retval
  ret float %25
}

; Function Attrs: nounwind
define float @atanf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %w = alloca float, align 4
  %s1 = alloca float, align 4
  %s2 = alloca float, align 4
  %z = alloca float, align 4
  %ix = alloca i32, align 4
  %hx = alloca i32, align 4
  %id = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1350565888
  br i1 %cmp, label %if.then, label %if.end7

if.then:                                          ; preds = %do.end
  %4 = load i32* %ix, align 4
  %cmp1 = icmp sgt i32 %4, 2139095040
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load float* %x.addr, align 4
  %6 = load float* %x.addr, align 4
  %add = fadd float %5, %6
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %7 = load i32* %hx, align 4
  %cmp3 = icmp sgt i32 %7, 0
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  %8 = load float* getelementptr inbounds ([4 x float]* @atanhi112, i32 0, i32 3), align 4
  %9 = load float* getelementptr inbounds ([4 x float]* @atanlo113, i32 0, i32 3), align 4
  %add5 = fadd float %8, %9
  store float %add5, float* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %10 = load float* getelementptr inbounds ([4 x float]* @atanhi112, i32 0, i32 3), align 4
  %sub = fsub float -0.000000e+00, %10
  %11 = load float* getelementptr inbounds ([4 x float]* @atanlo113, i32 0, i32 3), align 4
  %sub6 = fsub float %sub, %11
  store float %sub6, float* %retval
  br label %return

if.end7:                                          ; preds = %do.end
  %12 = load i32* %ix, align 4
  %cmp8 = icmp slt i32 %12, 1054867456
  br i1 %cmp8, label %if.then9, label %if.else17

if.then9:                                         ; preds = %if.end7
  %13 = load i32* %ix, align 4
  %cmp10 = icmp slt i32 %13, 822083584
  br i1 %cmp10, label %if.then11, label %if.end16

if.then11:                                        ; preds = %if.then9
  %14 = load float* %x.addr, align 4
  %add12 = fadd float 0x46293E5940000000, %14
  %cmp13 = fcmp ogt float %add12, 1.000000e+00
  br i1 %cmp13, label %if.then14, label %if.end15

if.then14:                                        ; preds = %if.then11
  %15 = load float* %x.addr, align 4
  store float %15, float* %retval
  br label %return

if.end15:                                         ; preds = %if.then11
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %if.then9
  store i32 -1, i32* %id, align 4
  br label %if.end40

if.else17:                                        ; preds = %if.end7
  %16 = load float* %x.addr, align 4
  %call = call float @fabsf(float %16) #6
  store float %call, float* %x.addr, align 4
  %17 = load i32* %ix, align 4
  %cmp18 = icmp slt i32 %17, 1066926080
  br i1 %cmp18, label %if.then19, label %if.else29

if.then19:                                        ; preds = %if.else17
  %18 = load i32* %ix, align 4
  %cmp20 = icmp slt i32 %18, 1060110336
  br i1 %cmp20, label %if.then21, label %if.else24

if.then21:                                        ; preds = %if.then19
  store i32 0, i32* %id, align 4
  %19 = load float* %x.addr, align 4
  %mul = fmul float 2.000000e+00, %19
  %sub22 = fsub float %mul, 1.000000e+00
  %20 = load float* %x.addr, align 4
  %add23 = fadd float 2.000000e+00, %20
  %div = fdiv float %sub22, %add23
  store float %div, float* %x.addr, align 4
  br label %if.end28

if.else24:                                        ; preds = %if.then19
  store i32 1, i32* %id, align 4
  %21 = load float* %x.addr, align 4
  %sub25 = fsub float %21, 1.000000e+00
  %22 = load float* %x.addr, align 4
  %add26 = fadd float %22, 1.000000e+00
  %div27 = fdiv float %sub25, %add26
  store float %div27, float* %x.addr, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.else24, %if.then21
  br label %if.end39

if.else29:                                        ; preds = %if.else17
  %23 = load i32* %ix, align 4
  %cmp30 = icmp slt i32 %23, 1075576832
  br i1 %cmp30, label %if.then31, label %if.else36

if.then31:                                        ; preds = %if.else29
  store i32 2, i32* %id, align 4
  %24 = load float* %x.addr, align 4
  %sub32 = fsub float %24, 1.500000e+00
  %25 = load float* %x.addr, align 4
  %mul33 = fmul float 1.500000e+00, %25
  %add34 = fadd float 1.000000e+00, %mul33
  %div35 = fdiv float %sub32, %add34
  store float %div35, float* %x.addr, align 4
  br label %if.end38

if.else36:                                        ; preds = %if.else29
  store i32 3, i32* %id, align 4
  %26 = load float* %x.addr, align 4
  %div37 = fdiv float -1.000000e+00, %26
  store float %div37, float* %x.addr, align 4
  br label %if.end38

if.end38:                                         ; preds = %if.else36, %if.then31
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.end28
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end16
  %27 = load float* %x.addr, align 4
  %28 = load float* %x.addr, align 4
  %mul41 = fmul float %27, %28
  store float %mul41, float* %z, align 4
  %29 = load float* %z, align 4
  %30 = load float* %z, align 4
  %mul42 = fmul float %29, %30
  store float %mul42, float* %w, align 4
  %31 = load float* %z, align 4
  %32 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 0), align 4
  %33 = load float* %w, align 4
  %34 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 2), align 4
  %35 = load float* %w, align 4
  %36 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 4), align 4
  %37 = load float* %w, align 4
  %38 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 6), align 4
  %39 = load float* %w, align 4
  %40 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 8), align 4
  %41 = load float* %w, align 4
  %42 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 10), align 4
  %mul43 = fmul float %41, %42
  %add44 = fadd float %40, %mul43
  %mul45 = fmul float %39, %add44
  %add46 = fadd float %38, %mul45
  %mul47 = fmul float %37, %add46
  %add48 = fadd float %36, %mul47
  %mul49 = fmul float %35, %add48
  %add50 = fadd float %34, %mul49
  %mul51 = fmul float %33, %add50
  %add52 = fadd float %32, %mul51
  %mul53 = fmul float %31, %add52
  store float %mul53, float* %s1, align 4
  %43 = load float* %w, align 4
  %44 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 1), align 4
  %45 = load float* %w, align 4
  %46 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 3), align 4
  %47 = load float* %w, align 4
  %48 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 5), align 4
  %49 = load float* %w, align 4
  %50 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 7), align 4
  %51 = load float* %w, align 4
  %52 = load float* getelementptr inbounds ([11 x float]* @aT114, i32 0, i32 9), align 4
  %mul54 = fmul float %51, %52
  %add55 = fadd float %50, %mul54
  %mul56 = fmul float %49, %add55
  %add57 = fadd float %48, %mul56
  %mul58 = fmul float %47, %add57
  %add59 = fadd float %46, %mul58
  %mul60 = fmul float %45, %add59
  %add61 = fadd float %44, %mul60
  %mul62 = fmul float %43, %add61
  store float %mul62, float* %s2, align 4
  %53 = load i32* %id, align 4
  %cmp63 = icmp slt i32 %53, 0
  br i1 %cmp63, label %if.then64, label %if.else68

if.then64:                                        ; preds = %if.end40
  %54 = load float* %x.addr, align 4
  %55 = load float* %x.addr, align 4
  %56 = load float* %s1, align 4
  %57 = load float* %s2, align 4
  %add65 = fadd float %56, %57
  %mul66 = fmul float %55, %add65
  %sub67 = fsub float %54, %mul66
  store float %sub67, float* %retval
  br label %return

if.else68:                                        ; preds = %if.end40
  %58 = load i32* %id, align 4
  %arrayidx = getelementptr inbounds [4 x float]* @atanhi112, i32 0, i32 %58
  %59 = load float* %arrayidx, align 4
  %60 = load float* %x.addr, align 4
  %61 = load float* %s1, align 4
  %62 = load float* %s2, align 4
  %add69 = fadd float %61, %62
  %mul70 = fmul float %60, %add69
  %63 = load i32* %id, align 4
  %arrayidx71 = getelementptr inbounds [4 x float]* @atanlo113, i32 0, i32 %63
  %64 = load float* %arrayidx71, align 4
  %sub72 = fsub float %mul70, %64
  %65 = load float* %x.addr, align 4
  %sub73 = fsub float %sub72, %65
  %sub74 = fsub float %59, %sub73
  store float %sub74, float* %z, align 4
  %66 = load i32* %hx, align 4
  %cmp75 = icmp slt i32 %66, 0
  br i1 %cmp75, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.else68
  %67 = load float* %z, align 4
  %sub76 = fsub float -0.000000e+00, %67
  br label %cond.end

cond.false:                                       ; preds = %if.else68
  %68 = load float* %z, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %sub76, %cond.true ], [ %68, %cond.false ]
  store float %cond, float* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then64, %if.then14, %if.else, %if.then4, %if.then2
  %69 = load float* %retval
  ret float %69
}

; Function Attrs: nounwind readnone
define float @ceilf(float %x) #3 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %i0 = alloca i32, align 4
  %j0 = alloca i32, align 4
  %i = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %i0, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %i0, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %shr = lshr i32 %3, 23
  %sub = sub i32 %shr, 127
  store i32 %sub, i32* %j0, align 4
  %4 = load i32* %j0, align 4
  %cmp = icmp slt i32 %4, 23
  br i1 %cmp, label %if.then, label %if.else28

if.then:                                          ; preds = %do.end
  %5 = load i32* %j0, align 4
  %cmp1 = icmp slt i32 %5, 0
  br i1 %cmp1, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %6 = load float* %x.addr, align 4
  %add = fadd float 0x46293E5940000000, %6
  %cmp3 = fcmp ogt float %add, 0.000000e+00
  br i1 %cmp3, label %if.then4, label %if.end10

if.then4:                                         ; preds = %if.then2
  %7 = load i32* %i0, align 4
  %cmp5 = icmp slt i32 %7, 0
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  store i32 -2147483648, i32* %i0, align 4
  br label %if.end9

if.else:                                          ; preds = %if.then4
  %8 = load i32* %ix, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.end, label %if.then8

if.then8:                                         ; preds = %if.else
  store i32 1065353216, i32* %i0, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then2
  br label %if.end27

if.else11:                                        ; preds = %if.then
  %9 = load i32* %j0, align 4
  %shr12 = ashr i32 8388607, %9
  store i32 %shr12, i32* %i, align 4
  %10 = load i32* %i0, align 4
  %11 = load i32* %i, align 4
  %and13 = and i32 %10, %11
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.else11
  %12 = load float* %x.addr, align 4
  store float %12, float* %retval
  br label %return

if.end16:                                         ; preds = %if.else11
  %13 = load float* %x.addr, align 4
  %add17 = fadd float 0x46293E5940000000, %13
  %cmp18 = fcmp ogt float %add17, 0.000000e+00
  br i1 %cmp18, label %if.then19, label %if.end26

if.then19:                                        ; preds = %if.end16
  %14 = load i32* %i0, align 4
  %cmp20 = icmp sgt i32 %14, 0
  br i1 %cmp20, label %if.then21, label %if.end24

if.then21:                                        ; preds = %if.then19
  %15 = load i32* %j0, align 4
  %shr22 = ashr i32 8388608, %15
  %16 = load i32* %i0, align 4
  %add23 = add nsw i32 %16, %shr22
  store i32 %add23, i32* %i0, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then21, %if.then19
  %17 = load i32* %i, align 4
  %neg = xor i32 %17, -1
  %18 = load i32* %i0, align 4
  %and25 = and i32 %18, %neg
  store i32 %and25, i32* %i0, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.end24, %if.end16
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end10
  br label %if.end33

if.else28:                                        ; preds = %do.end
  %19 = load i32* %ix, align 4
  %cmp29 = icmp ult i32 %19, 2139095040
  br i1 %cmp29, label %if.else32, label %if.then30

if.then30:                                        ; preds = %if.else28
  %20 = load float* %x.addr, align 4
  %21 = load float* %x.addr, align 4
  %add31 = fadd float %20, %21
  store float %add31, float* %retval
  br label %return

if.else32:                                        ; preds = %if.else28
  %22 = load float* %x.addr, align 4
  store float %22, float* %retval
  br label %return

if.end33:                                         ; preds = %if.end27
  br label %do.body34

do.body34:                                        ; preds = %if.end33
  %23 = load i32* %i0, align 4
  %word35 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %23, i32* %word35, align 4
  %value36 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %24 = load float* %value36, align 4
  store float %24, float* %x.addr, align 4
  br label %do.end37

do.end37:                                         ; preds = %do.body34
  %25 = load float* %x.addr, align 4
  store float %25, float* %retval
  br label %return

return:                                           ; preds = %do.end37, %if.else32, %if.then30, %if.then15
  %26 = load float* %retval
  ret float %26
}

; Function Attrs: nounwind
define float @cosf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y = alloca [2 x float], align 4
  %z = alloca float, align 4
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float 0.000000e+00, float* %z, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sle i32 %3, 1061752792
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %z, align 4
  %call = call float @__kernel_cosf(float %4, float %5) #5
  store float %call, float* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %6, 2139095040
  br i1 %cmp1, label %if.else3, label %if.then2

if.then2:                                         ; preds = %if.else
  %7 = load float* %x.addr, align 4
  %8 = load float* %x.addr, align 4
  %sub = fsub float %7, %8
  store float %sub, float* %retval
  br label %return

if.else3:                                         ; preds = %if.else
  %9 = load float* %x.addr, align 4
  %arraydecay = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2f(float %9, float* %arraydecay) #5
  store i32 %call4, i32* %n, align 4
  %10 = load i32* %n, align 4
  %and5 = and i32 %10, 3
  switch i32 %and5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb8
    i32 2, label %sw.bb13
  ]

sw.bb:                                            ; preds = %if.else3
  %arrayidx = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %11 = load float* %arrayidx, align 4
  %arrayidx6 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %12 = load float* %arrayidx6, align 4
  %call7 = call float @__kernel_cosf(float %11, float %12) #5
  store float %call7, float* %retval
  br label %return

sw.bb8:                                           ; preds = %if.else3
  %arrayidx9 = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %13 = load float* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %14 = load float* %arrayidx10, align 4
  %call11 = call float @__kernel_sinf(float %13, float %14, i32 1) #5
  %sub12 = fsub float -0.000000e+00, %call11
  store float %sub12, float* %retval
  br label %return

sw.bb13:                                          ; preds = %if.else3
  %arrayidx14 = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %15 = load float* %arrayidx14, align 4
  %arrayidx15 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %16 = load float* %arrayidx15, align 4
  %call16 = call float @__kernel_cosf(float %15, float %16) #5
  %sub17 = fsub float -0.000000e+00, %call16
  store float %sub17, float* %retval
  br label %return

sw.default:                                       ; preds = %if.else3
  %arrayidx18 = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %17 = load float* %arrayidx18, align 4
  %arrayidx19 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %18 = load float* %arrayidx19, align 4
  %call20 = call float @__kernel_sinf(float %17, float %18, i32 1) #5
  store float %call20, float* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb13, %sw.bb8, %sw.bb, %if.then2, %if.then
  %19 = load float* %retval
  ret float %19
}

; Function Attrs: nounwind
define float @erff(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %i = alloca i32, align 4
  %R = alloca float, align 4
  %S = alloca float, align 4
  %P = alloca float, align 4
  %Q = alloca float, align 4
  %s = alloca float, align 4
  %y = alloca float, align 4
  %z = alloca float, align 4
  %r = alloca float, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u149 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load i32* %hx, align 4
  %shr = lshr i32 %4, 31
  %shl = shl i32 %shr, 1
  store i32 %shl, i32* %i, align 4
  %5 = load i32* %i, align 4
  %sub = sub nsw i32 1, %5
  %conv = sitofp i32 %sub to float
  %6 = load float* %x.addr, align 4
  %div = fdiv float 1.000000e+00, %6
  %add = fadd float %conv, %div
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %7, 1062731776
  br i1 %cmp1, label %if.then3, label %if.end39

if.then3:                                         ; preds = %if.end
  %8 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %8, 830472192
  br i1 %cmp4, label %if.then6, label %if.end16

if.then6:                                         ; preds = %if.then3
  %9 = load i32* %ix, align 4
  %cmp7 = icmp slt i32 %9, 67108864
  br i1 %cmp7, label %if.then9, label %if.end13

if.then9:                                         ; preds = %if.then6
  %10 = load float* %x.addr, align 4
  %mul = fmul float 8.000000e+00, %10
  %11 = load float* %x.addr, align 4
  %mul10 = fmul float 0x3FF06EBA80000000, %11
  %add11 = fadd float %mul, %mul10
  %mul12 = fmul float 1.250000e-01, %add11
  store float %mul12, float* %retval
  br label %return

if.end13:                                         ; preds = %if.then6
  %12 = load float* %x.addr, align 4
  %13 = load float* %x.addr, align 4
  %mul14 = fmul float 0x3FC06EBA80000000, %13
  %add15 = fadd float %12, %mul14
  store float %add15, float* %retval
  br label %return

if.end16:                                         ; preds = %if.then3
  %14 = load float* %x.addr, align 4
  %15 = load float* %x.addr, align 4
  %mul17 = fmul float %14, %15
  store float %mul17, float* %z, align 4
  %16 = load float* %z, align 4
  %17 = load float* %z, align 4
  %18 = load float* %z, align 4
  %19 = load float* %z, align 4
  %mul18 = fmul float %19, 0xBEF8EAD620000000
  %add19 = fadd float 0xBF77A29120000000, %mul18
  %mul20 = fmul float %18, %add19
  %add21 = fadd float 0xBF9D2A51E0000000, %mul20
  %mul22 = fmul float %17, %add21
  %add23 = fadd float 0xBFD4CD7D60000000, %mul22
  %mul24 = fmul float %16, %add23
  %add25 = fadd float 0x3FC06EBA80000000, %mul24
  store float %add25, float* %r, align 4
  %20 = load float* %z, align 4
  %21 = load float* %z, align 4
  %22 = load float* %z, align 4
  %23 = load float* %z, align 4
  %24 = load float* %z, align 4
  %mul26 = fmul float %24, 0xBED09C4340000000
  %add27 = fadd float 0x3F215DC920000000, %mul26
  %mul28 = fmul float %23, %add27
  %add29 = fadd float 0x3F74D022C0000000, %mul28
  %mul30 = fmul float %22, %add29
  %add31 = fadd float 0x3FB0A54C60000000, %mul30
  %mul32 = fmul float %21, %add31
  %add33 = fadd float 0x3FD97779C0000000, %mul32
  %mul34 = fmul float %20, %add33
  %add35 = fadd float 1.000000e+00, %mul34
  store float %add35, float* %s, align 4
  %25 = load float* %r, align 4
  %26 = load float* %s, align 4
  %div36 = fdiv float %25, %26
  store float %div36, float* %y, align 4
  %27 = load float* %x.addr, align 4
  %28 = load float* %x.addr, align 4
  %29 = load float* %y, align 4
  %mul37 = fmul float %28, %29
  %add38 = fadd float %27, %mul37
  store float %add38, float* %retval
  br label %return

if.end39:                                         ; preds = %if.end
  %30 = load i32* %ix, align 4
  %cmp40 = icmp slt i32 %30, 1067450368
  br i1 %cmp40, label %if.then42, label %if.end75

if.then42:                                        ; preds = %if.end39
  %31 = load float* %x.addr, align 4
  %call = call float @fabsf(float %31) #6
  %sub43 = fsub float %call, 1.000000e+00
  store float %sub43, float* %s, align 4
  %32 = load float* %s, align 4
  %33 = load float* %s, align 4
  %34 = load float* %s, align 4
  %35 = load float* %s, align 4
  %36 = load float* %s, align 4
  %37 = load float* %s, align 4
  %mul44 = fmul float %37, 0xBF61BF3800000000
  %add45 = fadd float 0x3FA22A3660000000, %mul44
  %mul46 = fmul float %36, %add45
  %add47 = fadd float 0xBFBC639840000000, %mul46
  %mul48 = fmul float %35, %add47
  %add49 = fadd float 0x3FD45FCA80000000, %mul48
  %mul50 = fmul float %34, %add49
  %add51 = fadd float 0xBFD7D24100000000, %mul50
  %mul52 = fmul float %33, %add51
  %add53 = fadd float 0x3FDA8D00A0000000, %mul52
  %mul54 = fmul float %32, %add53
  %add55 = fadd float 0xBF6359B8C0000000, %mul54
  store float %add55, float* %P, align 4
  %38 = load float* %s, align 4
  %39 = load float* %s, align 4
  %40 = load float* %s, align 4
  %41 = load float* %s, align 4
  %42 = load float* %s, align 4
  %43 = load float* %s, align 4
  %mul56 = fmul float %43, 0x3F888B5460000000
  %add57 = fadd float 0x3F8BEDC260000000, %mul56
  %mul58 = fmul float %42, %add57
  %add59 = fadd float 0x3FC02660E0000000, %mul58
  %mul60 = fmul float %41, %add59
  %add61 = fadd float 0x3FB2635CE0000000, %mul60
  %mul62 = fmul float %40, %add61
  %add63 = fadd float 0x3FE14AF0A0000000, %mul62
  %mul64 = fmul float %39, %add63
  %add65 = fadd float 0x3FBB3E6620000000, %mul64
  %mul66 = fmul float %38, %add65
  %add67 = fadd float 1.000000e+00, %mul66
  store float %add67, float* %Q, align 4
  %44 = load i32* %hx, align 4
  %cmp68 = icmp sge i32 %44, 0
  br i1 %cmp68, label %if.then70, label %if.else

if.then70:                                        ; preds = %if.then42
  %45 = load float* %P, align 4
  %46 = load float* %Q, align 4
  %div71 = fdiv float %45, %46
  %add72 = fadd float 0x3FEB0AC160000000, %div71
  store float %add72, float* %retval
  br label %return

if.else:                                          ; preds = %if.then42
  %47 = load float* %P, align 4
  %48 = load float* %Q, align 4
  %div73 = fdiv float %47, %48
  %sub74 = fsub float 0xBFEB0AC160000000, %div73
  store float %sub74, float* %retval
  br label %return

if.end75:                                         ; preds = %if.end39
  %49 = load i32* %ix, align 4
  %cmp76 = icmp sge i32 %49, 1086324736
  br i1 %cmp76, label %if.then78, label %if.end83

if.then78:                                        ; preds = %if.end75
  %50 = load i32* %hx, align 4
  %cmp79 = icmp sge i32 %50, 0
  br i1 %cmp79, label %if.then81, label %if.else82

if.then81:                                        ; preds = %if.then78
  store float 1.000000e+00, float* %retval
  br label %return

if.else82:                                        ; preds = %if.then78
  store float -1.000000e+00, float* %retval
  br label %return

if.end83:                                         ; preds = %if.end75
  %51 = load float* %x.addr, align 4
  %call84 = call float @fabsf(float %51) #6
  store float %call84, float* %x.addr, align 4
  %52 = load float* %x.addr, align 4
  %53 = load float* %x.addr, align 4
  %mul85 = fmul float %52, %53
  %div86 = fdiv float 1.000000e+00, %mul85
  store float %div86, float* %s, align 4
  %54 = load i32* %ix, align 4
  %cmp87 = icmp slt i32 %54, 1077336942
  br i1 %cmp87, label %if.then89, label %if.else120

if.then89:                                        ; preds = %if.end83
  %55 = load float* %s, align 4
  %56 = load float* %s, align 4
  %57 = load float* %s, align 4
  %58 = load float* %s, align 4
  %59 = load float* %s, align 4
  %60 = load float* %s, align 4
  %61 = load float* %s, align 4
  %mul90 = fmul float %61, 0xC023A0EFC0000000
  %add91 = fadd float 0xC054526560000000, %mul90
  %mul92 = fmul float %60, %add91
  %add93 = fadd float 0xC067135CE0000000, %mul92
  %mul94 = fmul float %59, %add93
  %add95 = fadd float 0xC0644CB180000000, %mul94
  %mul96 = fmul float %58, %add95
  %add97 = fadd float 0xC04F300AE0000000, %mul96
  %mul98 = fmul float %57, %add97
  %add99 = fadd float 0xC0251E0440000000, %mul98
  %mul100 = fmul float %56, %add99
  %add101 = fadd float 0xBFE63416E0000000, %mul100
  %mul102 = fmul float %55, %add101
  %add103 = fadd float 0xBF84341260000000, %mul102
  store float %add103, float* %R, align 4
  %62 = load float* %s, align 4
  %63 = load float* %s, align 4
  %64 = load float* %s, align 4
  %65 = load float* %s, align 4
  %66 = load float* %s, align 4
  %67 = load float* %s, align 4
  %68 = load float* %s, align 4
  %69 = load float* %s, align 4
  %mul104 = fmul float %69, 0xBFAEEFF2E0000000
  %add105 = fadd float 0x401A47EF80000000, %mul104
  %mul106 = fmul float %68, %add105
  %add107 = fadd float 0x405B28A3E0000000, %mul106
  %mul108 = fmul float %67, %add107
  %add109 = fadd float 0x407AD02160000000, %mul108
  %mul110 = fmul float %66, %add109
  %add111 = fadd float 0x40842B1920000000, %mul110
  %mul112 = fmul float %65, %add111
  %add113 = fadd float 0x407B290DE0000000, %mul112
  %mul114 = fmul float %64, %add113
  %add115 = fadd float 0x4061350C60000000, %mul114
  %mul116 = fmul float %63, %add115
  %add117 = fadd float 0x4033A6B9C0000000, %mul116
  %mul118 = fmul float %62, %add117
  %add119 = fadd float 1.000000e+00, %mul118
  store float %add119, float* %S, align 4
  br label %if.end147

if.else120:                                       ; preds = %if.end83
  %70 = load float* %s, align 4
  %71 = load float* %s, align 4
  %72 = load float* %s, align 4
  %73 = load float* %s, align 4
  %74 = load float* %s, align 4
  %75 = load float* %s, align 4
  %mul121 = fmul float %75, 0xC07E384EA0000000
  %add122 = fadd float 0xC090046160000000, %mul121
  %mul123 = fmul float %74, %add122
  %add124 = fadd float 0xC083EC8820000000, %mul123
  %mul125 = fmul float %73, %add124
  %add126 = fadd float 0xC064145D40000000, %mul125
  %mul127 = fmul float %72, %add126
  %add128 = fadd float 0xC031C20960000000, %mul127
  %mul129 = fmul float %71, %add128
  %add130 = fadd float 0xBFE993BA80000000, %mul129
  %mul131 = fmul float %70, %add130
  %add132 = fadd float 0xBF84341240000000, %mul131
  store float %add132, float* %R, align 4
  %76 = load float* %s, align 4
  %77 = load float* %s, align 4
  %78 = load float* %s, align 4
  %79 = load float* %s, align 4
  %80 = load float* %s, align 4
  %81 = load float* %s, align 4
  %82 = load float* %s, align 4
  %mul133 = fmul float %82, 0xC03670E240000000
  %add134 = fadd float 0x407DA874E0000000, %mul133
  %mul135 = fmul float %81, %add134
  %add136 = fadd float 0x40A3F219C0000000, %mul135
  %mul137 = fmul float %80, %add136
  %add138 = fadd float 0x40A8FFB760000000, %mul137
  %mul139 = fmul float %79, %add138
  %add140 = fadd float 0x409802EB20000000, %mul139
  %mul141 = fmul float %78, %add140
  %add142 = fadd float 0x40745CAE20000000, %mul141
  %mul143 = fmul float %77, %add142
  %add144 = fadd float 0x403E568B20000000, %mul143
  %mul145 = fmul float %76, %add144
  %add146 = fadd float 1.000000e+00, %mul145
  store float %add146, float* %S, align 4
  br label %if.end147

if.end147:                                        ; preds = %if.else120, %if.then89
  br label %do.body148

do.body148:                                       ; preds = %if.end147
  %83 = load float* %x.addr, align 4
  %value150 = bitcast %union.ieee_float_shape_type* %gf_u149 to float*
  store float %83, float* %value150, align 4
  %word151 = bitcast %union.ieee_float_shape_type* %gf_u149 to i32*
  %84 = load i32* %word151, align 4
  store i32 %84, i32* %ix, align 4
  br label %do.end152

do.end152:                                        ; preds = %do.body148
  br label %do.body153

do.body153:                                       ; preds = %do.end152
  %85 = load i32* %ix, align 4
  %and154 = and i32 %85, -4096
  %word155 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %and154, i32* %word155, align 4
  %value156 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %86 = load float* %value156, align 4
  store float %86, float* %z, align 4
  br label %do.end157

do.end157:                                        ; preds = %do.body153
  %87 = load float* %z, align 4
  %sub158 = fsub float -0.000000e+00, %87
  %88 = load float* %z, align 4
  %mul159 = fmul float %sub158, %88
  %sub160 = fsub float %mul159, 5.625000e-01
  %call161 = call float @__ieee754_expf(float %sub160) #5
  %89 = load float* %z, align 4
  %90 = load float* %x.addr, align 4
  %sub162 = fsub float %89, %90
  %91 = load float* %z, align 4
  %92 = load float* %x.addr, align 4
  %add163 = fadd float %91, %92
  %mul164 = fmul float %sub162, %add163
  %93 = load float* %R, align 4
  %94 = load float* %S, align 4
  %div165 = fdiv float %93, %94
  %add166 = fadd float %mul164, %div165
  %call167 = call float @__ieee754_expf(float %add166) #5
  %mul168 = fmul float %call161, %call167
  store float %mul168, float* %r, align 4
  %95 = load i32* %hx, align 4
  %cmp169 = icmp sge i32 %95, 0
  br i1 %cmp169, label %if.then171, label %if.else174

if.then171:                                       ; preds = %do.end157
  %96 = load float* %r, align 4
  %97 = load float* %x.addr, align 4
  %div172 = fdiv float %96, %97
  %sub173 = fsub float 1.000000e+00, %div172
  store float %sub173, float* %retval
  br label %return

if.else174:                                       ; preds = %do.end157
  %98 = load float* %r, align 4
  %99 = load float* %x.addr, align 4
  %div175 = fdiv float %98, %99
  %sub176 = fsub float %div175, 1.000000e+00
  store float %sub176, float* %retval
  br label %return

return:                                           ; preds = %if.else174, %if.then171, %if.else82, %if.then81, %if.else, %if.then70, %if.end16, %if.end13, %if.then9, %if.then
  %100 = load float* %retval
  ret float %100
}

; Function Attrs: nounwind
define float @erfcf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %R = alloca float, align 4
  %S = alloca float, align 4
  %P = alloca float, align 4
  %Q = alloca float, align 4
  %s = alloca float, align 4
  %y = alloca float, align 4
  %z = alloca float, align 4
  %r = alloca float, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u150 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load i32* %hx, align 4
  %shr = lshr i32 %4, 31
  %shl = shl i32 %shr, 1
  %conv = uitofp i32 %shl to float
  %5 = load float* %x.addr, align 4
  %div = fdiv float 1.000000e+00, %5
  %add = fadd float %conv, %div
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %6, 1062731776
  br i1 %cmp1, label %if.then3, label %if.end37

if.then3:                                         ; preds = %if.end
  %7 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %7, 595591168
  br i1 %cmp4, label %if.then6, label %if.end7

if.then6:                                         ; preds = %if.then3
  %8 = load float* %x.addr, align 4
  %sub = fsub float 1.000000e+00, %8
  store float %sub, float* %retval
  br label %return

if.end7:                                          ; preds = %if.then3
  %9 = load float* %x.addr, align 4
  %10 = load float* %x.addr, align 4
  %mul = fmul float %9, %10
  store float %mul, float* %z, align 4
  %11 = load float* %z, align 4
  %12 = load float* %z, align 4
  %13 = load float* %z, align 4
  %14 = load float* %z, align 4
  %mul8 = fmul float %14, 0xBEF8EAD620000000
  %add9 = fadd float 0xBF77A29120000000, %mul8
  %mul10 = fmul float %13, %add9
  %add11 = fadd float 0xBF9D2A51E0000000, %mul10
  %mul12 = fmul float %12, %add11
  %add13 = fadd float 0xBFD4CD7D60000000, %mul12
  %mul14 = fmul float %11, %add13
  %add15 = fadd float 0x3FC06EBA80000000, %mul14
  store float %add15, float* %r, align 4
  %15 = load float* %z, align 4
  %16 = load float* %z, align 4
  %17 = load float* %z, align 4
  %18 = load float* %z, align 4
  %19 = load float* %z, align 4
  %mul16 = fmul float %19, 0xBED09C4340000000
  %add17 = fadd float 0x3F215DC920000000, %mul16
  %mul18 = fmul float %18, %add17
  %add19 = fadd float 0x3F74D022C0000000, %mul18
  %mul20 = fmul float %17, %add19
  %add21 = fadd float 0x3FB0A54C60000000, %mul20
  %mul22 = fmul float %16, %add21
  %add23 = fadd float 0x3FD97779C0000000, %mul22
  %mul24 = fmul float %15, %add23
  %add25 = fadd float 1.000000e+00, %mul24
  store float %add25, float* %s, align 4
  %20 = load float* %r, align 4
  %21 = load float* %s, align 4
  %div26 = fdiv float %20, %21
  store float %div26, float* %y, align 4
  %22 = load i32* %hx, align 4
  %cmp27 = icmp slt i32 %22, 1048576000
  br i1 %cmp27, label %if.then29, label %if.else

if.then29:                                        ; preds = %if.end7
  %23 = load float* %x.addr, align 4
  %24 = load float* %x.addr, align 4
  %25 = load float* %y, align 4
  %mul30 = fmul float %24, %25
  %add31 = fadd float %23, %mul30
  %sub32 = fsub float 1.000000e+00, %add31
  store float %sub32, float* %retval
  br label %return

if.else:                                          ; preds = %if.end7
  %26 = load float* %x.addr, align 4
  %27 = load float* %y, align 4
  %mul33 = fmul float %26, %27
  store float %mul33, float* %r, align 4
  %28 = load float* %x.addr, align 4
  %sub34 = fsub float %28, 5.000000e-01
  %29 = load float* %r, align 4
  %add35 = fadd float %29, %sub34
  store float %add35, float* %r, align 4
  %30 = load float* %r, align 4
  %sub36 = fsub float 5.000000e-01, %30
  store float %sub36, float* %retval
  br label %return

if.end37:                                         ; preds = %if.end
  %31 = load i32* %ix, align 4
  %cmp38 = icmp slt i32 %31, 1067450368
  br i1 %cmp38, label %if.then40, label %if.end75

if.then40:                                        ; preds = %if.end37
  %32 = load float* %x.addr, align 4
  %call = call float @fabsf(float %32) #6
  %sub41 = fsub float %call, 1.000000e+00
  store float %sub41, float* %s, align 4
  %33 = load float* %s, align 4
  %34 = load float* %s, align 4
  %35 = load float* %s, align 4
  %36 = load float* %s, align 4
  %37 = load float* %s, align 4
  %38 = load float* %s, align 4
  %mul42 = fmul float %38, 0xBF61BF3800000000
  %add43 = fadd float 0x3FA22A3660000000, %mul42
  %mul44 = fmul float %37, %add43
  %add45 = fadd float 0xBFBC639840000000, %mul44
  %mul46 = fmul float %36, %add45
  %add47 = fadd float 0x3FD45FCA80000000, %mul46
  %mul48 = fmul float %35, %add47
  %add49 = fadd float 0xBFD7D24100000000, %mul48
  %mul50 = fmul float %34, %add49
  %add51 = fadd float 0x3FDA8D00A0000000, %mul50
  %mul52 = fmul float %33, %add51
  %add53 = fadd float 0xBF6359B8C0000000, %mul52
  store float %add53, float* %P, align 4
  %39 = load float* %s, align 4
  %40 = load float* %s, align 4
  %41 = load float* %s, align 4
  %42 = load float* %s, align 4
  %43 = load float* %s, align 4
  %44 = load float* %s, align 4
  %mul54 = fmul float %44, 0x3F888B5460000000
  %add55 = fadd float 0x3F8BEDC260000000, %mul54
  %mul56 = fmul float %43, %add55
  %add57 = fadd float 0x3FC02660E0000000, %mul56
  %mul58 = fmul float %42, %add57
  %add59 = fadd float 0x3FB2635CE0000000, %mul58
  %mul60 = fmul float %41, %add59
  %add61 = fadd float 0x3FE14AF0A0000000, %mul60
  %mul62 = fmul float %40, %add61
  %add63 = fadd float 0x3FBB3E6620000000, %mul62
  %mul64 = fmul float %39, %add63
  %add65 = fadd float 1.000000e+00, %mul64
  store float %add65, float* %Q, align 4
  %45 = load i32* %hx, align 4
  %cmp66 = icmp sge i32 %45, 0
  br i1 %cmp66, label %if.then68, label %if.else71

if.then68:                                        ; preds = %if.then40
  store float 0x3FC3D4FA80000000, float* %z, align 4
  %46 = load float* %z, align 4
  %47 = load float* %P, align 4
  %48 = load float* %Q, align 4
  %div69 = fdiv float %47, %48
  %sub70 = fsub float %46, %div69
  store float %sub70, float* %retval
  br label %return

if.else71:                                        ; preds = %if.then40
  %49 = load float* %P, align 4
  %50 = load float* %Q, align 4
  %div72 = fdiv float %49, %50
  %add73 = fadd float 0x3FEB0AC160000000, %div72
  store float %add73, float* %z, align 4
  %51 = load float* %z, align 4
  %add74 = fadd float 1.000000e+00, %51
  store float %add74, float* %retval
  br label %return

if.end75:                                         ; preds = %if.end37
  %52 = load i32* %ix, align 4
  %cmp76 = icmp slt i32 %52, 1105199104
  br i1 %cmp76, label %if.then78, label %if.else177

if.then78:                                        ; preds = %if.end75
  %53 = load float* %x.addr, align 4
  %call79 = call float @fabsf(float %53) #6
  store float %call79, float* %x.addr, align 4
  %54 = load float* %x.addr, align 4
  %55 = load float* %x.addr, align 4
  %mul80 = fmul float %54, %55
  %div81 = fdiv float 1.000000e+00, %mul80
  store float %div81, float* %s, align 4
  %56 = load i32* %ix, align 4
  %cmp82 = icmp slt i32 %56, 1077336941
  br i1 %cmp82, label %if.then84, label %if.else115

if.then84:                                        ; preds = %if.then78
  %57 = load float* %s, align 4
  %58 = load float* %s, align 4
  %59 = load float* %s, align 4
  %60 = load float* %s, align 4
  %61 = load float* %s, align 4
  %62 = load float* %s, align 4
  %63 = load float* %s, align 4
  %mul85 = fmul float %63, 0xC023A0EFC0000000
  %add86 = fadd float 0xC054526560000000, %mul85
  %mul87 = fmul float %62, %add86
  %add88 = fadd float 0xC067135CE0000000, %mul87
  %mul89 = fmul float %61, %add88
  %add90 = fadd float 0xC0644CB180000000, %mul89
  %mul91 = fmul float %60, %add90
  %add92 = fadd float 0xC04F300AE0000000, %mul91
  %mul93 = fmul float %59, %add92
  %add94 = fadd float 0xC0251E0440000000, %mul93
  %mul95 = fmul float %58, %add94
  %add96 = fadd float 0xBFE63416E0000000, %mul95
  %mul97 = fmul float %57, %add96
  %add98 = fadd float 0xBF84341260000000, %mul97
  store float %add98, float* %R, align 4
  %64 = load float* %s, align 4
  %65 = load float* %s, align 4
  %66 = load float* %s, align 4
  %67 = load float* %s, align 4
  %68 = load float* %s, align 4
  %69 = load float* %s, align 4
  %70 = load float* %s, align 4
  %71 = load float* %s, align 4
  %mul99 = fmul float %71, 0xBFAEEFF2E0000000
  %add100 = fadd float 0x401A47EF80000000, %mul99
  %mul101 = fmul float %70, %add100
  %add102 = fadd float 0x405B28A3E0000000, %mul101
  %mul103 = fmul float %69, %add102
  %add104 = fadd float 0x407AD02160000000, %mul103
  %mul105 = fmul float %68, %add104
  %add106 = fadd float 0x40842B1920000000, %mul105
  %mul107 = fmul float %67, %add106
  %add108 = fadd float 0x407B290DE0000000, %mul107
  %mul109 = fmul float %66, %add108
  %add110 = fadd float 0x4061350C60000000, %mul109
  %mul111 = fmul float %65, %add110
  %add112 = fadd float 0x4033A6B9C0000000, %mul111
  %mul113 = fmul float %64, %add112
  %add114 = fadd float 1.000000e+00, %mul113
  store float %add114, float* %S, align 4
  br label %if.end148

if.else115:                                       ; preds = %if.then78
  %72 = load i32* %hx, align 4
  %cmp116 = icmp slt i32 %72, 0
  br i1 %cmp116, label %land.lhs.true, label %if.end121

land.lhs.true:                                    ; preds = %if.else115
  %73 = load i32* %ix, align 4
  %cmp118 = icmp sge i32 %73, 1086324736
  br i1 %cmp118, label %if.then120, label %if.end121

if.then120:                                       ; preds = %land.lhs.true
  store float 2.000000e+00, float* %retval
  br label %return

if.end121:                                        ; preds = %land.lhs.true, %if.else115
  %74 = load float* %s, align 4
  %75 = load float* %s, align 4
  %76 = load float* %s, align 4
  %77 = load float* %s, align 4
  %78 = load float* %s, align 4
  %79 = load float* %s, align 4
  %mul122 = fmul float %79, 0xC07E384EA0000000
  %add123 = fadd float 0xC090046160000000, %mul122
  %mul124 = fmul float %78, %add123
  %add125 = fadd float 0xC083EC8820000000, %mul124
  %mul126 = fmul float %77, %add125
  %add127 = fadd float 0xC064145D40000000, %mul126
  %mul128 = fmul float %76, %add127
  %add129 = fadd float 0xC031C20960000000, %mul128
  %mul130 = fmul float %75, %add129
  %add131 = fadd float 0xBFE993BA80000000, %mul130
  %mul132 = fmul float %74, %add131
  %add133 = fadd float 0xBF84341240000000, %mul132
  store float %add133, float* %R, align 4
  %80 = load float* %s, align 4
  %81 = load float* %s, align 4
  %82 = load float* %s, align 4
  %83 = load float* %s, align 4
  %84 = load float* %s, align 4
  %85 = load float* %s, align 4
  %86 = load float* %s, align 4
  %mul134 = fmul float %86, 0xC03670E240000000
  %add135 = fadd float 0x407DA874E0000000, %mul134
  %mul136 = fmul float %85, %add135
  %add137 = fadd float 0x40A3F219C0000000, %mul136
  %mul138 = fmul float %84, %add137
  %add139 = fadd float 0x40A8FFB760000000, %mul138
  %mul140 = fmul float %83, %add139
  %add141 = fadd float 0x409802EB20000000, %mul140
  %mul142 = fmul float %82, %add141
  %add143 = fadd float 0x40745CAE20000000, %mul142
  %mul144 = fmul float %81, %add143
  %add145 = fadd float 0x403E568B20000000, %mul144
  %mul146 = fmul float %80, %add145
  %add147 = fadd float 1.000000e+00, %mul146
  store float %add147, float* %S, align 4
  br label %if.end148

if.end148:                                        ; preds = %if.end121, %if.then84
  br label %do.body149

do.body149:                                       ; preds = %if.end148
  %87 = load float* %x.addr, align 4
  %value151 = bitcast %union.ieee_float_shape_type* %gf_u150 to float*
  store float %87, float* %value151, align 4
  %word152 = bitcast %union.ieee_float_shape_type* %gf_u150 to i32*
  %88 = load i32* %word152, align 4
  store i32 %88, i32* %ix, align 4
  br label %do.end153

do.end153:                                        ; preds = %do.body149
  br label %do.body154

do.body154:                                       ; preds = %do.end153
  %89 = load i32* %ix, align 4
  %and155 = and i32 %89, -4096
  %word156 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %and155, i32* %word156, align 4
  %value157 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %90 = load float* %value157, align 4
  store float %90, float* %z, align 4
  br label %do.end158

do.end158:                                        ; preds = %do.body154
  %91 = load float* %z, align 4
  %sub159 = fsub float -0.000000e+00, %91
  %92 = load float* %z, align 4
  %mul160 = fmul float %sub159, %92
  %sub161 = fsub float %mul160, 5.625000e-01
  %call162 = call float @__ieee754_expf(float %sub161) #5
  %93 = load float* %z, align 4
  %94 = load float* %x.addr, align 4
  %sub163 = fsub float %93, %94
  %95 = load float* %z, align 4
  %96 = load float* %x.addr, align 4
  %add164 = fadd float %95, %96
  %mul165 = fmul float %sub163, %add164
  %97 = load float* %R, align 4
  %98 = load float* %S, align 4
  %div166 = fdiv float %97, %98
  %add167 = fadd float %mul165, %div166
  %call168 = call float @__ieee754_expf(float %add167) #5
  %mul169 = fmul float %call162, %call168
  store float %mul169, float* %r, align 4
  %99 = load i32* %hx, align 4
  %cmp170 = icmp sgt i32 %99, 0
  br i1 %cmp170, label %if.then172, label %if.else174

if.then172:                                       ; preds = %do.end158
  %100 = load float* %r, align 4
  %101 = load float* %x.addr, align 4
  %div173 = fdiv float %100, %101
  store float %div173, float* %retval
  br label %return

if.else174:                                       ; preds = %do.end158
  %102 = load float* %r, align 4
  %103 = load float* %x.addr, align 4
  %div175 = fdiv float %102, %103
  %sub176 = fsub float 2.000000e+00, %div175
  store float %sub176, float* %retval
  br label %return

if.else177:                                       ; preds = %if.end75
  %104 = load i32* %hx, align 4
  %cmp178 = icmp sgt i32 %104, 0
  br i1 %cmp178, label %if.then180, label %if.else181

if.then180:                                       ; preds = %if.else177
  store float 0.000000e+00, float* %retval
  br label %return

if.else181:                                       ; preds = %if.else177
  store float 2.000000e+00, float* %retval
  br label %return

return:                                           ; preds = %if.else181, %if.then180, %if.else174, %if.then172, %if.then120, %if.else71, %if.then68, %if.else, %if.then29, %if.then6, %if.then
  %105 = load float* %retval
  ret float %105
}

; Function Attrs: nounwind
define float @expm1f(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y = alloca float, align 4
  %hi = alloca float, align 4
  %lo = alloca float, align 4
  %c = alloca float, align 4
  %t = alloca float, align 4
  %e = alloca float, align 4
  %hxs = alloca float, align 4
  %hfx = alloca float, align 4
  %r1 = alloca float, align 4
  %k = alloca i32, align 4
  %xsb = alloca i32, align 4
  %hx = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %i = alloca i32, align 4
  %gf_u124 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  %i138 = alloca i32, align 4
  %sf_u140 = alloca %union.ieee_float_shape_type, align 4
  %gf_u148 = alloca %union.ieee_float_shape_type, align 4
  %sf_u153 = alloca %union.ieee_float_shape_type, align 4
  %i160 = alloca i32, align 4
  %sf_u162 = alloca %union.ieee_float_shape_type, align 4
  %gf_u172 = alloca %union.ieee_float_shape_type, align 4
  %sf_u177 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, -2147483648
  store i32 %and, i32* %xsb, align 4
  %3 = load i32* %xsb, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  store float %4, float* %y, align 4
  br label %if.end

if.else:                                          ; preds = %do.end
  %5 = load float* %x.addr, align 4
  %sub = fsub float -0.000000e+00, %5
  store float %sub, float* %y, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32* %hx, align 4
  %and1 = and i32 %6, 2147483647
  store i32 %and1, i32* %hx, align 4
  %7 = load i32* %hx, align 4
  %cmp2 = icmp uge i32 %7, 1100331076
  br i1 %cmp2, label %if.then3, label %if.end27

if.then3:                                         ; preds = %if.end
  %8 = load i32* %hx, align 4
  %cmp4 = icmp ugt i32 %8, 2139095040
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %if.then3
  %9 = load float* %x.addr, align 4
  %10 = load float* %x.addr, align 4
  %add = fadd float %9, %10
  store float %add, float* %retval
  br label %return

if.end6:                                          ; preds = %if.then3
  %11 = load i32* %hx, align 4
  %cmp7 = icmp eq i32 %11, 2139095040
  br i1 %cmp7, label %if.then8, label %if.end11

if.then8:                                         ; preds = %if.end6
  %12 = load i32* %xsb, align 4
  %cmp9 = icmp eq i32 %12, 0
  br i1 %cmp9, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then8
  %13 = load float* %x.addr, align 4
  %conv = fpext float %13 to double
  br label %cond.end

cond.false:                                       ; preds = %if.then8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %conv, %cond.true ], [ -1.000000e+00, %cond.false ]
  %conv10 = fptrunc double %cond to float
  store float %conv10, float* %retval
  br label %return

if.end11:                                         ; preds = %if.end6
  %14 = load i32* %xsb, align 4
  %cmp12 = icmp eq i32 %14, 0
  br i1 %cmp12, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.end11
  %15 = load i32* %hx, align 4
  %cmp14 = icmp ugt i32 %15, 1118925335
  br i1 %cmp14, label %if.then16, label %if.end17

if.then16:                                        ; preds = %land.lhs.true
  store float 0x7FF0000000000000, float* %retval
  br label %return

if.end17:                                         ; preds = %land.lhs.true, %if.end11
  %16 = load i32* %xsb, align 4
  %cmp18 = icmp ne i32 %16, 0
  br i1 %cmp18, label %if.then20, label %if.end26

if.then20:                                        ; preds = %if.end17
  %17 = load float* %x.addr, align 4
  %add21 = fadd float %17, 0x39B4484C00000000
  %cmp22 = fcmp olt float %add21, 0.000000e+00
  br i1 %cmp22, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.then20
  store float -1.000000e+00, float* %retval
  br label %return

if.end25:                                         ; preds = %if.then20
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.end17
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end
  %18 = load i32* %hx, align 4
  %cmp28 = icmp ugt i32 %18, 1051816472
  br i1 %cmp28, label %if.then30, label %if.else55

if.then30:                                        ; preds = %if.end27
  %19 = load i32* %hx, align 4
  %cmp31 = icmp ult i32 %19, 1065686418
  br i1 %cmp31, label %if.then33, label %if.else41

if.then33:                                        ; preds = %if.then30
  %20 = load i32* %xsb, align 4
  %cmp34 = icmp eq i32 %20, 0
  br i1 %cmp34, label %if.then36, label %if.else38

if.then36:                                        ; preds = %if.then33
  %21 = load float* %x.addr, align 4
  %sub37 = fsub float %21, 0x3FE62E3000000000
  store float %sub37, float* %hi, align 4
  store float 0x3EE2FEFA20000000, float* %lo, align 4
  store i32 1, i32* %k, align 4
  br label %if.end40

if.else38:                                        ; preds = %if.then33
  %22 = load float* %x.addr, align 4
  %add39 = fadd float %22, 0x3FE62E3000000000
  store float %add39, float* %hi, align 4
  store float 0xBEE2FEFA20000000, float* %lo, align 4
  store i32 -1, i32* %k, align 4
  br label %if.end40

if.end40:                                         ; preds = %if.else38, %if.then36
  br label %if.end51

if.else41:                                        ; preds = %if.then30
  %23 = load float* %x.addr, align 4
  %mul = fmul float 0x3FF7154760000000, %23
  %24 = load i32* %xsb, align 4
  %cmp42 = icmp eq i32 %24, 0
  %cond44 = select i1 %cmp42, float 5.000000e-01, float -5.000000e-01
  %add45 = fadd float %mul, %cond44
  %conv46 = fptosi float %add45 to i32
  store i32 %conv46, i32* %k, align 4
  %25 = load i32* %k, align 4
  %conv47 = sitofp i32 %25 to float
  store float %conv47, float* %t, align 4
  %26 = load float* %x.addr, align 4
  %27 = load float* %t, align 4
  %mul48 = fmul float %27, 0x3FE62E3000000000
  %sub49 = fsub float %26, %mul48
  store float %sub49, float* %hi, align 4
  %28 = load float* %t, align 4
  %mul50 = fmul float %28, 0x3EE2FEFA20000000
  store float %mul50, float* %lo, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.else41, %if.end40
  %29 = load float* %hi, align 4
  %30 = load float* %lo, align 4
  %sub52 = fsub float %29, %30
  store float %sub52, float* %x.addr, align 4
  %31 = load float* %hi, align 4
  %32 = load float* %x.addr, align 4
  %sub53 = fsub float %31, %32
  %33 = load float* %lo, align 4
  %sub54 = fsub float %sub53, %33
  store float %sub54, float* %c, align 4
  br label %if.end65

if.else55:                                        ; preds = %if.end27
  %34 = load i32* %hx, align 4
  %cmp56 = icmp ult i32 %34, 855638016
  br i1 %cmp56, label %if.then58, label %if.else63

if.then58:                                        ; preds = %if.else55
  %35 = load float* %x.addr, align 4
  %add59 = fadd float 0x46293E5940000000, %35
  store float %add59, float* %t, align 4
  %36 = load float* %x.addr, align 4
  %37 = load float* %t, align 4
  %38 = load float* %x.addr, align 4
  %add60 = fadd float 0x46293E5940000000, %38
  %sub61 = fsub float %37, %add60
  %sub62 = fsub float %36, %sub61
  store float %sub62, float* %retval
  br label %return

if.else63:                                        ; preds = %if.else55
  store i32 0, i32* %k, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.else63
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.end51
  %39 = load float* %x.addr, align 4
  %mul66 = fmul float 5.000000e-01, %39
  store float %mul66, float* %hfx, align 4
  %40 = load float* %x.addr, align 4
  %41 = load float* %hfx, align 4
  %mul67 = fmul float %40, %41
  store float %mul67, float* %hxs, align 4
  %42 = load float* %hxs, align 4
  %43 = load float* %hxs, align 4
  %44 = load float* %hxs, align 4
  %45 = load float* %hxs, align 4
  %46 = load float* %hxs, align 4
  %mul68 = fmul float %46, 0xBE8AFDB760000000
  %add69 = fadd float 0x3ED0CFCA80000000, %mul68
  %mul70 = fmul float %45, %add69
  %add71 = fadd float 0xBF14CE19A0000000, %mul70
  %mul72 = fmul float %44, %add71
  %add73 = fadd float 0x3F5A01A020000000, %mul72
  %mul74 = fmul float %43, %add73
  %add75 = fadd float 0xBFA1111120000000, %mul74
  %mul76 = fmul float %42, %add75
  %add77 = fadd float 1.000000e+00, %mul76
  store float %add77, float* %r1, align 4
  %47 = load float* %r1, align 4
  %48 = load float* %hfx, align 4
  %mul78 = fmul float %47, %48
  %sub79 = fsub float 3.000000e+00, %mul78
  store float %sub79, float* %t, align 4
  %49 = load float* %hxs, align 4
  %50 = load float* %r1, align 4
  %51 = load float* %t, align 4
  %sub80 = fsub float %50, %51
  %52 = load float* %x.addr, align 4
  %53 = load float* %t, align 4
  %mul81 = fmul float %52, %53
  %sub82 = fsub float 6.000000e+00, %mul81
  %div = fdiv float %sub80, %sub82
  %mul83 = fmul float %49, %div
  store float %mul83, float* %e, align 4
  %54 = load i32* %k, align 4
  %cmp84 = icmp eq i32 %54, 0
  br i1 %cmp84, label %if.then86, label %if.else90

if.then86:                                        ; preds = %if.end65
  %55 = load float* %x.addr, align 4
  %56 = load float* %x.addr, align 4
  %57 = load float* %e, align 4
  %mul87 = fmul float %56, %57
  %58 = load float* %hxs, align 4
  %sub88 = fsub float %mul87, %58
  %sub89 = fsub float %55, %sub88
  store float %sub89, float* %retval
  br label %return

if.else90:                                        ; preds = %if.end65
  %59 = load float* %x.addr, align 4
  %60 = load float* %e, align 4
  %61 = load float* %c, align 4
  %sub91 = fsub float %60, %61
  %mul92 = fmul float %59, %sub91
  %62 = load float* %c, align 4
  %sub93 = fsub float %mul92, %62
  store float %sub93, float* %e, align 4
  %63 = load float* %hxs, align 4
  %64 = load float* %e, align 4
  %sub94 = fsub float %64, %63
  store float %sub94, float* %e, align 4
  %65 = load i32* %k, align 4
  %cmp95 = icmp eq i32 %65, -1
  br i1 %cmp95, label %if.then97, label %if.end101

if.then97:                                        ; preds = %if.else90
  %66 = load float* %x.addr, align 4
  %67 = load float* %e, align 4
  %sub98 = fsub float %66, %67
  %mul99 = fmul float 5.000000e-01, %sub98
  %sub100 = fsub float %mul99, 5.000000e-01
  store float %sub100, float* %retval
  br label %return

if.end101:                                        ; preds = %if.else90
  %68 = load i32* %k, align 4
  %cmp102 = icmp eq i32 %68, 1
  br i1 %cmp102, label %if.then104, label %if.end115

if.then104:                                       ; preds = %if.end101
  %69 = load float* %x.addr, align 4
  %cmp105 = fcmp olt float %69, -2.500000e-01
  br i1 %cmp105, label %if.then107, label %if.else111

if.then107:                                       ; preds = %if.then104
  %70 = load float* %e, align 4
  %71 = load float* %x.addr, align 4
  %add108 = fadd float %71, 5.000000e-01
  %sub109 = fsub float %70, %add108
  %mul110 = fmul float -2.000000e+00, %sub109
  store float %mul110, float* %retval
  br label %return

if.else111:                                       ; preds = %if.then104
  %72 = load float* %x.addr, align 4
  %73 = load float* %e, align 4
  %sub112 = fsub float %72, %73
  %mul113 = fmul float 2.000000e+00, %sub112
  %add114 = fadd float 1.000000e+00, %mul113
  store float %add114, float* %retval
  br label %return

if.end115:                                        ; preds = %if.end101
  %74 = load i32* %k, align 4
  %cmp116 = icmp sle i32 %74, -2
  br i1 %cmp116, label %if.then120, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end115
  %75 = load i32* %k, align 4
  %cmp118 = icmp sgt i32 %75, 56
  br i1 %cmp118, label %if.then120, label %if.end134

if.then120:                                       ; preds = %lor.lhs.false, %if.end115
  %76 = load float* %e, align 4
  %77 = load float* %x.addr, align 4
  %sub121 = fsub float %76, %77
  %sub122 = fsub float 1.000000e+00, %sub121
  store float %sub122, float* %y, align 4
  br label %do.body123

do.body123:                                       ; preds = %if.then120
  %78 = load float* %y, align 4
  %value125 = bitcast %union.ieee_float_shape_type* %gf_u124 to float*
  store float %78, float* %value125, align 4
  %word126 = bitcast %union.ieee_float_shape_type* %gf_u124 to i32*
  %79 = load i32* %word126, align 4
  store i32 %79, i32* %i, align 4
  br label %do.end127

do.end127:                                        ; preds = %do.body123
  br label %do.body128

do.body128:                                       ; preds = %do.end127
  %80 = load i32* %i, align 4
  %81 = load i32* %k, align 4
  %shl = shl i32 %81, 23
  %add129 = add nsw i32 %80, %shl
  %word130 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %add129, i32* %word130, align 4
  %value131 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %82 = load float* %value131, align 4
  store float %82, float* %y, align 4
  br label %do.end132

do.end132:                                        ; preds = %do.body128
  %83 = load float* %y, align 4
  %sub133 = fsub float %83, 1.000000e+00
  store float %sub133, float* %retval
  br label %return

if.end134:                                        ; preds = %lor.lhs.false
  store float 1.000000e+00, float* %t, align 4
  %84 = load i32* %k, align 4
  %cmp135 = icmp slt i32 %84, 23
  br i1 %cmp135, label %if.then137, label %if.else159

if.then137:                                       ; preds = %if.end134
  br label %do.body139

do.body139:                                       ; preds = %if.then137
  %85 = load i32* %k, align 4
  %shr = ashr i32 16777216, %85
  %sub141 = sub nsw i32 1065353216, %shr
  %word142 = bitcast %union.ieee_float_shape_type* %sf_u140 to i32*
  store i32 %sub141, i32* %word142, align 4
  %value143 = bitcast %union.ieee_float_shape_type* %sf_u140 to float*
  %86 = load float* %value143, align 4
  store float %86, float* %t, align 4
  br label %do.end144

do.end144:                                        ; preds = %do.body139
  %87 = load float* %t, align 4
  %88 = load float* %e, align 4
  %89 = load float* %x.addr, align 4
  %sub145 = fsub float %88, %89
  %sub146 = fsub float %87, %sub145
  store float %sub146, float* %y, align 4
  br label %do.body147

do.body147:                                       ; preds = %do.end144
  %90 = load float* %y, align 4
  %value149 = bitcast %union.ieee_float_shape_type* %gf_u148 to float*
  store float %90, float* %value149, align 4
  %word150 = bitcast %union.ieee_float_shape_type* %gf_u148 to i32*
  %91 = load i32* %word150, align 4
  store i32 %91, i32* %i138, align 4
  br label %do.end151

do.end151:                                        ; preds = %do.body147
  br label %do.body152

do.body152:                                       ; preds = %do.end151
  %92 = load i32* %i138, align 4
  %93 = load i32* %k, align 4
  %shl154 = shl i32 %93, 23
  %add155 = add nsw i32 %92, %shl154
  %word156 = bitcast %union.ieee_float_shape_type* %sf_u153 to i32*
  store i32 %add155, i32* %word156, align 4
  %value157 = bitcast %union.ieee_float_shape_type* %sf_u153 to float*
  %94 = load float* %value157, align 4
  store float %94, float* %y, align 4
  br label %do.end158

do.end158:                                        ; preds = %do.body152
  br label %if.end183

if.else159:                                       ; preds = %if.end134
  br label %do.body161

do.body161:                                       ; preds = %if.else159
  %95 = load i32* %k, align 4
  %sub163 = sub nsw i32 127, %95
  %shl164 = shl i32 %sub163, 23
  %word165 = bitcast %union.ieee_float_shape_type* %sf_u162 to i32*
  store i32 %shl164, i32* %word165, align 4
  %value166 = bitcast %union.ieee_float_shape_type* %sf_u162 to float*
  %96 = load float* %value166, align 4
  store float %96, float* %t, align 4
  br label %do.end167

do.end167:                                        ; preds = %do.body161
  %97 = load float* %x.addr, align 4
  %98 = load float* %e, align 4
  %99 = load float* %t, align 4
  %add168 = fadd float %98, %99
  %sub169 = fsub float %97, %add168
  store float %sub169, float* %y, align 4
  %100 = load float* %y, align 4
  %add170 = fadd float %100, 1.000000e+00
  store float %add170, float* %y, align 4
  br label %do.body171

do.body171:                                       ; preds = %do.end167
  %101 = load float* %y, align 4
  %value173 = bitcast %union.ieee_float_shape_type* %gf_u172 to float*
  store float %101, float* %value173, align 4
  %word174 = bitcast %union.ieee_float_shape_type* %gf_u172 to i32*
  %102 = load i32* %word174, align 4
  store i32 %102, i32* %i160, align 4
  br label %do.end175

do.end175:                                        ; preds = %do.body171
  br label %do.body176

do.body176:                                       ; preds = %do.end175
  %103 = load i32* %i160, align 4
  %104 = load i32* %k, align 4
  %shl178 = shl i32 %104, 23
  %add179 = add nsw i32 %103, %shl178
  %word180 = bitcast %union.ieee_float_shape_type* %sf_u177 to i32*
  store i32 %add179, i32* %word180, align 4
  %value181 = bitcast %union.ieee_float_shape_type* %sf_u177 to float*
  %105 = load float* %value181, align 4
  store float %105, float* %y, align 4
  br label %do.end182

do.end182:                                        ; preds = %do.body176
  br label %if.end183

if.end183:                                        ; preds = %do.end182, %do.end158
  br label %if.end184

if.end184:                                        ; preds = %if.end183
  %106 = load float* %y, align 4
  store float %106, float* %retval
  br label %return

return:                                           ; preds = %if.end184, %do.end132, %if.else111, %if.then107, %if.then97, %if.then86, %if.then58, %if.then24, %if.then16, %cond.end, %if.then5
  %107 = load float* %retval
  ret float %107
}

; Function Attrs: nounwind readnone
define float @fabsf(float %x) #3 {
entry:
  %x.addr = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  br label %do.body1

do.body1:                                         ; preds = %do.end
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  %word2 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %and, i32* %word2, align 4
  %value3 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %3 = load float* %value3, align 4
  store float %3, float* %x.addr, align 4
  br label %do.end4

do.end4:                                          ; preds = %do.body1
  %4 = load float* %x.addr, align 4
  ret float %4
}

; Function Attrs: nounwind readnone
define i32 @finitef(float %x) #3 {
entry:
  %x.addr = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
define float @floorf(float %x) #3 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %i0 = alloca i32, align 4
  %j0 = alloca i32, align 4
  %i = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %i0, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %i0, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %shr = lshr i32 %3, 23
  %sub = sub i32 %shr, 127
  store i32 %sub, i32* %j0, align 4
  %4 = load i32* %j0, align 4
  %cmp = icmp slt i32 %4, 23
  br i1 %cmp, label %if.then, label %if.else28

if.then:                                          ; preds = %do.end
  %5 = load i32* %j0, align 4
  %cmp1 = icmp slt i32 %5, 0
  br i1 %cmp1, label %if.then2, label %if.else11

if.then2:                                         ; preds = %if.then
  %6 = load float* %x.addr, align 4
  %add = fadd float 0x46293E5940000000, %6
  %cmp3 = fcmp ogt float %add, 0.000000e+00
  br i1 %cmp3, label %if.then4, label %if.end10

if.then4:                                         ; preds = %if.then2
  %7 = load i32* %i0, align 4
  %cmp5 = icmp sge i32 %7, 0
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  store i32 0, i32* %i0, align 4
  br label %if.end9

if.else:                                          ; preds = %if.then4
  %8 = load i32* %ix, align 4
  %cmp7 = icmp eq i32 %8, 0
  br i1 %cmp7, label %if.end, label %if.then8

if.then8:                                         ; preds = %if.else
  store i32 -1082130432, i32* %i0, align 4
  br label %if.end

if.end:                                           ; preds = %if.then8, %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then6
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then2
  br label %if.end27

if.else11:                                        ; preds = %if.then
  %9 = load i32* %j0, align 4
  %shr12 = ashr i32 8388607, %9
  store i32 %shr12, i32* %i, align 4
  %10 = load i32* %i0, align 4
  %11 = load i32* %i, align 4
  %and13 = and i32 %10, %11
  %cmp14 = icmp eq i32 %and13, 0
  br i1 %cmp14, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.else11
  %12 = load float* %x.addr, align 4
  store float %12, float* %retval
  br label %return

if.end16:                                         ; preds = %if.else11
  %13 = load float* %x.addr, align 4
  %add17 = fadd float 0x46293E5940000000, %13
  %cmp18 = fcmp ogt float %add17, 0.000000e+00
  br i1 %cmp18, label %if.then19, label %if.end26

if.then19:                                        ; preds = %if.end16
  %14 = load i32* %i0, align 4
  %cmp20 = icmp slt i32 %14, 0
  br i1 %cmp20, label %if.then21, label %if.end24

if.then21:                                        ; preds = %if.then19
  %15 = load i32* %j0, align 4
  %shr22 = ashr i32 8388608, %15
  %16 = load i32* %i0, align 4
  %add23 = add nsw i32 %16, %shr22
  store i32 %add23, i32* %i0, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.then21, %if.then19
  %17 = load i32* %i, align 4
  %neg = xor i32 %17, -1
  %18 = load i32* %i0, align 4
  %and25 = and i32 %18, %neg
  store i32 %and25, i32* %i0, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.end24, %if.end16
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end10
  br label %if.end33

if.else28:                                        ; preds = %do.end
  %19 = load i32* %ix, align 4
  %cmp29 = icmp ult i32 %19, 2139095040
  br i1 %cmp29, label %if.else32, label %if.then30

if.then30:                                        ; preds = %if.else28
  %20 = load float* %x.addr, align 4
  %21 = load float* %x.addr, align 4
  %add31 = fadd float %20, %21
  store float %add31, float* %retval
  br label %return

if.else32:                                        ; preds = %if.else28
  %22 = load float* %x.addr, align 4
  store float %22, float* %retval
  br label %return

if.end33:                                         ; preds = %if.end27
  br label %do.body34

do.body34:                                        ; preds = %if.end33
  %23 = load i32* %i0, align 4
  %word35 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %23, i32* %word35, align 4
  %value36 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %24 = load float* %value36, align 4
  store float %24, float* %x.addr, align 4
  br label %do.end37

do.end37:                                         ; preds = %do.body34
  %25 = load float* %x.addr, align 4
  store float %25, float* %retval
  br label %return

return:                                           ; preds = %do.end37, %if.else32, %if.then30, %if.then15
  %26 = load float* %retval
  ret float %26
}

; Function Attrs: nounwind
define float @frexpf(float %x, i32* %eptr) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %eptr.addr = alloca i32*, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u5 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store i32* %eptr, i32** %eptr.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 2147483647, %2
  store i32 %and, i32* %ix, align 4
  %3 = load i32** %eptr.addr, align 4
  store i32 0, i32* %3, align 4
  %4 = load i32* %ix, align 4
  %cmp = icmp slt i32 %4, 2139095040
  br i1 %cmp, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %do.end
  %5 = load i32* %ix, align 4
  %cmp1 = icmp eq i32 %5, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %do.end
  %6 = load float* %x.addr, align 4
  store float %6, float* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %7 = load i32* %ix, align 4
  %cmp2 = icmp slt i32 %7, 8388608
  br i1 %cmp2, label %if.then3, label %if.end10

if.then3:                                         ; preds = %if.end
  %8 = load float* %x.addr, align 4
  %mul = fmul float %8, 0x4180000000000000
  store float %mul, float* %x.addr, align 4
  br label %do.body4

do.body4:                                         ; preds = %if.then3
  %9 = load float* %x.addr, align 4
  %value6 = bitcast %union.ieee_float_shape_type* %gf_u5 to float*
  store float %9, float* %value6, align 4
  %word7 = bitcast %union.ieee_float_shape_type* %gf_u5 to i32*
  %10 = load i32* %word7, align 4
  store i32 %10, i32* %hx, align 4
  br label %do.end8

do.end8:                                          ; preds = %do.body4
  %11 = load i32* %hx, align 4
  %and9 = and i32 %11, 2147483647
  store i32 %and9, i32* %ix, align 4
  %12 = load i32** %eptr.addr, align 4
  store i32 -25, i32* %12, align 4
  br label %if.end10

if.end10:                                         ; preds = %do.end8, %if.end
  %13 = load i32* %ix, align 4
  %shr = ashr i32 %13, 23
  %sub = sub nsw i32 %shr, 126
  %14 = load i32** %eptr.addr, align 4
  %15 = load i32* %14, align 4
  %add = add nsw i32 %15, %sub
  store i32 %add, i32* %14, align 4
  %16 = load i32* %hx, align 4
  %and11 = and i32 %16, -2139095041
  %or = or i32 %and11, 1056964608
  store i32 %or, i32* %hx, align 4
  br label %do.body12

do.body12:                                        ; preds = %if.end10
  %17 = load i32* %hx, align 4
  %word13 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %17, i32* %word13, align 4
  %value14 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %18 = load float* %value14, align 4
  store float %18, float* %x.addr, align 4
  br label %do.end15

do.end15:                                         ; preds = %do.body12
  %19 = load float* %x.addr, align 4
  store float %19, float* %retval
  br label %return

return:                                           ; preds = %do.end15, %if.then
  %20 = load float* %retval
  ret float %20
}

; Function Attrs: nounwind
define i32 @ilogbf(float %x) #2 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca float, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %hx, align 4
  %3 = load i32* %hx, align 4
  %cmp = icmp eq i32 %3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  store i32 -2147483647, i32* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %4 = load i32* %hx, align 4
  %cmp1 = icmp slt i32 %4, 8388608
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  store i32 -126, i32* %ix, align 4
  %5 = load i32* %hx, align 4
  %shl = shl i32 %5, 8
  store i32 %shl, i32* %hx, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %6 = load i32* %hx, align 4
  %cmp3 = icmp sgt i32 %6, 0
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %7 = load i32* %ix, align 4
  %sub = sub nsw i32 %7, 1
  store i32 %sub, i32* %ix, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %8 = load i32* %hx, align 4
  %shl4 = shl i32 %8, 1
  store i32 %shl4, i32* %hx, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %9 = load i32* %ix, align 4
  store i32 %9, i32* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %10 = load i32* %hx, align 4
  %cmp5 = icmp slt i32 %10, 2139095040
  br i1 %cmp5, label %if.else7, label %if.then6

if.then6:                                         ; preds = %if.else
  store i32 2147483647, i32* %retval
  br label %return

if.else7:                                         ; preds = %if.else
  %11 = load i32* %hx, align 4
  %shr = ashr i32 %11, 23
  %sub8 = sub nsw i32 %shr, 127
  store i32 %sub8, i32* %retval
  br label %return

return:                                           ; preds = %if.else7, %if.then6, %for.end, %if.then
  %12 = load i32* %retval
  ret i32 %12
}

; Function Attrs: nounwind readnone
define i32 @finite(double %x) #3 {
entry:
  %x.addr = alloca double, align 8
  %hx = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  %sub = sub nsw i32 %and, 2146435072
  %shr = lshr i32 %sub, 31
  ret i32 %shr
}

; Function Attrs: nounwind readnone
define i32 @__isinff(float %x) #3 {
entry:
  %x.addr = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp eq i32 %3, 2139095040
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
define i32 @isnanf(float %x) #3 {
entry:
  %x.addr = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sgt i32 %3, 2139095040
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind readnone
define i32 @__isnanf(float %x) #3 {
entry:
  %x.addr = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sgt i32 %3, 2139095040
  %conv = zext i1 %cmp to i32
  ret i32 %conv
}

; Function Attrs: nounwind
define float @ldexpf(float %value, i32 %exp) #2 {
entry:
  %retval = alloca float, align 4
  %value.addr = alloca float, align 4
  %exp.addr = alloca i32, align 4
  store float %value, float* %value.addr, align 4
  store i32 %exp, i32* %exp.addr, align 4
  %0 = load float* %value.addr, align 4
  %call = call i32 @finitef(float %0) #6
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load float* %value.addr, align 4
  %cmp = fcmp oeq float %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load float* %value.addr, align 4
  store float %2, float* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load float* %value.addr, align 4
  %4 = load i32* %exp.addr, align 4
  %call1 = call float @scalbnf(float %3, i32 %4) #4
  store float %call1, float* %value.addr, align 4
  %5 = load float* %value.addr, align 4
  %call2 = call i32 @finitef(float %5) #6
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %lor.lhs.false4, label %if.then6

lor.lhs.false4:                                   ; preds = %if.end
  %6 = load float* %value.addr, align 4
  %cmp5 = fcmp oeq float %6, 0.000000e+00
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %lor.lhs.false4, %if.end
  %call7 = call i32* @__errno_location() #6
  store i32 34, i32* %call7, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %lor.lhs.false4
  %7 = load float* %value.addr, align 4
  store float %7, float* %retval
  br label %return

return:                                           ; preds = %if.end8, %if.then
  %8 = load float* %retval
  ret float %8
}

; Function Attrs: nounwind readnone
declare i32* @__errno_location() #3

; Function Attrs: nounwind
define float @log1pf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %hfsq = alloca float, align 4
  %f = alloca float, align 4
  %c = alloca float, align 4
  %s = alloca float, align 4
  %z = alloca float, align 4
  %R = alloca float, align 4
  %u = alloca float, align 4
  %k = alloca i32, align 4
  %hx = alloca i32, align 4
  %hu = alloca i32, align 4
  %ax = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u30 = alloca %union.ieee_float_shape_type, align 4
  %gf_u43 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u60 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ax, align 4
  store i32 1, i32* %k, align 4
  %3 = load i32* %hx, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %x.addr, align 4
  %add = fadd float %4, %5
  store float %add, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %hx, align 4
  %cmp1 = icmp slt i32 %6, 1054086103
  br i1 %cmp1, label %if.then2, label %if.end23

if.then2:                                         ; preds = %if.end
  %7 = load i32* %ax, align 4
  %cmp3 = icmp sge i32 %7, 1065353216
  br i1 %cmp3, label %if.then4, label %if.end8

if.then4:                                         ; preds = %if.then2
  %8 = load float* %x.addr, align 4
  %cmp5 = fcmp oeq float %8, -1.000000e+00
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.then4
  store float 0xFFF0000000000000, float* %retval
  br label %return

if.else:                                          ; preds = %if.then4
  %9 = load float* %x.addr, align 4
  %10 = load float* %x.addr, align 4
  %sub = fsub float %9, %10
  %11 = load float* %x.addr, align 4
  %12 = load float* %x.addr, align 4
  %sub7 = fsub float %11, %12
  %div = fdiv float %sub, %sub7
  store float %div, float* %retval
  br label %return

if.end8:                                          ; preds = %if.then2
  %13 = load i32* %ax, align 4
  %cmp9 = icmp slt i32 %13, 822083584
  br i1 %cmp9, label %if.then10, label %if.end18

if.then10:                                        ; preds = %if.end8
  %14 = load float* %x.addr, align 4
  %add11 = fadd float 0x4180000000000000, %14
  %cmp12 = fcmp ogt float %add11, 0.000000e+00
  br i1 %cmp12, label %land.lhs.true, label %if.else15

land.lhs.true:                                    ; preds = %if.then10
  %15 = load i32* %ax, align 4
  %cmp13 = icmp slt i32 %15, 612368384
  br i1 %cmp13, label %if.then14, label %if.else15

if.then14:                                        ; preds = %land.lhs.true
  %16 = load float* %x.addr, align 4
  store float %16, float* %retval
  br label %return

if.else15:                                        ; preds = %land.lhs.true, %if.then10
  %17 = load float* %x.addr, align 4
  %18 = load float* %x.addr, align 4
  %19 = load float* %x.addr, align 4
  %mul = fmul float %18, %19
  %mul16 = fmul float %mul, 5.000000e-01
  %sub17 = fsub float %17, %mul16
  store float %sub17, float* %retval
  br label %return

if.end18:                                         ; preds = %if.end8
  %20 = load i32* %hx, align 4
  %cmp19 = icmp sgt i32 %20, 0
  br i1 %cmp19, label %if.then21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end18
  %21 = load i32* %hx, align 4
  %cmp20 = icmp sle i32 %21, -1097468385
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %lor.lhs.false, %if.end18
  store i32 0, i32* %k, align 4
  %22 = load float* %x.addr, align 4
  store float %22, float* %f, align 4
  store i32 1, i32* %hu, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %lor.lhs.false
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.end
  %23 = load i32* %k, align 4
  %cmp24 = icmp ne i32 %23, 0
  br i1 %cmp24, label %if.then25, label %if.end69

if.then25:                                        ; preds = %if.end23
  %24 = load i32* %hx, align 4
  %cmp26 = icmp slt i32 %24, 1509949440
  br i1 %cmp26, label %if.then27, label %if.else41

if.then27:                                        ; preds = %if.then25
  %25 = load float* %x.addr, align 4
  %add28 = fadd float 1.000000e+00, %25
  store float %add28, float* %u, align 4
  br label %do.body29

do.body29:                                        ; preds = %if.then27
  %26 = load float* %u, align 4
  %value31 = bitcast %union.ieee_float_shape_type* %gf_u30 to float*
  store float %26, float* %value31, align 4
  %word32 = bitcast %union.ieee_float_shape_type* %gf_u30 to i32*
  %27 = load i32* %word32, align 4
  store i32 %27, i32* %hu, align 4
  br label %do.end33

do.end33:                                         ; preds = %do.body29
  %28 = load i32* %hu, align 4
  %shr = ashr i32 %28, 23
  %sub34 = sub nsw i32 %shr, 127
  store i32 %sub34, i32* %k, align 4
  %29 = load i32* %k, align 4
  %cmp35 = icmp sgt i32 %29, 0
  br i1 %cmp35, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end33
  %30 = load float* %u, align 4
  %31 = load float* %x.addr, align 4
  %sub36 = fsub float %30, %31
  %sub37 = fsub float 1.000000e+00, %sub36
  br label %cond.end

cond.false:                                       ; preds = %do.end33
  %32 = load float* %x.addr, align 4
  %33 = load float* %u, align 4
  %sub38 = fsub float %33, 1.000000e+00
  %sub39 = fsub float %32, %sub38
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %sub37, %cond.true ], [ %sub39, %cond.false ]
  store float %cond, float* %c, align 4
  %34 = load float* %u, align 4
  %35 = load float* %c, align 4
  %div40 = fdiv float %35, %34
  store float %div40, float* %c, align 4
  br label %if.end49

if.else41:                                        ; preds = %if.then25
  %36 = load float* %x.addr, align 4
  store float %36, float* %u, align 4
  br label %do.body42

do.body42:                                        ; preds = %if.else41
  %37 = load float* %u, align 4
  %value44 = bitcast %union.ieee_float_shape_type* %gf_u43 to float*
  store float %37, float* %value44, align 4
  %word45 = bitcast %union.ieee_float_shape_type* %gf_u43 to i32*
  %38 = load i32* %word45, align 4
  store i32 %38, i32* %hu, align 4
  br label %do.end46

do.end46:                                         ; preds = %do.body42
  %39 = load i32* %hu, align 4
  %shr47 = ashr i32 %39, 23
  %sub48 = sub nsw i32 %shr47, 127
  store i32 %sub48, i32* %k, align 4
  store float 0.000000e+00, float* %c, align 4
  br label %if.end49

if.end49:                                         ; preds = %do.end46, %cond.end
  %40 = load i32* %hu, align 4
  %and50 = and i32 %40, 8388607
  store i32 %and50, i32* %hu, align 4
  %41 = load i32* %hu, align 4
  %cmp51 = icmp slt i32 %41, 3474679
  br i1 %cmp51, label %if.then52, label %if.else57

if.then52:                                        ; preds = %if.end49
  br label %do.body53

do.body53:                                        ; preds = %if.then52
  %42 = load i32* %hu, align 4
  %or = or i32 %42, 1065353216
  %word54 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %or, i32* %word54, align 4
  %value55 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %43 = load float* %value55, align 4
  store float %43, float* %u, align 4
  br label %do.end56

do.end56:                                         ; preds = %do.body53
  br label %if.end67

if.else57:                                        ; preds = %if.end49
  %44 = load i32* %k, align 4
  %add58 = add nsw i32 %44, 1
  store i32 %add58, i32* %k, align 4
  br label %do.body59

do.body59:                                        ; preds = %if.else57
  %45 = load i32* %hu, align 4
  %or61 = or i32 %45, 1056964608
  %word62 = bitcast %union.ieee_float_shape_type* %sf_u60 to i32*
  store i32 %or61, i32* %word62, align 4
  %value63 = bitcast %union.ieee_float_shape_type* %sf_u60 to float*
  %46 = load float* %value63, align 4
  store float %46, float* %u, align 4
  br label %do.end64

do.end64:                                         ; preds = %do.body59
  %47 = load i32* %hu, align 4
  %sub65 = sub nsw i32 8388608, %47
  %shr66 = ashr i32 %sub65, 2
  store i32 %shr66, i32* %hu, align 4
  br label %if.end67

if.end67:                                         ; preds = %do.end64, %do.end56
  %48 = load float* %u, align 4
  %sub68 = fsub float %48, 1.000000e+00
  store float %sub68, float* %f, align 4
  br label %if.end69

if.end69:                                         ; preds = %if.end67, %if.end23
  %49 = load float* %f, align 4
  %mul70 = fmul float 5.000000e-01, %49
  %50 = load float* %f, align 4
  %mul71 = fmul float %mul70, %50
  store float %mul71, float* %hfsq, align 4
  %51 = load i32* %hu, align 4
  %cmp72 = icmp eq i32 %51, 0
  br i1 %cmp72, label %if.then73, label %if.end101

if.then73:                                        ; preds = %if.end69
  %52 = load float* %f, align 4
  %cmp74 = fcmp oeq float %52, 0.000000e+00
  br i1 %cmp74, label %if.then75, label %if.end84

if.then75:                                        ; preds = %if.then73
  %53 = load i32* %k, align 4
  %cmp76 = icmp eq i32 %53, 0
  br i1 %cmp76, label %if.then77, label %if.else78

if.then77:                                        ; preds = %if.then75
  store float 0.000000e+00, float* %retval
  br label %return

if.else78:                                        ; preds = %if.then75
  %54 = load i32* %k, align 4
  %conv = sitofp i32 %54 to float
  %mul79 = fmul float %conv, 0x3EE2FEFA20000000
  %55 = load float* %c, align 4
  %add80 = fadd float %55, %mul79
  store float %add80, float* %c, align 4
  %56 = load i32* %k, align 4
  %conv81 = sitofp i32 %56 to float
  %mul82 = fmul float %conv81, 0x3FE62E3000000000
  %57 = load float* %c, align 4
  %add83 = fadd float %mul82, %57
  store float %add83, float* %retval
  br label %return

if.end84:                                         ; preds = %if.then73
  %58 = load float* %hfsq, align 4
  %59 = load float* %f, align 4
  %mul85 = fmul float 0x3FE5555560000000, %59
  %sub86 = fsub float 1.000000e+00, %mul85
  %mul87 = fmul float %58, %sub86
  store float %mul87, float* %R, align 4
  %60 = load i32* %k, align 4
  %cmp88 = icmp eq i32 %60, 0
  br i1 %cmp88, label %if.then90, label %if.else92

if.then90:                                        ; preds = %if.end84
  %61 = load float* %f, align 4
  %62 = load float* %R, align 4
  %sub91 = fsub float %61, %62
  store float %sub91, float* %retval
  br label %return

if.else92:                                        ; preds = %if.end84
  %63 = load i32* %k, align 4
  %conv93 = sitofp i32 %63 to float
  %mul94 = fmul float %conv93, 0x3FE62E3000000000
  %64 = load float* %R, align 4
  %65 = load i32* %k, align 4
  %conv95 = sitofp i32 %65 to float
  %mul96 = fmul float %conv95, 0x3EE2FEFA20000000
  %66 = load float* %c, align 4
  %add97 = fadd float %mul96, %66
  %sub98 = fsub float %64, %add97
  %67 = load float* %f, align 4
  %sub99 = fsub float %sub98, %67
  %sub100 = fsub float %mul94, %sub99
  store float %sub100, float* %retval
  br label %return

if.end101:                                        ; preds = %if.end69
  %68 = load float* %f, align 4
  %69 = load float* %f, align 4
  %add102 = fadd float 2.000000e+00, %69
  %div103 = fdiv float %68, %add102
  store float %div103, float* %s, align 4
  %70 = load float* %s, align 4
  %71 = load float* %s, align 4
  %mul104 = fmul float %70, %71
  store float %mul104, float* %z, align 4
  %72 = load float* %z, align 4
  %73 = load float* %z, align 4
  %74 = load float* %z, align 4
  %75 = load float* %z, align 4
  %76 = load float* %z, align 4
  %77 = load float* %z, align 4
  %78 = load float* %z, align 4
  %mul105 = fmul float %78, 0x3FC2F112E0000000
  %add106 = fadd float 0x3FC39A09E0000000, %mul105
  %mul107 = fmul float %77, %add106
  %add108 = fadd float 0x3FC74664A0000000, %mul107
  %mul109 = fmul float %76, %add108
  %add110 = fadd float 0x3FCC71C520000000, %mul109
  %mul111 = fmul float %75, %add110
  %add112 = fadd float 0x3FD24924A0000000, %mul111
  %mul113 = fmul float %74, %add112
  %add114 = fadd float 0x3FD99999A0000000, %mul113
  %mul115 = fmul float %73, %add114
  %add116 = fadd float 0x3FE5555560000000, %mul115
  %mul117 = fmul float %72, %add116
  store float %mul117, float* %R, align 4
  %79 = load i32* %k, align 4
  %cmp118 = icmp eq i32 %79, 0
  br i1 %cmp118, label %if.then120, label %if.else125

if.then120:                                       ; preds = %if.end101
  %80 = load float* %f, align 4
  %81 = load float* %hfsq, align 4
  %82 = load float* %s, align 4
  %83 = load float* %hfsq, align 4
  %84 = load float* %R, align 4
  %add121 = fadd float %83, %84
  %mul122 = fmul float %82, %add121
  %sub123 = fsub float %81, %mul122
  %sub124 = fsub float %80, %sub123
  store float %sub124, float* %retval
  br label %return

if.else125:                                       ; preds = %if.end101
  %85 = load i32* %k, align 4
  %conv126 = sitofp i32 %85 to float
  %mul127 = fmul float %conv126, 0x3FE62E3000000000
  %86 = load float* %hfsq, align 4
  %87 = load float* %s, align 4
  %88 = load float* %hfsq, align 4
  %89 = load float* %R, align 4
  %add128 = fadd float %88, %89
  %mul129 = fmul float %87, %add128
  %90 = load i32* %k, align 4
  %conv130 = sitofp i32 %90 to float
  %mul131 = fmul float %conv130, 0x3EE2FEFA20000000
  %91 = load float* %c, align 4
  %add132 = fadd float %mul131, %91
  %add133 = fadd float %mul129, %add132
  %sub134 = fsub float %86, %add133
  %92 = load float* %f, align 4
  %sub135 = fsub float %sub134, %92
  %sub136 = fsub float %mul127, %sub135
  store float %sub136, float* %retval
  br label %return

return:                                           ; preds = %if.else125, %if.then120, %if.else92, %if.then90, %if.else78, %if.then77, %if.else15, %if.then14, %if.else, %if.then6, %if.then
  %93 = load float* %retval
  ret float %93
}

; Function Attrs: nounwind readnone
define double @floor(double %x) #3 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %i0 = alloca i32, align 4
  %i1 = alloca i32, align 4
  %j0 = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %iw_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %i0, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %i1, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %i0, align 4
  %shr = ashr i32 %3, 20
  %and = and i32 %shr, 2047
  %sub = sub nsw i32 %and, 1023
  store i32 %sub, i32* %j0, align 4
  %4 = load i32* %j0, align 4
  %cmp = icmp slt i32 %4, 20
  br i1 %cmp, label %if.then, label %if.else31

if.then:                                          ; preds = %do.end
  %5 = load i32* %j0, align 4
  %cmp2 = icmp slt i32 %5, 0
  br i1 %cmp2, label %if.then3, label %if.else13

if.then3:                                         ; preds = %if.then
  %6 = load double* %x.addr, align 8
  %add = fadd double 1.000000e+300, %6
  %cmp4 = fcmp ogt double %add, 0.000000e+00
  br i1 %cmp4, label %if.then5, label %if.end12

if.then5:                                         ; preds = %if.then3
  %7 = load i32* %i0, align 4
  %cmp6 = icmp sge i32 %7, 0
  br i1 %cmp6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then5
  store i32 0, i32* %i1, align 4
  store i32 0, i32* %i0, align 4
  br label %if.end11

if.else:                                          ; preds = %if.then5
  %8 = load i32* %i0, align 4
  %and8 = and i32 %8, 2147483647
  %9 = load i32* %i1, align 4
  %or = or i32 %and8, %9
  %cmp9 = icmp ne i32 %or, 0
  br i1 %cmp9, label %if.then10, label %if.end

if.then10:                                        ; preds = %if.else
  store i32 -1074790400, i32* %i0, align 4
  store i32 0, i32* %i1, align 4
  br label %if.end

if.end:                                           ; preds = %if.then10, %if.else
  br label %if.end11

if.end11:                                         ; preds = %if.end, %if.then7
  br label %if.end12

if.end12:                                         ; preds = %if.end11, %if.then3
  br label %if.end30

if.else13:                                        ; preds = %if.then
  %10 = load i32* %j0, align 4
  %shr14 = ashr i32 1048575, %10
  store i32 %shr14, i32* %i, align 4
  %11 = load i32* %i0, align 4
  %12 = load i32* %i, align 4
  %and15 = and i32 %11, %12
  %13 = load i32* %i1, align 4
  %or16 = or i32 %and15, %13
  %cmp17 = icmp eq i32 %or16, 0
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.else13
  %14 = load double* %x.addr, align 8
  store double %14, double* %retval
  br label %return

if.end19:                                         ; preds = %if.else13
  %15 = load double* %x.addr, align 8
  %add20 = fadd double 1.000000e+300, %15
  %cmp21 = fcmp ogt double %add20, 0.000000e+00
  br i1 %cmp21, label %if.then22, label %if.end29

if.then22:                                        ; preds = %if.end19
  %16 = load i32* %i0, align 4
  %cmp23 = icmp slt i32 %16, 0
  br i1 %cmp23, label %if.then24, label %if.end27

if.then24:                                        ; preds = %if.then22
  %17 = load i32* %j0, align 4
  %shr25 = ashr i32 1048576, %17
  %18 = load i32* %i0, align 4
  %add26 = add nsw i32 %18, %shr25
  store i32 %add26, i32* %i0, align 4
  br label %if.end27

if.end27:                                         ; preds = %if.then24, %if.then22
  %19 = load i32* %i, align 4
  %neg = xor i32 %19, -1
  %20 = load i32* %i0, align 4
  %and28 = and i32 %20, %neg
  store i32 %and28, i32* %i0, align 4
  store i32 0, i32* %i1, align 4
  br label %if.end29

if.end29:                                         ; preds = %if.end27, %if.end19
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.end12
  br label %if.end66

if.else31:                                        ; preds = %do.end
  %21 = load i32* %j0, align 4
  %cmp32 = icmp sgt i32 %21, 51
  br i1 %cmp32, label %if.then33, label %if.else38

if.then33:                                        ; preds = %if.else31
  %22 = load i32* %j0, align 4
  %cmp34 = icmp eq i32 %22, 1024
  br i1 %cmp34, label %if.then35, label %if.else37

if.then35:                                        ; preds = %if.then33
  %23 = load double* %x.addr, align 8
  %24 = load double* %x.addr, align 8
  %add36 = fadd double %23, %24
  store double %add36, double* %retval
  br label %return

if.else37:                                        ; preds = %if.then33
  %25 = load double* %x.addr, align 8
  store double %25, double* %retval
  br label %return

if.else38:                                        ; preds = %if.else31
  %26 = load i32* %j0, align 4
  %sub39 = sub nsw i32 %26, 20
  %shr40 = lshr i32 -1, %sub39
  store i32 %shr40, i32* %i, align 4
  %27 = load i32* %i1, align 4
  %28 = load i32* %i, align 4
  %and41 = and i32 %27, %28
  %cmp42 = icmp eq i32 %and41, 0
  br i1 %cmp42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.else38
  %29 = load double* %x.addr, align 8
  store double %29, double* %retval
  br label %return

if.end44:                                         ; preds = %if.else38
  %30 = load double* %x.addr, align 8
  %add45 = fadd double 1.000000e+300, %30
  %cmp46 = fcmp ogt double %add45, 0.000000e+00
  br i1 %cmp46, label %if.then47, label %if.end64

if.then47:                                        ; preds = %if.end44
  %31 = load i32* %i0, align 4
  %cmp48 = icmp slt i32 %31, 0
  br i1 %cmp48, label %if.then49, label %if.end61

if.then49:                                        ; preds = %if.then47
  %32 = load i32* %j0, align 4
  %cmp50 = icmp eq i32 %32, 20
  br i1 %cmp50, label %if.then51, label %if.else53

if.then51:                                        ; preds = %if.then49
  %33 = load i32* %i0, align 4
  %add52 = add nsw i32 %33, 1
  store i32 %add52, i32* %i0, align 4
  br label %if.end60

if.else53:                                        ; preds = %if.then49
  %34 = load i32* %i1, align 4
  %35 = load i32* %j0, align 4
  %sub54 = sub nsw i32 52, %35
  %shl = shl i32 1, %sub54
  %add55 = add nsw i32 %34, %shl
  store i32 %add55, i32* %j, align 4
  %36 = load i32* %j, align 4
  %37 = load i32* %i1, align 4
  %cmp56 = icmp ult i32 %36, %37
  br i1 %cmp56, label %if.then57, label %if.end59

if.then57:                                        ; preds = %if.else53
  %38 = load i32* %i0, align 4
  %add58 = add nsw i32 %38, 1
  store i32 %add58, i32* %i0, align 4
  br label %if.end59

if.end59:                                         ; preds = %if.then57, %if.else53
  %39 = load i32* %j, align 4
  store i32 %39, i32* %i1, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.then51
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then47
  %40 = load i32* %i, align 4
  %neg62 = xor i32 %40, -1
  %41 = load i32* %i1, align 4
  %and63 = and i32 %41, %neg62
  store i32 %and63, i32* %i1, align 4
  br label %if.end64

if.end64:                                         ; preds = %if.end61, %if.end44
  br label %if.end65

if.end65:                                         ; preds = %if.end64
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.end30
  br label %do.body67

do.body67:                                        ; preds = %if.end66
  %42 = load i32* %i0, align 4
  %parts68 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %msw69 = getelementptr inbounds %struct.anon* %parts68, i32 0, i32 1
  store i32 %42, i32* %msw69, align 4
  %43 = load i32* %i1, align 4
  %parts70 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %lsw71 = getelementptr inbounds %struct.anon* %parts70, i32 0, i32 0
  store i32 %43, i32* %lsw71, align 4
  %value72 = bitcast %union.ieee_double_shape_type* %iw_u to double*
  %44 = load double* %value72, align 4
  store double %44, double* %x.addr, align 8
  br label %do.end73

do.end73:                                         ; preds = %do.body67
  %45 = load double* %x.addr, align 8
  store double %45, double* %retval
  br label %return

return:                                           ; preds = %do.end73, %if.then43, %if.else37, %if.then35, %if.then18
  %46 = load double* %retval
  ret double %46
}

; Function Attrs: nounwind readnone
define float @nanf(i8* %unused) #3 {
entry:
  %unused.addr = alloca i8*, align 4
  %x = alloca float, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  store i8* %unused, i8** %unused.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %word = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 2143289344, i32* %word, align 4
  %value = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %0 = load float* %value, align 4
  store float %0, float* %x, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load float* %x, align 4
  ret float %1
}

; Function Attrs: nounwind
define double @frexp(double %x, i32* %eptr) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %eptr.addr = alloca i32*, align 4
  %hx = alloca i32, align 4
  %ix = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store i32* %eptr, i32** %eptr.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 2147483647, %3
  store i32 %and, i32* %ix, align 4
  %4 = load i32** %eptr.addr, align 4
  store i32 0, i32* %4, align 4
  %5 = load i32* %ix, align 4
  %cmp = icmp sge i32 %5, 2146435072
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %do.end
  %6 = load i32* %ix, align 4
  %7 = load i32* %lx, align 4
  %or = or i32 %6, %7
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %do.end
  %8 = load double* %x.addr, align 8
  store double %8, double* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %9 = load i32* %ix, align 4
  %cmp3 = icmp slt i32 %9, 1048576
  br i1 %cmp3, label %if.then4, label %if.end11

if.then4:                                         ; preds = %if.end
  %10 = load double* %x.addr, align 8
  %mul = fmul double %10, 0x4350000000000000
  store double %mul, double* %x.addr, align 8
  br label %do.body5

do.body5:                                         ; preds = %if.then4
  %11 = load double* %x.addr, align 8
  %value6 = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %11, double* %value6, align 4
  %parts7 = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw8 = getelementptr inbounds %struct.anon* %parts7, i32 0, i32 1
  %12 = load i32* %msw8, align 4
  store i32 %12, i32* %hx, align 4
  br label %do.end9

do.end9:                                          ; preds = %do.body5
  %13 = load i32* %hx, align 4
  %and10 = and i32 %13, 2147483647
  store i32 %and10, i32* %ix, align 4
  %14 = load i32** %eptr.addr, align 4
  store i32 -54, i32* %14, align 4
  br label %if.end11

if.end11:                                         ; preds = %do.end9, %if.end
  %15 = load i32* %ix, align 4
  %shr = ashr i32 %15, 20
  %sub = sub nsw i32 %shr, 1022
  %16 = load i32** %eptr.addr, align 4
  %17 = load i32* %16, align 4
  %add = add nsw i32 %17, %sub
  store i32 %add, i32* %16, align 4
  %18 = load i32* %hx, align 4
  %and12 = and i32 %18, -2146435073
  %or13 = or i32 %and12, 1071644672
  store i32 %or13, i32* %hx, align 4
  br label %do.body14

do.body14:                                        ; preds = %if.end11
  %19 = load double* %x.addr, align 8
  %value15 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %19, double* %value15, align 4
  %20 = load i32* %hx, align 4
  %parts16 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw17 = getelementptr inbounds %struct.anon* %parts16, i32 0, i32 1
  store i32 %20, i32* %msw17, align 4
  %value18 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %21 = load double* %value18, align 4
  store double %21, double* %x.addr, align 8
  br label %do.end19

do.end19:                                         ; preds = %do.body14
  %22 = load double* %x.addr, align 8
  store double %22, double* %retval
  br label %return

return:                                           ; preds = %do.end19, %if.then
  %23 = load double* %retval
  ret double %23
}

; Function Attrs: nounwind
define float @rintf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %i0 = alloca i32, align 4
  %j0 = alloca i32, align 4
  %sx = alloca i32, align 4
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %ix = alloca i32, align 4
  %t = alloca float, align 4
  %w = alloca float, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u20 = alloca %union.ieee_float_shape_type, align 4
  %sf_u25 = alloca %union.ieee_float_shape_type, align 4
  %sf_u52 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %i0, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %i0, align 4
  %shr = ashr i32 %2, 31
  %and = and i32 %shr, 1
  store i32 %and, i32* %sx, align 4
  %3 = load i32* %i0, align 4
  %and1 = and i32 %3, 2147483647
  store i32 %and1, i32* %ix, align 4
  %4 = load i32* %ix, align 4
  %shr2 = lshr i32 %4, 23
  %sub = sub i32 %shr2, 127
  store i32 %sub, i32* %j0, align 4
  %5 = load i32* %j0, align 4
  %cmp = icmp slt i32 %5, 23
  br i1 %cmp, label %if.then, label %if.else45

if.then:                                          ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp3 = icmp eq i32 %6, 0
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %7 = load float* %x.addr, align 4
  store float %7, float* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %8 = load i32* %j0, align 4
  %cmp5 = icmp slt i32 %8, 0
  br i1 %cmp5, label %if.then6, label %if.else

if.then6:                                         ; preds = %if.end
  %9 = load i32* %i0, align 4
  %and7 = and i32 %9, 8388607
  store i32 %and7, i32* %i1, align 4
  %10 = load i32* %i0, align 4
  %and8 = and i32 %10, -1048576
  store i32 %and8, i32* %i0, align 4
  %11 = load i32* %i1, align 4
  %12 = load i32* %i1, align 4
  %sub9 = sub i32 0, %12
  %or = or i32 %11, %sub9
  %shr10 = lshr i32 %or, 9
  %and11 = and i32 %shr10, 4194304
  %13 = load i32* %i0, align 4
  %or12 = or i32 %13, %and11
  store i32 %or12, i32* %i0, align 4
  br label %do.body13

do.body13:                                        ; preds = %if.then6
  %14 = load i32* %i0, align 4
  %word14 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %14, i32* %word14, align 4
  %value15 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %15 = load float* %value15, align 4
  store float %15, float* %x.addr, align 4
  br label %do.end16

do.end16:                                         ; preds = %do.body13
  %16 = load i32* %sx, align 4
  %arrayidx = getelementptr inbounds [2 x float]* @TWO23, i32 0, i32 %16
  %17 = load float* %arrayidx, align 4
  %18 = load float* %x.addr, align 4
  %add = fadd float %17, %18
  store volatile float %add, float* %w, align 4
  %19 = load volatile float* %w, align 4
  %20 = load i32* %sx, align 4
  %arrayidx17 = getelementptr inbounds [2 x float]* @TWO23, i32 0, i32 %20
  %21 = load float* %arrayidx17, align 4
  %sub18 = fsub float %19, %21
  store float %sub18, float* %t, align 4
  br label %do.body19

do.body19:                                        ; preds = %do.end16
  %22 = load float* %t, align 4
  %value21 = bitcast %union.ieee_float_shape_type* %gf_u20 to float*
  store float %22, float* %value21, align 4
  %word22 = bitcast %union.ieee_float_shape_type* %gf_u20 to i32*
  %23 = load i32* %word22, align 4
  store i32 %23, i32* %i0, align 4
  br label %do.end23

do.end23:                                         ; preds = %do.body19
  br label %do.body24

do.body24:                                        ; preds = %do.end23
  %24 = load i32* %i0, align 4
  %and26 = and i32 %24, 2147483647
  %25 = load i32* %sx, align 4
  %shl = shl i32 %25, 31
  %or27 = or i32 %and26, %shl
  %word28 = bitcast %union.ieee_float_shape_type* %sf_u25 to i32*
  store i32 %or27, i32* %word28, align 4
  %value29 = bitcast %union.ieee_float_shape_type* %sf_u25 to float*
  %26 = load float* %value29, align 4
  store float %26, float* %t, align 4
  br label %do.end30

do.end30:                                         ; preds = %do.body24
  %27 = load float* %t, align 4
  store float %27, float* %retval
  br label %return

if.else:                                          ; preds = %if.end
  %28 = load i32* %j0, align 4
  %shr31 = ashr i32 8388607, %28
  store i32 %shr31, i32* %i, align 4
  %29 = load i32* %i0, align 4
  %30 = load i32* %i, align 4
  %and32 = and i32 %29, %30
  %cmp33 = icmp eq i32 %and32, 0
  br i1 %cmp33, label %if.then34, label %if.end35

if.then34:                                        ; preds = %if.else
  %31 = load float* %x.addr, align 4
  store float %31, float* %retval
  br label %return

if.end35:                                         ; preds = %if.else
  %32 = load i32* %i, align 4
  %shr36 = lshr i32 %32, 1
  store i32 %shr36, i32* %i, align 4
  %33 = load i32* %i0, align 4
  %34 = load i32* %i, align 4
  %and37 = and i32 %33, %34
  %cmp38 = icmp ne i32 %and37, 0
  br i1 %cmp38, label %if.then39, label %if.end43

if.then39:                                        ; preds = %if.end35
  %35 = load i32* %i0, align 4
  %36 = load i32* %i, align 4
  %neg = xor i32 %36, -1
  %and40 = and i32 %35, %neg
  %37 = load i32* %j0, align 4
  %shr41 = ashr i32 1048576, %37
  %or42 = or i32 %and40, %shr41
  store i32 %or42, i32* %i0, align 4
  br label %if.end43

if.end43:                                         ; preds = %if.then39, %if.end35
  br label %if.end44

if.end44:                                         ; preds = %if.end43
  br label %if.end50

if.else45:                                        ; preds = %do.end
  %38 = load i32* %ix, align 4
  %cmp46 = icmp ult i32 %38, 2139095040
  br i1 %cmp46, label %if.else49, label %if.then47

if.then47:                                        ; preds = %if.else45
  %39 = load float* %x.addr, align 4
  %40 = load float* %x.addr, align 4
  %add48 = fadd float %39, %40
  store float %add48, float* %retval
  br label %return

if.else49:                                        ; preds = %if.else45
  %41 = load float* %x.addr, align 4
  store float %41, float* %retval
  br label %return

if.end50:                                         ; preds = %if.end44
  br label %do.body51

do.body51:                                        ; preds = %if.end50
  %42 = load i32* %i0, align 4
  %word53 = bitcast %union.ieee_float_shape_type* %sf_u52 to i32*
  store i32 %42, i32* %word53, align 4
  %value54 = bitcast %union.ieee_float_shape_type* %sf_u52 to float*
  %43 = load float* %value54, align 4
  store float %43, float* %x.addr, align 4
  br label %do.end55

do.end55:                                         ; preds = %do.body51
  %44 = load i32* %sx, align 4
  %arrayidx56 = getelementptr inbounds [2 x float]* @TWO23, i32 0, i32 %44
  %45 = load float* %arrayidx56, align 4
  %46 = load float* %x.addr, align 4
  %add57 = fadd float %45, %46
  store volatile float %add57, float* %w, align 4
  %47 = load volatile float* %w, align 4
  %48 = load i32* %sx, align 4
  %arrayidx58 = getelementptr inbounds [2 x float]* @TWO23, i32 0, i32 %48
  %49 = load float* %arrayidx58, align 4
  %sub59 = fsub float %47, %49
  store float %sub59, float* %retval
  br label %return

return:                                           ; preds = %do.end55, %if.else49, %if.then47, %if.then34, %do.end30, %if.then4
  %50 = load float* %retval
  ret float %50
}

; Function Attrs: nounwind
define float @scalbnf(float %x, i32 %n) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %n.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %ix = alloca i32, align 4
  %hx = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u7 = alloca %union.ieee_float_shape_type, align 4
  %sf_u = alloca %union.ieee_float_shape_type, align 4
  %sf_u42 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store i32 %n, i32* %n.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %hx, align 4
  %3 = load i32* %hx, align 4
  %shr = lshr i32 %3, 23
  store i32 %shr, i32* %k, align 4
  %4 = load i32* %hx, align 4
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %5 = load float* %x.addr, align 4
  store float %5, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %6 = load i32* %hx, align 4
  %cmp1 = icmp ult i32 %6, 2139095040
  br i1 %cmp1, label %if.end3, label %if.then2

if.then2:                                         ; preds = %if.end
  %7 = load float* %x.addr, align 4
  %8 = load float* %x.addr, align 4
  %add = fadd float %7, %8
  store float %add, float* %retval
  br label %return

if.end3:                                          ; preds = %if.end
  %9 = load i32* %hx, align 4
  %cmp4 = icmp ult i32 %9, 8388608
  br i1 %cmp4, label %if.then5, label %if.end17

if.then5:                                         ; preds = %if.end3
  %10 = load float* %x.addr, align 4
  %mul = fmul float %10, 0x4180000000000000
  store float %mul, float* %x.addr, align 4
  br label %do.body6

do.body6:                                         ; preds = %if.then5
  %11 = load float* %x.addr, align 4
  %value8 = bitcast %union.ieee_float_shape_type* %gf_u7 to float*
  store float %11, float* %value8, align 4
  %word9 = bitcast %union.ieee_float_shape_type* %gf_u7 to i32*
  %12 = load i32* %word9, align 4
  store i32 %12, i32* %ix, align 4
  br label %do.end10

do.end10:                                         ; preds = %do.body6
  %13 = load i32* %ix, align 4
  %and11 = and i32 %13, 2139095040
  %shr12 = ashr i32 %and11, 23
  %sub = sub nsw i32 %shr12, 25
  store i32 %sub, i32* %k, align 4
  %14 = load i32* %n.addr, align 4
  %cmp13 = icmp slt i32 %14, -50000
  br i1 %cmp13, label %if.then14, label %if.end16

if.then14:                                        ; preds = %do.end10
  %15 = load float* %x.addr, align 4
  %mul15 = fmul float 0x39B4484C00000000, %15
  store float %mul15, float* %retval
  br label %return

if.end16:                                         ; preds = %do.end10
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %if.end3
  %16 = load i32* %k, align 4
  %17 = load i32* %n.addr, align 4
  %add18 = add nsw i32 %16, %17
  store i32 %add18, i32* %k, align 4
  %18 = load i32* %k, align 4
  %cmp19 = icmp sgt i32 %18, 254
  br i1 %cmp19, label %if.then20, label %if.end22

if.then20:                                        ; preds = %if.end17
  %19 = load float* %x.addr, align 4
  %call = call float @copysignf(float 0x46293E5940000000, float %19) #6
  %mul21 = fmul float 0x46293E5940000000, %call
  store float %mul21, float* %retval
  br label %return

if.end22:                                         ; preds = %if.end17
  %20 = load i32* %k, align 4
  %cmp23 = icmp sgt i32 %20, 0
  br i1 %cmp23, label %if.then24, label %if.end30

if.then24:                                        ; preds = %if.end22
  br label %do.body25

do.body25:                                        ; preds = %if.then24
  %21 = load i32* %ix, align 4
  %and26 = and i32 %21, -2139095041
  %22 = load i32* %k, align 4
  %shl = shl i32 %22, 23
  %or = or i32 %and26, %shl
  %word27 = bitcast %union.ieee_float_shape_type* %sf_u to i32*
  store i32 %or, i32* %word27, align 4
  %value28 = bitcast %union.ieee_float_shape_type* %sf_u to float*
  %23 = load float* %value28, align 4
  store float %23, float* %x.addr, align 4
  br label %do.end29

do.end29:                                         ; preds = %do.body25
  %24 = load float* %x.addr, align 4
  store float %24, float* %retval
  br label %return

if.end30:                                         ; preds = %if.end22
  %25 = load i32* %k, align 4
  %cmp31 = icmp slt i32 %25, -22
  br i1 %cmp31, label %if.then32, label %if.end39

if.then32:                                        ; preds = %if.end30
  %26 = load i32* %n.addr, align 4
  %cmp33 = icmp sgt i32 %26, 50000
  br i1 %cmp33, label %if.then34, label %if.else

if.then34:                                        ; preds = %if.then32
  %27 = load float* %x.addr, align 4
  %call35 = call float @copysignf(float 0x46293E5940000000, float %27) #6
  %mul36 = fmul float 0x46293E5940000000, %call35
  store float %mul36, float* %retval
  br label %return

if.else:                                          ; preds = %if.then32
  %28 = load float* %x.addr, align 4
  %call37 = call float @copysignf(float 0x39B4484C00000000, float %28) #6
  %mul38 = fmul float 0x39B4484C00000000, %call37
  store float %mul38, float* %retval
  br label %return

if.end39:                                         ; preds = %if.end30
  %29 = load i32* %k, align 4
  %add40 = add nsw i32 %29, 25
  store i32 %add40, i32* %k, align 4
  br label %do.body41

do.body41:                                        ; preds = %if.end39
  %30 = load i32* %ix, align 4
  %and43 = and i32 %30, -2139095041
  %31 = load i32* %k, align 4
  %shl44 = shl i32 %31, 23
  %or45 = or i32 %and43, %shl44
  %word46 = bitcast %union.ieee_float_shape_type* %sf_u42 to i32*
  store i32 %or45, i32* %word46, align 4
  %value47 = bitcast %union.ieee_float_shape_type* %sf_u42 to float*
  %32 = load float* %value47, align 4
  store float %32, float* %x.addr, align 4
  br label %do.end48

do.end48:                                         ; preds = %do.body41
  %33 = load float* %x.addr, align 4
  %mul49 = fmul float %33, 0x3E60000000000000
  store float %mul49, float* %retval
  br label %return

return:                                           ; preds = %do.end48, %if.else, %if.then34, %do.end29, %if.then20, %if.then14, %if.then2, %if.then
  %34 = load float* %retval
  ret float %34
}

; Function Attrs: nounwind
define float @significandf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %x.addr, align 4
  %call = call i32 @ilogbf(float %1) #4
  %sub = sub nsw i32 0, %call
  %conv = sitofp i32 %sub to float
  %call1 = call float @__ieee754_scalbf(float %0, float %conv) #5
  ret float %call1
}

; Function Attrs: nounwind
define float @sinf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y = alloca [2 x float], align 4
  %z = alloca float, align 4
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float 0.000000e+00, float* %z, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sle i32 %3, 1061752792
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %z, align 4
  %call = call float @__kernel_sinf(float %4, float %5, i32 0) #5
  store float %call, float* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %6, 2139095040
  br i1 %cmp1, label %if.else3, label %if.then2

if.then2:                                         ; preds = %if.else
  %7 = load float* %x.addr, align 4
  %8 = load float* %x.addr, align 4
  %sub = fsub float %7, %8
  store float %sub, float* %retval
  br label %return

if.else3:                                         ; preds = %if.else
  %9 = load float* %x.addr, align 4
  %arraydecay = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2f(float %9, float* %arraydecay) #5
  store i32 %call4, i32* %n, align 4
  %10 = load i32* %n, align 4
  %and5 = and i32 %10, 3
  switch i32 %and5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb8
    i32 2, label %sw.bb12
  ]

sw.bb:                                            ; preds = %if.else3
  %arrayidx = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %11 = load float* %arrayidx, align 4
  %arrayidx6 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %12 = load float* %arrayidx6, align 4
  %call7 = call float @__kernel_sinf(float %11, float %12, i32 1) #5
  store float %call7, float* %retval
  br label %return

sw.bb8:                                           ; preds = %if.else3
  %arrayidx9 = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %13 = load float* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %14 = load float* %arrayidx10, align 4
  %call11 = call float @__kernel_cosf(float %13, float %14) #5
  store float %call11, float* %retval
  br label %return

sw.bb12:                                          ; preds = %if.else3
  %arrayidx13 = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %15 = load float* %arrayidx13, align 4
  %arrayidx14 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %16 = load float* %arrayidx14, align 4
  %call15 = call float @__kernel_sinf(float %15, float %16, i32 1) #5
  %sub16 = fsub float -0.000000e+00, %call15
  store float %sub16, float* %retval
  br label %return

sw.default:                                       ; preds = %if.else3
  %arrayidx17 = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %17 = load float* %arrayidx17, align 4
  %arrayidx18 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %18 = load float* %arrayidx18, align 4
  %call19 = call float @__kernel_cosf(float %17, float %18) #5
  %sub20 = fsub float -0.000000e+00, %call19
  store float %sub20, float* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb12, %sw.bb8, %sw.bb, %if.then2, %if.then
  %19 = load float* %retval
  ret float %19
}

; Function Attrs: nounwind
define float @tanf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y = alloca [2 x float], align 4
  %z = alloca float, align 4
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  store float 0.000000e+00, float* %z, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sle i32 %3, 1061752794
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %5 = load float* %z, align 4
  %call = call float @__kernel_tanf(float %4, float %5, i32 1) #5
  store float %call, float* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp slt i32 %6, 2139095040
  br i1 %cmp1, label %if.else3, label %if.then2

if.then2:                                         ; preds = %if.else
  %7 = load float* %x.addr, align 4
  %8 = load float* %x.addr, align 4
  %sub = fsub float %7, %8
  store float %sub, float* %retval
  br label %return

if.else3:                                         ; preds = %if.else
  %9 = load float* %x.addr, align 4
  %arraydecay = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2f(float %9, float* %arraydecay) #5
  store i32 %call4, i32* %n, align 4
  %arrayidx = getelementptr inbounds [2 x float]* %y, i32 0, i32 0
  %10 = load float* %arrayidx, align 4
  %arrayidx5 = getelementptr inbounds [2 x float]* %y, i32 0, i32 1
  %11 = load float* %arrayidx5, align 4
  %12 = load i32* %n, align 4
  %and6 = and i32 %12, 1
  %shl = shl i32 %and6, 1
  %sub7 = sub nsw i32 1, %shl
  %call8 = call float @__kernel_tanf(float %10, float %11, i32 %sub7) #5
  store float %call8, float* %retval
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %13 = load float* %retval
  ret float %13
}

; Function Attrs: nounwind
define float @tanhf(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %t = alloca float, align 4
  %z = alloca float, align 4
  %jx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %jx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %jx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 2139095040
  br i1 %cmp, label %if.end, label %if.then

if.then:                                          ; preds = %do.end
  %4 = load i32* %jx, align 4
  %cmp1 = icmp sge i32 %4, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %5 = load float* %x.addr, align 4
  %div = fdiv float 1.000000e+00, %5
  %add = fadd float %div, 1.000000e+00
  store float %add, float* %retval
  br label %return

if.else:                                          ; preds = %if.then
  %6 = load float* %x.addr, align 4
  %div3 = fdiv float 1.000000e+00, %6
  %sub = fsub float %div3, 1.000000e+00
  store float %sub, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %7, 1102053376
  br i1 %cmp4, label %if.then5, label %if.else25

if.then5:                                         ; preds = %if.end
  %8 = load i32* %ix, align 4
  %cmp6 = icmp slt i32 %8, 603979776
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.then5
  %9 = load float* %x.addr, align 4
  %10 = load float* %x.addr, align 4
  %add8 = fadd float 1.000000e+00, %10
  %mul = fmul float %9, %add8
  store float %mul, float* %retval
  br label %return

if.end9:                                          ; preds = %if.then5
  %11 = load i32* %ix, align 4
  %cmp10 = icmp sge i32 %11, 1065353216
  br i1 %cmp10, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.end9
  %12 = load float* %x.addr, align 4
  %call = call float @fabsf(float %12) #6
  %mul12 = fmul float 2.000000e+00, %call
  %call13 = call float @expm1f(float %mul12) #4
  store float %call13, float* %t, align 4
  %13 = load float* %t, align 4
  %add14 = fadd float %13, 2.000000e+00
  %div15 = fdiv float 2.000000e+00, %add14
  %sub16 = fsub float 1.000000e+00, %div15
  store float %sub16, float* %z, align 4
  br label %if.end24

if.else17:                                        ; preds = %if.end9
  %14 = load float* %x.addr, align 4
  %call18 = call float @fabsf(float %14) #6
  %mul19 = fmul float -2.000000e+00, %call18
  %call20 = call float @expm1f(float %mul19) #4
  store float %call20, float* %t, align 4
  %15 = load float* %t, align 4
  %sub21 = fsub float -0.000000e+00, %15
  %16 = load float* %t, align 4
  %add22 = fadd float %16, 2.000000e+00
  %div23 = fdiv float %sub21, %add22
  store float %div23, float* %z, align 4
  br label %if.end24

if.end24:                                         ; preds = %if.else17, %if.then11
  br label %if.end26

if.else25:                                        ; preds = %if.end
  store float 1.000000e+00, float* %z, align 4
  br label %if.end26

if.end26:                                         ; preds = %if.else25, %if.end24
  %17 = load i32* %jx, align 4
  %cmp27 = icmp sge i32 %17, 0
  br i1 %cmp27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end26
  %18 = load float* %z, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end26
  %19 = load float* %z, align 4
  %sub28 = fsub float -0.000000e+00, %19
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %18, %cond.true ], [ %sub28, %cond.false ]
  store float %cond, float* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then7, %if.else, %if.then2
  %20 = load float* %retval
  ret float %20
}

; Function Attrs: nounwind
define i32 @ilogb(double %x) #2 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca double, align 8
  %hx = alloca i32, align 4
  %lx = alloca i32, align 4
  %ix = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 %3, 2147483647
  store i32 %and, i32* %hx, align 4
  %4 = load i32* %hx, align 4
  %cmp = icmp slt i32 %4, 1048576
  br i1 %cmp, label %if.then, label %if.else17

if.then:                                          ; preds = %do.end
  %5 = load i32* %hx, align 4
  %6 = load i32* %lx, align 4
  %or = or i32 %5, %6
  %cmp2 = icmp eq i32 %or, 0
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  store i32 -2147483647, i32* %retval
  br label %return

if.else:                                          ; preds = %if.then
  %7 = load i32* %hx, align 4
  %cmp4 = icmp eq i32 %7, 0
  br i1 %cmp4, label %if.then5, label %if.else7

if.then5:                                         ; preds = %if.else
  store i32 -1043, i32* %ix, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then5
  %8 = load i32* %lx, align 4
  %cmp6 = icmp sgt i32 %8, 0
  br i1 %cmp6, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %9 = load i32* %ix, align 4
  %sub = sub nsw i32 %9, 1
  store i32 %sub, i32* %ix, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %10 = load i32* %lx, align 4
  %shl = shl i32 %10, 1
  store i32 %shl, i32* %lx, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end

if.else7:                                         ; preds = %if.else
  store i32 -1022, i32* %ix, align 4
  %11 = load i32* %hx, align 4
  %shl8 = shl i32 %11, 11
  store i32 %shl8, i32* %hx, align 4
  br label %for.cond9

for.cond9:                                        ; preds = %for.inc13, %if.else7
  %12 = load i32* %hx, align 4
  %cmp10 = icmp sgt i32 %12, 0
  br i1 %cmp10, label %for.body11, label %for.end15

for.body11:                                       ; preds = %for.cond9
  %13 = load i32* %ix, align 4
  %sub12 = sub nsw i32 %13, 1
  store i32 %sub12, i32* %ix, align 4
  br label %for.inc13

for.inc13:                                        ; preds = %for.body11
  %14 = load i32* %hx, align 4
  %shl14 = shl i32 %14, 1
  store i32 %shl14, i32* %hx, align 4
  br label %for.cond9

for.end15:                                        ; preds = %for.cond9
  br label %if.end

if.end:                                           ; preds = %for.end15, %for.end
  br label %if.end16

if.end16:                                         ; preds = %if.end
  %15 = load i32* %ix, align 4
  store i32 %15, i32* %retval
  br label %return

if.else17:                                        ; preds = %do.end
  %16 = load i32* %hx, align 4
  %cmp18 = icmp slt i32 %16, 2146435072
  br i1 %cmp18, label %if.then19, label %if.else21

if.then19:                                        ; preds = %if.else17
  %17 = load i32* %hx, align 4
  %shr = ashr i32 %17, 20
  %sub20 = sub nsw i32 %shr, 1023
  store i32 %sub20, i32* %retval
  br label %return

if.else21:                                        ; preds = %if.else17
  store i32 2147483647, i32* %retval
  br label %return

return:                                           ; preds = %if.else21, %if.then19, %if.end16, %if.then3
  %18 = load i32* %retval
  ret i32 %18
}

; Function Attrs: nounwind readnone
define i32 @isinf(double %x) #3 {
entry:
  %x.addr = alloca double, align 8
  %hx = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 %3, 2147483647
  store i32 %and, i32* %hx, align 4
  %4 = load i32* %lx, align 4
  %5 = load i32* %lx, align 4
  %sub = sub nsw i32 0, %5
  %or = or i32 %4, %sub
  %shr = lshr i32 %or, 31
  %6 = load i32* %hx, align 4
  %or2 = or i32 %6, %shr
  store i32 %or2, i32* %hx, align 4
  %7 = load i32* %hx, align 4
  %sub3 = sub nsw i32 2146435072, %7
  store i32 %sub3, i32* %hx, align 4
  %8 = load i32* %hx, align 4
  %9 = load i32* %hx, align 4
  %sub4 = sub nsw i32 0, %9
  %or5 = or i32 %8, %sub4
  %shr6 = lshr i32 %or5, 31
  %sub7 = sub nsw i32 1, %shr6
  ret i32 %sub7
}

; Function Attrs: nounwind readnone
define i32 @__isinf(double %x) #3 {
entry:
  %x.addr = alloca double, align 8
  %hx = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 %3, 2147483647
  store i32 %and, i32* %hx, align 4
  %4 = load i32* %lx, align 4
  %5 = load i32* %lx, align 4
  %sub = sub nsw i32 0, %5
  %or = or i32 %4, %sub
  %shr = lshr i32 %or, 31
  %6 = load i32* %hx, align 4
  %or2 = or i32 %6, %shr
  store i32 %or2, i32* %hx, align 4
  %7 = load i32* %hx, align 4
  %sub3 = sub nsw i32 2146435072, %7
  store i32 %sub3, i32* %hx, align 4
  %8 = load i32* %hx, align 4
  %9 = load i32* %hx, align 4
  %sub4 = sub nsw i32 0, %9
  %or5 = or i32 %8, %sub4
  %shr6 = lshr i32 %or5, 31
  %sub7 = sub nsw i32 1, %shr6
  ret i32 %sub7
}

; Function Attrs: nounwind readnone
define i32 @isnan(double %x) #3 {
entry:
  %x.addr = alloca double, align 8
  %hx = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 %3, 2147483647
  store i32 %and, i32* %hx, align 4
  %4 = load i32* %lx, align 4
  %5 = load i32* %lx, align 4
  %sub = sub nsw i32 0, %5
  %or = or i32 %4, %sub
  %shr = lshr i32 %or, 31
  %6 = load i32* %hx, align 4
  %or2 = or i32 %6, %shr
  store i32 %or2, i32* %hx, align 4
  %7 = load i32* %hx, align 4
  %sub3 = sub nsw i32 2146435072, %7
  store i32 %sub3, i32* %hx, align 4
  %8 = load i32* %hx, align 4
  %shr4 = lshr i32 %8, 31
  ret i32 %shr4
}

; Function Attrs: nounwind readnone
define i32 @__isnan(double %x) #3 {
entry:
  %x.addr = alloca double, align 8
  %hx = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 %3, 2147483647
  store i32 %and, i32* %hx, align 4
  %4 = load i32* %lx, align 4
  %5 = load i32* %lx, align 4
  %sub = sub nsw i32 0, %5
  %or = or i32 %4, %sub
  %shr = lshr i32 %or, 31
  %6 = load i32* %hx, align 4
  %or2 = or i32 %6, %shr
  store i32 %or2, i32* %hx, align 4
  %7 = load i32* %hx, align 4
  %sub3 = sub nsw i32 2146435072, %7
  store i32 %sub3, i32* %hx, align 4
  %8 = load i32* %hx, align 4
  %shr4 = lshr i32 %8, 31
  ret i32 %shr4
}

; Function Attrs: nounwind
define double @ldexp(double %value, i32 %exp) #2 {
entry:
  %retval = alloca double, align 4
  %value.addr = alloca double, align 8
  %exp.addr = alloca i32, align 4
  store double %value, double* %value.addr, align 8
  store i32 %exp, i32* %exp.addr, align 4
  %0 = load double* %value.addr, align 8
  %call = call i32 @finite(double %0) #6
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %1 = load double* %value.addr, align 8
  %cmp = fcmp oeq double %1, 0.000000e+00
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load double* %value.addr, align 8
  store double %2, double* %retval
  br label %return

if.end:                                           ; preds = %lor.lhs.false
  %3 = load double* %value.addr, align 8
  %4 = load i32* %exp.addr, align 4
  %call1 = call double @scalbn(double %3, i32 %4) #4
  store double %call1, double* %value.addr, align 8
  %5 = load double* %value.addr, align 8
  %call2 = call i32 @finite(double %5) #6
  %tobool3 = icmp ne i32 %call2, 0
  br i1 %tobool3, label %lor.lhs.false4, label %if.then6

lor.lhs.false4:                                   ; preds = %if.end
  %6 = load double* %value.addr, align 8
  %cmp5 = fcmp oeq double %6, 0.000000e+00
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %lor.lhs.false4, %if.end
  %call7 = call i32* @__errno_location() #6
  store i32 34, i32* %call7, align 4
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %lor.lhs.false4
  %7 = load double* %value.addr, align 8
  store double %7, double* %retval
  br label %return

return:                                           ; preds = %if.end8, %if.then
  %8 = load double* %retval
  ret double %8
}

; Function Attrs: nounwind
define double @log1p(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %hfsq = alloca double, align 8
  %f = alloca double, align 8
  %c = alloca double, align 8
  %s = alloca double, align 8
  %z = alloca double, align 8
  %R = alloca double, align 8
  %u = alloca double, align 8
  %k = alloca i32, align 4
  %hx = alloca i32, align 4
  %hu = alloca i32, align 4
  %ax = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %gh_u30 = alloca %union.ieee_double_shape_type, align 4
  %gh_u44 = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u64 = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %hx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ax, align 4
  store i32 1, i32* %k, align 4
  %3 = load i32* %hx, align 4
  %cmp = icmp slt i32 %3, 1071284858
  br i1 %cmp, label %if.then, label %if.end19

if.then:                                          ; preds = %do.end
  %4 = load i32* %ax, align 4
  %cmp1 = icmp sge i32 %4, 1072693248
  br i1 %cmp1, label %if.then2, label %if.end

if.then2:                                         ; preds = %if.then
  %5 = load double* %x.addr, align 8
  %cmp3 = fcmp oeq double %5, -1.000000e+00
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then2
  store double 0xFFF0000000000000, double* %retval
  br label %return

if.else:                                          ; preds = %if.then2
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %sub = fsub double %6, %7
  %8 = load double* %x.addr, align 8
  %9 = load double* %x.addr, align 8
  %sub5 = fsub double %8, %9
  %div = fdiv double %sub, %sub5
  store double %div, double* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %10 = load i32* %ax, align 4
  %cmp6 = icmp slt i32 %10, 1042284544
  br i1 %cmp6, label %if.then7, label %if.end14

if.then7:                                         ; preds = %if.end
  %11 = load double* %x.addr, align 8
  %add = fadd double 0x4350000000000000, %11
  %cmp8 = fcmp ogt double %add, 0.000000e+00
  br i1 %cmp8, label %land.lhs.true, label %if.else11

land.lhs.true:                                    ; preds = %if.then7
  %12 = load i32* %ax, align 4
  %cmp9 = icmp slt i32 %12, 1016070144
  br i1 %cmp9, label %if.then10, label %if.else11

if.then10:                                        ; preds = %land.lhs.true
  %13 = load double* %x.addr, align 8
  store double %13, double* %retval
  br label %return

if.else11:                                        ; preds = %land.lhs.true, %if.then7
  %14 = load double* %x.addr, align 8
  %15 = load double* %x.addr, align 8
  %16 = load double* %x.addr, align 8
  %mul = fmul double %15, %16
  %mul12 = fmul double %mul, 5.000000e-01
  %sub13 = fsub double %14, %mul12
  store double %sub13, double* %retval
  br label %return

if.end14:                                         ; preds = %if.end
  %17 = load i32* %hx, align 4
  %cmp15 = icmp sgt i32 %17, 0
  br i1 %cmp15, label %if.then17, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end14
  %18 = load i32* %hx, align 4
  %cmp16 = icmp sle i32 %18, -1076707645
  br i1 %cmp16, label %if.then17, label %if.end18

if.then17:                                        ; preds = %lor.lhs.false, %if.end14
  store i32 0, i32* %k, align 4
  %19 = load double* %x.addr, align 8
  store double %19, double* %f, align 8
  store i32 1, i32* %hu, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then17, %lor.lhs.false
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %do.end
  %20 = load i32* %hx, align 4
  %cmp20 = icmp sge i32 %20, 2146435072
  br i1 %cmp20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %if.end19
  %21 = load double* %x.addr, align 8
  %22 = load double* %x.addr, align 8
  %add22 = fadd double %21, %22
  store double %add22, double* %retval
  br label %return

if.end23:                                         ; preds = %if.end19
  %23 = load i32* %k, align 4
  %cmp24 = icmp ne i32 %23, 0
  br i1 %cmp24, label %if.then25, label %if.end75

if.then25:                                        ; preds = %if.end23
  %24 = load i32* %hx, align 4
  %cmp26 = icmp slt i32 %24, 1128267776
  br i1 %cmp26, label %if.then27, label %if.else42

if.then27:                                        ; preds = %if.then25
  %25 = load double* %x.addr, align 8
  %add28 = fadd double 1.000000e+00, %25
  store double %add28, double* %u, align 8
  br label %do.body29

do.body29:                                        ; preds = %if.then27
  %26 = load double* %u, align 8
  %value31 = bitcast %union.ieee_double_shape_type* %gh_u30 to double*
  store double %26, double* %value31, align 4
  %parts32 = bitcast %union.ieee_double_shape_type* %gh_u30 to %struct.anon*
  %msw33 = getelementptr inbounds %struct.anon* %parts32, i32 0, i32 1
  %27 = load i32* %msw33, align 4
  store i32 %27, i32* %hu, align 4
  br label %do.end34

do.end34:                                         ; preds = %do.body29
  %28 = load i32* %hu, align 4
  %shr = ashr i32 %28, 20
  %sub35 = sub nsw i32 %shr, 1023
  store i32 %sub35, i32* %k, align 4
  %29 = load i32* %k, align 4
  %cmp36 = icmp sgt i32 %29, 0
  br i1 %cmp36, label %cond.true, label %cond.false

cond.true:                                        ; preds = %do.end34
  %30 = load double* %u, align 8
  %31 = load double* %x.addr, align 8
  %sub37 = fsub double %30, %31
  %sub38 = fsub double 1.000000e+00, %sub37
  br label %cond.end

cond.false:                                       ; preds = %do.end34
  %32 = load double* %x.addr, align 8
  %33 = load double* %u, align 8
  %sub39 = fsub double %33, 1.000000e+00
  %sub40 = fsub double %32, %sub39
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %sub38, %cond.true ], [ %sub40, %cond.false ]
  store double %cond, double* %c, align 8
  %34 = load double* %u, align 8
  %35 = load double* %c, align 8
  %div41 = fdiv double %35, %34
  store double %div41, double* %c, align 8
  br label %if.end51

if.else42:                                        ; preds = %if.then25
  %36 = load double* %x.addr, align 8
  store double %36, double* %u, align 8
  br label %do.body43

do.body43:                                        ; preds = %if.else42
  %37 = load double* %u, align 8
  %value45 = bitcast %union.ieee_double_shape_type* %gh_u44 to double*
  store double %37, double* %value45, align 4
  %parts46 = bitcast %union.ieee_double_shape_type* %gh_u44 to %struct.anon*
  %msw47 = getelementptr inbounds %struct.anon* %parts46, i32 0, i32 1
  %38 = load i32* %msw47, align 4
  store i32 %38, i32* %hu, align 4
  br label %do.end48

do.end48:                                         ; preds = %do.body43
  %39 = load i32* %hu, align 4
  %shr49 = ashr i32 %39, 20
  %sub50 = sub nsw i32 %shr49, 1023
  store i32 %sub50, i32* %k, align 4
  store double 0.000000e+00, double* %c, align 8
  br label %if.end51

if.end51:                                         ; preds = %do.end48, %cond.end
  %40 = load i32* %hu, align 4
  %and52 = and i32 %40, 1048575
  store i32 %and52, i32* %hu, align 4
  %41 = load i32* %hu, align 4
  %cmp53 = icmp slt i32 %41, 434334
  br i1 %cmp53, label %if.then54, label %if.else61

if.then54:                                        ; preds = %if.end51
  br label %do.body55

do.body55:                                        ; preds = %if.then54
  %42 = load double* %u, align 8
  %value56 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %42, double* %value56, align 4
  %43 = load i32* %hu, align 4
  %or = or i32 %43, 1072693248
  %parts57 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw58 = getelementptr inbounds %struct.anon* %parts57, i32 0, i32 1
  store i32 %or, i32* %msw58, align 4
  %value59 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %44 = load double* %value59, align 4
  store double %44, double* %u, align 8
  br label %do.end60

do.end60:                                         ; preds = %do.body55
  br label %if.end73

if.else61:                                        ; preds = %if.end51
  %45 = load i32* %k, align 4
  %add62 = add nsw i32 %45, 1
  store i32 %add62, i32* %k, align 4
  br label %do.body63

do.body63:                                        ; preds = %if.else61
  %46 = load double* %u, align 8
  %value65 = bitcast %union.ieee_double_shape_type* %sh_u64 to double*
  store double %46, double* %value65, align 4
  %47 = load i32* %hu, align 4
  %or66 = or i32 %47, 1071644672
  %parts67 = bitcast %union.ieee_double_shape_type* %sh_u64 to %struct.anon*
  %msw68 = getelementptr inbounds %struct.anon* %parts67, i32 0, i32 1
  store i32 %or66, i32* %msw68, align 4
  %value69 = bitcast %union.ieee_double_shape_type* %sh_u64 to double*
  %48 = load double* %value69, align 4
  store double %48, double* %u, align 8
  br label %do.end70

do.end70:                                         ; preds = %do.body63
  %49 = load i32* %hu, align 4
  %sub71 = sub nsw i32 1048576, %49
  %shr72 = ashr i32 %sub71, 2
  store i32 %shr72, i32* %hu, align 4
  br label %if.end73

if.end73:                                         ; preds = %do.end70, %do.end60
  %50 = load double* %u, align 8
  %sub74 = fsub double %50, 1.000000e+00
  store double %sub74, double* %f, align 8
  br label %if.end75

if.end75:                                         ; preds = %if.end73, %if.end23
  %51 = load double* %f, align 8
  %mul76 = fmul double 5.000000e-01, %51
  %52 = load double* %f, align 8
  %mul77 = fmul double %mul76, %52
  store double %mul77, double* %hfsq, align 8
  %53 = load i32* %hu, align 4
  %cmp78 = icmp eq i32 %53, 0
  br i1 %cmp78, label %if.then79, label %if.end107

if.then79:                                        ; preds = %if.end75
  %54 = load double* %f, align 8
  %cmp80 = fcmp oeq double %54, 0.000000e+00
  br i1 %cmp80, label %if.then81, label %if.end90

if.then81:                                        ; preds = %if.then79
  %55 = load i32* %k, align 4
  %cmp82 = icmp eq i32 %55, 0
  br i1 %cmp82, label %if.then83, label %if.else84

if.then83:                                        ; preds = %if.then81
  store double 0.000000e+00, double* %retval
  br label %return

if.else84:                                        ; preds = %if.then81
  %56 = load i32* %k, align 4
  %conv = sitofp i32 %56 to double
  %mul85 = fmul double %conv, 0x3DEA39EF35793C76
  %57 = load double* %c, align 8
  %add86 = fadd double %57, %mul85
  store double %add86, double* %c, align 8
  %58 = load i32* %k, align 4
  %conv87 = sitofp i32 %58 to double
  %mul88 = fmul double %conv87, 0x3FE62E42FEE00000
  %59 = load double* %c, align 8
  %add89 = fadd double %mul88, %59
  store double %add89, double* %retval
  br label %return

if.end90:                                         ; preds = %if.then79
  %60 = load double* %hfsq, align 8
  %61 = load double* %f, align 8
  %mul91 = fmul double 0x3FE5555555555555, %61
  %sub92 = fsub double 1.000000e+00, %mul91
  %mul93 = fmul double %60, %sub92
  store double %mul93, double* %R, align 8
  %62 = load i32* %k, align 4
  %cmp94 = icmp eq i32 %62, 0
  br i1 %cmp94, label %if.then96, label %if.else98

if.then96:                                        ; preds = %if.end90
  %63 = load double* %f, align 8
  %64 = load double* %R, align 8
  %sub97 = fsub double %63, %64
  store double %sub97, double* %retval
  br label %return

if.else98:                                        ; preds = %if.end90
  %65 = load i32* %k, align 4
  %conv99 = sitofp i32 %65 to double
  %mul100 = fmul double %conv99, 0x3FE62E42FEE00000
  %66 = load double* %R, align 8
  %67 = load i32* %k, align 4
  %conv101 = sitofp i32 %67 to double
  %mul102 = fmul double %conv101, 0x3DEA39EF35793C76
  %68 = load double* %c, align 8
  %add103 = fadd double %mul102, %68
  %sub104 = fsub double %66, %add103
  %69 = load double* %f, align 8
  %sub105 = fsub double %sub104, %69
  %sub106 = fsub double %mul100, %sub105
  store double %sub106, double* %retval
  br label %return

if.end107:                                        ; preds = %if.end75
  %70 = load double* %f, align 8
  %71 = load double* %f, align 8
  %add108 = fadd double 2.000000e+00, %71
  %div109 = fdiv double %70, %add108
  store double %div109, double* %s, align 8
  %72 = load double* %s, align 8
  %73 = load double* %s, align 8
  %mul110 = fmul double %72, %73
  store double %mul110, double* %z, align 8
  %74 = load double* %z, align 8
  %75 = load double* %z, align 8
  %76 = load double* %z, align 8
  %77 = load double* %z, align 8
  %78 = load double* %z, align 8
  %79 = load double* %z, align 8
  %80 = load double* %z, align 8
  %mul111 = fmul double %80, 0x3FC2F112DF3E5244
  %add112 = fadd double 0x3FC39A09D078C69F, %mul111
  %mul113 = fmul double %79, %add112
  %add114 = fadd double 0x3FC7466496CB03DE, %mul113
  %mul115 = fmul double %78, %add114
  %add116 = fadd double 0x3FCC71C51D8E78AF, %mul115
  %mul117 = fmul double %77, %add116
  %add118 = fadd double 0x3FD2492494229359, %mul117
  %mul119 = fmul double %76, %add118
  %add120 = fadd double 0x3FD999999997FA04, %mul119
  %mul121 = fmul double %75, %add120
  %add122 = fadd double 0x3FE5555555555593, %mul121
  %mul123 = fmul double %74, %add122
  store double %mul123, double* %R, align 8
  %81 = load i32* %k, align 4
  %cmp124 = icmp eq i32 %81, 0
  br i1 %cmp124, label %if.then126, label %if.else131

if.then126:                                       ; preds = %if.end107
  %82 = load double* %f, align 8
  %83 = load double* %hfsq, align 8
  %84 = load double* %s, align 8
  %85 = load double* %hfsq, align 8
  %86 = load double* %R, align 8
  %add127 = fadd double %85, %86
  %mul128 = fmul double %84, %add127
  %sub129 = fsub double %83, %mul128
  %sub130 = fsub double %82, %sub129
  store double %sub130, double* %retval
  br label %return

if.else131:                                       ; preds = %if.end107
  %87 = load i32* %k, align 4
  %conv132 = sitofp i32 %87 to double
  %mul133 = fmul double %conv132, 0x3FE62E42FEE00000
  %88 = load double* %hfsq, align 8
  %89 = load double* %s, align 8
  %90 = load double* %hfsq, align 8
  %91 = load double* %R, align 8
  %add134 = fadd double %90, %91
  %mul135 = fmul double %89, %add134
  %92 = load i32* %k, align 4
  %conv136 = sitofp i32 %92 to double
  %mul137 = fmul double %conv136, 0x3DEA39EF35793C76
  %93 = load double* %c, align 8
  %add138 = fadd double %mul137, %93
  %add139 = fadd double %mul135, %add138
  %sub140 = fsub double %88, %add139
  %94 = load double* %f, align 8
  %sub141 = fsub double %sub140, %94
  %sub142 = fsub double %mul133, %sub141
  store double %sub142, double* %retval
  br label %return

return:                                           ; preds = %if.else131, %if.then126, %if.else98, %if.then96, %if.else84, %if.then83, %if.then21, %if.else11, %if.then10, %if.else, %if.then4
  %95 = load double* %retval
  ret double %95
}

; Function Attrs: nounwind readnone
define double @nan(i8* %unused) #3 {
entry:
  %unused.addr = alloca i8*, align 4
  %x = alloca double, align 8
  %iw_u = alloca %union.ieee_double_shape_type, align 4
  store i8* %unused, i8** %unused.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %parts = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  store i32 2146959360, i32* %msw, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  store i32 0, i32* %lsw, align 4
  %value = bitcast %union.ieee_double_shape_type* %iw_u to double*
  %0 = load double* %value, align 4
  store double %0, double* %x, align 8
  br label %do.end

do.end:                                           ; preds = %do.body
  %1 = load double* %x, align 8
  ret double %1
}

; Function Attrs: nounwind
define double @rint(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %i0 = alloca i32, align 4
  %j0 = alloca i32, align 4
  %sx = alloca i32, align 4
  %i = alloca i32, align 4
  %i1 = alloca i32, align 4
  %t = alloca double, align 8
  %w = alloca double, align 8
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u31 = alloca %union.ieee_double_shape_type, align 4
  %iw_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %i0, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %i1, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %i0, align 4
  %shr = ashr i32 %3, 31
  %and = and i32 %shr, 1
  store i32 %and, i32* %sx, align 4
  %4 = load i32* %i0, align 4
  %shr2 = ashr i32 %4, 20
  %and3 = and i32 %shr2, 2047
  %sub = sub nsw i32 %and3, 1023
  store i32 %sub, i32* %j0, align 4
  %5 = load i32* %j0, align 4
  %cmp = icmp slt i32 %5, 20
  br i1 %cmp, label %if.then, label %if.else59

if.then:                                          ; preds = %do.end
  %6 = load i32* %j0, align 4
  %cmp4 = icmp slt i32 %6, 0
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %if.then
  %7 = load i32* %i0, align 4
  %and6 = and i32 %7, 2147483647
  %8 = load i32* %i1, align 4
  %or = or i32 %and6, %8
  %cmp7 = icmp eq i32 %or, 0
  br i1 %cmp7, label %if.then8, label %if.end

if.then8:                                         ; preds = %if.then5
  %9 = load double* %x.addr, align 8
  store double %9, double* %retval
  br label %return

if.end:                                           ; preds = %if.then5
  %10 = load i32* %i0, align 4
  %and9 = and i32 %10, 1048575
  %11 = load i32* %i1, align 4
  %or10 = or i32 %11, %and9
  store i32 %or10, i32* %i1, align 4
  %12 = load i32* %i0, align 4
  %and11 = and i32 %12, -131072
  store i32 %and11, i32* %i0, align 4
  %13 = load i32* %i1, align 4
  %14 = load i32* %i1, align 4
  %sub12 = sub i32 0, %14
  %or13 = or i32 %13, %sub12
  %shr14 = lshr i32 %or13, 12
  %and15 = and i32 %shr14, 524288
  %15 = load i32* %i0, align 4
  %or16 = or i32 %15, %and15
  store i32 %or16, i32* %i0, align 4
  br label %do.body17

do.body17:                                        ; preds = %if.end
  %16 = load double* %x.addr, align 8
  %value18 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %16, double* %value18, align 4
  %17 = load i32* %i0, align 4
  %parts19 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw20 = getelementptr inbounds %struct.anon* %parts19, i32 0, i32 1
  store i32 %17, i32* %msw20, align 4
  %value21 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %18 = load double* %value21, align 4
  store double %18, double* %x.addr, align 8
  br label %do.end22

do.end22:                                         ; preds = %do.body17
  %19 = load i32* %sx, align 4
  %arrayidx = getelementptr inbounds [2 x double]* @TWO52, i32 0, i32 %19
  %20 = load double* %arrayidx, align 4
  %21 = load double* %x.addr, align 8
  %add = fadd double %20, %21
  store volatile double %add, double* %w, align 8
  %22 = load volatile double* %w, align 8
  %23 = load i32* %sx, align 4
  %arrayidx23 = getelementptr inbounds [2 x double]* @TWO52, i32 0, i32 %23
  %24 = load double* %arrayidx23, align 4
  %sub24 = fsub double %22, %24
  store double %sub24, double* %t, align 8
  br label %do.body25

do.body25:                                        ; preds = %do.end22
  %25 = load double* %t, align 8
  %value26 = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %25, double* %value26, align 4
  %parts27 = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw28 = getelementptr inbounds %struct.anon* %parts27, i32 0, i32 1
  %26 = load i32* %msw28, align 4
  store i32 %26, i32* %i0, align 4
  br label %do.end29

do.end29:                                         ; preds = %do.body25
  br label %do.body30

do.body30:                                        ; preds = %do.end29
  %27 = load double* %t, align 8
  %value32 = bitcast %union.ieee_double_shape_type* %sh_u31 to double*
  store double %27, double* %value32, align 4
  %28 = load i32* %i0, align 4
  %and33 = and i32 %28, 2147483647
  %29 = load i32* %sx, align 4
  %shl = shl i32 %29, 31
  %or34 = or i32 %and33, %shl
  %parts35 = bitcast %union.ieee_double_shape_type* %sh_u31 to %struct.anon*
  %msw36 = getelementptr inbounds %struct.anon* %parts35, i32 0, i32 1
  store i32 %or34, i32* %msw36, align 4
  %value37 = bitcast %union.ieee_double_shape_type* %sh_u31 to double*
  %30 = load double* %value37, align 4
  store double %30, double* %t, align 8
  br label %do.end38

do.end38:                                         ; preds = %do.body30
  %31 = load double* %t, align 8
  store double %31, double* %retval
  br label %return

if.else:                                          ; preds = %if.then
  %32 = load i32* %j0, align 4
  %shr39 = ashr i32 1048575, %32
  store i32 %shr39, i32* %i, align 4
  %33 = load i32* %i0, align 4
  %34 = load i32* %i, align 4
  %and40 = and i32 %33, %34
  %35 = load i32* %i1, align 4
  %or41 = or i32 %and40, %35
  %cmp42 = icmp eq i32 %or41, 0
  br i1 %cmp42, label %if.then43, label %if.end44

if.then43:                                        ; preds = %if.else
  %36 = load double* %x.addr, align 8
  store double %36, double* %retval
  br label %return

if.end44:                                         ; preds = %if.else
  %37 = load i32* %i, align 4
  %shr45 = lshr i32 %37, 1
  store i32 %shr45, i32* %i, align 4
  %38 = load i32* %i0, align 4
  %39 = load i32* %i, align 4
  %and46 = and i32 %38, %39
  %40 = load i32* %i1, align 4
  %or47 = or i32 %and46, %40
  %cmp48 = icmp ne i32 %or47, 0
  br i1 %cmp48, label %if.then49, label %if.end57

if.then49:                                        ; preds = %if.end44
  %41 = load i32* %j0, align 4
  %cmp50 = icmp eq i32 %41, 19
  br i1 %cmp50, label %if.then51, label %if.else52

if.then51:                                        ; preds = %if.then49
  store i32 1073741824, i32* %i1, align 4
  br label %if.end56

if.else52:                                        ; preds = %if.then49
  %42 = load i32* %i0, align 4
  %43 = load i32* %i, align 4
  %neg = xor i32 %43, -1
  %and53 = and i32 %42, %neg
  %44 = load i32* %j0, align 4
  %shr54 = ashr i32 131072, %44
  %or55 = or i32 %and53, %shr54
  store i32 %or55, i32* %i0, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.else52, %if.then51
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.end44
  br label %if.end58

if.end58:                                         ; preds = %if.end57
  br label %if.end84

if.else59:                                        ; preds = %do.end
  %45 = load i32* %j0, align 4
  %cmp60 = icmp sgt i32 %45, 51
  br i1 %cmp60, label %if.then61, label %if.else66

if.then61:                                        ; preds = %if.else59
  %46 = load i32* %j0, align 4
  %cmp62 = icmp eq i32 %46, 1024
  br i1 %cmp62, label %if.then63, label %if.else65

if.then63:                                        ; preds = %if.then61
  %47 = load double* %x.addr, align 8
  %48 = load double* %x.addr, align 8
  %add64 = fadd double %47, %48
  store double %add64, double* %retval
  br label %return

if.else65:                                        ; preds = %if.then61
  %49 = load double* %x.addr, align 8
  store double %49, double* %retval
  br label %return

if.else66:                                        ; preds = %if.else59
  %50 = load i32* %j0, align 4
  %sub67 = sub nsw i32 %50, 20
  %shr68 = lshr i32 -1, %sub67
  store i32 %shr68, i32* %i, align 4
  %51 = load i32* %i1, align 4
  %52 = load i32* %i, align 4
  %and69 = and i32 %51, %52
  %cmp70 = icmp eq i32 %and69, 0
  br i1 %cmp70, label %if.then71, label %if.end72

if.then71:                                        ; preds = %if.else66
  %53 = load double* %x.addr, align 8
  store double %53, double* %retval
  br label %return

if.end72:                                         ; preds = %if.else66
  %54 = load i32* %i, align 4
  %shr73 = lshr i32 %54, 1
  store i32 %shr73, i32* %i, align 4
  %55 = load i32* %i1, align 4
  %56 = load i32* %i, align 4
  %and74 = and i32 %55, %56
  %cmp75 = icmp ne i32 %and74, 0
  br i1 %cmp75, label %if.then76, label %if.end82

if.then76:                                        ; preds = %if.end72
  %57 = load i32* %i1, align 4
  %58 = load i32* %i, align 4
  %neg77 = xor i32 %58, -1
  %and78 = and i32 %57, %neg77
  %59 = load i32* %j0, align 4
  %sub79 = sub nsw i32 %59, 20
  %shr80 = ashr i32 1073741824, %sub79
  %or81 = or i32 %and78, %shr80
  store i32 %or81, i32* %i1, align 4
  br label %if.end82

if.end82:                                         ; preds = %if.then76, %if.end72
  br label %if.end83

if.end83:                                         ; preds = %if.end82
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end58
  br label %do.body85

do.body85:                                        ; preds = %if.end84
  %60 = load i32* %i0, align 4
  %parts86 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %msw87 = getelementptr inbounds %struct.anon* %parts86, i32 0, i32 1
  store i32 %60, i32* %msw87, align 4
  %61 = load i32* %i1, align 4
  %parts88 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %lsw89 = getelementptr inbounds %struct.anon* %parts88, i32 0, i32 0
  store i32 %61, i32* %lsw89, align 4
  %value90 = bitcast %union.ieee_double_shape_type* %iw_u to double*
  %62 = load double* %value90, align 4
  store double %62, double* %x.addr, align 8
  br label %do.end91

do.end91:                                         ; preds = %do.body85
  %63 = load i32* %sx, align 4
  %arrayidx92 = getelementptr inbounds [2 x double]* @TWO52, i32 0, i32 %63
  %64 = load double* %arrayidx92, align 4
  %65 = load double* %x.addr, align 8
  %add93 = fadd double %64, %65
  store volatile double %add93, double* %w, align 8
  %66 = load volatile double* %w, align 8
  %67 = load i32* %sx, align 4
  %arrayidx94 = getelementptr inbounds [2 x double]* @TWO52, i32 0, i32 %67
  %68 = load double* %arrayidx94, align 4
  %sub95 = fsub double %66, %68
  store double %sub95, double* %retval
  br label %return

return:                                           ; preds = %do.end91, %if.then71, %if.else65, %if.then63, %if.then43, %do.end38, %if.then8
  %69 = load double* %retval
  ret double %69
}

; Function Attrs: nounwind
define double @scalbn(double %x, i32 %n) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %n.addr = alloca i32, align 4
  %k = alloca i32, align 4
  %hx = alloca i32, align 4
  %lx = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u = alloca %union.ieee_double_shape_type, align 4
  %sh_u47 = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store i32 %n, i32* %n.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %ew_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %hx, align 4
  %parts1 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts1, i32 0, i32 0
  %2 = load i32* %lsw, align 4
  store i32 %2, i32* %lx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %3 = load i32* %hx, align 4
  %and = and i32 %3, 2146435072
  %shr = ashr i32 %and, 20
  store i32 %shr, i32* %k, align 4
  %4 = load i32* %k, align 4
  %cmp = icmp eq i32 %4, 0
  br i1 %cmp, label %if.then, label %if.end16

if.then:                                          ; preds = %do.end
  %5 = load i32* %lx, align 4
  %6 = load i32* %hx, align 4
  %and2 = and i32 %6, 2147483647
  %or = or i32 %5, %and2
  %cmp3 = icmp eq i32 %or, 0
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %7 = load double* %x.addr, align 8
  store double %7, double* %retval
  br label %return

if.end:                                           ; preds = %if.then
  %8 = load double* %x.addr, align 8
  %mul = fmul double %8, 0x4350000000000000
  store double %mul, double* %x.addr, align 8
  br label %do.body5

do.body5:                                         ; preds = %if.end
  %9 = load double* %x.addr, align 8
  %value6 = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %9, double* %value6, align 4
  %parts7 = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw8 = getelementptr inbounds %struct.anon* %parts7, i32 0, i32 1
  %10 = load i32* %msw8, align 4
  store i32 %10, i32* %hx, align 4
  br label %do.end9

do.end9:                                          ; preds = %do.body5
  %11 = load i32* %hx, align 4
  %and10 = and i32 %11, 2146435072
  %shr11 = ashr i32 %and10, 20
  %sub = sub nsw i32 %shr11, 54
  store i32 %sub, i32* %k, align 4
  %12 = load i32* %n.addr, align 4
  %cmp12 = icmp slt i32 %12, -50000
  br i1 %cmp12, label %if.then13, label %if.end15

if.then13:                                        ; preds = %do.end9
  %13 = load double* %x.addr, align 8
  %mul14 = fmul double 1.000000e-300, %13
  store double %mul14, double* %retval
  br label %return

if.end15:                                         ; preds = %do.end9
  br label %if.end16

if.end16:                                         ; preds = %if.end15, %do.end
  %14 = load i32* %k, align 4
  %cmp17 = icmp eq i32 %14, 2047
  br i1 %cmp17, label %if.then18, label %if.end19

if.then18:                                        ; preds = %if.end16
  %15 = load double* %x.addr, align 8
  %16 = load double* %x.addr, align 8
  %add = fadd double %15, %16
  store double %add, double* %retval
  br label %return

if.end19:                                         ; preds = %if.end16
  %17 = load i32* %k, align 4
  %18 = load i32* %n.addr, align 4
  %add20 = add nsw i32 %17, %18
  store i32 %add20, i32* %k, align 4
  %19 = load i32* %k, align 4
  %cmp21 = icmp sgt i32 %19, 2046
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %20 = load double* %x.addr, align 8
  %call = call double @copysign(double 1.000000e+300, double %20) #6
  %mul23 = fmul double 1.000000e+300, %call
  store double %mul23, double* %retval
  br label %return

if.end24:                                         ; preds = %if.end19
  %21 = load i32* %k, align 4
  %cmp25 = icmp sgt i32 %21, 0
  br i1 %cmp25, label %if.then26, label %if.end35

if.then26:                                        ; preds = %if.end24
  br label %do.body27

do.body27:                                        ; preds = %if.then26
  %22 = load double* %x.addr, align 8
  %value28 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  store double %22, double* %value28, align 4
  %23 = load i32* %hx, align 4
  %and29 = and i32 %23, -2146435073
  %24 = load i32* %k, align 4
  %shl = shl i32 %24, 20
  %or30 = or i32 %and29, %shl
  %parts31 = bitcast %union.ieee_double_shape_type* %sh_u to %struct.anon*
  %msw32 = getelementptr inbounds %struct.anon* %parts31, i32 0, i32 1
  store i32 %or30, i32* %msw32, align 4
  %value33 = bitcast %union.ieee_double_shape_type* %sh_u to double*
  %25 = load double* %value33, align 4
  store double %25, double* %x.addr, align 8
  br label %do.end34

do.end34:                                         ; preds = %do.body27
  %26 = load double* %x.addr, align 8
  store double %26, double* %retval
  br label %return

if.end35:                                         ; preds = %if.end24
  %27 = load i32* %k, align 4
  %cmp36 = icmp sle i32 %27, -54
  br i1 %cmp36, label %if.then37, label %if.end44

if.then37:                                        ; preds = %if.end35
  %28 = load i32* %n.addr, align 4
  %cmp38 = icmp sgt i32 %28, 50000
  br i1 %cmp38, label %if.then39, label %if.else

if.then39:                                        ; preds = %if.then37
  %29 = load double* %x.addr, align 8
  %call40 = call double @copysign(double 1.000000e+300, double %29) #6
  %mul41 = fmul double 1.000000e+300, %call40
  store double %mul41, double* %retval
  br label %return

if.else:                                          ; preds = %if.then37
  %30 = load double* %x.addr, align 8
  %call42 = call double @copysign(double 1.000000e-300, double %30) #6
  %mul43 = fmul double 1.000000e-300, %call42
  store double %mul43, double* %retval
  br label %return

if.end44:                                         ; preds = %if.end35
  %31 = load i32* %k, align 4
  %add45 = add nsw i32 %31, 54
  store i32 %add45, i32* %k, align 4
  br label %do.body46

do.body46:                                        ; preds = %if.end44
  %32 = load double* %x.addr, align 8
  %value48 = bitcast %union.ieee_double_shape_type* %sh_u47 to double*
  store double %32, double* %value48, align 4
  %33 = load i32* %hx, align 4
  %and49 = and i32 %33, -2146435073
  %34 = load i32* %k, align 4
  %shl50 = shl i32 %34, 20
  %or51 = or i32 %and49, %shl50
  %parts52 = bitcast %union.ieee_double_shape_type* %sh_u47 to %struct.anon*
  %msw53 = getelementptr inbounds %struct.anon* %parts52, i32 0, i32 1
  store i32 %or51, i32* %msw53, align 4
  %value54 = bitcast %union.ieee_double_shape_type* %sh_u47 to double*
  %35 = load double* %value54, align 4
  store double %35, double* %x.addr, align 8
  br label %do.end55

do.end55:                                         ; preds = %do.body46
  %36 = load double* %x.addr, align 8
  %mul56 = fmul double %36, 0x3C90000000000000
  store double %mul56, double* %retval
  br label %return

return:                                           ; preds = %do.end55, %if.else, %if.then39, %do.end34, %if.then22, %if.then18, %if.then13, %if.then4
  %37 = load double* %retval
  ret double %37
}

; Function Attrs: nounwind
define double @significand(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %x.addr, align 8
  %call = call i32 @ilogb(double %1) #4
  %sub = sub nsw i32 0, %call
  %conv = sitofp i32 %sub to double
  %call1 = call double @__ieee754_scalb(double %0, double %conv) #5
  ret double %call1
}

; Function Attrs: nounwind
define double @sin(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y = alloca [2 x double], align 8
  %z = alloca double, align 8
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double 0.000000e+00, double* %z, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sle i32 %3, 1072243195
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double* %z, align 8
  %call = call double @__kernel_sin(double %4, double %5, i32 0) #5
  store double %call, double* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %6, 2146435072
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %7 = load double* %x.addr, align 8
  %8 = load double* %x.addr, align 8
  %sub = fsub double %7, %8
  store double %sub, double* %retval
  br label %return

if.else3:                                         ; preds = %if.else
  %9 = load double* %x.addr, align 8
  %arraydecay = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2(double %9, double* %arraydecay) #5
  store i32 %call4, i32* %n, align 4
  %10 = load i32* %n, align 4
  %and5 = and i32 %10, 3
  switch i32 %and5, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb8
    i32 2, label %sw.bb12
  ]

sw.bb:                                            ; preds = %if.else3
  %arrayidx = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %11 = load double* %arrayidx, align 4
  %arrayidx6 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %12 = load double* %arrayidx6, align 4
  %call7 = call double @__kernel_sin(double %11, double %12, i32 1) #5
  store double %call7, double* %retval
  br label %return

sw.bb8:                                           ; preds = %if.else3
  %arrayidx9 = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %13 = load double* %arrayidx9, align 4
  %arrayidx10 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %14 = load double* %arrayidx10, align 4
  %call11 = call double @__kernel_cos(double %13, double %14) #5
  store double %call11, double* %retval
  br label %return

sw.bb12:                                          ; preds = %if.else3
  %arrayidx13 = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %15 = load double* %arrayidx13, align 4
  %arrayidx14 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %16 = load double* %arrayidx14, align 4
  %call15 = call double @__kernel_sin(double %15, double %16, i32 1) #5
  %sub16 = fsub double -0.000000e+00, %call15
  store double %sub16, double* %retval
  br label %return

sw.default:                                       ; preds = %if.else3
  %arrayidx17 = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %17 = load double* %arrayidx17, align 4
  %arrayidx18 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %18 = load double* %arrayidx18, align 4
  %call19 = call double @__kernel_cos(double %17, double %18) #5
  %sub20 = fsub double -0.000000e+00, %call19
  store double %sub20, double* %retval
  br label %return

return:                                           ; preds = %sw.default, %sw.bb12, %sw.bb8, %sw.bb, %if.then2, %if.then
  %19 = load double* %retval
  ret double %19
}

; Function Attrs: nounwind
define double @tan(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y = alloca [2 x double], align 8
  %z = alloca double, align 8
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  store double 0.000000e+00, double* %z, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sle i32 %3, 1072243195
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %5 = load double* %z, align 8
  %call = call double @__kernel_tan(double %4, double %5, i32 1) #5
  store double %call, double* %retval
  br label %return

if.else:                                          ; preds = %do.end
  %6 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %6, 2146435072
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  %7 = load double* %x.addr, align 8
  %8 = load double* %x.addr, align 8
  %sub = fsub double %7, %8
  store double %sub, double* %retval
  br label %return

if.else3:                                         ; preds = %if.else
  %9 = load double* %x.addr, align 8
  %arraydecay = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %call4 = call i32 @__ieee754_rem_pio2(double %9, double* %arraydecay) #5
  store i32 %call4, i32* %n, align 4
  %arrayidx = getelementptr inbounds [2 x double]* %y, i32 0, i32 0
  %10 = load double* %arrayidx, align 4
  %arrayidx5 = getelementptr inbounds [2 x double]* %y, i32 0, i32 1
  %11 = load double* %arrayidx5, align 4
  %12 = load i32* %n, align 4
  %and6 = and i32 %12, 1
  %shl = shl i32 %and6, 1
  %sub7 = sub nsw i32 1, %shl
  %call8 = call double @__kernel_tan(double %10, double %11, i32 %sub7) #5
  store double %call8, double* %retval
  br label %return

return:                                           ; preds = %if.else3, %if.then2, %if.then
  %13 = load double* %retval
  ret double %13
}

; Function Attrs: nounwind
define double @tanh(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %t = alloca double, align 8
  %z = alloca double, align 8
  %jx = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %jx, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %jx, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 2146435072
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load i32* %jx, align 4
  %cmp1 = icmp sge i32 %4, 0
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  %5 = load double* %x.addr, align 8
  %div = fdiv double 1.000000e+00, %5
  %add = fadd double %div, 1.000000e+00
  store double %add, double* %retval
  br label %return

if.else:                                          ; preds = %if.then
  %6 = load double* %x.addr, align 8
  %div3 = fdiv double 1.000000e+00, %6
  %sub = fsub double %div3, 1.000000e+00
  store double %sub, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %7 = load i32* %ix, align 4
  %cmp4 = icmp slt i32 %7, 1077280768
  br i1 %cmp4, label %if.then5, label %if.else25

if.then5:                                         ; preds = %if.end
  %8 = load i32* %ix, align 4
  %cmp6 = icmp slt i32 %8, 1015021568
  br i1 %cmp6, label %if.then7, label %if.end9

if.then7:                                         ; preds = %if.then5
  %9 = load double* %x.addr, align 8
  %10 = load double* %x.addr, align 8
  %add8 = fadd double 1.000000e+00, %10
  %mul = fmul double %9, %add8
  store double %mul, double* %retval
  br label %return

if.end9:                                          ; preds = %if.then5
  %11 = load i32* %ix, align 4
  %cmp10 = icmp sge i32 %11, 1072693248
  br i1 %cmp10, label %if.then11, label %if.else17

if.then11:                                        ; preds = %if.end9
  %12 = load double* %x.addr, align 8
  %call = call double @fabs(double %12) #6
  %mul12 = fmul double 2.000000e+00, %call
  %call13 = call double @expm1(double %mul12) #4
  store double %call13, double* %t, align 8
  %13 = load double* %t, align 8
  %add14 = fadd double %13, 2.000000e+00
  %div15 = fdiv double 2.000000e+00, %add14
  %sub16 = fsub double 1.000000e+00, %div15
  store double %sub16, double* %z, align 8
  br label %if.end24

if.else17:                                        ; preds = %if.end9
  %14 = load double* %x.addr, align 8
  %call18 = call double @fabs(double %14) #6
  %mul19 = fmul double -2.000000e+00, %call18
  %call20 = call double @expm1(double %mul19) #4
  store double %call20, double* %t, align 8
  %15 = load double* %t, align 8
  %sub21 = fsub double -0.000000e+00, %15
  %16 = load double* %t, align 8
  %add22 = fadd double %16, 2.000000e+00
  %div23 = fdiv double %sub21, %add22
  store double %div23, double* %z, align 8
  br label %if.end24

if.end24:                                         ; preds = %if.else17, %if.then11
  br label %if.end26

if.else25:                                        ; preds = %if.end
  store double 1.000000e+00, double* %z, align 8
  br label %if.end26

if.end26:                                         ; preds = %if.else25, %if.end24
  %17 = load i32* %jx, align 4
  %cmp27 = icmp sge i32 %17, 0
  br i1 %cmp27, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end26
  %18 = load double* %z, align 8
  br label %cond.end

cond.false:                                       ; preds = %if.end26
  %19 = load double* %z, align 8
  %sub28 = fsub double -0.000000e+00, %19
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi double [ %18, %cond.true ], [ %sub28, %cond.false ]
  store double %cond, double* %retval
  br label %return

return:                                           ; preds = %cond.end, %if.then7, %if.else, %if.then2
  %20 = load double* %retval
  ret double %20
}

; Function Attrs: nounwind
define double @acos(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_acos(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @acosh(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_acosh(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @asin(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_asin(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @atan2(double %y, double %x) #2 {
entry:
  %y.addr = alloca double, align 8
  %x.addr = alloca double, align 8
  store double %y, double* %y.addr, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %y.addr, align 8
  %1 = load double* %x.addr, align 8
  %call = call double @__ieee754_atan2(double %0, double %1) #5
  ret double %call
}

; Function Attrs: nounwind
define double @atanh(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_atanh(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @cosh(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_cosh(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @drem(double %x, double %y) #2 {
entry:
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %y.addr, align 8
  %call = call double @remainder(double %0, double %1) #4
  ret double %call
}

; Function Attrs: nounwind
define double @exp2(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @pow(double 2.000000e+00, double %0) #4
  ret double %call
}

; Function Attrs: nounwind
define double @exp(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_exp(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define float @acosf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_acosf(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @acoshf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_acoshf(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @asinf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_asinf(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @atan2f(float %y, float %x) #2 {
entry:
  %y.addr = alloca float, align 4
  %x.addr = alloca float, align 4
  store float %y, float* %y.addr, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %y.addr, align 4
  %1 = load float* %x.addr, align 4
  %call = call float @__ieee754_atan2f(float %0, float %1) #5
  ret float %call
}

; Function Attrs: nounwind
define float @atanhf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_atanhf(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @coshf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_coshf(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @dremf(float %x, float %y) #2 {
entry:
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %y.addr, align 4
  %call = call float @remainderf(float %0, float %1) #4
  ret float %call
}

; Function Attrs: nounwind
define float @exp2f(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @powf(float 2.000000e+00, float %0) #4
  ret float %call
}

; Function Attrs: nounwind
define float @expf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_expf(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @fmodf(float %x, float %y) #2 {
entry:
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %y.addr, align 4
  %call = call float @__ieee754_fmodf(float %0, float %1) #5
  ret float %call
}

; Function Attrs: nounwind
define float @hypotf(float %x, float %y) #2 {
entry:
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %y.addr, align 4
  %call = call float @__ieee754_hypotf(float %0, float %1) #5
  ret float %call
}

; Function Attrs: nounwind
define float @j0f(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_j0f(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @y0f(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_y0f(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @j1f(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_j1f(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @y1f(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_y1f(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @jnf(i32 %n, float %x) #2 {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca float, align 4
  store i32 %n, i32* %n.addr, align 4
  store float %x, float* %x.addr, align 4
  %0 = load i32* %n.addr, align 4
  %1 = load float* %x.addr, align 4
  %call = call float @__ieee754_jnf(i32 %0, float %1) #5
  ret float %call
}

; Function Attrs: nounwind
define float @ynf(i32 %n, float %x) #2 {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca float, align 4
  store i32 %n, i32* %n.addr, align 4
  store float %x, float* %x.addr, align 4
  %0 = load i32* %n.addr, align 4
  %1 = load float* %x.addr, align 4
  %call = call float @__ieee754_ynf(i32 %0, float %1) #5
  ret float %call
}

; Function Attrs: nounwind
define float @log10f(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_log10f(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @logf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_logf(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define double @fmod(double %x, double %y) #2 {
entry:
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %y.addr, align 8
  %call = call double @__ieee754_fmod(double %0, double %1) #5
  ret double %call
}

; Function Attrs: nounwind
define float @powf(float %x, float %y) #2 {
entry:
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %y.addr, align 4
  %call = call float @__ieee754_powf(float %0, float %1) #5
  ret float %call
}

; Function Attrs: nounwind
define float @remainderf(float %x, float %y) #2 {
entry:
  %x.addr = alloca float, align 4
  %y.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %y, float* %y.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %y.addr, align 4
  %call = call float @__ieee754_remainderf(float %0, float %1) #5
  ret float %call
}

; Function Attrs: nounwind
define float @scalbf(float %x, float %fn) #2 {
entry:
  %x.addr = alloca float, align 4
  %fn.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  store float %fn, float* %fn.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load float* %fn.addr, align 4
  %call = call float @__ieee754_scalbf(float %0, float %1) #5
  ret float %call
}

; Function Attrs: nounwind
define void @sincosf(float %x, float* %sinx, float* %cosx) #2 {
entry:
  %x.addr = alloca float, align 4
  %sinx.addr = alloca float*, align 4
  %cosx.addr = alloca float*, align 4
  store float %x, float* %x.addr, align 4
  store float* %sinx, float** %sinx.addr, align 4
  store float* %cosx, float** %cosx.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @sinf(float %0) #4
  %1 = load float** %sinx.addr, align 4
  store float %call, float* %1, align 4
  %2 = load float* %x.addr, align 4
  %call1 = call float @cosf(float %2) #4
  %3 = load float** %cosx.addr, align 4
  store float %call1, float* %3, align 4
  ret void
}

; Function Attrs: nounwind
define float @sinhf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_sinhf(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @sqrtf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_sqrtf(float %0) #5
  ret float %call
}

; Function Attrs: nounwind
define float @tgammaf(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  %y = alloca float, align 4
  %local_signgam = alloca i32, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float* %x.addr, align 4
  %call = call float @__ieee754_gammaf_r(float %0, i32* %local_signgam) #5
  store float %call, float* %y, align 4
  %1 = load i32* %local_signgam, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load float* %y, align 4
  %sub = fsub float -0.000000e+00, %2
  store float %sub, float* %y, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load float* %y, align 4
  ret float %3
}

; Function Attrs: nounwind
define double @hypot(double %x, double %y) #2 {
entry:
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %y.addr, align 8
  %call = call double @__ieee754_hypot(double %0, double %1) #5
  ret double %call
}

; Function Attrs: nounwind
define double @j0(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_j0(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @y0(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_y0(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @j1(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_j1(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @y1(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_y1(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @jn(i32 %n, double %x) #2 {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  store double %x, double* %x.addr, align 8
  %0 = load i32* %n.addr, align 4
  %1 = load double* %x.addr, align 8
  %call = call double @__ieee754_jn(i32 %0, double %1) #5
  ret double %call
}

; Function Attrs: nounwind
define double @yn(i32 %n, double %x) #2 {
entry:
  %n.addr = alloca i32, align 4
  %x.addr = alloca double, align 8
  store i32 %n, i32* %n.addr, align 4
  store double %x, double* %x.addr, align 8
  %0 = load i32* %n.addr, align 4
  %1 = load double* %x.addr, align 8
  %call = call double @__ieee754_yn(i32 %0, double %1) #5
  ret double %call
}

; Function Attrs: nounwind
define double @log10(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_log10(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @log(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_log(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @pow(double %x, double %y) #2 {
entry:
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %y.addr, align 8
  %call = call double @__ieee754_pow(double %0, double %1) #5
  ret double %call
}

; Function Attrs: nounwind
define double @remainder(double %x, double %y) #2 {
entry:
  %x.addr = alloca double, align 8
  %y.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %y, double* %y.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %y.addr, align 8
  %call = call double @__ieee754_remainder(double %0, double %1) #5
  ret double %call
}

; Function Attrs: nounwind
define float @gammaf_r(float %x, i32* %signgamp) #2 {
entry:
  %x.addr = alloca float, align 4
  %signgamp.addr = alloca i32*, align 4
  store float %x, float* %x.addr, align 4
  store i32* %signgamp, i32** %signgamp.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load i32** %signgamp.addr, align 4
  %call = call float @__ieee754_gammaf_r(float %0, i32* %1) #5
  ret float %call
}

; Function Attrs: nounwind
define float @lgammaf_r(float %x, i32* %signgamp) #2 {
entry:
  %x.addr = alloca float, align 4
  %signgamp.addr = alloca i32*, align 4
  store float %x, float* %x.addr, align 4
  store i32* %signgamp, i32** %signgamp.addr, align 4
  %0 = load float* %x.addr, align 4
  %1 = load i32** %signgamp.addr, align 4
  %call = call float @__ieee754_lgammaf_r(float %0, i32* %1) #5
  ret float %call
}

; Function Attrs: nounwind
define double @gamma_r(double %x, i32* %signgamp) #2 {
entry:
  %x.addr = alloca double, align 8
  %signgamp.addr = alloca i32*, align 4
  store double %x, double* %x.addr, align 8
  store i32* %signgamp, i32** %signgamp.addr, align 4
  %0 = load double* %x.addr, align 8
  %1 = load i32** %signgamp.addr, align 4
  %call = call double @__ieee754_gamma_r(double %0, i32* %1) #5
  ret double %call
}

; Function Attrs: nounwind
define double @lgamma_r(double %x, i32* %signgamp) #2 {
entry:
  %x.addr = alloca double, align 8
  %signgamp.addr = alloca i32*, align 4
  store double %x, double* %x.addr, align 8
  store i32* %signgamp, i32** %signgamp.addr, align 4
  %0 = load double* %x.addr, align 8
  %1 = load i32** %signgamp.addr, align 4
  %call = call double @__ieee754_lgamma_r(double %0, i32* %1) #5
  ret double %call
}

; Function Attrs: nounwind
define double @scalb(double %x, double %fn) #2 {
entry:
  %x.addr = alloca double, align 8
  %fn.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  store double %fn, double* %fn.addr, align 8
  %0 = load double* %x.addr, align 8
  %1 = load double* %fn.addr, align 8
  %call = call double @__ieee754_scalb(double %0, double %1) #5
  ret double %call
}

; Function Attrs: nounwind
define void @sincos(double %x, double* %sinx, double* %cosx) #2 {
entry:
  %x.addr = alloca double, align 8
  %sinx.addr = alloca double*, align 4
  %cosx.addr = alloca double*, align 4
  store double %x, double* %x.addr, align 8
  store double* %sinx, double** %sinx.addr, align 4
  store double* %cosx, double** %cosx.addr, align 4
  %0 = load double* %x.addr, align 8
  %call = call double @sin(double %0) #4
  %1 = load double** %sinx.addr, align 4
  store double %call, double* %1, align 4
  %2 = load double* %x.addr, align 8
  %call1 = call double @cos(double %2) #4
  %3 = load double** %cosx.addr, align 4
  store double %call1, double* %3, align 4
  ret void
}

; Function Attrs: nounwind
define double @sinh(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_sinh(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @sqrt(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_sqrt(double %0) #5
  ret double %call
}

; Function Attrs: nounwind
define double @tgamma(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  %y = alloca double, align 8
  %local_signgam = alloca i32, align 4
  store double %x, double* %x.addr, align 8
  %0 = load double* %x.addr, align 8
  %call = call double @__ieee754_gamma_r(double %0, i32* %local_signgam) #5
  store double %call, double* %y, align 8
  %1 = load i32* %local_signgam, align 4
  %cmp = icmp slt i32 %1, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %2 = load double* %y, align 8
  %sub = fsub double -0.000000e+00, %2
  store double %sub, double* %y, align 8
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %3 = load double* %y, align 8
  ret double %3
}

; Function Attrs: nounwind
define internal float @pzerof(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  %p = alloca float*, align 4
  %q = alloca float*, align 4
  %z = alloca float, align 4
  %r = alloca float, align 4
  %s = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1090519040
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  store float* getelementptr inbounds ([6 x float]* @pR8, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([5 x float]* @pS8, i32 0, i32 0), float** %q, align 4
  br label %if.end8

if.else:                                          ; preds = %do.end
  %4 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %4, 1089936472
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store float* getelementptr inbounds ([6 x float]* @pR5, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([5 x float]* @pS5, i32 0, i32 0), float** %q, align 4
  br label %if.end7

if.else3:                                         ; preds = %if.else
  %5 = load i32* %ix, align 4
  %cmp4 = icmp sge i32 %5, 1077336936
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else3
  store float* getelementptr inbounds ([6 x float]* @pR3, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([5 x float]* @pS3, i32 0, i32 0), float** %q, align 4
  br label %if.end

if.else6:                                         ; preds = %if.else3
  store float* getelementptr inbounds ([6 x float]* @pR2, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([5 x float]* @pS2, i32 0, i32 0), float** %q, align 4
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then5
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then
  %6 = load float* %x.addr, align 4
  %7 = load float* %x.addr, align 4
  %mul = fmul float %6, %7
  %div = fdiv float 1.000000e+00, %mul
  store float %div, float* %z, align 4
  %8 = load float** %p, align 4
  %arrayidx = getelementptr inbounds float* %8, i32 0
  %9 = load float* %arrayidx, align 4
  %10 = load float* %z, align 4
  %11 = load float** %p, align 4
  %arrayidx9 = getelementptr inbounds float* %11, i32 1
  %12 = load float* %arrayidx9, align 4
  %13 = load float* %z, align 4
  %14 = load float** %p, align 4
  %arrayidx10 = getelementptr inbounds float* %14, i32 2
  %15 = load float* %arrayidx10, align 4
  %16 = load float* %z, align 4
  %17 = load float** %p, align 4
  %arrayidx11 = getelementptr inbounds float* %17, i32 3
  %18 = load float* %arrayidx11, align 4
  %19 = load float* %z, align 4
  %20 = load float** %p, align 4
  %arrayidx12 = getelementptr inbounds float* %20, i32 4
  %21 = load float* %arrayidx12, align 4
  %22 = load float* %z, align 4
  %23 = load float** %p, align 4
  %arrayidx13 = getelementptr inbounds float* %23, i32 5
  %24 = load float* %arrayidx13, align 4
  %mul14 = fmul float %22, %24
  %add = fadd float %21, %mul14
  %mul15 = fmul float %19, %add
  %add16 = fadd float %18, %mul15
  %mul17 = fmul float %16, %add16
  %add18 = fadd float %15, %mul17
  %mul19 = fmul float %13, %add18
  %add20 = fadd float %12, %mul19
  %mul21 = fmul float %10, %add20
  %add22 = fadd float %9, %mul21
  store float %add22, float* %r, align 4
  %25 = load float* %z, align 4
  %26 = load float** %q, align 4
  %arrayidx23 = getelementptr inbounds float* %26, i32 0
  %27 = load float* %arrayidx23, align 4
  %28 = load float* %z, align 4
  %29 = load float** %q, align 4
  %arrayidx24 = getelementptr inbounds float* %29, i32 1
  %30 = load float* %arrayidx24, align 4
  %31 = load float* %z, align 4
  %32 = load float** %q, align 4
  %arrayidx25 = getelementptr inbounds float* %32, i32 2
  %33 = load float* %arrayidx25, align 4
  %34 = load float* %z, align 4
  %35 = load float** %q, align 4
  %arrayidx26 = getelementptr inbounds float* %35, i32 3
  %36 = load float* %arrayidx26, align 4
  %37 = load float* %z, align 4
  %38 = load float** %q, align 4
  %arrayidx27 = getelementptr inbounds float* %38, i32 4
  %39 = load float* %arrayidx27, align 4
  %mul28 = fmul float %37, %39
  %add29 = fadd float %36, %mul28
  %mul30 = fmul float %34, %add29
  %add31 = fadd float %33, %mul30
  %mul32 = fmul float %31, %add31
  %add33 = fadd float %30, %mul32
  %mul34 = fmul float %28, %add33
  %add35 = fadd float %27, %mul34
  %mul36 = fmul float %25, %add35
  %add37 = fadd float 1.000000e+00, %mul36
  store float %add37, float* %s, align 4
  %40 = load float* %r, align 4
  %41 = load float* %s, align 4
  %div38 = fdiv float %40, %41
  %add39 = fadd float 1.000000e+00, %div38
  ret float %add39
}

; Function Attrs: nounwind
define internal float @qzerof(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  %p = alloca float*, align 4
  %q = alloca float*, align 4
  %s = alloca float, align 4
  %r = alloca float, align 4
  %z = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1090519040
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  store float* getelementptr inbounds ([6 x float]* @qR8, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([6 x float]* @qS8, i32 0, i32 0), float** %q, align 4
  br label %if.end8

if.else:                                          ; preds = %do.end
  %4 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %4, 1089936472
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store float* getelementptr inbounds ([6 x float]* @qR5, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([6 x float]* @qS5, i32 0, i32 0), float** %q, align 4
  br label %if.end7

if.else3:                                         ; preds = %if.else
  %5 = load i32* %ix, align 4
  %cmp4 = icmp sge i32 %5, 1077336936
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else3
  store float* getelementptr inbounds ([6 x float]* @qR3, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([6 x float]* @qS3, i32 0, i32 0), float** %q, align 4
  br label %if.end

if.else6:                                         ; preds = %if.else3
  store float* getelementptr inbounds ([6 x float]* @qR2, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([6 x float]* @qS2, i32 0, i32 0), float** %q, align 4
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then5
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then
  %6 = load float* %x.addr, align 4
  %7 = load float* %x.addr, align 4
  %mul = fmul float %6, %7
  %div = fdiv float 1.000000e+00, %mul
  store float %div, float* %z, align 4
  %8 = load float** %p, align 4
  %arrayidx = getelementptr inbounds float* %8, i32 0
  %9 = load float* %arrayidx, align 4
  %10 = load float* %z, align 4
  %11 = load float** %p, align 4
  %arrayidx9 = getelementptr inbounds float* %11, i32 1
  %12 = load float* %arrayidx9, align 4
  %13 = load float* %z, align 4
  %14 = load float** %p, align 4
  %arrayidx10 = getelementptr inbounds float* %14, i32 2
  %15 = load float* %arrayidx10, align 4
  %16 = load float* %z, align 4
  %17 = load float** %p, align 4
  %arrayidx11 = getelementptr inbounds float* %17, i32 3
  %18 = load float* %arrayidx11, align 4
  %19 = load float* %z, align 4
  %20 = load float** %p, align 4
  %arrayidx12 = getelementptr inbounds float* %20, i32 4
  %21 = load float* %arrayidx12, align 4
  %22 = load float* %z, align 4
  %23 = load float** %p, align 4
  %arrayidx13 = getelementptr inbounds float* %23, i32 5
  %24 = load float* %arrayidx13, align 4
  %mul14 = fmul float %22, %24
  %add = fadd float %21, %mul14
  %mul15 = fmul float %19, %add
  %add16 = fadd float %18, %mul15
  %mul17 = fmul float %16, %add16
  %add18 = fadd float %15, %mul17
  %mul19 = fmul float %13, %add18
  %add20 = fadd float %12, %mul19
  %mul21 = fmul float %10, %add20
  %add22 = fadd float %9, %mul21
  store float %add22, float* %r, align 4
  %25 = load float* %z, align 4
  %26 = load float** %q, align 4
  %arrayidx23 = getelementptr inbounds float* %26, i32 0
  %27 = load float* %arrayidx23, align 4
  %28 = load float* %z, align 4
  %29 = load float** %q, align 4
  %arrayidx24 = getelementptr inbounds float* %29, i32 1
  %30 = load float* %arrayidx24, align 4
  %31 = load float* %z, align 4
  %32 = load float** %q, align 4
  %arrayidx25 = getelementptr inbounds float* %32, i32 2
  %33 = load float* %arrayidx25, align 4
  %34 = load float* %z, align 4
  %35 = load float** %q, align 4
  %arrayidx26 = getelementptr inbounds float* %35, i32 3
  %36 = load float* %arrayidx26, align 4
  %37 = load float* %z, align 4
  %38 = load float** %q, align 4
  %arrayidx27 = getelementptr inbounds float* %38, i32 4
  %39 = load float* %arrayidx27, align 4
  %40 = load float* %z, align 4
  %41 = load float** %q, align 4
  %arrayidx28 = getelementptr inbounds float* %41, i32 5
  %42 = load float* %arrayidx28, align 4
  %mul29 = fmul float %40, %42
  %add30 = fadd float %39, %mul29
  %mul31 = fmul float %37, %add30
  %add32 = fadd float %36, %mul31
  %mul33 = fmul float %34, %add32
  %add34 = fadd float %33, %mul33
  %mul35 = fmul float %31, %add34
  %add36 = fadd float %30, %mul35
  %mul37 = fmul float %28, %add36
  %add38 = fadd float %27, %mul37
  %mul39 = fmul float %25, %add38
  %add40 = fadd float 1.000000e+00, %mul39
  store float %add40, float* %s, align 4
  %43 = load float* %r, align 4
  %44 = load float* %s, align 4
  %div41 = fdiv float %43, %44
  %add42 = fadd float -1.250000e-01, %div41
  %45 = load float* %x.addr, align 4
  %div43 = fdiv float %add42, %45
  ret float %div43
}

; Function Attrs: nounwind
define internal float @ponef(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  %p = alloca float*, align 4
  %q = alloca float*, align 4
  %z = alloca float, align 4
  %r = alloca float, align 4
  %s = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1090519040
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  store float* getelementptr inbounds ([6 x float]* @pr8, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([5 x float]* @ps8, i32 0, i32 0), float** %q, align 4
  br label %if.end8

if.else:                                          ; preds = %do.end
  %4 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %4, 1089936472
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store float* getelementptr inbounds ([6 x float]* @pr5, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([5 x float]* @ps5, i32 0, i32 0), float** %q, align 4
  br label %if.end7

if.else3:                                         ; preds = %if.else
  %5 = load i32* %ix, align 4
  %cmp4 = icmp sge i32 %5, 1077336936
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else3
  store float* getelementptr inbounds ([6 x float]* @pr3, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([5 x float]* @ps3, i32 0, i32 0), float** %q, align 4
  br label %if.end

if.else6:                                         ; preds = %if.else3
  store float* getelementptr inbounds ([6 x float]* @pr2, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([5 x float]* @ps2, i32 0, i32 0), float** %q, align 4
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then5
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then
  %6 = load float* %x.addr, align 4
  %7 = load float* %x.addr, align 4
  %mul = fmul float %6, %7
  %div = fdiv float 1.000000e+00, %mul
  store float %div, float* %z, align 4
  %8 = load float** %p, align 4
  %arrayidx = getelementptr inbounds float* %8, i32 0
  %9 = load float* %arrayidx, align 4
  %10 = load float* %z, align 4
  %11 = load float** %p, align 4
  %arrayidx9 = getelementptr inbounds float* %11, i32 1
  %12 = load float* %arrayidx9, align 4
  %13 = load float* %z, align 4
  %14 = load float** %p, align 4
  %arrayidx10 = getelementptr inbounds float* %14, i32 2
  %15 = load float* %arrayidx10, align 4
  %16 = load float* %z, align 4
  %17 = load float** %p, align 4
  %arrayidx11 = getelementptr inbounds float* %17, i32 3
  %18 = load float* %arrayidx11, align 4
  %19 = load float* %z, align 4
  %20 = load float** %p, align 4
  %arrayidx12 = getelementptr inbounds float* %20, i32 4
  %21 = load float* %arrayidx12, align 4
  %22 = load float* %z, align 4
  %23 = load float** %p, align 4
  %arrayidx13 = getelementptr inbounds float* %23, i32 5
  %24 = load float* %arrayidx13, align 4
  %mul14 = fmul float %22, %24
  %add = fadd float %21, %mul14
  %mul15 = fmul float %19, %add
  %add16 = fadd float %18, %mul15
  %mul17 = fmul float %16, %add16
  %add18 = fadd float %15, %mul17
  %mul19 = fmul float %13, %add18
  %add20 = fadd float %12, %mul19
  %mul21 = fmul float %10, %add20
  %add22 = fadd float %9, %mul21
  store float %add22, float* %r, align 4
  %25 = load float* %z, align 4
  %26 = load float** %q, align 4
  %arrayidx23 = getelementptr inbounds float* %26, i32 0
  %27 = load float* %arrayidx23, align 4
  %28 = load float* %z, align 4
  %29 = load float** %q, align 4
  %arrayidx24 = getelementptr inbounds float* %29, i32 1
  %30 = load float* %arrayidx24, align 4
  %31 = load float* %z, align 4
  %32 = load float** %q, align 4
  %arrayidx25 = getelementptr inbounds float* %32, i32 2
  %33 = load float* %arrayidx25, align 4
  %34 = load float* %z, align 4
  %35 = load float** %q, align 4
  %arrayidx26 = getelementptr inbounds float* %35, i32 3
  %36 = load float* %arrayidx26, align 4
  %37 = load float* %z, align 4
  %38 = load float** %q, align 4
  %arrayidx27 = getelementptr inbounds float* %38, i32 4
  %39 = load float* %arrayidx27, align 4
  %mul28 = fmul float %37, %39
  %add29 = fadd float %36, %mul28
  %mul30 = fmul float %34, %add29
  %add31 = fadd float %33, %mul30
  %mul32 = fmul float %31, %add31
  %add33 = fadd float %30, %mul32
  %mul34 = fmul float %28, %add33
  %add35 = fadd float %27, %mul34
  %mul36 = fmul float %25, %add35
  %add37 = fadd float 1.000000e+00, %mul36
  store float %add37, float* %s, align 4
  %40 = load float* %r, align 4
  %41 = load float* %s, align 4
  %div38 = fdiv float %40, %41
  %add39 = fadd float 1.000000e+00, %div38
  ret float %add39
}

; Function Attrs: nounwind
define internal float @qonef(float %x) #2 {
entry:
  %x.addr = alloca float, align 4
  %p = alloca float*, align 4
  %q = alloca float*, align 4
  %s = alloca float, align 4
  %r = alloca float, align 4
  %z = alloca float, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1075838976
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  store float* getelementptr inbounds ([6 x float]* @qr8, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([6 x float]* @qs8, i32 0, i32 0), float** %q, align 4
  br label %if.end8

if.else:                                          ; preds = %do.end
  %4 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %4, 1089936472
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store float* getelementptr inbounds ([6 x float]* @qr5, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([6 x float]* @qs5, i32 0, i32 0), float** %q, align 4
  br label %if.end7

if.else3:                                         ; preds = %if.else
  %5 = load i32* %ix, align 4
  %cmp4 = icmp sge i32 %5, 1077336936
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else3
  store float* getelementptr inbounds ([6 x float]* @qr3, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([6 x float]* @qs3, i32 0, i32 0), float** %q, align 4
  br label %if.end

if.else6:                                         ; preds = %if.else3
  store float* getelementptr inbounds ([6 x float]* @qr2, i32 0, i32 0), float** %p, align 4
  store float* getelementptr inbounds ([6 x float]* @qs2, i32 0, i32 0), float** %q, align 4
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then5
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then
  %6 = load float* %x.addr, align 4
  %7 = load float* %x.addr, align 4
  %mul = fmul float %6, %7
  %div = fdiv float 1.000000e+00, %mul
  store float %div, float* %z, align 4
  %8 = load float** %p, align 4
  %arrayidx = getelementptr inbounds float* %8, i32 0
  %9 = load float* %arrayidx, align 4
  %10 = load float* %z, align 4
  %11 = load float** %p, align 4
  %arrayidx9 = getelementptr inbounds float* %11, i32 1
  %12 = load float* %arrayidx9, align 4
  %13 = load float* %z, align 4
  %14 = load float** %p, align 4
  %arrayidx10 = getelementptr inbounds float* %14, i32 2
  %15 = load float* %arrayidx10, align 4
  %16 = load float* %z, align 4
  %17 = load float** %p, align 4
  %arrayidx11 = getelementptr inbounds float* %17, i32 3
  %18 = load float* %arrayidx11, align 4
  %19 = load float* %z, align 4
  %20 = load float** %p, align 4
  %arrayidx12 = getelementptr inbounds float* %20, i32 4
  %21 = load float* %arrayidx12, align 4
  %22 = load float* %z, align 4
  %23 = load float** %p, align 4
  %arrayidx13 = getelementptr inbounds float* %23, i32 5
  %24 = load float* %arrayidx13, align 4
  %mul14 = fmul float %22, %24
  %add = fadd float %21, %mul14
  %mul15 = fmul float %19, %add
  %add16 = fadd float %18, %mul15
  %mul17 = fmul float %16, %add16
  %add18 = fadd float %15, %mul17
  %mul19 = fmul float %13, %add18
  %add20 = fadd float %12, %mul19
  %mul21 = fmul float %10, %add20
  %add22 = fadd float %9, %mul21
  store float %add22, float* %r, align 4
  %25 = load float* %z, align 4
  %26 = load float** %q, align 4
  %arrayidx23 = getelementptr inbounds float* %26, i32 0
  %27 = load float* %arrayidx23, align 4
  %28 = load float* %z, align 4
  %29 = load float** %q, align 4
  %arrayidx24 = getelementptr inbounds float* %29, i32 1
  %30 = load float* %arrayidx24, align 4
  %31 = load float* %z, align 4
  %32 = load float** %q, align 4
  %arrayidx25 = getelementptr inbounds float* %32, i32 2
  %33 = load float* %arrayidx25, align 4
  %34 = load float* %z, align 4
  %35 = load float** %q, align 4
  %arrayidx26 = getelementptr inbounds float* %35, i32 3
  %36 = load float* %arrayidx26, align 4
  %37 = load float* %z, align 4
  %38 = load float** %q, align 4
  %arrayidx27 = getelementptr inbounds float* %38, i32 4
  %39 = load float* %arrayidx27, align 4
  %40 = load float* %z, align 4
  %41 = load float** %q, align 4
  %arrayidx28 = getelementptr inbounds float* %41, i32 5
  %42 = load float* %arrayidx28, align 4
  %mul29 = fmul float %40, %42
  %add30 = fadd float %39, %mul29
  %mul31 = fmul float %37, %add30
  %add32 = fadd float %36, %mul31
  %mul33 = fmul float %34, %add32
  %add34 = fadd float %33, %mul33
  %mul35 = fmul float %31, %add34
  %add36 = fadd float %30, %mul35
  %mul37 = fmul float %28, %add36
  %add38 = fadd float %27, %mul37
  %mul39 = fmul float %25, %add38
  %add40 = fadd float 1.000000e+00, %mul39
  store float %add40, float* %s, align 4
  %43 = load float* %r, align 4
  %44 = load float* %s, align 4
  %div41 = fdiv float %43, %44
  %add42 = fadd float 3.750000e-01, %div41
  %45 = load float* %x.addr, align 4
  %div43 = fdiv float %add42, %45
  ret float %div43
}

; Function Attrs: nounwind
define internal double @pzero(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  %p = alloca double*, align 4
  %q = alloca double*, align 4
  %z = alloca double, align 8
  %r = alloca double, align 8
  %s = alloca double, align 8
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1075838976
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  store double* getelementptr inbounds ([6 x double]* @pR849, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([5 x double]* @pS850, i32 0, i32 0), double** %q, align 4
  br label %if.end8

if.else:                                          ; preds = %do.end
  %4 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %4, 1074933387
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store double* getelementptr inbounds ([6 x double]* @pR551, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([5 x double]* @pS552, i32 0, i32 0), double** %q, align 4
  br label %if.end7

if.else3:                                         ; preds = %if.else
  %5 = load i32* %ix, align 4
  %cmp4 = icmp sge i32 %5, 1074191213
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else3
  store double* getelementptr inbounds ([6 x double]* @pR353, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([5 x double]* @pS354, i32 0, i32 0), double** %q, align 4
  br label %if.end

if.else6:                                         ; preds = %if.else3
  store double* getelementptr inbounds ([6 x double]* @pR255, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([5 x double]* @pS256, i32 0, i32 0), double** %q, align 4
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then5
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %mul = fmul double %6, %7
  %div = fdiv double 1.000000e+00, %mul
  store double %div, double* %z, align 8
  %8 = load double** %p, align 4
  %arrayidx = getelementptr inbounds double* %8, i32 0
  %9 = load double* %arrayidx, align 4
  %10 = load double* %z, align 8
  %11 = load double** %p, align 4
  %arrayidx9 = getelementptr inbounds double* %11, i32 1
  %12 = load double* %arrayidx9, align 4
  %13 = load double* %z, align 8
  %14 = load double** %p, align 4
  %arrayidx10 = getelementptr inbounds double* %14, i32 2
  %15 = load double* %arrayidx10, align 4
  %16 = load double* %z, align 8
  %17 = load double** %p, align 4
  %arrayidx11 = getelementptr inbounds double* %17, i32 3
  %18 = load double* %arrayidx11, align 4
  %19 = load double* %z, align 8
  %20 = load double** %p, align 4
  %arrayidx12 = getelementptr inbounds double* %20, i32 4
  %21 = load double* %arrayidx12, align 4
  %22 = load double* %z, align 8
  %23 = load double** %p, align 4
  %arrayidx13 = getelementptr inbounds double* %23, i32 5
  %24 = load double* %arrayidx13, align 4
  %mul14 = fmul double %22, %24
  %add = fadd double %21, %mul14
  %mul15 = fmul double %19, %add
  %add16 = fadd double %18, %mul15
  %mul17 = fmul double %16, %add16
  %add18 = fadd double %15, %mul17
  %mul19 = fmul double %13, %add18
  %add20 = fadd double %12, %mul19
  %mul21 = fmul double %10, %add20
  %add22 = fadd double %9, %mul21
  store double %add22, double* %r, align 8
  %25 = load double* %z, align 8
  %26 = load double** %q, align 4
  %arrayidx23 = getelementptr inbounds double* %26, i32 0
  %27 = load double* %arrayidx23, align 4
  %28 = load double* %z, align 8
  %29 = load double** %q, align 4
  %arrayidx24 = getelementptr inbounds double* %29, i32 1
  %30 = load double* %arrayidx24, align 4
  %31 = load double* %z, align 8
  %32 = load double** %q, align 4
  %arrayidx25 = getelementptr inbounds double* %32, i32 2
  %33 = load double* %arrayidx25, align 4
  %34 = load double* %z, align 8
  %35 = load double** %q, align 4
  %arrayidx26 = getelementptr inbounds double* %35, i32 3
  %36 = load double* %arrayidx26, align 4
  %37 = load double* %z, align 8
  %38 = load double** %q, align 4
  %arrayidx27 = getelementptr inbounds double* %38, i32 4
  %39 = load double* %arrayidx27, align 4
  %mul28 = fmul double %37, %39
  %add29 = fadd double %36, %mul28
  %mul30 = fmul double %34, %add29
  %add31 = fadd double %33, %mul30
  %mul32 = fmul double %31, %add31
  %add33 = fadd double %30, %mul32
  %mul34 = fmul double %28, %add33
  %add35 = fadd double %27, %mul34
  %mul36 = fmul double %25, %add35
  %add37 = fadd double 1.000000e+00, %mul36
  store double %add37, double* %s, align 8
  %40 = load double* %r, align 8
  %41 = load double* %s, align 8
  %div38 = fdiv double %40, %41
  %add39 = fadd double 1.000000e+00, %div38
  ret double %add39
}

; Function Attrs: nounwind
define internal double @qzero(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  %p = alloca double*, align 4
  %q = alloca double*, align 4
  %s = alloca double, align 8
  %r = alloca double, align 8
  %z = alloca double, align 8
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1075838976
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  store double* getelementptr inbounds ([6 x double]* @qR841, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([6 x double]* @qS842, i32 0, i32 0), double** %q, align 4
  br label %if.end8

if.else:                                          ; preds = %do.end
  %4 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %4, 1074933387
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store double* getelementptr inbounds ([6 x double]* @qR543, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([6 x double]* @qS544, i32 0, i32 0), double** %q, align 4
  br label %if.end7

if.else3:                                         ; preds = %if.else
  %5 = load i32* %ix, align 4
  %cmp4 = icmp sge i32 %5, 1074191213
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else3
  store double* getelementptr inbounds ([6 x double]* @qR345, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([6 x double]* @qS346, i32 0, i32 0), double** %q, align 4
  br label %if.end

if.else6:                                         ; preds = %if.else3
  store double* getelementptr inbounds ([6 x double]* @qR247, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([6 x double]* @qS248, i32 0, i32 0), double** %q, align 4
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then5
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %mul = fmul double %6, %7
  %div = fdiv double 1.000000e+00, %mul
  store double %div, double* %z, align 8
  %8 = load double** %p, align 4
  %arrayidx = getelementptr inbounds double* %8, i32 0
  %9 = load double* %arrayidx, align 4
  %10 = load double* %z, align 8
  %11 = load double** %p, align 4
  %arrayidx9 = getelementptr inbounds double* %11, i32 1
  %12 = load double* %arrayidx9, align 4
  %13 = load double* %z, align 8
  %14 = load double** %p, align 4
  %arrayidx10 = getelementptr inbounds double* %14, i32 2
  %15 = load double* %arrayidx10, align 4
  %16 = load double* %z, align 8
  %17 = load double** %p, align 4
  %arrayidx11 = getelementptr inbounds double* %17, i32 3
  %18 = load double* %arrayidx11, align 4
  %19 = load double* %z, align 8
  %20 = load double** %p, align 4
  %arrayidx12 = getelementptr inbounds double* %20, i32 4
  %21 = load double* %arrayidx12, align 4
  %22 = load double* %z, align 8
  %23 = load double** %p, align 4
  %arrayidx13 = getelementptr inbounds double* %23, i32 5
  %24 = load double* %arrayidx13, align 4
  %mul14 = fmul double %22, %24
  %add = fadd double %21, %mul14
  %mul15 = fmul double %19, %add
  %add16 = fadd double %18, %mul15
  %mul17 = fmul double %16, %add16
  %add18 = fadd double %15, %mul17
  %mul19 = fmul double %13, %add18
  %add20 = fadd double %12, %mul19
  %mul21 = fmul double %10, %add20
  %add22 = fadd double %9, %mul21
  store double %add22, double* %r, align 8
  %25 = load double* %z, align 8
  %26 = load double** %q, align 4
  %arrayidx23 = getelementptr inbounds double* %26, i32 0
  %27 = load double* %arrayidx23, align 4
  %28 = load double* %z, align 8
  %29 = load double** %q, align 4
  %arrayidx24 = getelementptr inbounds double* %29, i32 1
  %30 = load double* %arrayidx24, align 4
  %31 = load double* %z, align 8
  %32 = load double** %q, align 4
  %arrayidx25 = getelementptr inbounds double* %32, i32 2
  %33 = load double* %arrayidx25, align 4
  %34 = load double* %z, align 8
  %35 = load double** %q, align 4
  %arrayidx26 = getelementptr inbounds double* %35, i32 3
  %36 = load double* %arrayidx26, align 4
  %37 = load double* %z, align 8
  %38 = load double** %q, align 4
  %arrayidx27 = getelementptr inbounds double* %38, i32 4
  %39 = load double* %arrayidx27, align 4
  %40 = load double* %z, align 8
  %41 = load double** %q, align 4
  %arrayidx28 = getelementptr inbounds double* %41, i32 5
  %42 = load double* %arrayidx28, align 4
  %mul29 = fmul double %40, %42
  %add30 = fadd double %39, %mul29
  %mul31 = fmul double %37, %add30
  %add32 = fadd double %36, %mul31
  %mul33 = fmul double %34, %add32
  %add34 = fadd double %33, %mul33
  %mul35 = fmul double %31, %add34
  %add36 = fadd double %30, %mul35
  %mul37 = fmul double %28, %add36
  %add38 = fadd double %27, %mul37
  %mul39 = fmul double %25, %add38
  %add40 = fadd double 1.000000e+00, %mul39
  store double %add40, double* %s, align 8
  %43 = load double* %r, align 8
  %44 = load double* %s, align 8
  %div41 = fdiv double %43, %44
  %add42 = fadd double -1.250000e-01, %div41
  %45 = load double* %x.addr, align 8
  %div43 = fdiv double %add42, %45
  ret double %div43
}

; Function Attrs: nounwind
define internal double @pone(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  %p = alloca double*, align 4
  %q = alloca double*, align 4
  %z = alloca double, align 8
  %r = alloca double, align 8
  %s = alloca double, align 8
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1075838976
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  store double* getelementptr inbounds ([6 x double]* @pr867, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([5 x double]* @ps868, i32 0, i32 0), double** %q, align 4
  br label %if.end8

if.else:                                          ; preds = %do.end
  %4 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %4, 1074933387
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store double* getelementptr inbounds ([6 x double]* @pr569, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([5 x double]* @ps570, i32 0, i32 0), double** %q, align 4
  br label %if.end7

if.else3:                                         ; preds = %if.else
  %5 = load i32* %ix, align 4
  %cmp4 = icmp sge i32 %5, 1074191213
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else3
  store double* getelementptr inbounds ([6 x double]* @pr371, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([5 x double]* @ps372, i32 0, i32 0), double** %q, align 4
  br label %if.end

if.else6:                                         ; preds = %if.else3
  store double* getelementptr inbounds ([6 x double]* @pr273, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([5 x double]* @ps274, i32 0, i32 0), double** %q, align 4
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then5
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %mul = fmul double %6, %7
  %div = fdiv double 1.000000e+00, %mul
  store double %div, double* %z, align 8
  %8 = load double** %p, align 4
  %arrayidx = getelementptr inbounds double* %8, i32 0
  %9 = load double* %arrayidx, align 4
  %10 = load double* %z, align 8
  %11 = load double** %p, align 4
  %arrayidx9 = getelementptr inbounds double* %11, i32 1
  %12 = load double* %arrayidx9, align 4
  %13 = load double* %z, align 8
  %14 = load double** %p, align 4
  %arrayidx10 = getelementptr inbounds double* %14, i32 2
  %15 = load double* %arrayidx10, align 4
  %16 = load double* %z, align 8
  %17 = load double** %p, align 4
  %arrayidx11 = getelementptr inbounds double* %17, i32 3
  %18 = load double* %arrayidx11, align 4
  %19 = load double* %z, align 8
  %20 = load double** %p, align 4
  %arrayidx12 = getelementptr inbounds double* %20, i32 4
  %21 = load double* %arrayidx12, align 4
  %22 = load double* %z, align 8
  %23 = load double** %p, align 4
  %arrayidx13 = getelementptr inbounds double* %23, i32 5
  %24 = load double* %arrayidx13, align 4
  %mul14 = fmul double %22, %24
  %add = fadd double %21, %mul14
  %mul15 = fmul double %19, %add
  %add16 = fadd double %18, %mul15
  %mul17 = fmul double %16, %add16
  %add18 = fadd double %15, %mul17
  %mul19 = fmul double %13, %add18
  %add20 = fadd double %12, %mul19
  %mul21 = fmul double %10, %add20
  %add22 = fadd double %9, %mul21
  store double %add22, double* %r, align 8
  %25 = load double* %z, align 8
  %26 = load double** %q, align 4
  %arrayidx23 = getelementptr inbounds double* %26, i32 0
  %27 = load double* %arrayidx23, align 4
  %28 = load double* %z, align 8
  %29 = load double** %q, align 4
  %arrayidx24 = getelementptr inbounds double* %29, i32 1
  %30 = load double* %arrayidx24, align 4
  %31 = load double* %z, align 8
  %32 = load double** %q, align 4
  %arrayidx25 = getelementptr inbounds double* %32, i32 2
  %33 = load double* %arrayidx25, align 4
  %34 = load double* %z, align 8
  %35 = load double** %q, align 4
  %arrayidx26 = getelementptr inbounds double* %35, i32 3
  %36 = load double* %arrayidx26, align 4
  %37 = load double* %z, align 8
  %38 = load double** %q, align 4
  %arrayidx27 = getelementptr inbounds double* %38, i32 4
  %39 = load double* %arrayidx27, align 4
  %mul28 = fmul double %37, %39
  %add29 = fadd double %36, %mul28
  %mul30 = fmul double %34, %add29
  %add31 = fadd double %33, %mul30
  %mul32 = fmul double %31, %add31
  %add33 = fadd double %30, %mul32
  %mul34 = fmul double %28, %add33
  %add35 = fadd double %27, %mul34
  %mul36 = fmul double %25, %add35
  %add37 = fadd double 1.000000e+00, %mul36
  store double %add37, double* %s, align 8
  %40 = load double* %r, align 8
  %41 = load double* %s, align 8
  %div38 = fdiv double %40, %41
  %add39 = fadd double 1.000000e+00, %div38
  ret double %add39
}

; Function Attrs: nounwind
define internal double @qone(double %x) #2 {
entry:
  %x.addr = alloca double, align 8
  %p = alloca double*, align 4
  %q = alloca double*, align 4
  %s = alloca double, align 8
  %r = alloca double, align 8
  %z = alloca double, align 8
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp sge i32 %3, 1075838976
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.end
  store double* getelementptr inbounds ([6 x double]* @qr859, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([6 x double]* @qs860, i32 0, i32 0), double** %q, align 4
  br label %if.end8

if.else:                                          ; preds = %do.end
  %4 = load i32* %ix, align 4
  %cmp1 = icmp sge i32 %4, 1074933387
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  store double* getelementptr inbounds ([6 x double]* @qr561, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([6 x double]* @qs562, i32 0, i32 0), double** %q, align 4
  br label %if.end7

if.else3:                                         ; preds = %if.else
  %5 = load i32* %ix, align 4
  %cmp4 = icmp sge i32 %5, 1074191213
  br i1 %cmp4, label %if.then5, label %if.else6

if.then5:                                         ; preds = %if.else3
  store double* getelementptr inbounds ([6 x double]* @qr363, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([6 x double]* @qs364, i32 0, i32 0), double** %q, align 4
  br label %if.end

if.else6:                                         ; preds = %if.else3
  store double* getelementptr inbounds ([6 x double]* @qr265, i32 0, i32 0), double** %p, align 4
  store double* getelementptr inbounds ([6 x double]* @qs266, i32 0, i32 0), double** %q, align 4
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then5
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then2
  br label %if.end8

if.end8:                                          ; preds = %if.end7, %if.then
  %6 = load double* %x.addr, align 8
  %7 = load double* %x.addr, align 8
  %mul = fmul double %6, %7
  %div = fdiv double 1.000000e+00, %mul
  store double %div, double* %z, align 8
  %8 = load double** %p, align 4
  %arrayidx = getelementptr inbounds double* %8, i32 0
  %9 = load double* %arrayidx, align 4
  %10 = load double* %z, align 8
  %11 = load double** %p, align 4
  %arrayidx9 = getelementptr inbounds double* %11, i32 1
  %12 = load double* %arrayidx9, align 4
  %13 = load double* %z, align 8
  %14 = load double** %p, align 4
  %arrayidx10 = getelementptr inbounds double* %14, i32 2
  %15 = load double* %arrayidx10, align 4
  %16 = load double* %z, align 8
  %17 = load double** %p, align 4
  %arrayidx11 = getelementptr inbounds double* %17, i32 3
  %18 = load double* %arrayidx11, align 4
  %19 = load double* %z, align 8
  %20 = load double** %p, align 4
  %arrayidx12 = getelementptr inbounds double* %20, i32 4
  %21 = load double* %arrayidx12, align 4
  %22 = load double* %z, align 8
  %23 = load double** %p, align 4
  %arrayidx13 = getelementptr inbounds double* %23, i32 5
  %24 = load double* %arrayidx13, align 4
  %mul14 = fmul double %22, %24
  %add = fadd double %21, %mul14
  %mul15 = fmul double %19, %add
  %add16 = fadd double %18, %mul15
  %mul17 = fmul double %16, %add16
  %add18 = fadd double %15, %mul17
  %mul19 = fmul double %13, %add18
  %add20 = fadd double %12, %mul19
  %mul21 = fmul double %10, %add20
  %add22 = fadd double %9, %mul21
  store double %add22, double* %r, align 8
  %25 = load double* %z, align 8
  %26 = load double** %q, align 4
  %arrayidx23 = getelementptr inbounds double* %26, i32 0
  %27 = load double* %arrayidx23, align 4
  %28 = load double* %z, align 8
  %29 = load double** %q, align 4
  %arrayidx24 = getelementptr inbounds double* %29, i32 1
  %30 = load double* %arrayidx24, align 4
  %31 = load double* %z, align 8
  %32 = load double** %q, align 4
  %arrayidx25 = getelementptr inbounds double* %32, i32 2
  %33 = load double* %arrayidx25, align 4
  %34 = load double* %z, align 8
  %35 = load double** %q, align 4
  %arrayidx26 = getelementptr inbounds double* %35, i32 3
  %36 = load double* %arrayidx26, align 4
  %37 = load double* %z, align 8
  %38 = load double** %q, align 4
  %arrayidx27 = getelementptr inbounds double* %38, i32 4
  %39 = load double* %arrayidx27, align 4
  %40 = load double* %z, align 8
  %41 = load double** %q, align 4
  %arrayidx28 = getelementptr inbounds double* %41, i32 5
  %42 = load double* %arrayidx28, align 4
  %mul29 = fmul double %40, %42
  %add30 = fadd double %39, %mul29
  %mul31 = fmul double %37, %add30
  %add32 = fadd double %36, %mul31
  %mul33 = fmul double %34, %add32
  %add34 = fadd double %33, %mul33
  %mul35 = fmul double %31, %add34
  %add36 = fadd double %30, %mul35
  %mul37 = fmul double %28, %add36
  %add38 = fadd double %27, %mul37
  %mul39 = fmul double %25, %add38
  %add40 = fadd double 1.000000e+00, %mul39
  store double %add40, double* %s, align 8
  %43 = load double* %r, align 8
  %44 = load double* %s, align 8
  %div41 = fdiv double %43, %44
  %add42 = fadd double 3.750000e-01, %div41
  %45 = load double* %x.addr, align 8
  %div43 = fdiv double %add42, %45
  ret double %div43
}

; Function Attrs: nounwind
define internal float @sin_pif(float %x) #2 {
entry:
  %retval = alloca float, align 4
  %x.addr = alloca float, align 4
  %y = alloca float, align 4
  %z = alloca float, align 4
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %gf_u = alloca %union.ieee_float_shape_type, align 4
  %gf_u18 = alloca %union.ieee_float_shape_type, align 4
  store float %x, float* %x.addr, align 4
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load float* %x.addr, align 4
  %value = bitcast %union.ieee_float_shape_type* %gf_u to float*
  store float %0, float* %value, align 4
  %word = bitcast %union.ieee_float_shape_type* %gf_u to i32*
  %1 = load i32* %word, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 1048576000
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load float* %x.addr, align 4
  %mul = fmul float 0x400921FB60000000, %4
  %call = call float @__kernel_sinf(float %mul, float 0.000000e+00, i32 0) #5
  store float %call, float* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %5 = load float* %x.addr, align 4
  %sub = fsub float -0.000000e+00, %5
  store float %sub, float* %y, align 4
  %6 = load float* %y, align 4
  %call1 = call float @floorf(float %6) #6
  store float %call1, float* %z, align 4
  %7 = load float* %z, align 4
  %8 = load float* %y, align 4
  %cmp2 = fcmp une float %7, %8
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %9 = load float* %y, align 4
  %mul4 = fmul float %9, 5.000000e-01
  store float %mul4, float* %y, align 4
  %10 = load float* %y, align 4
  %11 = load float* %y, align 4
  %call5 = call float @floorf(float %11) #6
  %sub6 = fsub float %10, %call5
  %mul7 = fmul float 2.000000e+00, %sub6
  store float %mul7, float* %y, align 4
  %12 = load float* %y, align 4
  %mul8 = fmul float %12, 4.000000e+00
  %conv = fptosi float %mul8 to i32
  store i32 %conv, i32* %n, align 4
  br label %if.end25

if.else:                                          ; preds = %if.end
  %13 = load i32* %ix, align 4
  %cmp9 = icmp sge i32 %13, 1266679808
  br i1 %cmp9, label %if.then11, label %if.else12

if.then11:                                        ; preds = %if.else
  store float 0.000000e+00, float* %y, align 4
  store i32 0, i32* %n, align 4
  br label %if.end24

if.else12:                                        ; preds = %if.else
  %14 = load i32* %ix, align 4
  %cmp13 = icmp slt i32 %14, 1258291200
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.else12
  %15 = load float* %y, align 4
  %add = fadd float %15, 8.388608e+06
  store float %add, float* %z, align 4
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.else12
  br label %do.body17

do.body17:                                        ; preds = %if.end16
  %16 = load float* %z, align 4
  %value19 = bitcast %union.ieee_float_shape_type* %gf_u18 to float*
  store float %16, float* %value19, align 4
  %word20 = bitcast %union.ieee_float_shape_type* %gf_u18 to i32*
  %17 = load i32* %word20, align 4
  store i32 %17, i32* %n, align 4
  br label %do.end21

do.end21:                                         ; preds = %do.body17
  %18 = load i32* %n, align 4
  %and22 = and i32 %18, 1
  store i32 %and22, i32* %n, align 4
  %19 = load i32* %n, align 4
  %conv23 = sitofp i32 %19 to float
  store float %conv23, float* %y, align 4
  %20 = load i32* %n, align 4
  %shl = shl i32 %20, 2
  store i32 %shl, i32* %n, align 4
  br label %if.end24

if.end24:                                         ; preds = %do.end21, %if.then11
  br label %if.end25

if.end25:                                         ; preds = %if.end24, %if.then3
  %21 = load i32* %n, align 4
  switch i32 %21, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb28
    i32 2, label %sw.bb28
    i32 3, label %sw.bb32
    i32 4, label %sw.bb32
    i32 5, label %sw.bb36
    i32 6, label %sw.bb36
  ]

sw.bb:                                            ; preds = %if.end25
  %22 = load float* %y, align 4
  %mul26 = fmul float 0x400921FB60000000, %22
  %call27 = call float @__kernel_sinf(float %mul26, float 0.000000e+00, i32 0) #5
  store float %call27, float* %y, align 4
  br label %sw.epilog

sw.bb28:                                          ; preds = %if.end25, %if.end25
  %23 = load float* %y, align 4
  %sub29 = fsub float 5.000000e-01, %23
  %mul30 = fmul float 0x400921FB60000000, %sub29
  %call31 = call float @__kernel_cosf(float %mul30, float 0.000000e+00) #5
  store float %call31, float* %y, align 4
  br label %sw.epilog

sw.bb32:                                          ; preds = %if.end25, %if.end25
  %24 = load float* %y, align 4
  %sub33 = fsub float 1.000000e+00, %24
  %mul34 = fmul float 0x400921FB60000000, %sub33
  %call35 = call float @__kernel_sinf(float %mul34, float 0.000000e+00, i32 0) #5
  store float %call35, float* %y, align 4
  br label %sw.epilog

sw.bb36:                                          ; preds = %if.end25, %if.end25
  %25 = load float* %y, align 4
  %sub37 = fsub float %25, 1.500000e+00
  %mul38 = fmul float 0x400921FB60000000, %sub37
  %call39 = call float @__kernel_cosf(float %mul38, float 0.000000e+00) #5
  %sub40 = fsub float -0.000000e+00, %call39
  store float %sub40, float* %y, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %if.end25
  %26 = load float* %y, align 4
  %sub41 = fsub float %26, 2.000000e+00
  %mul42 = fmul float 0x400921FB60000000, %sub41
  %call43 = call float @__kernel_sinf(float %mul42, float 0.000000e+00, i32 0) #5
  store float %call43, float* %y, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb36, %sw.bb32, %sw.bb28, %sw.bb
  %27 = load float* %y, align 4
  %sub44 = fsub float -0.000000e+00, %27
  store float %sub44, float* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.then
  %28 = load float* %retval
  ret float %28
}

; Function Attrs: nounwind
define internal double @sin_pi(double %x) #2 {
entry:
  %retval = alloca double, align 4
  %x.addr = alloca double, align 8
  %y = alloca double, align 8
  %z = alloca double, align 8
  %n = alloca i32, align 4
  %ix = alloca i32, align 4
  %gh_u = alloca %union.ieee_double_shape_type, align 4
  %gl_u = alloca %union.ieee_double_shape_type, align 4
  store double %x, double* %x.addr, align 8
  br label %do.body

do.body:                                          ; preds = %entry
  %0 = load double* %x.addr, align 8
  %value = bitcast %union.ieee_double_shape_type* %gh_u to double*
  store double %0, double* %value, align 4
  %parts = bitcast %union.ieee_double_shape_type* %gh_u to %struct.anon*
  %msw = getelementptr inbounds %struct.anon* %parts, i32 0, i32 1
  %1 = load i32* %msw, align 4
  store i32 %1, i32* %ix, align 4
  br label %do.end

do.end:                                           ; preds = %do.body
  %2 = load i32* %ix, align 4
  %and = and i32 %2, 2147483647
  store i32 %and, i32* %ix, align 4
  %3 = load i32* %ix, align 4
  %cmp = icmp slt i32 %3, 1070596096
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %do.end
  %4 = load double* %x.addr, align 8
  %mul = fmul double 0x400921FB54442D18, %4
  %call = call double @__kernel_sin(double %mul, double 0.000000e+00, i32 0) #5
  store double %call, double* %retval
  br label %return

if.end:                                           ; preds = %do.end
  %5 = load double* %x.addr, align 8
  %sub = fsub double -0.000000e+00, %5
  store double %sub, double* %y, align 8
  %6 = load double* %y, align 8
  %call1 = call double @floor(double %6) #6
  store double %call1, double* %z, align 8
  %7 = load double* %z, align 8
  %8 = load double* %y, align 8
  %cmp2 = fcmp une double %7, %8
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %9 = load double* %y, align 8
  %mul4 = fmul double %9, 5.000000e-01
  store double %mul4, double* %y, align 8
  %10 = load double* %y, align 8
  %11 = load double* %y, align 8
  %call5 = call double @floor(double %11) #6
  %sub6 = fsub double %10, %call5
  %mul7 = fmul double 2.000000e+00, %sub6
  store double %mul7, double* %y, align 8
  %12 = load double* %y, align 8
  %mul8 = fmul double %12, 4.000000e+00
  %conv = fptosi double %mul8 to i32
  store i32 %conv, i32* %n, align 4
  br label %if.end24

if.else:                                          ; preds = %if.end
  %13 = load i32* %ix, align 4
  %cmp9 = icmp sge i32 %13, 1128267776
  br i1 %cmp9, label %if.then11, label %if.else12

if.then11:                                        ; preds = %if.else
  store double 0.000000e+00, double* %y, align 8
  store i32 0, i32* %n, align 4
  br label %if.end23

if.else12:                                        ; preds = %if.else
  %14 = load i32* %ix, align 4
  %cmp13 = icmp slt i32 %14, 1127219200
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %if.else12
  %15 = load double* %y, align 8
  %add = fadd double %15, 0x4330000000000000
  store double %add, double* %z, align 8
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %if.else12
  br label %do.body17

do.body17:                                        ; preds = %if.end16
  %16 = load double* %z, align 8
  %value18 = bitcast %union.ieee_double_shape_type* %gl_u to double*
  store double %16, double* %value18, align 4
  %parts19 = bitcast %union.ieee_double_shape_type* %gl_u to %struct.anon*
  %lsw = getelementptr inbounds %struct.anon* %parts19, i32 0, i32 0
  %17 = load i32* %lsw, align 4
  store i32 %17, i32* %n, align 4
  br label %do.end20

do.end20:                                         ; preds = %do.body17
  %18 = load i32* %n, align 4
  %and21 = and i32 %18, 1
  store i32 %and21, i32* %n, align 4
  %19 = load i32* %n, align 4
  %conv22 = sitofp i32 %19 to double
  store double %conv22, double* %y, align 8
  %20 = load i32* %n, align 4
  %shl = shl i32 %20, 2
  store i32 %shl, i32* %n, align 4
  br label %if.end23

if.end23:                                         ; preds = %do.end20, %if.then11
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.then3
  %21 = load i32* %n, align 4
  switch i32 %21, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb27
    i32 2, label %sw.bb27
    i32 3, label %sw.bb31
    i32 4, label %sw.bb31
    i32 5, label %sw.bb35
    i32 6, label %sw.bb35
  ]

sw.bb:                                            ; preds = %if.end24
  %22 = load double* %y, align 8
  %mul25 = fmul double 0x400921FB54442D18, %22
  %call26 = call double @__kernel_sin(double %mul25, double 0.000000e+00, i32 0) #5
  store double %call26, double* %y, align 8
  br label %sw.epilog

sw.bb27:                                          ; preds = %if.end24, %if.end24
  %23 = load double* %y, align 8
  %sub28 = fsub double 5.000000e-01, %23
  %mul29 = fmul double 0x400921FB54442D18, %sub28
  %call30 = call double @__kernel_cos(double %mul29, double 0.000000e+00) #5
  store double %call30, double* %y, align 8
  br label %sw.epilog

sw.bb31:                                          ; preds = %if.end24, %if.end24
  %24 = load double* %y, align 8
  %sub32 = fsub double 1.000000e+00, %24
  %mul33 = fmul double 0x400921FB54442D18, %sub32
  %call34 = call double @__kernel_sin(double %mul33, double 0.000000e+00, i32 0) #5
  store double %call34, double* %y, align 8
  br label %sw.epilog

sw.bb35:                                          ; preds = %if.end24, %if.end24
  %25 = load double* %y, align 8
  %sub36 = fsub double %25, 1.500000e+00
  %mul37 = fmul double 0x400921FB54442D18, %sub36
  %call38 = call double @__kernel_cos(double %mul37, double 0.000000e+00) #5
  %sub39 = fsub double -0.000000e+00, %call38
  store double %sub39, double* %y, align 8
  br label %sw.epilog

sw.default:                                       ; preds = %if.end24
  %26 = load double* %y, align 8
  %sub40 = fsub double %26, 2.000000e+00
  %mul41 = fmul double 0x400921FB54442D18, %sub40
  %call42 = call double @__kernel_sin(double %mul41, double 0.000000e+00, i32 0) #5
  store double %call42, double* %y, align 8
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %sw.bb35, %sw.bb31, %sw.bb27, %sw.bb
  %27 = load double* %y, align 8
  %sub43 = fsub double -0.000000e+00, %27
  store double %sub43, double* %retval
  br label %return

return:                                           ; preds = %sw.epilog, %if.then
  %28 = load double* %retval
  ret double %28
}

attributes #0 = { "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nobuiltin nounwind }
attributes #5 = { nobuiltin }
attributes #6 = { nobuiltin nounwind readnone }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}

!0 = metadata !{metadata !"clang version 3.5.2 (tags/RELEASE_352/final)"}
!1 = metadata !{metadata !2, metadata !2, i64 0}
!2 = metadata !{metadata !"int", metadata !3, i64 0}
!3 = metadata !{metadata !"omnipotent char", metadata !4, i64 0}
!4 = metadata !{metadata !"Simple C/C++ TBAA"}
!5 = metadata !{metadata !3, metadata !3, i64 0}
