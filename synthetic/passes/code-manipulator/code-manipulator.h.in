
#include <assert.h>
#include <iostream>

#include "llvm/IR/Function.h"
#include "llvm/Pass.h"
#include "llvm/Analysis/LoopPass.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/IR/LegacyPassManager.h"
#include "llvm/Transforms/IPO/PassManagerBuilder.h"

#include "llvm/Support/GenericDomTree.h"
#include "llvm/Analysis/LoopInfo.h"
#include "llvm/Pass.h"
#include "llvm/IR/InstIterator.h"
#include "llvm/IR/Argument.h"
#include "llvm/IR/Module.h"
#include "llvm/IR/BasicBlock.h"
#include "llvm/Transforms/Utils/CodeExtractor.h"
#include "llvm/Transforms/Utils/Cloning.h"
#include "llvm/IR/Instructions.h"
#include "llvm/IR/Instruction.h"
#include "llvm/IR/Dominators.h"
#include "llvm/IR/CFG.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/ValueSymbolTable.h"
#include "llvm/IR/Verifier.h"
#include "llvm/Support/raw_ostream.h"
#include "llvm/PassManager.h"
#include "llvm/Transforms/IPO.h"
#include "llvm/Transforms/Utils/BasicBlockUtils.h"


class CodeManipulator{
  public:
    CodeTemplate * serial(CodeTemplate * c1, CodeTemplate * c2);
    CodeTemplate * repeatSerial(CodeTemplate * c1, unsigned repetitions);
    CodeTemplate * wrapAsLegUP(CodeTemplate * c);
    CodeTemplate * applyInline(CodeTemplate * c);
    CodeTemplate * repeatLoopBody(CodeTemplate * c, unsigned repetitions);

  private:
    llvm::LLVMContext &context = llvm::getGlobalContext();
    void fillAllocToFunctionMaps(CodeTemplate * c);

    using inst2inst = std::map<llvm::Instruction*, llvm::Instruction*>;
    inst2inst coppiedInsts = inst2inst();
    std::map<llvm::Instruction*, bool> dontCopyInsts = std::map<llvm::Instruction*, bool> ();
    llvm::Instruction * copyInstAndUsers(llvm::Instruction *inst);
};
