#include "CodeTemplate.h"
#include <iostream>
#include <assert.h>
#include <sstream>
#include <stdio.h>
#include <fcntl.h>
#include <llvm/Support/raw_ostream.h>
#include <llvm/Bitcode/ReaderWriter.h>

//template <class T> class CodeTemplate{
//basic empty constructor
CodeTemplate::CodeTemplate(std::string sn){
    std::cout << "/* constructing code template for " << sn << " *\n";
    sourceName = std::string("${CMAKE_BINARY_DIR}/codeTemplates/"+sn+".ll");

    std::cout << sourceName << '\n';

}

void CodeTemplate::loadModule(llvm::LLVMContext& context){
  FILE *file = fopen(sourceName.c_str(), "r");
  assert(file!=NULL);

  module = llvm::ParseIRFile(sourceName.c_str(), error, context);
  assert(module);

  if(module == NULL) std::cout << "aaaaaaaaaaaaaaaaaaaaaaa" << '\n';
  //else module->dump();

  std::cout << module << '\n';
}

void CodeTemplate::setName(std::string s){
  name = s;
  return;
}

void CodeTemplate::addInput(std::string s){
  assert(!(alreadyInput(s) || alreadyOutput(s)));
  inputList.push_back(s);
  return;
}

void CodeTemplate::addInput(std::vector<std::string> v){
  assert(inputList.empty()); //just to be shure
  inputList.insert(inputList.begin(), v.begin(), v.end());
}

void CodeTemplate::addOutput(std::string s){
  assert(!(alreadyInput(s) || alreadyOutput(s)));
  outputList.push_back(s);
  return;
}

void CodeTemplate::addOutput(std::vector<std::string> v){
  assert(outputList.empty()); //just to be shure
  outputList.insert(outputList.begin(), v.begin(), v.end());
}

void CodeTemplate::addVariable(std::string s){
  assert(!(alreadyVariable(s)));
  variableList.push_back(s);
  return;
}

int CodeTemplate::inputListSize(){
  return inputList.size();
}

int CodeTemplate::outputListSize(){
  return outputList.size();
}

bool CodeTemplate::alreadyInput(std::string snew){
  for (std::vector<std::string>::iterator i = inputList.begin(), ie = inputList.end(); i != ie; ++i) {
    if(!i->compare(snew))
      return true;
  }

  return false;
}

bool CodeTemplate::alreadyOutput(std::string snew){
  for (std::vector<std::string>::iterator i = outputList.begin(), ie = outputList.end(); i != ie; ++i) {
    if(!i->compare(snew))
      return true;
  }

  return false;
}

bool CodeTemplate::alreadyVariable(std::string snew){
  for (std::vector<std::string>::iterator i = variableList.begin(), ie = variableList.end(); i != ie; ++i) {
    if(!i->compare(snew))
      return true;
  }

  return false;
}

void CodeTemplate::printCode(std::string fname){
  FILE *f = fopen(fname.c_str(), "w");
  fclose(f);

  int fd = open (fname.c_str(), O_RDWR | O_CREAT);
  llvm::raw_fd_ostream OS(fd, true);
  llvm::WriteBitcodeToFile(module, OS);
  OS.flush();

  return;
}

void CodeTemplate::setFuncArgSizes(std::string funcname, std::vector<int> vec){
  func_argsize_map[funcname] = vec;
  return;
}

void CodeTemplate::printFuncArgSizeMap(){
  for(std::map<std::string, std::vector<int>>::iterator i=func_argsize_map.begin(), ie=func_argsize_map.end(); i!=ie; ++i){
    std::cout << i->first << " ";
    std::vector<int> vec = i->second;
    if(vec.empty())
      std::cout << "- should have " << vec.size() << "elements" << '\n';
    else{
      for(std::vector<int>::iterator i=vec.begin(), ie=vec.end(); i!=ie; ++i){
        std::cout << " size=" << *i;
      }
      std::cout << '\n';
    }

  }

}
