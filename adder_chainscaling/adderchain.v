//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Feb 14 19:47:56 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Nov  7 15:26:36 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 13
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_loop_pipeline_wait_loop_1_1 = 3'd1;
parameter [2:0] LEGUP_F_main_BB__129_2 = 3'd2;
parameter [2:0] LEGUP_F_main_BB__129_3 = 3'd3;
parameter [2:0] LEGUP_F_main_BB__133_4 = 3'd4;
parameter [2:0] LEGUP_F_main_BB__135_5 = 3'd5;
parameter [2:0] LEGUP_F_main_BB__137_6 = 3'd6;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg;
reg [31:0] main_1_3;
reg [31:0] main_1_3_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep10_reg;
reg [31:0] main_1_4;
reg [31:0] main_1_4_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep11_reg;
reg [31:0] main_1_5;
reg [31:0] main_1_5_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep12_reg;
reg [31:0] main_1_6;
reg [31:0] main_1_6_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep13_reg;
reg [31:0] main_1_7;
reg [31:0] main_1_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep14_reg;
reg [31:0] main_1_8;
reg [31:0] main_1_8_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep16_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep17_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep18;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep18_reg;
reg [31:0] main_1_9;
reg [31:0] main_1_9_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep19_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep21_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep22_reg;
reg [31:0] main_1_10;
reg [31:0] main_1_10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep23_reg;
reg [31:0] main_1_11;
reg [31:0] main_1_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep24;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep24_reg;
reg [31:0] main_1_12;
reg [31:0] main_1_12_reg;
reg [31:0] main_1_13;
reg [31:0] main_1_13_reg;
reg [31:0] main_1_14;
reg [31:0] main_1_14_reg;
reg [31:0] main_1_15;
reg [31:0] main_1_15_reg;
reg [31:0] main_1_16;
reg [31:0] main_1_16_reg;
reg [31:0] main_1_17;
reg [31:0] main_1_17_reg;
reg [31:0] main_1_18;
reg [31:0] main_1_18_reg;
reg [31:0] main_1_19;
reg [31:0] main_1_19_reg;
reg [31:0] main_1_20;
reg [31:0] main_1_20_reg;
reg [31:0] main_1_21;
reg [31:0] main_1_21_reg;
reg [31:0] main_1_22;
reg [31:0] main_1_22_reg;
reg [31:0] main_1_23;
reg [31:0] main_1_23_reg;
reg [31:0] main_1_24;
reg [31:0] main_1_24_reg;
reg [31:0] main_1_25;
reg [31:0] main_1_25_reg;
reg [31:0] main_1_26;
reg [31:0] main_1_26_reg;
reg [31:0] main_1_27;
reg [31:0] main_1_27_reg;
reg [31:0] main_1_28;
reg [31:0] main_1_28_reg;
reg [31:0] main_1_29;
reg [31:0] main_1_29_reg;
reg [31:0] main_1_30;
reg [31:0] main_1_30_reg;
reg [31:0] main_1_31;
reg [31:0] main_1_31_reg;
reg [31:0] main_1_32;
reg [31:0] main_1_32_reg;
reg [31:0] main_1_33;
reg [31:0] main_1_33_reg;
reg [31:0] main_1_34;
reg [31:0] main_1_34_reg;
reg [31:0] main_1_35;
reg [31:0] main_1_35_reg;
reg [31:0] main_1_36;
reg [31:0] main_1_36_reg;
reg [31:0] main_1_37;
reg [31:0] main_1_37_reg;
reg [31:0] main_1_38;
reg [31:0] main_1_38_reg;
reg [31:0] main_1_39;
reg [31:0] main_1_39_reg;
reg [31:0] main_1_40;
reg [31:0] main_1_40_reg;
reg [31:0] main_1_41;
reg [31:0] main_1_41_reg;
reg [31:0] main_1_42;
reg [31:0] main_1_42_reg;
reg [31:0] main_1_43;
reg [31:0] main_1_43_reg;
reg [31:0] main_1_44;
reg [31:0] main_1_44_reg;
reg [31:0] main_1_45;
reg [31:0] main_1_45_reg;
reg [31:0] main_1_46;
reg [31:0] main_1_46_reg;
reg [31:0] main_1_47;
reg [31:0] main_1_47_reg;
reg [31:0] main_1_48;
reg [31:0] main_1_48_reg;
reg [31:0] main_1_49;
reg [31:0] main_1_49_reg;
reg [31:0] main_1_50;
reg [31:0] main_1_50_reg;
reg [31:0] main_1_51;
reg [31:0] main_1_51_reg;
reg [31:0] main_1_52;
reg [31:0] main_1_52_reg;
reg [31:0] main_1_53;
reg [31:0] main_1_53_reg;
reg [31:0] main_1_54;
reg [31:0] main_1_54_reg;
reg [31:0] main_1_55;
reg [31:0] main_1_55_reg;
reg [31:0] main_1_56;
reg [31:0] main_1_56_reg;
reg [31:0] main_1_57;
reg [31:0] main_1_57_reg;
reg [31:0] main_1_58;
reg [31:0] main_1_58_reg;
reg [31:0] main_1_59;
reg [31:0] main_1_59_reg;
reg [31:0] main_1_60;
reg [31:0] main_1_60_reg;
reg [31:0] main_1_61;
reg [31:0] main_1_61_reg;
reg [31:0] main_1_62;
reg [31:0] main_1_62_reg;
reg [31:0] main_1_63;
reg [31:0] main_1_63_reg;
reg [31:0] main_1_64;
reg [31:0] main_1_64_reg;
reg [31:0] main_1_65;
reg [31:0] main_1_65_reg;
reg [31:0] main_1_66;
reg [31:0] main_1_66_reg;
reg [31:0] main_1_67;
reg [31:0] main_1_67_reg;
reg [31:0] main_1_68;
reg [31:0] main_1_68_reg;
reg [31:0] main_1_69;
reg [31:0] main_1_69_reg;
reg [31:0] main_1_70;
reg [31:0] main_1_70_reg;
reg [31:0] main_1_71;
reg [31:0] main_1_71_reg;
reg [31:0] main_1_72;
reg [31:0] main_1_72_reg;
reg [31:0] main_1_73;
reg [31:0] main_1_73_reg;
reg [31:0] main_1_74;
reg [31:0] main_1_74_reg;
reg [31:0] main_1_75;
reg [31:0] main_1_75_reg;
reg [31:0] main_1_76;
reg [31:0] main_1_76_reg;
reg [31:0] main_1_77;
reg [31:0] main_1_77_reg;
reg [31:0] main_1_78;
reg [31:0] main_1_78_reg;
reg [31:0] main_1_79;
reg [31:0] main_1_79_reg;
reg [31:0] main_1_80;
reg [31:0] main_1_80_reg;
reg [31:0] main_1_81;
reg [31:0] main_1_81_reg;
reg [31:0] main_1_82;
reg [31:0] main_1_82_reg;
reg [31:0] main_1_83;
reg [31:0] main_1_83_reg;
reg [31:0] main_1_84;
reg [31:0] main_1_84_reg;
reg [31:0] main_1_85;
reg [31:0] main_1_85_reg;
reg [31:0] main_1_86;
reg [31:0] main_1_86_reg;
reg [31:0] main_1_87;
reg [31:0] main_1_87_reg;
reg [31:0] main_1_88;
reg [31:0] main_1_88_reg;
reg [31:0] main_1_89;
reg [31:0] main_1_89_reg;
reg [31:0] main_1_90;
reg [31:0] main_1_90_reg;
reg [31:0] main_1_91;
reg [31:0] main_1_91_reg;
reg [31:0] main_1_92;
reg [31:0] main_1_92_reg;
reg [31:0] main_1_93;
reg [31:0] main_1_93_reg;
reg [31:0] main_1_94;
reg [31:0] main_1_94_reg;
reg [31:0] main_1_95;
reg [31:0] main_1_95_reg;
reg [31:0] main_1_96;
reg [31:0] main_1_96_reg;
reg [31:0] main_1_97;
reg [31:0] main_1_97_reg;
reg [31:0] main_1_98;
reg [31:0] main_1_98_reg;
reg [31:0] main_1_99;
reg [31:0] main_1_99_reg;
reg [31:0] main_1_100;
reg [31:0] main_1_100_reg;
reg [31:0] main_1_101;
reg [31:0] main_1_101_reg;
reg [31:0] main_1_102;
reg [31:0] main_1_102_reg;
reg [31:0] main_1_103;
reg [31:0] main_1_103_reg;
reg [31:0] main_1_104;
reg [31:0] main_1_104_reg;
reg [31:0] main_1_105;
reg [31:0] main_1_105_reg;
reg [31:0] main_1_106;
reg [31:0] main_1_106_reg;
reg [31:0] main_1_107;
reg [31:0] main_1_107_reg;
reg [31:0] main_1_108;
reg [31:0] main_1_108_reg;
reg [31:0] main_1_109;
reg [31:0] main_1_109_reg;
reg [31:0] main_1_110;
reg [31:0] main_1_110_reg;
reg [31:0] main_1_111;
reg [31:0] main_1_111_reg;
reg [31:0] main_1_112;
reg [31:0] main_1_112_reg;
reg [31:0] main_1_113;
reg [31:0] main_1_113_reg;
reg [31:0] main_1_114;
reg [31:0] main_1_114_reg;
reg [31:0] main_1_115;
reg [31:0] main_1_115_reg;
reg [31:0] main_1_116;
reg [31:0] main_1_116_reg;
reg [31:0] main_1_117;
reg [31:0] main_1_117_reg;
reg [31:0] main_1_118;
reg [31:0] main_1_118_reg;
reg [31:0] main_1_119;
reg [31:0] main_1_119_reg;
reg [31:0] main_1_120;
reg [31:0] main_1_120_reg;
reg [31:0] main_1_121;
reg [31:0] main_1_121_reg;
reg [31:0] main_1_122;
reg [31:0] main_1_122_reg;
reg [31:0] main_1_123;
reg [31:0] main_1_123_reg;
reg [31:0] main_1_124;
reg [31:0] main_1_124_reg;
reg [31:0] main_1_125;
reg [31:0] main_1_125_reg;
reg [31:0] main_1_126;
reg [31:0] main_1_126_reg;
reg [31:0] main_1_127;
reg [31:0] main_1_127_reg;
reg [31:0] main_1_128;
reg [31:0] main_1_128_reg;
reg  main_1_exitcond1;
reg  main_1_exitcond1_reg;
reg [31:0] main_129_130;
reg [31:0] main_129_130_reg;
reg  main_129_132;
reg  main_129_132_reg;
reg [6:0] b_address_a;
reg  b_write_enable_a;
wire [31:0] b_in_a;
wire [31:0] b_out_a;
reg [6:0] b_address_b;
reg  b_write_enable_b;
wire [31:0] b_in_b;
wire [31:0] b_out_b;
reg [6:0] c_address_a;
reg  c_write_enable_a;
wire [31:0] c_in_a;
wire [31:0] c_out_a;
reg [6:0] c_address_b;
reg  c_write_enable_b;
wire [31:0] c_in_b;
wire [31:0] c_out_b;
reg [6:0] d_address_a;
reg  d_write_enable_a;
wire [31:0] d_in_a;
wire [31:0] d_out_a;
reg [6:0] d_address_b;
reg  d_write_enable_b;
wire [31:0] d_in_b;
wire [31:0] d_out_b;
reg [6:0] e_address_a;
reg  e_write_enable_a;
wire [31:0] e_in_a;
wire [31:0] e_out_a;
reg [6:0] e_address_b;
reg  e_write_enable_b;
wire [31:0] e_in_b;
wire [31:0] e_out_b;
reg [6:0] f_address_a;
reg  f_write_enable_a;
wire [31:0] f_in_a;
wire [31:0] f_out_a;
reg [6:0] f_address_b;
reg  f_write_enable_b;
wire [31:0] f_in_b;
wire [31:0] f_out_b;
reg [6:0] g_address_a;
reg  g_write_enable_a;
wire [31:0] g_in_a;
wire [31:0] g_out_a;
reg [6:0] g_address_b;
reg  g_write_enable_b;
wire [31:0] g_in_b;
wire [31:0] g_out_b;
reg [6:0] h_address_a;
reg  h_write_enable_a;
wire [31:0] h_in_a;
wire [31:0] h_out_a;
reg [6:0] h_address_b;
reg  h_write_enable_b;
wire [31:0] h_in_b;
wire [31:0] h_out_b;
reg [6:0] ii_address_a;
reg  ii_write_enable_a;
wire [31:0] ii_in_a;
wire [31:0] ii_out_a;
reg [6:0] ii_address_b;
reg  ii_write_enable_b;
wire [31:0] ii_in_b;
wire [31:0] ii_out_b;
reg [6:0] j_address_a;
reg  j_write_enable_a;
wire [31:0] j_in_a;
wire [31:0] j_out_a;
reg [6:0] j_address_b;
reg  j_write_enable_b;
wire [31:0] j_in_b;
wire [31:0] j_out_b;
reg [6:0] aa_address_a;
reg  aa_write_enable_a;
reg [31:0] aa_in_a;
wire [31:0] aa_out_a;
wire [6:0] aa_address_b;
wire  aa_write_enable_b;
wire [31:0] aa_in_b;
wire [31:0] aa_out_b;
reg [6:0] bb_address_a;
reg  bb_write_enable_a;
reg [31:0] bb_in_a;
wire [31:0] bb_out_a;
wire [6:0] bb_address_b;
wire  bb_write_enable_b;
wire [31:0] bb_in_b;
wire [31:0] bb_out_b;
reg [6:0] cc_address_a;
reg  cc_write_enable_a;
reg [31:0] cc_in_a;
wire [31:0] cc_out_a;
wire [6:0] cc_address_b;
wire  cc_write_enable_b;
wire [31:0] cc_in_b;
wire [31:0] cc_out_b;
reg [6:0] dd_address_a;
reg  dd_write_enable_a;
wire [31:0] dd_in_a;
wire [31:0] dd_out_a;
reg [6:0] dd_address_b;
reg  dd_write_enable_b;
reg [31:0] dd_in_b;
wire [31:0] dd_out_b;
reg  loop_1_pipeline_start;
reg  loop_1_started;
reg [1:0] loop_1_ii_state;
reg [31:0] loop_1_i_stage0;
reg  loop_1_epilogue;
reg  loop_1_valid_bit_0;
reg  loop_1_valid_bit_1;
reg  loop_1_valid_bit_2;
reg  loop_1_valid_bit_3;
reg  loop_1_valid_bit_4;
reg  loop_1_valid_bit_5;
reg  loop_1_valid_bit_6;
reg  loop_1_valid_bit_7;
reg  loop_1_valid_bit_8;
reg  loop_1_valid_bit_9;
reg  loop_1_valid_bit_10;
reg  loop_1_valid_bit_11;
reg  loop_1_valid_bit_12;
reg  loop_1_valid_bit_13;
reg  loop_1_valid_bit_14;
reg  loop_1_valid_bit_15;
reg  loop_1_valid_bit_16;
reg  loop_1_valid_bit_17;
reg [31:0] loop_1_i_stage1;
reg [31:0] loop_1_i_stage2;
reg [31:0] loop_1_i_stage3;
reg [31:0] loop_1_i_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep8_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep9_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep11_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep12_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep13_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep14_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep15_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep16_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep17_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep18_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep19_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep20_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep21_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep22_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep23_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep24_reg_stage0;
reg [31:0] main_1_13_reg_stage0;
reg [31:0] main_1_14_reg_stage0;
reg [31:0] main_1_15_reg_stage0;
reg [31:0] main_1_16_reg_stage0;
reg [31:0] main_1_17_reg_stage0;
reg [31:0] main_1_18_reg_stage0;
reg [31:0] main_1_19_reg_stage0;
reg [31:0] main_1_20_reg_stage0;
reg [31:0] main_1_22_reg_stage0;
reg [31:0] main_1_23_reg_stage0;
reg [31:0] main_1_24_reg_stage0;
reg [31:0] main_1_25_reg_stage0;
reg [31:0] main_1_26_reg_stage0;
reg [31:0] main_1_27_reg_stage0;
reg [31:0] main_1_28_reg_stage0;
reg [31:0] main_1_29_reg_stage0;
reg [31:0] main_1_30_reg_stage0;
reg [31:0] main_1_31_reg_stage0;
reg [31:0] main_1_68_reg_stage1;
reg [31:0] main_1_68_reg_stage2;
reg [31:0] main_1_68_reg_stage3;
reg [31:0] main_1_71_reg_stage1;
reg [31:0] main_1_72_reg_stage1;
reg [31:0] main_1_73_reg_stage0;
reg [31:0] main_1_73_reg_stage1;
reg [31:0] main_1_73_reg_stage2;
reg [31:0] main_1_74_reg_stage0;
reg [31:0] main_1_74_reg_stage1;
reg [31:0] main_1_74_reg_stage2;
reg [31:0] main_1_74_reg_stage3;
reg [31:0] main_1_75_reg_stage0;
reg [31:0] main_1_75_reg_stage1;
reg [31:0] main_1_75_reg_stage2;
reg [31:0] main_1_75_reg_stage3;
reg [31:0] main_1_76_reg_stage0;
reg [31:0] main_1_76_reg_stage1;
reg [31:0] main_1_76_reg_stage2;
reg [31:0] main_1_76_reg_stage3;
reg [31:0] main_1_77_reg_stage0;
reg [31:0] main_1_77_reg_stage1;
reg [31:0] main_1_77_reg_stage2;
reg [31:0] main_1_77_reg_stage3;
reg [31:0] main_1_78_reg_stage0;
reg [31:0] main_1_78_reg_stage1;
reg [31:0] main_1_78_reg_stage2;
reg [31:0] main_1_78_reg_stage3;
reg [31:0] main_1_79_reg_stage0;
reg [31:0] main_1_79_reg_stage1;
reg [31:0] main_1_79_reg_stage2;
reg [31:0] main_1_79_reg_stage3;
reg [31:0] main_1_80_reg_stage0;
reg [31:0] main_1_80_reg_stage1;
reg [31:0] main_1_80_reg_stage2;
reg [31:0] main_1_80_reg_stage3;
reg [31:0] main_1_81_reg_stage0;
reg [31:0] main_1_81_reg_stage1;
reg [31:0] main_1_81_reg_stage2;
reg [31:0] main_1_81_reg_stage3;
reg [31:0] main_1_82_reg_stage0;
reg [31:0] main_1_82_reg_stage1;
reg [31:0] main_1_82_reg_stage2;
reg [31:0] main_1_82_reg_stage3;
reg [31:0] main_1_83_reg_stage0;
reg [31:0] main_1_83_reg_stage1;
reg [31:0] main_1_83_reg_stage2;
reg [31:0] main_1_83_reg_stage3;
reg [31:0] main_1_84_reg_stage0;
reg [31:0] main_1_84_reg_stage1;
reg [31:0] main_1_84_reg_stage2;
reg [31:0] main_1_84_reg_stage3;
reg [31:0] main_1_85_reg_stage0;
reg [31:0] main_1_85_reg_stage1;
reg [31:0] main_1_85_reg_stage2;
reg [31:0] main_1_85_reg_stage3;
reg [31:0] main_1_86_reg_stage0;
reg [31:0] main_1_86_reg_stage1;
reg [31:0] main_1_86_reg_stage2;
reg [31:0] main_1_86_reg_stage3;
reg [31:0] main_1_87_reg_stage0;
reg [31:0] main_1_87_reg_stage1;
reg [31:0] main_1_87_reg_stage2;
reg [31:0] main_1_87_reg_stage3;
reg [31:0] main_1_88_reg_stage0;
reg [31:0] main_1_88_reg_stage1;
reg [31:0] main_1_88_reg_stage2;
reg [31:0] main_1_88_reg_stage3;
reg [31:0] main_1_89_reg_stage0;
reg [31:0] main_1_89_reg_stage1;
reg [31:0] main_1_89_reg_stage2;
reg [31:0] main_1_89_reg_stage3;
reg [31:0] main_1_90_reg_stage2;
reg [31:0] main_1_91_reg_stage2;
reg [31:0] main_1_91_reg_stage3;
reg [31:0] main_1_96_reg_stage3;
reg [31:0] main_1_96_reg_stage4;
reg [31:0] main_1_104_reg_stage3;
reg [31:0] main_1_104_reg_stage4;
reg [31:0] main_1_107_reg_stage3;
reg [31:0] main_1_107_reg_stage4;
reg [31:0] main_1_109_reg_stage2;
reg [31:0] main_1_110_reg_stage2;
reg [31:0] main_1_110_reg_stage3;
reg [31:0] main_1_128_reg_stage3;
reg  loop_1_pipeline_exit_cond;
reg  loop_1_pipeline_finish;

// Local Rams


// @b = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,...
ram_dual_port b (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( b_address_a ),
	.address_b( b_address_b ),
	.wren_a( b_write_enable_a ),
	.wren_b( b_write_enable_b ),
	.data_a( b_in_a ),
	.data_b( b_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( b_out_a ),
	.q_b( b_out_b)
);
defparam b.width_a = 32;
defparam b.width_b = 32;
defparam b.widthad_a = 7;
defparam b.widthad_b = 7;
defparam b.width_be_a = 1;
defparam b.width_be_b = 1;
defparam b.numwords_a = 100;
defparam b.numwords_b = 100;
defparam b.latency = 1;
defparam b.init_file = "b.mif";


// @c = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,...
ram_dual_port c (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( c_address_a ),
	.address_b( c_address_b ),
	.wren_a( c_write_enable_a ),
	.wren_b( c_write_enable_b ),
	.data_a( c_in_a ),
	.data_b( c_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( c_out_a ),
	.q_b( c_out_b)
);
defparam c.width_a = 32;
defparam c.width_b = 32;
defparam c.widthad_a = 7;
defparam c.widthad_b = 7;
defparam c.width_be_a = 1;
defparam c.width_be_b = 1;
defparam c.numwords_a = 100;
defparam c.numwords_b = 100;
defparam c.latency = 1;
defparam c.init_file = "c.mif";


// @d = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,...
ram_dual_port d (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( d_address_a ),
	.address_b( d_address_b ),
	.wren_a( d_write_enable_a ),
	.wren_b( d_write_enable_b ),
	.data_a( d_in_a ),
	.data_b( d_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( d_out_a ),
	.q_b( d_out_b)
);
defparam d.width_a = 32;
defparam d.width_b = 32;
defparam d.widthad_a = 7;
defparam d.widthad_b = 7;
defparam d.width_be_a = 1;
defparam d.width_be_b = 1;
defparam d.numwords_a = 100;
defparam d.numwords_b = 100;
defparam d.latency = 1;
defparam d.init_file = "d.mif";


// @e = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,...
ram_dual_port e (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( e_address_a ),
	.address_b( e_address_b ),
	.wren_a( e_write_enable_a ),
	.wren_b( e_write_enable_b ),
	.data_a( e_in_a ),
	.data_b( e_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( e_out_a ),
	.q_b( e_out_b)
);
defparam e.width_a = 32;
defparam e.width_b = 32;
defparam e.widthad_a = 7;
defparam e.widthad_b = 7;
defparam e.width_be_a = 1;
defparam e.width_be_b = 1;
defparam e.numwords_a = 100;
defparam e.numwords_b = 100;
defparam e.latency = 1;
defparam e.init_file = "e.mif";


// @f = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,...
ram_dual_port f (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( f_address_a ),
	.address_b( f_address_b ),
	.wren_a( f_write_enable_a ),
	.wren_b( f_write_enable_b ),
	.data_a( f_in_a ),
	.data_b( f_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( f_out_a ),
	.q_b( f_out_b)
);
defparam f.width_a = 32;
defparam f.width_b = 32;
defparam f.widthad_a = 7;
defparam f.widthad_b = 7;
defparam f.width_be_a = 1;
defparam f.width_be_b = 1;
defparam f.numwords_a = 100;
defparam f.numwords_b = 100;
defparam f.latency = 1;
defparam f.init_file = "f.mif";


// @g = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,...
ram_dual_port g (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( g_address_a ),
	.address_b( g_address_b ),
	.wren_a( g_write_enable_a ),
	.wren_b( g_write_enable_b ),
	.data_a( g_in_a ),
	.data_b( g_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( g_out_a ),
	.q_b( g_out_b)
);
defparam g.width_a = 32;
defparam g.width_b = 32;
defparam g.widthad_a = 7;
defparam g.widthad_b = 7;
defparam g.width_be_a = 1;
defparam g.width_be_b = 1;
defparam g.numwords_a = 100;
defparam g.numwords_b = 100;
defparam g.latency = 1;
defparam g.init_file = "g.mif";


// @h = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,...
ram_dual_port h (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( h_address_a ),
	.address_b( h_address_b ),
	.wren_a( h_write_enable_a ),
	.wren_b( h_write_enable_b ),
	.data_a( h_in_a ),
	.data_b( h_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( h_out_a ),
	.q_b( h_out_b)
);
defparam h.width_a = 32;
defparam h.width_b = 32;
defparam h.widthad_a = 7;
defparam h.widthad_b = 7;
defparam h.width_be_a = 1;
defparam h.width_be_b = 1;
defparam h.numwords_a = 100;
defparam h.numwords_b = 100;
defparam h.latency = 1;
defparam h.init_file = "h.mif";


// @ii = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22...
ram_dual_port ii (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ii_address_a ),
	.address_b( ii_address_b ),
	.wren_a( ii_write_enable_a ),
	.wren_b( ii_write_enable_b ),
	.data_a( ii_in_a ),
	.data_b( ii_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( ii_out_a ),
	.q_b( ii_out_b)
);
defparam ii.width_a = 32;
defparam ii.width_b = 32;
defparam ii.widthad_a = 7;
defparam ii.widthad_b = 7;
defparam ii.width_be_a = 1;
defparam ii.width_be_b = 1;
defparam ii.numwords_a = 100;
defparam ii.numwords_b = 100;
defparam ii.latency = 1;
defparam ii.init_file = "ii.mif";


// @j = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22,...
ram_dual_port j (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( j_address_a ),
	.address_b( j_address_b ),
	.wren_a( j_write_enable_a ),
	.wren_b( j_write_enable_b ),
	.data_a( j_in_a ),
	.data_b( j_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( j_out_a ),
	.q_b( j_out_b)
);
defparam j.width_a = 32;
defparam j.width_b = 32;
defparam j.widthad_a = 7;
defparam j.widthad_b = 7;
defparam j.width_be_a = 1;
defparam j.width_be_b = 1;
defparam j.numwords_a = 100;
defparam j.numwords_b = 100;
defparam j.latency = 1;
defparam j.init_file = "j.mif";


// @aa = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22...
ram_dual_port aa (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( aa_address_a ),
	.address_b( aa_address_b ),
	.wren_a( aa_write_enable_a ),
	.wren_b( aa_write_enable_b ),
	.data_a( aa_in_a ),
	.data_b( aa_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( aa_out_a ),
	.q_b( aa_out_b)
);
defparam aa.width_a = 32;
defparam aa.width_b = 32;
defparam aa.widthad_a = 7;
defparam aa.widthad_b = 7;
defparam aa.width_be_a = 1;
defparam aa.width_be_b = 1;
defparam aa.numwords_a = 100;
defparam aa.numwords_b = 100;
defparam aa.latency = 1;
defparam aa.init_file = "aa.mif";


// @bb = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22...
ram_dual_port bb (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( bb_address_a ),
	.address_b( bb_address_b ),
	.wren_a( bb_write_enable_a ),
	.wren_b( bb_write_enable_b ),
	.data_a( bb_in_a ),
	.data_b( bb_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( bb_out_a ),
	.q_b( bb_out_b)
);
defparam bb.width_a = 32;
defparam bb.width_b = 32;
defparam bb.widthad_a = 7;
defparam bb.widthad_b = 7;
defparam bb.width_be_a = 1;
defparam bb.width_be_b = 1;
defparam bb.numwords_a = 100;
defparam bb.numwords_b = 100;
defparam bb.latency = 1;
defparam bb.init_file = "bb.mif";


// @cc = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22...
ram_dual_port cc (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( cc_address_a ),
	.address_b( cc_address_b ),
	.wren_a( cc_write_enable_a ),
	.wren_b( cc_write_enable_b ),
	.data_a( cc_in_a ),
	.data_b( cc_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( cc_out_a ),
	.q_b( cc_out_b)
);
defparam cc.width_a = 32;
defparam cc.width_b = 32;
defparam cc.widthad_a = 7;
defparam cc.widthad_b = 7;
defparam cc.width_be_a = 1;
defparam cc.width_be_b = 1;
defparam cc.numwords_a = 100;
defparam cc.numwords_b = 100;
defparam cc.latency = 1;
defparam cc.init_file = "cc.mif";


// @dd = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22...
ram_dual_port dd (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dd_address_a ),
	.address_b( dd_address_b ),
	.wren_a( dd_write_enable_a ),
	.wren_b( dd_write_enable_b ),
	.data_a( dd_in_a ),
	.data_b( dd_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dd_out_a ),
	.q_b( dd_out_b)
);
defparam dd.width_a = 32;
defparam dd.width_b = 32;
defparam dd.widthad_a = 7;
defparam dd.widthad_b = 7;
defparam dd.width_be_a = 1;
defparam dd.width_be_b = 1;
defparam dd.numwords_a = 100;
defparam dd.numwords_b = 100;
defparam dd.latency = 1;
defparam dd.init_file = "dd.mif";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %129*/
	/*   %131 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str1, i32 0, i32 0), i32 %130) #2*/
	if ((cur_state == LEGUP_F_main_BB__129_3)) begin
		$write("sum = %d\n", $signed(main_129_130));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_129_130) === 1'bX) finish <= 0;
	end
	/* main: %133*/
	/*   %134 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @.str2, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__133_4)) begin
		$write("PASSED\n");
	end
	/* main: %135*/
	/*   %136 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__135_5)) begin
		$write("FAILED\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_loop_pipeline_wait_loop_1_1;
LEGUP_F_main_BB__129_2:
		next_state = LEGUP_F_main_BB__129_3;
LEGUP_F_main_BB__129_3:
	if ((main_129_132 == 1'd1))
		next_state = LEGUP_F_main_BB__133_4;
	else if ((main_129_132 == 1'd0))
		next_state = LEGUP_F_main_BB__135_5;
LEGUP_F_main_BB__133_4:
		next_state = LEGUP_F_main_BB__137_6;
LEGUP_F_main_BB__135_5:
		next_state = LEGUP_F_main_BB__137_6;
LEGUP_F_main_BB__137_6:
		next_state = LEGUP_0;
LEGUP_loop_pipeline_wait_loop_1_1:
	if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__129_2;
	else if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__129_2;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %21, %1 ], !legup.canonical_induction !2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
if (reset) begin main_1_2 = 0; end
		main_1_2 = 32'd0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %21, %1 ], !legup.canonical_induction !2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [100 x i32]* @dd, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep = (1'd0 + (4 * loop_1_i_stage0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [100 x i32]* @dd, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep_reg <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [100 x i32]* @cc, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep2 = (1'd0 + (4 * loop_1_i_stage0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [100 x i32]* @cc, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep2_reg <= main_1_scevgep2;
		if (start == 1'b0 && ^(main_1_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [100 x i32]* @aa, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep3 = (1'd0 + (4 * loop_1_i_stage0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [100 x i32]* @aa, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep3_reg <= main_1_scevgep3;
		if (start == 1'b0 && ^(main_1_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep4 = getelementptr [100 x i32]* @bb, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep4 = (1'd0 + (4 * loop_1_i_stage0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep4 = getelementptr [100 x i32]* @bb, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep4_reg <= main_1_scevgep4;
		if (start == 1'b0 && ^(main_1_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [100 x i32]* @ii, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep5 = (1'd0 + (4 * loop_1_i_stage0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [100 x i32]* @ii, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep5_reg <= main_1_scevgep5;
		if (start == 1'b0 && ^(main_1_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep6 = getelementptr [100 x i32]* @g, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep6 = (1'd0 + (4 * loop_1_i_stage0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep6 = getelementptr [100 x i32]* @g, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep6_reg <= main_1_scevgep6;
		if (start == 1'b0 && ^(main_1_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %3 = add i32 %2, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_3 = (loop_1_i_stage0 + 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %3 = add i32 %2, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_3_reg <= main_1_3;
		if (start == 1'b0 && ^(main_1_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep7 = getelementptr [100 x i32]* @dd, i32 0, i32 %3, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep7 = (1'd0 + (4 * main_1_3));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep7 = getelementptr [100 x i32]* @dd, i32 0, i32 %3, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep7_reg <= main_1_scevgep7;
		if (start == 1'b0 && ^(main_1_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep8 = getelementptr [100 x i32]* @g, i32 0, i32 %3, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep8 = (1'd0 + (4 * main_1_3));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep8 = getelementptr [100 x i32]* @g, i32 0, i32 %3, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep8_reg <= main_1_scevgep8;
		if (start == 1'b0 && ^(main_1_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep9 = getelementptr [100 x i32]* @e, i32 0, i32 %3, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep9 = (1'd0 + (4 * main_1_3));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep9 = getelementptr [100 x i32]* @e, i32 0, i32 %3, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep9_reg <= main_1_scevgep9;
		if (start == 1'b0 && ^(main_1_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep10 = getelementptr [100 x i32]* @e, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep10 = (1'd0 + (4 * loop_1_i_stage0));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep10 = getelementptr [100 x i32]* @e, i32 0, i32 %2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep10_reg <= main_1_scevgep10;
		if (start == 1'b0 && ^(main_1_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %4 = add i32 %2, 7, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_4 = (loop_1_i_stage0 + 32'd7);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %4 = add i32 %2, 7, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_4_reg <= main_1_4;
		if (start == 1'b0 && ^(main_1_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep11 = getelementptr [100 x i32]* @d, i32 0, i32 %4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep11 = (1'd0 + (4 * main_1_4));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep11 = getelementptr [100 x i32]* @d, i32 0, i32 %4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep11_reg <= main_1_scevgep11;
		if (start == 1'b0 && ^(main_1_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %5 = add i32 %2, 6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_5 = (loop_1_i_stage0 + 32'd6);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %5 = add i32 %2, 6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_5_reg <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep12 = getelementptr [100 x i32]* @d, i32 0, i32 %5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep12 = (1'd0 + (4 * main_1_5));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep12 = getelementptr [100 x i32]* @d, i32 0, i32 %5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep12_reg <= main_1_scevgep12;
		if (start == 1'b0 && ^(main_1_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %6 = add i32 %2, 5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_6 = (loop_1_i_stage0 + 32'd5);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %6 = add i32 %2, 5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_6_reg <= main_1_6;
		if (start == 1'b0 && ^(main_1_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep13 = getelementptr [100 x i32]* @c, i32 0, i32 %6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep13 = (1'd0 + (4 * main_1_6));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep13 = getelementptr [100 x i32]* @c, i32 0, i32 %6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep13_reg <= main_1_scevgep13;
		if (start == 1'b0 && ^(main_1_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %7 = add i32 %2, 4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_7 = (loop_1_i_stage0 + 32'd4);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %7 = add i32 %2, 4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_7_reg <= main_1_7;
		if (start == 1'b0 && ^(main_1_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep14 = getelementptr [100 x i32]* @c, i32 0, i32 %7, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep14 = (1'd0 + (4 * main_1_7));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep14 = getelementptr [100 x i32]* @c, i32 0, i32 %7, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep14_reg <= main_1_scevgep14;
		if (start == 1'b0 && ^(main_1_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %8 = add i32 %2, 3, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_8 = (loop_1_i_stage0 + 32'd3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %8 = add i32 %2, 3, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_8_reg <= main_1_8;
		if (start == 1'b0 && ^(main_1_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep15 = getelementptr [100 x i32]* @j, i32 0, i32 %8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep15 = (1'd0 + (4 * main_1_8));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep15 = getelementptr [100 x i32]* @j, i32 0, i32 %8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep15_reg <= main_1_scevgep15;
		if (start == 1'b0 && ^(main_1_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep16 = getelementptr [100 x i32]* @h, i32 0, i32 %8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep16 = (1'd0 + (4 * main_1_8));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep16 = getelementptr [100 x i32]* @h, i32 0, i32 %8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep16_reg <= main_1_scevgep16;
		if (start == 1'b0 && ^(main_1_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep17 = getelementptr [100 x i32]* @f, i32 0, i32 %8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep17 = (1'd0 + (4 * main_1_8));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep17 = getelementptr [100 x i32]* @f, i32 0, i32 %8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep17_reg <= main_1_scevgep17;
		if (start == 1'b0 && ^(main_1_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep18 = getelementptr [100 x i32]* @b, i32 0, i32 %8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep18 = (1'd0 + (4 * main_1_8));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep18 = getelementptr [100 x i32]* @b, i32 0, i32 %8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep18_reg <= main_1_scevgep18;
		if (start == 1'b0 && ^(main_1_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %9 = add i32 %2, 2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_9 = (loop_1_i_stage0 + 32'd2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = add i32 %2, 2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_9_reg <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep19 = getelementptr [100 x i32]* @j, i32 0, i32 %9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep19 = (1'd0 + (4 * main_1_9));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep19 = getelementptr [100 x i32]* @j, i32 0, i32 %9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep19_reg <= main_1_scevgep19;
		if (start == 1'b0 && ^(main_1_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep20 = getelementptr [100 x i32]* @h, i32 0, i32 %9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep20 = (1'd0 + (4 * main_1_9));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep20 = getelementptr [100 x i32]* @h, i32 0, i32 %9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep20_reg <= main_1_scevgep20;
		if (start == 1'b0 && ^(main_1_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep21 = getelementptr [100 x i32]* @f, i32 0, i32 %9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep21 = (1'd0 + (4 * main_1_9));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep21 = getelementptr [100 x i32]* @f, i32 0, i32 %9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep21_reg <= main_1_scevgep21;
		if (start == 1'b0 && ^(main_1_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep22 = getelementptr [100 x i32]* @b, i32 0, i32 %9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep22 = (1'd0 + (4 * main_1_9));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep22 = getelementptr [100 x i32]* @b, i32 0, i32 %9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep22_reg <= main_1_scevgep22;
		if (start == 1'b0 && ^(main_1_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %10 = add i32 %2, 8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_10 = (loop_1_i_stage0 + 32'd8);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %10 = add i32 %2, 8, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_10_reg <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep23 = getelementptr [100 x i32]* @dd, i32 0, i32 %10, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep23 = (1'd0 + (4 * main_1_10));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep23 = getelementptr [100 x i32]* @dd, i32 0, i32 %10, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep23_reg <= main_1_scevgep23;
		if (start == 1'b0 && ^(main_1_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %11 = add i32 %2, 9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_11 = (loop_1_i_stage0 + 32'd9);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %11 = add i32 %2, 9, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_11_reg <= main_1_11;
		if (start == 1'b0 && ^(main_1_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep24 = getelementptr [100 x i32]* @dd, i32 0, i32 %11, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep24 = (1'd0 + (4 * main_1_11));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep24 = getelementptr [100 x i32]* @dd, i32 0, i32 %11, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep24_reg <= main_1_scevgep24;
		if (start == 1'b0 && ^(main_1_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %12 = load volatile i32* %scevgep24, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 3 % 4 = 3*/
		main_1_12 = dd_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = load volatile i32* %scevgep24, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_12_reg <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %13 = load volatile i32* %scevgep23, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_13 = dd_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %13 = load volatile i32* %scevgep23, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_13_reg <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep22, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_14 = b_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep22, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_14_reg <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %15 = load volatile i32* %scevgep18, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_15 = b_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %15 = load volatile i32* %scevgep18, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_15_reg <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %16 = load volatile i32* %scevgep14, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_16 = c_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %16 = load volatile i32* %scevgep14, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_16_reg <= main_1_16;
		if (start == 1'b0 && ^(main_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %17 = load volatile i32* %scevgep13, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_17 = c_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %17 = load volatile i32* %scevgep13, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_17_reg <= main_1_17;
		if (start == 1'b0 && ^(main_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %18 = load volatile i32* %scevgep12, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_18 = d_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %18 = load volatile i32* %scevgep12, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_18_reg <= main_1_18;
		if (start == 1'b0 && ^(main_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %19 = load volatile i32* %scevgep11, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_19 = d_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %19 = load volatile i32* %scevgep11, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_19_reg <= main_1_19;
		if (start == 1'b0 && ^(main_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %20 = load volatile i32* %scevgep10, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_20 = e_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %20 = load volatile i32* %scevgep10, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_20_reg <= main_1_20;
		if (start == 1'b0 && ^(main_1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %21 = add nsw i32 %2, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_21 = (loop_1_i_stage0 + 32'd1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %21 = add nsw i32 %2, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_21_reg <= main_1_21;
		if (start == 1'b0 && ^(main_1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %22 = load volatile i32* %scevgep9, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_22 = e_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %22 = load volatile i32* %scevgep9, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_22_reg <= main_1_22;
		if (start == 1'b0 && ^(main_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %23 = load volatile i32* %scevgep21, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_23 = f_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %23 = load volatile i32* %scevgep21, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_23_reg <= main_1_23;
		if (start == 1'b0 && ^(main_1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %24 = load volatile i32* %scevgep17, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_24 = f_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %24 = load volatile i32* %scevgep17, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_24_reg <= main_1_24;
		if (start == 1'b0 && ^(main_1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %25 = load volatile i32* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_25 = g_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %25 = load volatile i32* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_25_reg <= main_1_25;
		if (start == 1'b0 && ^(main_1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %26 = load volatile i32* %scevgep8, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_26 = g_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %26 = load volatile i32* %scevgep8, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_26_reg <= main_1_26;
		if (start == 1'b0 && ^(main_1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %27 = load volatile i32* %scevgep20, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_27 = h_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %27 = load volatile i32* %scevgep20, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_27_reg <= main_1_27;
		if (start == 1'b0 && ^(main_1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %28 = load volatile i32* %scevgep16, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_28 = h_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %28 = load volatile i32* %scevgep16, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_28_reg <= main_1_28;
		if (start == 1'b0 && ^(main_1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_28_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %29 = load volatile i32* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_29 = ii_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %29 = load volatile i32* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_29_reg <= main_1_29;
		if (start == 1'b0 && ^(main_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %30 = load volatile i32* %scevgep19, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_30 = j_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %30 = load volatile i32* %scevgep19, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_30_reg <= main_1_30;
		if (start == 1'b0 && ^(main_1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %31 = load volatile i32* %scevgep15, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_31 = j_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %31 = load volatile i32* %scevgep15, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_31_reg <= main_1_31;
		if (start == 1'b0 && ^(main_1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %32 = add i32 %13, %12, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_32 = (main_1_13_reg_stage0 + main_1_12);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %32 = add i32 %13, %12, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_32_reg <= main_1_32;
		if (start == 1'b0 && ^(main_1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %33 = add i32 %32, %14, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_33 = (main_1_32 + main_1_14_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %33 = add i32 %32, %14, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_33_reg <= main_1_33;
		if (start == 1'b0 && ^(main_1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %34 = add i32 %33, %15, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_34 = (main_1_33 + main_1_15_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %34 = add i32 %33, %15, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_34_reg <= main_1_34;
		if (start == 1'b0 && ^(main_1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_34_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %35 = add i32 %34, %16, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_35 = (main_1_34 + main_1_16_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %35 = add i32 %34, %16, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_35_reg <= main_1_35;
		if (start == 1'b0 && ^(main_1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %36 = add i32 %35, %17, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_36 = (main_1_35 + main_1_17_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %36 = add i32 %35, %17, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_36_reg <= main_1_36;
		if (start == 1'b0 && ^(main_1_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %37 = add i32 %36, %18, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_37 = (main_1_36 + main_1_18_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %37 = add i32 %36, %18, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_37_reg <= main_1_37;
		if (start == 1'b0 && ^(main_1_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %38 = add i32 %37, %19, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_38 = (main_1_37 + main_1_19_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %38 = add i32 %37, %19, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_38_reg <= main_1_38;
		if (start == 1'b0 && ^(main_1_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %39 = add i32 %38, %20, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_39 = (main_1_38 + main_1_20_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %39 = add i32 %38, %20, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_39_reg <= main_1_39;
		if (start == 1'b0 && ^(main_1_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %40 = add i32 %39, %22, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_40 = (main_1_39 + main_1_22_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %40 = add i32 %39, %22, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_40_reg <= main_1_40;
		if (start == 1'b0 && ^(main_1_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %41 = add i32 %40, %23, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_41 = (main_1_40 + main_1_23_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %41 = add i32 %40, %23, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_41_reg <= main_1_41;
		if (start == 1'b0 && ^(main_1_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %42 = add i32 %41, %24, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_42 = (main_1_41 + main_1_24_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %42 = add i32 %41, %24, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_42_reg <= main_1_42;
		if (start == 1'b0 && ^(main_1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_42_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %43 = add i32 %42, %25, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_43 = (main_1_42 + main_1_25_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %43 = add i32 %42, %25, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_43_reg <= main_1_43;
		if (start == 1'b0 && ^(main_1_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %44 = add i32 %43, %26, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_44 = (main_1_43 + main_1_26_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %44 = add i32 %43, %26, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_44_reg <= main_1_44;
		if (start == 1'b0 && ^(main_1_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %45 = add i32 %44, %27, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_45 = (main_1_44 + main_1_27_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %45 = add i32 %44, %27, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_45_reg <= main_1_45;
		if (start == 1'b0 && ^(main_1_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %46 = add i32 %45, %28, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_46 = (main_1_45 + main_1_28_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %46 = add i32 %45, %28, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_46_reg <= main_1_46;
		if (start == 1'b0 && ^(main_1_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %47 = add i32 %46, %29, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_47 = (main_1_46 + main_1_29_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %47 = add i32 %46, %29, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_47_reg <= main_1_47;
		if (start == 1'b0 && ^(main_1_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_47_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %48 = add i32 %47, %30, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_48 = (main_1_47 + main_1_30_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %48 = add i32 %47, %30, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_48_reg <= main_1_48;
		if (start == 1'b0 && ^(main_1_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %49 = add i32 %48, %31, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_49 = (main_1_48 + main_1_31_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %49 = add i32 %48, %31, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_49_reg <= main_1_49;
		if (start == 1'b0 && ^(main_1_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_49_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %50 = load volatile i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 12 avail_time: 13 stage: 3 II: 4 start_ii_state = 12 % 4 = 0 avail_ii_state = 13 % 4 = 1*/
		main_1_50 = dd_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %50 = load volatile i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 12 avail_time: 13 stage: 3 II: 4 start_ii_state = 12 % 4 = 0 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_50_reg <= main_1_50;
		if (start == 1'b0 && ^(main_1_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %51 = add i32 %13, %12, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_51 = (main_1_13_reg_stage0 + main_1_12);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %51 = add i32 %13, %12, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_51_reg <= main_1_51;
		if (start == 1'b0 && ^(main_1_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %52 = add i32 %51, %14, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_52 = (main_1_51 + main_1_14_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %52 = add i32 %51, %14, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_52_reg <= main_1_52;
		if (start == 1'b0 && ^(main_1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %53 = add i32 %52, %15, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_53 = (main_1_52 + main_1_15_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %53 = add i32 %52, %15, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_53_reg <= main_1_53;
		if (start == 1'b0 && ^(main_1_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_53_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %54 = add i32 %53, %16, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_54 = (main_1_53 + main_1_16_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %54 = add i32 %53, %16, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_54_reg <= main_1_54;
		if (start == 1'b0 && ^(main_1_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_54_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %55 = add i32 %54, %17, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_55 = (main_1_54 + main_1_17_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %55 = add i32 %54, %17, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_55_reg <= main_1_55;
		if (start == 1'b0 && ^(main_1_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_55_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %56 = add i32 %55, %18, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_56 = (main_1_55 + main_1_18_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %56 = add i32 %55, %18, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_56_reg <= main_1_56;
		if (start == 1'b0 && ^(main_1_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_56_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %57 = add i32 %56, %19, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_57 = (main_1_56 + main_1_19_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %57 = add i32 %56, %19, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_57_reg <= main_1_57;
		if (start == 1'b0 && ^(main_1_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %58 = add i32 %57, %20, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_58 = (main_1_57 + main_1_20_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %58 = add i32 %57, %20, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_58_reg <= main_1_58;
		if (start == 1'b0 && ^(main_1_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_58_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %59 = add i32 %58, %22, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_59 = (main_1_58 + main_1_22_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %59 = add i32 %58, %22, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_59_reg <= main_1_59;
		if (start == 1'b0 && ^(main_1_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_59_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %60 = add i32 %59, %23, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_60 = (main_1_59 + main_1_23_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %60 = add i32 %59, %23, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_60_reg <= main_1_60;
		if (start == 1'b0 && ^(main_1_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %61 = add i32 %60, %24, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_61 = (main_1_60 + main_1_24_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %61 = add i32 %60, %24, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_61_reg <= main_1_61;
		if (start == 1'b0 && ^(main_1_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %62 = add i32 %61, %25, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_62 = (main_1_61 + main_1_25_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %62 = add i32 %61, %25, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_62_reg <= main_1_62;
		if (start == 1'b0 && ^(main_1_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %63 = add i32 %62, %26, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_63 = (main_1_62 + main_1_26_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %63 = add i32 %62, %26, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_63_reg <= main_1_63;
		if (start == 1'b0 && ^(main_1_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_63_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %64 = add i32 %63, %27, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_64 = (main_1_63 + main_1_27_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %64 = add i32 %63, %27, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_64_reg <= main_1_64;
		if (start == 1'b0 && ^(main_1_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %65 = add i32 %64, %28, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_65 = (main_1_64 + main_1_28_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %65 = add i32 %64, %28, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_65_reg <= main_1_65;
		if (start == 1'b0 && ^(main_1_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %66 = add i32 %65, %29, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_66 = (main_1_65 + main_1_29_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %66 = add i32 %65, %29, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_66_reg <= main_1_66;
		if (start == 1'b0 && ^(main_1_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %67 = add i32 %66, %30, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_67 = (main_1_66 + main_1_30_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %67 = add i32 %66, %30, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_67_reg <= main_1_67;
		if (start == 1'b0 && ^(main_1_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %68 = add i32 %67, %31, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
		main_1_68 = (main_1_67 + main_1_31_reg_stage0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %68 = add i32 %67, %31, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 3 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_68_reg <= main_1_68;
		if (start == 1'b0 && ^(main_1_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_68_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %69 = add i32 %68, %50, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_69 = (main_1_68_reg_stage3 + main_1_50);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %69 = add i32 %68, %50, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_69_reg <= main_1_69;
		if (start == 1'b0 && ^(main_1_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_69_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %70 = add i32 %69, %2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_70 = (main_1_69 + loop_1_i_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %70 = add i32 %69, %2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_70_reg <= main_1_70;
		if (start == 1'b0 && ^(main_1_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %71 = load volatile i32* %scevgep24, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
		main_1_71 = dd_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %71 = load volatile i32* %scevgep24, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_4))) begin
		main_1_71_reg <= main_1_71;
		if (start == 1'b0 && ^(main_1_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %72 = load volatile i32* %scevgep23, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
		main_1_72 = dd_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %72 = load volatile i32* %scevgep23, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_4))) begin
		main_1_72_reg <= main_1_72;
		if (start == 1'b0 && ^(main_1_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %73 = load volatile i32* %scevgep22, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_73 = b_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %73 = load volatile i32* %scevgep22, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_73_reg <= main_1_73;
		if (start == 1'b0 && ^(main_1_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_73_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %74 = load volatile i32* %scevgep18, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_74 = b_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %74 = load volatile i32* %scevgep18, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_74_reg <= main_1_74;
		if (start == 1'b0 && ^(main_1_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %75 = load volatile i32* %scevgep14, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_75 = c_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %75 = load volatile i32* %scevgep14, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_75_reg <= main_1_75;
		if (start == 1'b0 && ^(main_1_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %76 = load volatile i32* %scevgep13, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_76 = c_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %76 = load volatile i32* %scevgep13, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_76_reg <= main_1_76;
		if (start == 1'b0 && ^(main_1_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_76_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %77 = load volatile i32* %scevgep12, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_77 = d_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %77 = load volatile i32* %scevgep12, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_77_reg <= main_1_77;
		if (start == 1'b0 && ^(main_1_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %78 = load volatile i32* %scevgep11, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_78 = d_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %78 = load volatile i32* %scevgep11, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_78_reg <= main_1_78;
		if (start == 1'b0 && ^(main_1_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_78_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %79 = load volatile i32* %scevgep10, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_79 = e_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %79 = load volatile i32* %scevgep10, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_79_reg <= main_1_79;
		if (start == 1'b0 && ^(main_1_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_79_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %80 = load volatile i32* %scevgep9, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_80 = e_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %80 = load volatile i32* %scevgep9, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_80_reg <= main_1_80;
		if (start == 1'b0 && ^(main_1_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_80_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %81 = load volatile i32* %scevgep21, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_81 = f_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %81 = load volatile i32* %scevgep21, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_81_reg <= main_1_81;
		if (start == 1'b0 && ^(main_1_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_81_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %82 = load volatile i32* %scevgep17, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_82 = f_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %82 = load volatile i32* %scevgep17, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_82_reg <= main_1_82;
		if (start == 1'b0 && ^(main_1_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %83 = load volatile i32* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_83 = g_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %83 = load volatile i32* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_83_reg <= main_1_83;
		if (start == 1'b0 && ^(main_1_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %84 = load volatile i32* %scevgep8, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_84 = g_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %84 = load volatile i32* %scevgep8, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_84_reg <= main_1_84;
		if (start == 1'b0 && ^(main_1_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_84_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %85 = load volatile i32* %scevgep20, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_85 = h_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %85 = load volatile i32* %scevgep20, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_85_reg <= main_1_85;
		if (start == 1'b0 && ^(main_1_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_85_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %86 = load volatile i32* %scevgep16, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_86 = h_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %86 = load volatile i32* %scevgep16, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_86_reg <= main_1_86;
		if (start == 1'b0 && ^(main_1_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_86_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %87 = load volatile i32* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
		main_1_87 = ii_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %87 = load volatile i32* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_87_reg <= main_1_87;
		if (start == 1'b0 && ^(main_1_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %88 = load volatile i32* %scevgep19, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_88 = j_out_a;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %88 = load volatile i32* %scevgep19, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_88_reg <= main_1_88;
		if (start == 1'b0 && ^(main_1_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %89 = load volatile i32* %scevgep15, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
		main_1_89 = j_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %89 = load volatile i32* %scevgep15, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_89_reg <= main_1_89;
		if (start == 1'b0 && ^(main_1_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %90 = add i32 %72, %71, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !14, !legup.pipeline.stage !2
	start_time: 7 avail_time: 7 stage: 1 II: 4 start_ii_state = 7 % 4 = 3 avail_ii_state = 7 % 4 = 3*/
		main_1_90 = (main_1_72_reg_stage1 + main_1_71_reg_stage1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %90 = add i32 %72, %71, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !14, !legup.pipeline.stage !2
	start_time: 7 avail_time: 7 stage: 1 II: 4 start_ii_state = 7 % 4 = 3 avail_ii_state = 7 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_90_reg <= main_1_90;
		if (start == 1'b0 && ^(main_1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %91 = add i32 %90, %73, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 10 avail_time: 10 stage: 2 II: 4 start_ii_state = 10 % 4 = 2 avail_ii_state = 10 % 4 = 2*/
		main_1_91 = (main_1_90_reg_stage2 + main_1_73_reg_stage2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %91 = add i32 %90, %73, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 10 avail_time: 10 stage: 2 II: 4 start_ii_state = 10 % 4 = 2 avail_ii_state = 10 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_10))) begin
		main_1_91_reg <= main_1_91;
		if (start == 1'b0 && ^(main_1_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %92 = add i32 %91, %74, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_92 = (main_1_91_reg_stage3 + main_1_74_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %92 = add i32 %91, %74, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_92_reg <= main_1_92;
		if (start == 1'b0 && ^(main_1_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %93 = add i32 %92, %75, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_93 = (main_1_92 + main_1_75_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %93 = add i32 %92, %75, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_93_reg <= main_1_93;
		if (start == 1'b0 && ^(main_1_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_93_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %94 = add i32 %93, %76, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_94 = (main_1_93 + main_1_76_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %94 = add i32 %93, %76, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_94_reg <= main_1_94;
		if (start == 1'b0 && ^(main_1_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_94_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %95 = add i32 %94, %77, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_95 = (main_1_94 + main_1_77_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %95 = add i32 %94, %77, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_95_reg <= main_1_95;
		if (start == 1'b0 && ^(main_1_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %96 = add i32 %95, %78, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_96 = (main_1_95 + main_1_78_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %96 = add i32 %95, %78, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_96_reg <= main_1_96;
		if (start == 1'b0 && ^(main_1_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %97 = add i32 %96, %79, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_97 = (main_1_96 + main_1_79_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %97 = add i32 %96, %79, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_97_reg <= main_1_97;
		if (start == 1'b0 && ^(main_1_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_97_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %98 = add i32 %97, %80, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_98 = (main_1_97 + main_1_80_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %98 = add i32 %97, %80, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_98_reg <= main_1_98;
		if (start == 1'b0 && ^(main_1_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_98_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %99 = add i32 %98, %81, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_99 = (main_1_98 + main_1_81_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %99 = add i32 %98, %81, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_99_reg <= main_1_99;
		if (start == 1'b0 && ^(main_1_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_99_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %100 = add i32 %99, %82, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_100 = (main_1_99 + main_1_82_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %100 = add i32 %99, %82, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_100_reg <= main_1_100;
		if (start == 1'b0 && ^(main_1_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_100_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %101 = add i32 %100, %83, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_101 = (main_1_100 + main_1_83_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %101 = add i32 %100, %83, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_101_reg <= main_1_101;
		if (start == 1'b0 && ^(main_1_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_101_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %102 = add i32 %101, %84, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_102 = (main_1_101 + main_1_84_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %102 = add i32 %101, %84, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_102_reg <= main_1_102;
		if (start == 1'b0 && ^(main_1_102) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_102_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %103 = add i32 %102, %85, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_103 = (main_1_102 + main_1_85_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %103 = add i32 %102, %85, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_103_reg <= main_1_103;
		if (start == 1'b0 && ^(main_1_103) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_103_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %104 = add i32 %103, %86, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_104 = (main_1_103 + main_1_86_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %104 = add i32 %103, %86, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_104_reg <= main_1_104;
		if (start == 1'b0 && ^(main_1_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %105 = add i32 %104, %87, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_105 = (main_1_104 + main_1_87_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %105 = add i32 %104, %87, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_105_reg <= main_1_105;
		if (start == 1'b0 && ^(main_1_105) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_105_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %106 = add i32 %105, %88, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_106 = (main_1_105 + main_1_88_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %106 = add i32 %105, %88, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_106_reg <= main_1_106;
		if (start == 1'b0 && ^(main_1_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %107 = add i32 %106, %89, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_107 = (main_1_106 + main_1_89_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %107 = add i32 %106, %89, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_107_reg <= main_1_107;
		if (start == 1'b0 && ^(main_1_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %108 = load volatile i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 12 avail_time: 13 stage: 3 II: 4 start_ii_state = 12 % 4 = 0 avail_ii_state = 13 % 4 = 1*/
		main_1_108 = dd_out_b;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %108 = load volatile i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 12 avail_time: 13 stage: 3 II: 4 start_ii_state = 12 % 4 = 0 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_108_reg <= main_1_108;
		if (start == 1'b0 && ^(main_1_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %109 = add i32 %72, %71, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !14, !legup.pipeline.stage !2
	start_time: 7 avail_time: 7 stage: 1 II: 4 start_ii_state = 7 % 4 = 3 avail_ii_state = 7 % 4 = 3*/
		main_1_109 = (main_1_72_reg_stage1 + main_1_71_reg_stage1);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %109 = add i32 %72, %71, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !14, !legup.pipeline.stage !2
	start_time: 7 avail_time: 7 stage: 1 II: 4 start_ii_state = 7 % 4 = 3 avail_ii_state = 7 % 4 = 3*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_109_reg <= main_1_109;
		if (start == 1'b0 && ^(main_1_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %110 = add i32 %109, %73, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 10 avail_time: 10 stage: 2 II: 4 start_ii_state = 10 % 4 = 2 avail_ii_state = 10 % 4 = 2*/
		main_1_110 = (main_1_109_reg_stage2 + main_1_73_reg_stage2);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %110 = add i32 %109, %73, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 10 avail_time: 10 stage: 2 II: 4 start_ii_state = 10 % 4 = 2 avail_ii_state = 10 % 4 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_10))) begin
		main_1_110_reg <= main_1_110;
		if (start == 1'b0 && ^(main_1_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_110_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %111 = add i32 %110, %74, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_111 = (main_1_110_reg_stage3 + main_1_74_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %111 = add i32 %110, %74, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_111_reg <= main_1_111;
		if (start == 1'b0 && ^(main_1_111) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_111_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %112 = add i32 %111, %75, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_112 = (main_1_111 + main_1_75_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %112 = add i32 %111, %75, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_112_reg <= main_1_112;
		if (start == 1'b0 && ^(main_1_112) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_112_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %113 = add i32 %112, %76, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_113 = (main_1_112 + main_1_76_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %113 = add i32 %112, %76, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_113_reg <= main_1_113;
		if (start == 1'b0 && ^(main_1_113) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_113_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %114 = add i32 %113, %77, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_114 = (main_1_113 + main_1_77_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %114 = add i32 %113, %77, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_114_reg <= main_1_114;
		if (start == 1'b0 && ^(main_1_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %115 = add i32 %114, %78, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_115 = (main_1_114 + main_1_78_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %115 = add i32 %114, %78, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_115_reg <= main_1_115;
		if (start == 1'b0 && ^(main_1_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %116 = add i32 %115, %79, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_116 = (main_1_115 + main_1_79_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %116 = add i32 %115, %79, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_116_reg <= main_1_116;
		if (start == 1'b0 && ^(main_1_116) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_116_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %117 = add i32 %116, %80, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_117 = (main_1_116 + main_1_80_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %117 = add i32 %116, %80, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_117_reg <= main_1_117;
		if (start == 1'b0 && ^(main_1_117) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_117_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %118 = add i32 %117, %81, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_118 = (main_1_117 + main_1_81_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %118 = add i32 %117, %81, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_118_reg <= main_1_118;
		if (start == 1'b0 && ^(main_1_118) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_118_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %119 = add i32 %118, %82, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_119 = (main_1_118 + main_1_82_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %119 = add i32 %118, %82, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_119_reg <= main_1_119;
		if (start == 1'b0 && ^(main_1_119) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_119_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %120 = add i32 %119, %83, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_120 = (main_1_119 + main_1_83_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %120 = add i32 %119, %83, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_120_reg <= main_1_120;
		if (start == 1'b0 && ^(main_1_120) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_120_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %121 = add i32 %120, %84, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_121 = (main_1_120 + main_1_84_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %121 = add i32 %120, %84, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_121_reg <= main_1_121;
		if (start == 1'b0 && ^(main_1_121) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_121_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %122 = add i32 %121, %85, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_122 = (main_1_121 + main_1_85_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %122 = add i32 %121, %85, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_122_reg <= main_1_122;
		if (start == 1'b0 && ^(main_1_122) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_122_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %123 = add i32 %122, %86, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_123 = (main_1_122 + main_1_86_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %123 = add i32 %122, %86, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_123_reg <= main_1_123;
		if (start == 1'b0 && ^(main_1_123) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_123_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %124 = add i32 %123, %87, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_124 = (main_1_123 + main_1_87_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %124 = add i32 %123, %87, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_124_reg <= main_1_124;
		if (start == 1'b0 && ^(main_1_124) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_124_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %125 = add i32 %124, %88, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_125 = (main_1_124 + main_1_88_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %125 = add i32 %124, %88, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_125_reg <= main_1_125;
		if (start == 1'b0 && ^(main_1_125) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_125_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %126 = add i32 %125, %89, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_126 = (main_1_125 + main_1_89_reg_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %126 = add i32 %125, %89, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_126_reg <= main_1_126;
		if (start == 1'b0 && ^(main_1_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %127 = add i32 %126, %108, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_127 = (main_1_126 + main_1_108);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %127 = add i32 %126, %108, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_127_reg <= main_1_127;
		if (start == 1'b0 && ^(main_1_127) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_127_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %128 = add i32 %127, %2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
		main_1_128 = (main_1_127 + loop_1_i_stage3);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %128 = add i32 %127, %2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 13 avail_time: 13 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 13 % 4 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_128_reg <= main_1_128;
		if (start == 1'b0 && ^(main_1_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_128_reg"); $finish; end
	end
end
always @(*) begin
		main_1_exitcond1 = loop_1_pipeline_finish;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_loop_pipeline_wait_loop_1_1)) begin
		main_1_exitcond1_reg <= loop_1_pipeline_finish;
		if (start == 1'b0 && ^(loop_1_pipeline_finish) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %129*/
	/*   %130 = load volatile i32* getelementptr inbounds ([100 x i32]* @dd, i32 0, i32 90), align 4, !tbaa !4*/
		main_129_130 = dd_out_a;
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %130 = load volatile i32* getelementptr inbounds ([100 x i32]* @dd, i32 0, i32 90), align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__129_3)) begin
		main_129_130_reg <= main_129_130;
		if (start == 1'b0 && ^(main_129_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_130_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %129*/
	/*   %132 = icmp eq i32 %130, 87301*/
		main_129_132 = (main_129_130 == 32'd87301);
end
always @(posedge clk) begin
	/* main: %129*/
	/*   %132 = icmp eq i32 %130, 87301*/
	if ((cur_state == LEGUP_F_main_BB__129_3)) begin
		main_129_132_reg <= main_129_132;
		if (start == 1'b0 && ^(main_129_132) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_129_132_reg"); $finish; end
	end
end
always @(*) begin
	b_address_a = 1'd0;
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep22, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		b_address_a = (main_1_scevgep22 >>> 3'd2);
	end
	/* main: %1*/
	/*   %73 = load volatile i32* %scevgep22, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		b_address_a = (main_1_scevgep22_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	b_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %14 = load volatile i32* %scevgep22, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		b_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %73 = load volatile i32* %scevgep22, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		b_write_enable_a = 1'd0;
	end
end
always @(*) begin
	b_address_b = 1'd0;
	/* main: %1*/
	/*   %15 = load volatile i32* %scevgep18, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		b_address_b = (main_1_scevgep18 >>> 3'd2);
	end
	/* main: %1*/
	/*   %74 = load volatile i32* %scevgep18, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		b_address_b = (main_1_scevgep18_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	b_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %15 = load volatile i32* %scevgep18, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		b_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %74 = load volatile i32* %scevgep18, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		b_write_enable_b = 1'd0;
	end
end
always @(*) begin
	c_address_a = 1'd0;
	/* main: %1*/
	/*   %16 = load volatile i32* %scevgep14, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		c_address_a = (main_1_scevgep14 >>> 3'd2);
	end
	/* main: %1*/
	/*   %75 = load volatile i32* %scevgep14, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		c_address_a = (main_1_scevgep14_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	c_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %16 = load volatile i32* %scevgep14, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		c_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %75 = load volatile i32* %scevgep14, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		c_write_enable_a = 1'd0;
	end
end
always @(*) begin
	c_address_b = 1'd0;
	/* main: %1*/
	/*   %17 = load volatile i32* %scevgep13, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		c_address_b = (main_1_scevgep13 >>> 3'd2);
	end
	/* main: %1*/
	/*   %76 = load volatile i32* %scevgep13, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		c_address_b = (main_1_scevgep13_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	c_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %17 = load volatile i32* %scevgep13, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		c_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %76 = load volatile i32* %scevgep13, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		c_write_enable_b = 1'd0;
	end
end
always @(*) begin
	d_address_a = 1'd0;
	/* main: %1*/
	/*   %18 = load volatile i32* %scevgep12, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		d_address_a = (main_1_scevgep12 >>> 3'd2);
	end
	/* main: %1*/
	/*   %77 = load volatile i32* %scevgep12, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		d_address_a = (main_1_scevgep12_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	d_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %18 = load volatile i32* %scevgep12, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		d_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %77 = load volatile i32* %scevgep12, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		d_write_enable_a = 1'd0;
	end
end
always @(*) begin
	d_address_b = 1'd0;
	/* main: %1*/
	/*   %19 = load volatile i32* %scevgep11, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		d_address_b = (main_1_scevgep11 >>> 3'd2);
	end
	/* main: %1*/
	/*   %78 = load volatile i32* %scevgep11, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		d_address_b = (main_1_scevgep11_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	d_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %19 = load volatile i32* %scevgep11, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		d_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %78 = load volatile i32* %scevgep11, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		d_write_enable_b = 1'd0;
	end
end
always @(*) begin
	e_address_a = 1'd0;
	/* main: %1*/
	/*   %20 = load volatile i32* %scevgep10, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		e_address_a = (main_1_scevgep10 >>> 3'd2);
	end
	/* main: %1*/
	/*   %22 = load volatile i32* %scevgep9, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		e_address_a = (main_1_scevgep9_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	e_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %20 = load volatile i32* %scevgep10, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		e_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %22 = load volatile i32* %scevgep9, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		e_write_enable_a = 1'd0;
	end
end
always @(*) begin
	e_address_b = 1'd0;
	/* main: %1*/
	/*   %79 = load volatile i32* %scevgep10, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		e_address_b = (main_1_scevgep10 >>> 3'd2);
	end
	/* main: %1*/
	/*   %80 = load volatile i32* %scevgep9, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		e_address_b = (main_1_scevgep9_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	e_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %79 = load volatile i32* %scevgep10, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		e_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %80 = load volatile i32* %scevgep9, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		e_write_enable_b = 1'd0;
	end
end
always @(*) begin
	f_address_a = 1'd0;
	/* main: %1*/
	/*   %23 = load volatile i32* %scevgep21, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		f_address_a = (main_1_scevgep21 >>> 3'd2);
	end
	/* main: %1*/
	/*   %81 = load volatile i32* %scevgep21, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		f_address_a = (main_1_scevgep21_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	f_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %23 = load volatile i32* %scevgep21, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		f_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %81 = load volatile i32* %scevgep21, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		f_write_enable_a = 1'd0;
	end
end
always @(*) begin
	f_address_b = 1'd0;
	/* main: %1*/
	/*   %24 = load volatile i32* %scevgep17, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		f_address_b = (main_1_scevgep17 >>> 3'd2);
	end
	/* main: %1*/
	/*   %82 = load volatile i32* %scevgep17, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		f_address_b = (main_1_scevgep17_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	f_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %24 = load volatile i32* %scevgep17, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		f_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %82 = load volatile i32* %scevgep17, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		f_write_enable_b = 1'd0;
	end
end
always @(*) begin
	g_address_a = 1'd0;
	/* main: %1*/
	/*   %25 = load volatile i32* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		g_address_a = (main_1_scevgep6 >>> 3'd2);
	end
	/* main: %1*/
	/*   %26 = load volatile i32* %scevgep8, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		g_address_a = (main_1_scevgep8_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	g_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %25 = load volatile i32* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		g_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %26 = load volatile i32* %scevgep8, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		g_write_enable_a = 1'd0;
	end
end
always @(*) begin
	g_address_b = 1'd0;
	/* main: %1*/
	/*   %83 = load volatile i32* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		g_address_b = (main_1_scevgep6 >>> 3'd2);
	end
	/* main: %1*/
	/*   %84 = load volatile i32* %scevgep8, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		g_address_b = (main_1_scevgep8_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	g_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %83 = load volatile i32* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		g_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %84 = load volatile i32* %scevgep8, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		g_write_enable_b = 1'd0;
	end
end
always @(*) begin
	h_address_a = 1'd0;
	/* main: %1*/
	/*   %27 = load volatile i32* %scevgep20, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		h_address_a = (main_1_scevgep20 >>> 3'd2);
	end
	/* main: %1*/
	/*   %85 = load volatile i32* %scevgep20, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		h_address_a = (main_1_scevgep20_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	h_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %27 = load volatile i32* %scevgep20, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		h_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %85 = load volatile i32* %scevgep20, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		h_write_enable_a = 1'd0;
	end
end
always @(*) begin
	h_address_b = 1'd0;
	/* main: %1*/
	/*   %28 = load volatile i32* %scevgep16, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		h_address_b = (main_1_scevgep16 >>> 3'd2);
	end
	/* main: %1*/
	/*   %86 = load volatile i32* %scevgep16, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		h_address_b = (main_1_scevgep16_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	h_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %28 = load volatile i32* %scevgep16, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		h_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %86 = load volatile i32* %scevgep16, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		h_write_enable_b = 1'd0;
	end
end
always @(*) begin
	ii_address_a = 1'd0;
	/* main: %1*/
	/*   %29 = load volatile i32* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		ii_address_a = (main_1_scevgep5 >>> 3'd2);
	end
end
always @(*) begin
	ii_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %29 = load volatile i32* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		ii_write_enable_a = 1'd0;
	end
end
always @(*) begin
	ii_address_b = 1'd0;
	/* main: %1*/
	/*   %87 = load volatile i32* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		ii_address_b = (main_1_scevgep5 >>> 3'd2);
	end
end
always @(*) begin
	ii_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %87 = load volatile i32* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		ii_write_enable_b = 1'd0;
	end
end
always @(*) begin
	j_address_a = 1'd0;
	/* main: %1*/
	/*   %30 = load volatile i32* %scevgep19, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		j_address_a = (main_1_scevgep19 >>> 3'd2);
	end
	/* main: %1*/
	/*   %88 = load volatile i32* %scevgep19, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		j_address_a = (main_1_scevgep19_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	j_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %30 = load volatile i32* %scevgep19, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		j_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %88 = load volatile i32* %scevgep19, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		j_write_enable_a = 1'd0;
	end
end
always @(*) begin
	j_address_b = 1'd0;
	/* main: %1*/
	/*   %31 = load volatile i32* %scevgep15, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		j_address_b = (main_1_scevgep15 >>> 3'd2);
	end
	/* main: %1*/
	/*   %89 = load volatile i32* %scevgep15, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		j_address_b = (main_1_scevgep15_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	j_write_enable_b = 1'd0;
	/* main: %1*/
	/*   %31 = load volatile i32* %scevgep15, align 4, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 0 avail_time: 1 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 1 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		j_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %89 = load volatile i32* %scevgep15, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		j_write_enable_b = 1'd0;
	end
end
always @(*) begin
	aa_address_a = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %46, i32* %scevgep3, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		aa_address_a = (main_1_scevgep3_reg_stage0 >>> 3'd2);
	end
	/* main: %1*/
	/*   store volatile i32 %104, i32* %scevgep3, align 4, !tbaa !4, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 16 avail_time: 17 stage: 4 II: 4 start_ii_state = 16 % 4 = 0 avail_ii_state = 17 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_16)) begin
		aa_address_a = (main_1_scevgep3_reg_stage4 >>> 3'd2);
	end
end
always @(*) begin
	aa_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %46, i32* %scevgep3, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		aa_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store volatile i32 %104, i32* %scevgep3, align 4, !tbaa !4, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 16 avail_time: 17 stage: 4 II: 4 start_ii_state = 16 % 4 = 0 avail_ii_state = 17 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_16)) begin
		aa_write_enable_a = 1'd1;
	end
end
always @(*) begin
	aa_in_a = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %46, i32* %scevgep3, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		aa_in_a = main_1_46;
	end
	/* main: %1*/
	/*   store volatile i32 %104, i32* %scevgep3, align 4, !tbaa !4, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 16 avail_time: 17 stage: 4 II: 4 start_ii_state = 16 % 4 = 0 avail_ii_state = 17 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_16)) begin
		aa_in_a = main_1_104_reg_stage4;
	end
end
always @(*) begin
	bb_address_a = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %38, i32* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		bb_address_a = (main_1_scevgep4_reg_stage0 >>> 3'd2);
	end
	/* main: %1*/
	/*   store volatile i32 %96, i32* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 16 avail_time: 17 stage: 4 II: 4 start_ii_state = 16 % 4 = 0 avail_ii_state = 17 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_16)) begin
		bb_address_a = (main_1_scevgep4_reg_stage4 >>> 3'd2);
	end
end
always @(*) begin
	bb_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %38, i32* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		bb_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store volatile i32 %96, i32* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 16 avail_time: 17 stage: 4 II: 4 start_ii_state = 16 % 4 = 0 avail_ii_state = 17 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_16)) begin
		bb_write_enable_a = 1'd1;
	end
end
always @(*) begin
	bb_in_a = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %38, i32* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		bb_in_a = main_1_38;
	end
	/* main: %1*/
	/*   store volatile i32 %96, i32* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 16 avail_time: 17 stage: 4 II: 4 start_ii_state = 16 % 4 = 0 avail_ii_state = 17 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_16)) begin
		bb_in_a = main_1_96_reg_stage4;
	end
end
always @(*) begin
	cc_address_a = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %49, i32* %scevgep2, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		cc_address_a = (main_1_scevgep2_reg_stage0 >>> 3'd2);
	end
	/* main: %1*/
	/*   store volatile i32 %107, i32* %scevgep2, align 4, !tbaa !4, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 16 avail_time: 17 stage: 4 II: 4 start_ii_state = 16 % 4 = 0 avail_ii_state = 17 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_16)) begin
		cc_address_a = (main_1_scevgep2_reg_stage4 >>> 3'd2);
	end
end
always @(*) begin
	cc_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %49, i32* %scevgep2, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		cc_write_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store volatile i32 %107, i32* %scevgep2, align 4, !tbaa !4, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 16 avail_time: 17 stage: 4 II: 4 start_ii_state = 16 % 4 = 0 avail_ii_state = 17 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_16)) begin
		cc_write_enable_a = 1'd1;
	end
end
always @(*) begin
	cc_in_a = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %49, i32* %scevgep2, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		cc_in_a = main_1_49;
	end
	/* main: %1*/
	/*   store volatile i32 %107, i32* %scevgep2, align 4, !tbaa !4, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 16 avail_time: 17 stage: 4 II: 4 start_ii_state = 16 % 4 = 0 avail_ii_state = 17 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_16)) begin
		cc_in_a = main_1_107_reg_stage4;
	end
end
always @(*) begin
	dd_address_a = 1'd0;
	/* main: %1*/
	/*   %12 = load volatile i32* %scevgep24, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2)) begin
		dd_address_a = (main_1_scevgep24_reg_stage0 >>> 3'd2);
	end
	/* main: %1*/
	/*   %13 = load volatile i32* %scevgep23, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		dd_address_a = (main_1_scevgep23_reg_stage0 >>> 3'd2);
	end
	/* main: %1*/
	/*   %50 = load volatile i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 12 avail_time: 13 stage: 3 II: 4 start_ii_state = 12 % 4 = 0 avail_ii_state = 13 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_12)) begin
		dd_address_a = (main_1_scevgep_reg_stage3 >>> 3'd2);
	end
	/* main: %1*/
	/*   %71 = load volatile i32* %scevgep24, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		dd_address_a = (main_1_scevgep24_reg_stage0 >>> 3'd2);
	end
	/* main: %129*/
	/*   %130 = load volatile i32* getelementptr inbounds ([100 x i32]* @dd, i32 0, i32 90), align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__129_2)) begin
		dd_address_a = ((1'd0 + (4 * 32'd90)) >>> 3'd2);
	end
end
always @(*) begin
	dd_write_enable_a = 1'd0;
	/* main: %1*/
	/*   %12 = load volatile i32* %scevgep24, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2)) begin
		dd_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %13 = load volatile i32* %scevgep23, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		dd_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %50 = load volatile i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 12 avail_time: 13 stage: 3 II: 4 start_ii_state = 12 % 4 = 0 avail_ii_state = 13 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_12)) begin
		dd_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %71 = load volatile i32* %scevgep24, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		dd_write_enable_a = 1'd0;
	end
	/* main: %129*/
	/*   %130 = load volatile i32* getelementptr inbounds ([100 x i32]* @dd, i32 0, i32 90), align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__129_2)) begin
		dd_write_enable_a = 1'd0;
	end
end
always @(*) begin
	dd_address_b = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %70, i32* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !9
	start_time: 13 avail_time: 14 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 14 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13)) begin
		dd_address_b = (main_1_scevgep7_reg_stage3 >>> 3'd2);
	end
	/* main: %1*/
	/*   %72 = load volatile i32* %scevgep23, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		dd_address_b = (main_1_scevgep23_reg_stage0 >>> 3'd2);
	end
	/* main: %1*/
	/*   %108 = load volatile i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 12 avail_time: 13 stage: 3 II: 4 start_ii_state = 12 % 4 = 0 avail_ii_state = 13 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_12)) begin
		dd_address_b = (main_1_scevgep_reg_stage3 >>> 3'd2);
	end
	/* main: %1*/
	/*   store volatile i32 %128, i32* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !18, !legup.pipeline.stage !9
	start_time: 14 avail_time: 15 stage: 3 II: 4 start_ii_state = 14 % 4 = 2 avail_ii_state = 15 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_14)) begin
		dd_address_b = (main_1_scevgep7_reg_stage3 >>> 3'd2);
	end
end
always @(*) begin
	dd_write_enable_b = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %70, i32* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !9
	start_time: 13 avail_time: 14 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 14 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13)) begin
		dd_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %72 = load volatile i32* %scevgep23, align 4, !tbaa !4, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3)) begin
		dd_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %108 = load volatile i32* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !9
	start_time: 12 avail_time: 13 stage: 3 II: 4 start_ii_state = 12 % 4 = 0 avail_ii_state = 13 % 4 = 1*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_12)) begin
		dd_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i32 %128, i32* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !18, !legup.pipeline.stage !9
	start_time: 14 avail_time: 15 stage: 3 II: 4 start_ii_state = 14 % 4 = 2 avail_ii_state = 15 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_14)) begin
		dd_write_enable_b = 1'd1;
	end
end
always @(*) begin
	dd_in_b = 1'd0;
	/* main: %1*/
	/*   store volatile i32 %70, i32* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !9
	start_time: 13 avail_time: 14 stage: 3 II: 4 start_ii_state = 13 % 4 = 1 avail_ii_state = 14 % 4 = 2*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13)) begin
		dd_in_b = main_1_70;
	end
	/* main: %1*/
	/*   store volatile i32 %128, i32* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !18, !legup.pipeline.stage !9
	start_time: 14 avail_time: 15 stage: 3 II: 4 start_ii_state = 14 % 4 = 2 avail_ii_state = 15 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_14)) begin
		dd_in_b = main_1_128_reg_stage3;
	end
end
always @(*) begin
	loop_1_pipeline_start = 1'd0;
	if (reset) begin
		loop_1_pipeline_start = 1'd0;
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		loop_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_16) & loop_1_valid_bit_17)))) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_ii_state <= 2'd0;
		if (start == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_ii_state <= 2'd0;
		if (start == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd0))) begin
		loop_1_ii_state <= 2'd1;
		if (start == 1'b0 && ^(2'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd1))) begin
		loop_1_ii_state <= 2'd2;
		if (start == 1'b0 && ^(2'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd2))) begin
		loop_1_ii_state <= 2'd3;
		if (start == 1'b0 && ^(2'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd3))) begin
		loop_1_ii_state <= 2'd0;
		if (start == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd3)) & loop_1_valid_bit_3))) begin
		loop_1_i_stage0 <= (loop_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 2'd0) & loop_1_pipeline_exit_cond)))) begin
		loop_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_16) & loop_1_valid_bit_17)))) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 2'd0) & loop_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 2'd0) & loop_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_1 <= loop_1_valid_bit_0;
		if (start == 1'b0 && ^(loop_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_2 <= loop_1_valid_bit_1;
		if (start == 1'b0 && ^(loop_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_3 <= loop_1_valid_bit_2;
		if (start == 1'b0 && ^(loop_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_4 <= loop_1_valid_bit_3;
		if (start == 1'b0 && ^(loop_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_5 <= loop_1_valid_bit_4;
		if (start == 1'b0 && ^(loop_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_6 <= loop_1_valid_bit_5;
		if (start == 1'b0 && ^(loop_1_valid_bit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_6"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_6 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_6"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_7 <= loop_1_valid_bit_6;
		if (start == 1'b0 && ^(loop_1_valid_bit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_7"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_7 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_7"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_8 <= loop_1_valid_bit_7;
		if (start == 1'b0 && ^(loop_1_valid_bit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_8"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_8 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_8"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_9 <= loop_1_valid_bit_8;
		if (start == 1'b0 && ^(loop_1_valid_bit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_9"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_9 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_9"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_10 <= loop_1_valid_bit_9;
		if (start == 1'b0 && ^(loop_1_valid_bit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_10"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_10 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_10"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_11 <= loop_1_valid_bit_10;
		if (start == 1'b0 && ^(loop_1_valid_bit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_11"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_11 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_11"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_12 <= loop_1_valid_bit_11;
		if (start == 1'b0 && ^(loop_1_valid_bit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_12"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_12 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_12"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_13 <= loop_1_valid_bit_12;
		if (start == 1'b0 && ^(loop_1_valid_bit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_13"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_13 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_13"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_14 <= loop_1_valid_bit_13;
		if (start == 1'b0 && ^(loop_1_valid_bit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_14"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_14 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_14"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_15 <= loop_1_valid_bit_14;
		if (start == 1'b0 && ^(loop_1_valid_bit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_15"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_15 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_15"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_16 <= loop_1_valid_bit_15;
		if (start == 1'b0 && ^(loop_1_valid_bit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_16"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_16 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_16"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_17 <= loop_1_valid_bit_16;
		if (start == 1'b0 && ^(loop_1_valid_bit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_17"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_17 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_17"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage1"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd3))) begin
		loop_1_i_stage1 <= loop_1_i_stage0;
		if (start == 1'b0 && ^(loop_1_i_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage1"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage2 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage2"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd3))) begin
		loop_1_i_stage2 <= loop_1_i_stage1;
		if (start == 1'b0 && ^(loop_1_i_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage2"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage2 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage3 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage3"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd3))) begin
		loop_1_i_stage3 <= loop_1_i_stage2;
		if (start == 1'b0 && ^(loop_1_i_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage3"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage3 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage4 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage4"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd3))) begin
		loop_1_i_stage4 <= loop_1_i_stage3;
		if (start == 1'b0 && ^(loop_1_i_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage4"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage4 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep_reg_stage0 <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_scevgep_reg_stage1 <= main_1_scevgep_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_scevgep_reg_stage2 <= main_1_scevgep_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_scevgep_reg_stage3 <= main_1_scevgep_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep2_reg_stage0 <= main_1_scevgep2;
		if (start == 1'b0 && ^(main_1_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_scevgep2_reg_stage1 <= main_1_scevgep2_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep2_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_scevgep2_reg_stage2 <= main_1_scevgep2_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep2_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_scevgep2_reg_stage3 <= main_1_scevgep2_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep2_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_scevgep2_reg_stage4 <= main_1_scevgep2_reg_stage3;
		if (start == 1'b0 && ^(main_1_scevgep2_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep3_reg_stage0 <= main_1_scevgep3;
		if (start == 1'b0 && ^(main_1_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_scevgep3_reg_stage1 <= main_1_scevgep3_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep3_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_scevgep3_reg_stage2 <= main_1_scevgep3_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep3_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_scevgep3_reg_stage3 <= main_1_scevgep3_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep3_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_scevgep3_reg_stage4 <= main_1_scevgep3_reg_stage3;
		if (start == 1'b0 && ^(main_1_scevgep3_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep4_reg_stage0 <= main_1_scevgep4;
		if (start == 1'b0 && ^(main_1_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep4_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_scevgep4_reg_stage1 <= main_1_scevgep4_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep4_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep4_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_scevgep4_reg_stage2 <= main_1_scevgep4_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep4_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep4_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_scevgep4_reg_stage3 <= main_1_scevgep4_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep4_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep4_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_scevgep4_reg_stage4 <= main_1_scevgep4_reg_stage3;
		if (start == 1'b0 && ^(main_1_scevgep4_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep4_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep7_reg_stage0 <= main_1_scevgep7;
		if (start == 1'b0 && ^(main_1_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_scevgep7_reg_stage1 <= main_1_scevgep7_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_scevgep7_reg_stage2 <= main_1_scevgep7_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_scevgep7_reg_stage3 <= main_1_scevgep7_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep8_reg_stage0 <= main_1_scevgep8;
		if (start == 1'b0 && ^(main_1_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep8_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep9_reg_stage0 <= main_1_scevgep9;
		if (start == 1'b0 && ^(main_1_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep9_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep11_reg_stage0 <= main_1_scevgep11;
		if (start == 1'b0 && ^(main_1_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep11_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep12_reg_stage0 <= main_1_scevgep12;
		if (start == 1'b0 && ^(main_1_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep12_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep13_reg_stage0 <= main_1_scevgep13;
		if (start == 1'b0 && ^(main_1_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep13_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep14_reg_stage0 <= main_1_scevgep14;
		if (start == 1'b0 && ^(main_1_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep14_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep15_reg_stage0 <= main_1_scevgep15;
		if (start == 1'b0 && ^(main_1_scevgep15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep15_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep16_reg_stage0 <= main_1_scevgep16;
		if (start == 1'b0 && ^(main_1_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep16_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep17_reg_stage0 <= main_1_scevgep17;
		if (start == 1'b0 && ^(main_1_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep17_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep18_reg_stage0 <= main_1_scevgep18;
		if (start == 1'b0 && ^(main_1_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep18_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep19_reg_stage0 <= main_1_scevgep19;
		if (start == 1'b0 && ^(main_1_scevgep19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep19_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep20_reg_stage0 <= main_1_scevgep20;
		if (start == 1'b0 && ^(main_1_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep20_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep21_reg_stage0 <= main_1_scevgep21;
		if (start == 1'b0 && ^(main_1_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep21_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep22_reg_stage0 <= main_1_scevgep22;
		if (start == 1'b0 && ^(main_1_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep22_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep23_reg_stage0 <= main_1_scevgep23;
		if (start == 1'b0 && ^(main_1_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep23_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep24_reg_stage0 <= main_1_scevgep24;
		if (start == 1'b0 && ^(main_1_scevgep24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep24_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_13_reg_stage0 <= main_1_13;
		if (start == 1'b0 && ^(main_1_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_13_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_14_reg_stage0 <= main_1_14;
		if (start == 1'b0 && ^(main_1_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_14_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_15_reg_stage0 <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_16_reg_stage0 <= main_1_16;
		if (start == 1'b0 && ^(main_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_17_reg_stage0 <= main_1_17;
		if (start == 1'b0 && ^(main_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_17_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_18_reg_stage0 <= main_1_18;
		if (start == 1'b0 && ^(main_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_18_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_19_reg_stage0 <= main_1_19;
		if (start == 1'b0 && ^(main_1_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_19_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_20_reg_stage0 <= main_1_20;
		if (start == 1'b0 && ^(main_1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_20_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_22_reg_stage0 <= main_1_22;
		if (start == 1'b0 && ^(main_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_22_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_23_reg_stage0 <= main_1_23;
		if (start == 1'b0 && ^(main_1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_24_reg_stage0 <= main_1_24;
		if (start == 1'b0 && ^(main_1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_24_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_25_reg_stage0 <= main_1_25;
		if (start == 1'b0 && ^(main_1_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_25_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_26_reg_stage0 <= main_1_26;
		if (start == 1'b0 && ^(main_1_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_26_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_27_reg_stage0 <= main_1_27;
		if (start == 1'b0 && ^(main_1_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_27_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_28_reg_stage0 <= main_1_28;
		if (start == 1'b0 && ^(main_1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_28_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_29_reg_stage0 <= main_1_29;
		if (start == 1'b0 && ^(main_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_30_reg_stage0 <= main_1_30;
		if (start == 1'b0 && ^(main_1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_30_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_31_reg_stage0 <= main_1_31;
		if (start == 1'b0 && ^(main_1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_31_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_68_reg_stage1 <= main_1_68;
		if (start == 1'b0 && ^(main_1_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_68_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_68_reg_stage2 <= main_1_68_reg_stage1;
		if (start == 1'b0 && ^(main_1_68_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_68_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_68_reg_stage3 <= main_1_68_reg_stage2;
		if (start == 1'b0 && ^(main_1_68_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_68_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_4))) begin
		main_1_71_reg_stage1 <= main_1_71;
		if (start == 1'b0 && ^(main_1_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_71_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_4))) begin
		main_1_72_reg_stage1 <= main_1_72;
		if (start == 1'b0 && ^(main_1_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_72_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_73_reg_stage0 <= main_1_73;
		if (start == 1'b0 && ^(main_1_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_73_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_73_reg_stage1 <= main_1_73_reg_stage0;
		if (start == 1'b0 && ^(main_1_73_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_73_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_73_reg_stage2 <= main_1_73_reg_stage1;
		if (start == 1'b0 && ^(main_1_73_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_73_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_74_reg_stage0 <= main_1_74;
		if (start == 1'b0 && ^(main_1_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_74_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_74_reg_stage1 <= main_1_74_reg_stage0;
		if (start == 1'b0 && ^(main_1_74_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_74_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_74_reg_stage2 <= main_1_74_reg_stage1;
		if (start == 1'b0 && ^(main_1_74_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_74_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_74_reg_stage3 <= main_1_74_reg_stage2;
		if (start == 1'b0 && ^(main_1_74_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_74_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_75_reg_stage0 <= main_1_75;
		if (start == 1'b0 && ^(main_1_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_75_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_75_reg_stage1 <= main_1_75_reg_stage0;
		if (start == 1'b0 && ^(main_1_75_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_75_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_75_reg_stage2 <= main_1_75_reg_stage1;
		if (start == 1'b0 && ^(main_1_75_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_75_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_75_reg_stage3 <= main_1_75_reg_stage2;
		if (start == 1'b0 && ^(main_1_75_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_75_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_76_reg_stage0 <= main_1_76;
		if (start == 1'b0 && ^(main_1_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_76_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_76_reg_stage1 <= main_1_76_reg_stage0;
		if (start == 1'b0 && ^(main_1_76_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_76_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_76_reg_stage2 <= main_1_76_reg_stage1;
		if (start == 1'b0 && ^(main_1_76_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_76_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_76_reg_stage3 <= main_1_76_reg_stage2;
		if (start == 1'b0 && ^(main_1_76_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_76_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_77_reg_stage0 <= main_1_77;
		if (start == 1'b0 && ^(main_1_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_77_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_77_reg_stage1 <= main_1_77_reg_stage0;
		if (start == 1'b0 && ^(main_1_77_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_77_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_77_reg_stage2 <= main_1_77_reg_stage1;
		if (start == 1'b0 && ^(main_1_77_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_77_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_77_reg_stage3 <= main_1_77_reg_stage2;
		if (start == 1'b0 && ^(main_1_77_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_77_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_78_reg_stage0 <= main_1_78;
		if (start == 1'b0 && ^(main_1_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_78_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_78_reg_stage1 <= main_1_78_reg_stage0;
		if (start == 1'b0 && ^(main_1_78_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_78_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_78_reg_stage2 <= main_1_78_reg_stage1;
		if (start == 1'b0 && ^(main_1_78_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_78_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_78_reg_stage3 <= main_1_78_reg_stage2;
		if (start == 1'b0 && ^(main_1_78_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_78_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_79_reg_stage0 <= main_1_79;
		if (start == 1'b0 && ^(main_1_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_79_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_79_reg_stage1 <= main_1_79_reg_stage0;
		if (start == 1'b0 && ^(main_1_79_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_79_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_79_reg_stage2 <= main_1_79_reg_stage1;
		if (start == 1'b0 && ^(main_1_79_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_79_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_79_reg_stage3 <= main_1_79_reg_stage2;
		if (start == 1'b0 && ^(main_1_79_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_79_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_80_reg_stage0 <= main_1_80;
		if (start == 1'b0 && ^(main_1_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_80_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_80_reg_stage1 <= main_1_80_reg_stage0;
		if (start == 1'b0 && ^(main_1_80_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_80_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_80_reg_stage2 <= main_1_80_reg_stage1;
		if (start == 1'b0 && ^(main_1_80_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_80_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_80_reg_stage3 <= main_1_80_reg_stage2;
		if (start == 1'b0 && ^(main_1_80_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_80_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_81_reg_stage0 <= main_1_81;
		if (start == 1'b0 && ^(main_1_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_81_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_81_reg_stage1 <= main_1_81_reg_stage0;
		if (start == 1'b0 && ^(main_1_81_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_81_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_81_reg_stage2 <= main_1_81_reg_stage1;
		if (start == 1'b0 && ^(main_1_81_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_81_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_81_reg_stage3 <= main_1_81_reg_stage2;
		if (start == 1'b0 && ^(main_1_81_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_81_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_82_reg_stage0 <= main_1_82;
		if (start == 1'b0 && ^(main_1_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_82_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_82_reg_stage1 <= main_1_82_reg_stage0;
		if (start == 1'b0 && ^(main_1_82_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_82_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_82_reg_stage2 <= main_1_82_reg_stage1;
		if (start == 1'b0 && ^(main_1_82_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_82_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_82_reg_stage3 <= main_1_82_reg_stage2;
		if (start == 1'b0 && ^(main_1_82_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_82_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_83_reg_stage0 <= main_1_83;
		if (start == 1'b0 && ^(main_1_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_83_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_83_reg_stage1 <= main_1_83_reg_stage0;
		if (start == 1'b0 && ^(main_1_83_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_83_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_83_reg_stage2 <= main_1_83_reg_stage1;
		if (start == 1'b0 && ^(main_1_83_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_83_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_83_reg_stage3 <= main_1_83_reg_stage2;
		if (start == 1'b0 && ^(main_1_83_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_83_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_84_reg_stage0 <= main_1_84;
		if (start == 1'b0 && ^(main_1_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_84_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_84_reg_stage1 <= main_1_84_reg_stage0;
		if (start == 1'b0 && ^(main_1_84_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_84_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_84_reg_stage2 <= main_1_84_reg_stage1;
		if (start == 1'b0 && ^(main_1_84_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_84_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_84_reg_stage3 <= main_1_84_reg_stage2;
		if (start == 1'b0 && ^(main_1_84_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_84_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_85_reg_stage0 <= main_1_85;
		if (start == 1'b0 && ^(main_1_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_85_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_85_reg_stage1 <= main_1_85_reg_stage0;
		if (start == 1'b0 && ^(main_1_85_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_85_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_85_reg_stage2 <= main_1_85_reg_stage1;
		if (start == 1'b0 && ^(main_1_85_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_85_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_85_reg_stage3 <= main_1_85_reg_stage2;
		if (start == 1'b0 && ^(main_1_85_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_85_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_86_reg_stage0 <= main_1_86;
		if (start == 1'b0 && ^(main_1_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_86_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_86_reg_stage1 <= main_1_86_reg_stage0;
		if (start == 1'b0 && ^(main_1_86_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_86_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_86_reg_stage2 <= main_1_86_reg_stage1;
		if (start == 1'b0 && ^(main_1_86_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_86_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_86_reg_stage3 <= main_1_86_reg_stage2;
		if (start == 1'b0 && ^(main_1_86_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_86_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1))) begin
		main_1_87_reg_stage0 <= main_1_87;
		if (start == 1'b0 && ^(main_1_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_87_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_87_reg_stage1 <= main_1_87_reg_stage0;
		if (start == 1'b0 && ^(main_1_87_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_87_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_87_reg_stage2 <= main_1_87_reg_stage1;
		if (start == 1'b0 && ^(main_1_87_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_87_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_87_reg_stage3 <= main_1_87_reg_stage2;
		if (start == 1'b0 && ^(main_1_87_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_87_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_88_reg_stage0 <= main_1_88;
		if (start == 1'b0 && ^(main_1_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_88_reg_stage1 <= main_1_88_reg_stage0;
		if (start == 1'b0 && ^(main_1_88_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_88_reg_stage2 <= main_1_88_reg_stage1;
		if (start == 1'b0 && ^(main_1_88_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_88_reg_stage3 <= main_1_88_reg_stage2;
		if (start == 1'b0 && ^(main_1_88_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_88_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2))) begin
		main_1_89_reg_stage0 <= main_1_89;
		if (start == 1'b0 && ^(main_1_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_89_reg_stage1 <= main_1_89_reg_stage0;
		if (start == 1'b0 && ^(main_1_89_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_89_reg_stage2 <= main_1_89_reg_stage1;
		if (start == 1'b0 && ^(main_1_89_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_89_reg_stage3 <= main_1_89_reg_stage2;
		if (start == 1'b0 && ^(main_1_89_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_89_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_90_reg_stage2 <= main_1_90;
		if (start == 1'b0 && ^(main_1_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_90_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_10))) begin
		main_1_91_reg_stage2 <= main_1_91;
		if (start == 1'b0 && ^(main_1_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_91_reg_stage3 <= main_1_91_reg_stage2;
		if (start == 1'b0 && ^(main_1_91_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_91_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_96_reg_stage3 <= main_1_96;
		if (start == 1'b0 && ^(main_1_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_96_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_96_reg_stage4 <= main_1_96_reg_stage3;
		if (start == 1'b0 && ^(main_1_96_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_96_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_104_reg_stage3 <= main_1_104;
		if (start == 1'b0 && ^(main_1_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_104_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_104_reg_stage4 <= main_1_104_reg_stage3;
		if (start == 1'b0 && ^(main_1_104_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_104_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_107_reg_stage3 <= main_1_107;
		if (start == 1'b0 && ^(main_1_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_107_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_107_reg_stage4 <= main_1_107_reg_stage3;
		if (start == 1'b0 && ^(main_1_107_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_107_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_109_reg_stage2 <= main_1_109;
		if (start == 1'b0 && ^(main_1_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_109_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd2) & loop_1_valid_bit_10))) begin
		main_1_110_reg_stage2 <= main_1_110;
		if (start == 1'b0 && ^(main_1_110) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_110_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_110_reg_stage3 <= main_1_110_reg_stage2;
		if (start == 1'b0 && ^(main_1_110_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_110_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_13))) begin
		main_1_128_reg_stage3 <= main_1_128;
		if (start == 1'b0 && ^(main_1_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_128_reg_stage3"); $finish; end
	end
end
always @(*) begin
	loop_1_pipeline_exit_cond = (loop_1_i_stage0 == 89);
end
always @(*) begin
	loop_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_16) & loop_1_valid_bit_17)));
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %137*/
	/*   ret i32 %130*/
	if ((cur_state == LEGUP_F_main_BB__137_6)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %137*/
	/*   ret i32 %130*/
	if ((cur_state == LEGUP_F_main_BB__137_6)) begin
		return_val <= main_129_130_reg;
		if (start == 1'b0 && ^(main_129_130_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/legup/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/leandro/legup/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/legup/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
