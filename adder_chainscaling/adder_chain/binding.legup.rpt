//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Feb 14 19:47:56 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Tue Nov  7 16:34:27 2017
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
aa_local_mem_dual_port        1                             
b_local_mem_dual_port         2                             
bb_local_mem_dual_port        1                             
c_local_mem_dual_port         2                             
cc_local_mem_dual_port        1                             
d_local_mem_dual_port         2                             
dd_local_mem_dual_port        2                             
e_local_mem_dual_port         2                             
f_local_mem_dual_port         2                             
g_local_mem_dual_port         2                             
h_local_mem_dual_port         2                             
ii_local_mem_dual_port        2                             
j_local_mem_dual_port         2                             

Running Bipartite Weighted Matching on function: main
State: pipeline_time_0
Binding functional unit type: aa_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %104, i32... (idx: 0)        20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %104, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %104, i32... (idx: 0) -> main_aa_local_mem_dual_port_0 (mux inputs: 2)
State: pipeline_time_0
Binding functional unit type: b_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %189 = load volatile i32* %s... (idx: 0)        10                            10                            
  %247 = load volatile i32* %s... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %189 = load volatile i32* %s... (idx: 0)        1                             0                             
  %247 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %189 = load volatile i32* %s... (idx: 0) -> main_b_local_mem_dual_port_0 (mux inputs: 1)
  %247 = load volatile i32* %s... (idx: 1) -> main_b_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_0
Binding functional unit type: bb_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %96, i32*... (idx: 0)        20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %96, i32*... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %96, i32*... (idx: 0) -> main_bb_local_mem_dual_port_0 (mux inputs: 2)
State: pipeline_time_0
Binding functional unit type: c_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %76 = load volatile i32* %sc... (idx: 0)        10                            10                            
  %250 = load volatile i32* %s... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %76 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %250 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %76 = load volatile i32* %sc... (idx: 0) -> main_c_local_mem_dual_port_0 (mux inputs: 1)
  %250 = load volatile i32* %s... (idx: 1) -> main_c_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_0
Binding functional unit type: cc_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %107, i32... (idx: 0)        20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %107, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %107, i32... (idx: 0) -> main_cc_local_mem_dual_port_0 (mux inputs: 2)
State: pipeline_time_0
Binding functional unit type: d_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %77 = load volatile i32* %sc... (idx: 0)        10                            10                            
  %251 = load volatile i32* %s... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %77 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %251 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %77 = load volatile i32* %sc... (idx: 0) -> main_d_local_mem_dual_port_0 (mux inputs: 1)
  %251 = load volatile i32* %s... (idx: 1) -> main_d_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_0
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %50 = load volatile i32* %sc... (idx: 0)        10                            10                            
  %108 = load volatile i32* %s... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %50 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %108 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %50 = load volatile i32* %sc... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 1)
  %108 = load volatile i32* %s... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_0
Binding functional unit type: e_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %20 = load volatile i32* %sc... (idx: 0)        10                            10                            
  %79 = load volatile i32* %sc... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %20 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %79 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %20 = load volatile i32* %sc... (idx: 0) -> main_e_local_mem_dual_port_0 (mux inputs: 1)
  %79 = load volatile i32* %sc... (idx: 1) -> main_e_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_0
Binding functional unit type: f_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %255 = load volatile i32* %s... (idx: 0)        10                            10                            
  %256 = load volatile i32* %s... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %255 = load volatile i32* %s... (idx: 0)        1                             0                             
  %256 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %255 = load volatile i32* %s... (idx: 0) -> main_f_local_mem_dual_port_0 (mux inputs: 1)
  %256 = load volatile i32* %s... (idx: 1) -> main_f_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_0
Binding functional unit type: g_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %83 = load volatile i32* %sc... (idx: 0)        10                            10                            
  %199 = load volatile i32* %s... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %83 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %199 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %83 = load volatile i32* %sc... (idx: 0) -> main_g_local_mem_dual_port_0 (mux inputs: 1)
  %199 = load volatile i32* %s... (idx: 1) -> main_g_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_0
Binding functional unit type: h_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %85 = load volatile i32* %sc... (idx: 0)        10                            10                            
  %259 = load volatile i32* %s... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %85 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %259 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %85 = load volatile i32* %sc... (idx: 0) -> main_h_local_mem_dual_port_0 (mux inputs: 1)
  %259 = load volatile i32* %s... (idx: 1) -> main_h_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_0
Binding functional unit type: ii_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_ii_local_mem_dual_port_0 main_ii_local_mem_dual_port_1 
  %87 = load volatile i32* %sc... (idx: 0)        10                            10                            
  %203 = load volatile i32* %s... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ii_local_mem_dual_port_0 main_ii_local_mem_dual_port_1 
  %87 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %203 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %87 = load volatile i32* %sc... (idx: 0) -> main_ii_local_mem_dual_port_0 (mux inputs: 1)
  %203 = load volatile i32* %s... (idx: 1) -> main_ii_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_0
Binding functional unit type: j_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %262 = load volatile i32* %s... (idx: 0)        10                            10                            
  %263 = load volatile i32* %s... (idx: 1)        10                            10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %262 = load volatile i32* %s... (idx: 0)        1                             0                             
  %263 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %262 = load volatile i32* %s... (idx: 0) -> main_j_local_mem_dual_port_0 (mux inputs: 1)
  %263 = load volatile i32* %s... (idx: 1) -> main_j_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_1
Binding functional unit type: aa_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %162, i32... can share an input with another operation already assigned to main_aa_local_mem_dual_port_0
  store volatile i32 %162, i32... can share an output register with another operation already assigned to main_aa_local_mem_dual_port_0
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %162, i32... (idx: 0)        7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %162, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %162, i32... (idx: 0) -> main_aa_local_mem_dual_port_0 (mux inputs: 3)
State: pipeline_time_1
Binding functional unit type: b_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %132 = load volatile i32* %s... (idx: 0)        11                            11                            
  %190 = load volatile i32* %s... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %132 = load volatile i32* %s... (idx: 0)        1                             0                             
  %190 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %132 = load volatile i32* %s... (idx: 0) -> main_b_local_mem_dual_port_0 (mux inputs: 2)
  %190 = load volatile i32* %s... (idx: 1) -> main_b_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_1
Binding functional unit type: bb_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %154, i32... can share an input with another operation already assigned to main_bb_local_mem_dual_port_0
  store volatile i32 %154, i32... can share an output register with another operation already assigned to main_bb_local_mem_dual_port_0
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %154, i32... (idx: 0)        7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %154, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %154, i32... (idx: 0) -> main_bb_local_mem_dual_port_0 (mux inputs: 3)
State: pipeline_time_1
Binding functional unit type: c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %192 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_0
  %192 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_1
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %191 = load volatile i32* %s... (idx: 0)        11                            11                            
  %192 = load volatile i32* %s... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %191 = load volatile i32* %s... (idx: 0)        1                             0                             
  %192 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %191 = load volatile i32* %s... (idx: 0) -> main_c_local_mem_dual_port_0 (mux inputs: 2)
  %192 = load volatile i32* %s... (idx: 1) -> main_c_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_1
Binding functional unit type: cc_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %165, i32... can share an input with another operation already assigned to main_cc_local_mem_dual_port_0
  store volatile i32 %165, i32... can share an output register with another operation already assigned to main_cc_local_mem_dual_port_0
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %165, i32... (idx: 0)        7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %165, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %165, i32... (idx: 0) -> main_cc_local_mem_dual_port_0 (mux inputs: 3)
State: pipeline_time_1
Binding functional unit type: d_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %78 = load volatile i32* %sc... (idx: 0)        11                            11                            
  %252 = load volatile i32* %s... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %78 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %252 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %78 = load volatile i32* %sc... (idx: 0) -> main_d_local_mem_dual_port_0 (mux inputs: 2)
  %252 = load volatile i32* %s... (idx: 1) -> main_d_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_1
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %166 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  %166 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %224 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  %224 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %166 = load volatile i32* %s... (idx: 0)        1                             1                             
  %224 = load volatile i32* %s... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %166 = load volatile i32* %s... (idx: 0)        1                             0                             
  %224 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %166 = load volatile i32* %s... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 1)
  %224 = load volatile i32* %s... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_1
Binding functional unit type: e_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %137 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_0
  %137 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_1
  %253 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_0
  %253 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_1
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %137 = load volatile i32* %s... (idx: 0)        1                             1                             
  %253 = load volatile i32* %s... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %137 = load volatile i32* %s... (idx: 0)        1                             0                             
  %253 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %137 = load volatile i32* %s... (idx: 0) -> main_e_local_mem_dual_port_0 (mux inputs: 1)
  %253 = load volatile i32* %s... (idx: 1) -> main_e_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_1
Binding functional unit type: f_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %81 = load volatile i32* %sc... can share an input with another operation already assigned to main_f_local_mem_dual_port_0
  %197 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_0
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %81 = load volatile i32* %sc... (idx: 0)        1                             11                            
  %197 = load volatile i32* %s... (idx: 1)        1                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %81 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %197 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %81 = load volatile i32* %sc... (idx: 0) -> main_f_local_mem_dual_port_0 (mux inputs: 1)
  %197 = load volatile i32* %s... (idx: 1) -> main_f_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_1
Binding functional unit type: g_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %141 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_0
  %141 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_1
  %257 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_0
  %257 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_1
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %141 = load volatile i32* %s... (idx: 0)        1                             1                             
  %257 = load volatile i32* %s... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %141 = load volatile i32* %s... (idx: 0)        1                             0                             
  %257 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %141 = load volatile i32* %s... (idx: 0) -> main_g_local_mem_dual_port_0 (mux inputs: 1)
  %257 = load volatile i32* %s... (idx: 1) -> main_g_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_1
Binding functional unit type: h_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %86 = load volatile i32* %sc... (idx: 0)        11                            11                            
  %260 = load volatile i32* %s... (idx: 1)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %86 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %260 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %86 = load volatile i32* %sc... (idx: 0) -> main_h_local_mem_dual_port_0 (mux inputs: 2)
  %260 = load volatile i32* %s... (idx: 1) -> main_h_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_1
Binding functional unit type: ii_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %29 = load volatile i32* %sc... can share an input with another operation already assigned to main_ii_local_mem_dual_port_0
  %29 = load volatile i32* %sc... can share an input with another operation already assigned to main_ii_local_mem_dual_port_1
  %145 = load volatile i32* %s... can share an input with another operation already assigned to main_ii_local_mem_dual_port_0
  %145 = load volatile i32* %s... can share an input with another operation already assigned to main_ii_local_mem_dual_port_1
                                                  main_ii_local_mem_dual_port_0 main_ii_local_mem_dual_port_1 
  %29 = load volatile i32* %sc... (idx: 0)        1                             1                             
  %145 = load volatile i32* %s... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ii_local_mem_dual_port_0 main_ii_local_mem_dual_port_1 
  %29 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %145 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %29 = load volatile i32* %sc... (idx: 0) -> main_ii_local_mem_dual_port_0 (mux inputs: 1)
  %145 = load volatile i32* %s... (idx: 1) -> main_ii_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_1
Binding functional unit type: j_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %88 = load volatile i32* %sc... can share an input with another operation already assigned to main_j_local_mem_dual_port_0
  %89 = load volatile i32* %sc... can share an input with another operation already assigned to main_j_local_mem_dual_port_1
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %88 = load volatile i32* %sc... (idx: 0)        1                             11                            
  %89 = load volatile i32* %sc... (idx: 1)        11                            1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %88 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %89 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %88 = load volatile i32* %sc... (idx: 0) -> main_j_local_mem_dual_port_0 (mux inputs: 1)
  %89 = load volatile i32* %sc... (idx: 1) -> main_j_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_2
Binding functional unit type: aa_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %220, i32... can share an input with another operation already assigned to main_aa_local_mem_dual_port_0
  store volatile i32 %220, i32... can share an output register with another operation already assigned to main_aa_local_mem_dual_port_0
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %220, i32... (idx: 0)        8                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %220, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %220, i32... (idx: 0) -> main_aa_local_mem_dual_port_0 (mux inputs: 4)
State: pipeline_time_2
Binding functional unit type: b_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %131 = load volatile i32* %s... can share an input with another operation already assigned to main_b_local_mem_dual_port_0
  %131 = load volatile i32* %s... can share an input with another operation already assigned to main_b_local_mem_dual_port_1
  %248 = load volatile i32* %s... can share an input with another operation already assigned to main_b_local_mem_dual_port_0
  %248 = load volatile i32* %s... can share an input with another operation already assigned to main_b_local_mem_dual_port_1
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %131 = load volatile i32* %s... (idx: 0)        2                             2                             
  %248 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %131 = load volatile i32* %s... (idx: 0)        1                             0                             
  %248 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %131 = load volatile i32* %s... (idx: 0) -> main_b_local_mem_dual_port_0 (mux inputs: 2)
  %248 = load volatile i32* %s... (idx: 1) -> main_b_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_2
Binding functional unit type: bb_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %212, i32... can share an input with another operation already assigned to main_bb_local_mem_dual_port_0
  store volatile i32 %212, i32... can share an output register with another operation already assigned to main_bb_local_mem_dual_port_0
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %212, i32... (idx: 0)        8                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %212, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %212, i32... (idx: 0) -> main_bb_local_mem_dual_port_0 (mux inputs: 4)
State: pipeline_time_2
Binding functional unit type: c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %133 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_0
  %134 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_0
  %134 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_1
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %133 = load volatile i32* %s... (idx: 0)        2                             11                            
  %134 = load volatile i32* %s... (idx: 1)        2                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %133 = load volatile i32* %s... (idx: 0)        1                             0                             
  %134 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %133 = load volatile i32* %s... (idx: 0) -> main_c_local_mem_dual_port_0 (mux inputs: 2)
  %134 = load volatile i32* %s... (idx: 1) -> main_c_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_2
Binding functional unit type: cc_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %223, i32... can share an input with another operation already assigned to main_cc_local_mem_dual_port_0
  store volatile i32 %223, i32... can share an output register with another operation already assigned to main_cc_local_mem_dual_port_0
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %223, i32... (idx: 0)        8                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %223, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %223, i32... (idx: 0) -> main_cc_local_mem_dual_port_0 (mux inputs: 4)
State: pipeline_time_2
Binding functional unit type: d_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %193 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_0
  %193 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_1
  %194 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_0
  %194 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_1
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %193 = load volatile i32* %s... (idx: 0)        2                             2                             
  %194 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %193 = load volatile i32* %s... (idx: 0)        1                             0                             
  %194 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %193 = load volatile i32* %s... (idx: 0) -> main_d_local_mem_dual_port_0 (mux inputs: 2)
  %194 = load volatile i32* %s... (idx: 1) -> main_d_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_2
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %282 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  %282 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %282 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %282 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
  %340 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  %340 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %340 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %340 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %282 = load volatile i32* %s... (idx: 0)        -4                            -4                            
  %340 = load volatile i32* %s... (idx: 1)        -4                            -4                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %282 = load volatile i32* %s... (idx: 0)        1                             0                             
  %340 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %282 = load volatile i32* %s... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 1)
  %340 = load volatile i32* %s... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_2
Binding functional unit type: e_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %195 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_0
  %195 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_1
  %311 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_0
  %311 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_1
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %195 = load volatile i32* %s... (idx: 0)        1                             1                             
  %311 = load volatile i32* %s... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %195 = load volatile i32* %s... (idx: 0)        1                             0                             
  %311 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %195 = load volatile i32* %s... (idx: 0) -> main_e_local_mem_dual_port_0 (mux inputs: 1)
  %311 = load volatile i32* %s... (idx: 1) -> main_e_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_2
Binding functional unit type: f_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %82 = load volatile i32* %sc... can share an input with another operation already assigned to main_f_local_mem_dual_port_1
  %198 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_1
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %82 = load volatile i32* %sc... (idx: 0)        11                            2                             
  %198 = load volatile i32* %s... (idx: 1)        11                            2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %82 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %198 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %82 = load volatile i32* %sc... (idx: 0) -> main_f_local_mem_dual_port_0 (mux inputs: 2)
  %198 = load volatile i32* %s... (idx: 1) -> main_f_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_2
Binding functional unit type: g_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %25 = load volatile i32* %sc... can share an input with another operation already assigned to main_g_local_mem_dual_port_0
  %25 = load volatile i32* %sc... can share an input with another operation already assigned to main_g_local_mem_dual_port_1
  %315 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_0
  %315 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_1
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %25 = load volatile i32* %sc... (idx: 0)        1                             1                             
  %315 = load volatile i32* %s... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %25 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %315 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %25 = load volatile i32* %sc... (idx: 0) -> main_g_local_mem_dual_port_0 (mux inputs: 1)
  %315 = load volatile i32* %s... (idx: 1) -> main_g_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_2
Binding functional unit type: h_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %201 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_0
  %201 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_1
  %202 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_0
  %202 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_1
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %201 = load volatile i32* %s... (idx: 0)        2                             2                             
  %202 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %201 = load volatile i32* %s... (idx: 0)        1                             0                             
  %202 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %201 = load volatile i32* %s... (idx: 0) -> main_h_local_mem_dual_port_0 (mux inputs: 2)
  %202 = load volatile i32* %s... (idx: 1) -> main_h_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_2
Binding functional unit type: ii_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %261 = load volatile i32* %s... can share an input with another operation already assigned to main_ii_local_mem_dual_port_0
  %261 = load volatile i32* %s... can share an input with another operation already assigned to main_ii_local_mem_dual_port_1
  %319 = load volatile i32* %s... can share an input with another operation already assigned to main_ii_local_mem_dual_port_0
  %319 = load volatile i32* %s... can share an input with another operation already assigned to main_ii_local_mem_dual_port_1
                                                  main_ii_local_mem_dual_port_0 main_ii_local_mem_dual_port_1 
  %261 = load volatile i32* %s... (idx: 0)        1                             1                             
  %319 = load volatile i32* %s... (idx: 1)        1                             1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_ii_local_mem_dual_port_0 main_ii_local_mem_dual_port_1 
  %261 = load volatile i32* %s... (idx: 0)        1                             0                             
  %319 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %261 = load volatile i32* %s... (idx: 0) -> main_ii_local_mem_dual_port_0 (mux inputs: 1)
  %319 = load volatile i32* %s... (idx: 1) -> main_ii_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_2
Binding functional unit type: j_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %204 = load volatile i32* %s... can share an input with another operation already assigned to main_j_local_mem_dual_port_0
  %205 = load volatile i32* %s... can share an input with another operation already assigned to main_j_local_mem_dual_port_1
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %204 = load volatile i32* %s... (idx: 0)        1                             11                            
  %205 = load volatile i32* %s... (idx: 1)        11                            1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %204 = load volatile i32* %s... (idx: 0)        1                             0                             
  %205 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %204 = load volatile i32* %s... (idx: 0) -> main_j_local_mem_dual_port_0 (mux inputs: 1)
  %205 = load volatile i32* %s... (idx: 1) -> main_j_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_3
Binding functional unit type: aa_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %278, i32... can share an input with another operation already assigned to main_aa_local_mem_dual_port_0
  store volatile i32 %278, i32... can share an output register with another operation already assigned to main_aa_local_mem_dual_port_0
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %278, i32... (idx: 0)        9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %278, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %278, i32... (idx: 0) -> main_aa_local_mem_dual_port_0 (mux inputs: 5)
State: pipeline_time_3
Binding functional unit type: b_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %14 = load volatile i32* %sc... can share an input with another operation already assigned to main_b_local_mem_dual_port_0
  %14 = load volatile i32* %sc... can share an input with another operation already assigned to main_b_local_mem_dual_port_1
  %15 = load volatile i32* %sc... can share an input with another operation already assigned to main_b_local_mem_dual_port_0
  %15 = load volatile i32* %sc... can share an input with another operation already assigned to main_b_local_mem_dual_port_1
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %14 = load volatile i32* %sc... (idx: 0)        2                             2                             
  %15 = load volatile i32* %sc... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %14 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %15 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %14 = load volatile i32* %sc... (idx: 0) -> main_b_local_mem_dual_port_0 (mux inputs: 2)
  %15 = load volatile i32* %sc... (idx: 1) -> main_b_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_3
Binding functional unit type: bb_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %270, i32... can share an input with another operation already assigned to main_bb_local_mem_dual_port_0
  store volatile i32 %270, i32... can share an output register with another operation already assigned to main_bb_local_mem_dual_port_0
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %270, i32... (idx: 0)        9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %270, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %270, i32... (idx: 0) -> main_bb_local_mem_dual_port_0 (mux inputs: 5)
State: pipeline_time_3
Binding functional unit type: c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %16 = load volatile i32* %sc... can share an input with another operation already assigned to main_c_local_mem_dual_port_0
  %249 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_0
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %16 = load volatile i32* %sc... (idx: 0)        2                             11                            
  %249 = load volatile i32* %s... (idx: 1)        2                             11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %16 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %249 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %16 = load volatile i32* %sc... (idx: 0) -> main_c_local_mem_dual_port_0 (mux inputs: 2)
  %249 = load volatile i32* %s... (idx: 1) -> main_c_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_3
Binding functional unit type: cc_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %281, i32... can share an input with another operation already assigned to main_cc_local_mem_dual_port_0
  store volatile i32 %281, i32... can share an output register with another operation already assigned to main_cc_local_mem_dual_port_0
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %281, i32... (idx: 0)        9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %281, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %281, i32... (idx: 0) -> main_cc_local_mem_dual_port_0 (mux inputs: 5)
State: pipeline_time_3
Binding functional unit type: d_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %135 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_0
  %135 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_1
  %136 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_0
  %136 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_1
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %135 = load volatile i32* %s... (idx: 0)        2                             2                             
  %136 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %135 = load volatile i32* %s... (idx: 0)        1                             0                             
  %136 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %135 = load volatile i32* %s... (idx: 0) -> main_d_local_mem_dual_port_0 (mux inputs: 2)
  %136 = load volatile i32* %s... (idx: 1) -> main_d_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_3
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %70, i32*... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %70, i32*... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
  %129 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %129 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  store volatile i32 %70, i32*... (idx: 0)        16                            16                            
  %129 = load volatile i32* %s... (idx: 1)        6                             6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  store volatile i32 %70, i32*... (idx: 0)        1                             0                             
  %129 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %70, i32*... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 3)
  %129 = load volatile i32* %s... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_3
Binding functional unit type: e_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %80 = load volatile i32* %sc... can share an output register with another operation already assigned to main_e_local_mem_dual_port_1
  %254 = load volatile i32* %s... can share an output register with another operation already assigned to main_e_local_mem_dual_port_1
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %80 = load volatile i32* %sc... (idx: 0)        11                            6                             
  %254 = load volatile i32* %s... (idx: 1)        11                            6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %80 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %254 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %80 = load volatile i32* %sc... (idx: 0) -> main_e_local_mem_dual_port_0 (mux inputs: 2)
  %254 = load volatile i32* %s... (idx: 1) -> main_e_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_3
Binding functional unit type: f_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %139 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_0
  %139 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_1
  %140 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_0
  %140 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_1
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %139 = load volatile i32* %s... (idx: 0)        2                             2                             
  %140 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %139 = load volatile i32* %s... (idx: 0)        1                             0                             
  %140 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %139 = load volatile i32* %s... (idx: 0) -> main_f_local_mem_dual_port_0 (mux inputs: 2)
  %140 = load volatile i32* %s... (idx: 1) -> main_f_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_3
Binding functional unit type: g_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %84 = load volatile i32* %sc... can share an output register with another operation already assigned to main_g_local_mem_dual_port_1
  %258 = load volatile i32* %s... can share an output register with another operation already assigned to main_g_local_mem_dual_port_1
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %84 = load volatile i32* %sc... (idx: 0)        11                            6                             
  %258 = load volatile i32* %s... (idx: 1)        11                            6                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %84 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %258 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %84 = load volatile i32* %sc... (idx: 0) -> main_g_local_mem_dual_port_0 (mux inputs: 2)
  %258 = load volatile i32* %s... (idx: 1) -> main_g_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_3
Binding functional unit type: h_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %143 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_0
  %143 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_1
  %144 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_0
  %144 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_1
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %143 = load volatile i32* %s... (idx: 0)        2                             2                             
  %144 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %143 = load volatile i32* %s... (idx: 0)        1                             0                             
  %144 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %143 = load volatile i32* %s... (idx: 0) -> main_h_local_mem_dual_port_0 (mux inputs: 2)
  %144 = load volatile i32* %s... (idx: 1) -> main_h_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_3
Binding functional unit type: j_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %146 = load volatile i32* %s... can share an input with another operation already assigned to main_j_local_mem_dual_port_0
  %147 = load volatile i32* %s... can share an input with another operation already assigned to main_j_local_mem_dual_port_1
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %146 = load volatile i32* %s... (idx: 0)        1                             11                            
  %147 = load volatile i32* %s... (idx: 1)        11                            1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %146 = load volatile i32* %s... (idx: 0)        1                             0                             
  %147 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %146 = load volatile i32* %s... (idx: 0) -> main_j_local_mem_dual_port_0 (mux inputs: 1)
  %147 = load volatile i32* %s... (idx: 1) -> main_j_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_4
Binding functional unit type: b_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %73 = load volatile i32* %sc... can share an input with another operation already assigned to main_b_local_mem_dual_port_0
  %73 = load volatile i32* %sc... can share an input with another operation already assigned to main_b_local_mem_dual_port_1
  %74 = load volatile i32* %sc... can share an input with another operation already assigned to main_b_local_mem_dual_port_0
  %74 = load volatile i32* %sc... can share an input with another operation already assigned to main_b_local_mem_dual_port_1
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %73 = load volatile i32* %sc... (idx: 0)        2                             2                             
  %74 = load volatile i32* %sc... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %73 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %74 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %73 = load volatile i32* %sc... (idx: 0) -> main_b_local_mem_dual_port_0 (mux inputs: 2)
  %74 = load volatile i32* %sc... (idx: 1) -> main_b_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_4
Binding functional unit type: c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %17 = load volatile i32* %sc... can share an input with another operation already assigned to main_c_local_mem_dual_port_0
  %17 = load volatile i32* %sc... can share an input with another operation already assigned to main_c_local_mem_dual_port_1
  %75 = load volatile i32* %sc... can share an input with another operation already assigned to main_c_local_mem_dual_port_0
  %75 = load volatile i32* %sc... can share an input with another operation already assigned to main_c_local_mem_dual_port_1
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %17 = load volatile i32* %sc... (idx: 0)        2                             2                             
  %75 = load volatile i32* %sc... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %17 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %75 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %17 = load volatile i32* %sc... (idx: 0) -> main_c_local_mem_dual_port_0 (mux inputs: 2)
  %75 = load volatile i32* %sc... (idx: 1) -> main_c_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_4
Binding functional unit type: d_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %18 = load volatile i32* %sc... can share an input with another operation already assigned to main_d_local_mem_dual_port_0
  %18 = load volatile i32* %sc... can share an input with another operation already assigned to main_d_local_mem_dual_port_1
  %19 = load volatile i32* %sc... can share an input with another operation already assigned to main_d_local_mem_dual_port_0
  %19 = load volatile i32* %sc... can share an input with another operation already assigned to main_d_local_mem_dual_port_1
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %18 = load volatile i32* %sc... (idx: 0)        2                             2                             
  %19 = load volatile i32* %sc... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %18 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %19 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %18 = load volatile i32* %sc... (idx: 0) -> main_d_local_mem_dual_port_0 (mux inputs: 2)
  %19 = load volatile i32* %sc... (idx: 1) -> main_d_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_4
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %128, i32... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %128, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %128, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
  %130 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %130 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  store volatile i32 %128, i32... (idx: 0)        8                             17                            
  %130 = load volatile i32* %s... (idx: 1)        8                             7                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  store volatile i32 %128, i32... (idx: 0)        1                             0                             
  %130 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %128, i32... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 4)
  %130 = load volatile i32* %s... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 3)
State: pipeline_time_4
Binding functional unit type: e_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %138 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_0
  %138 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_1
  %138 = load volatile i32* %s... can share an output register with another operation already assigned to main_e_local_mem_dual_port_1
  %196 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_0
  %196 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_1
  %196 = load volatile i32* %s... can share an output register with another operation already assigned to main_e_local_mem_dual_port_1
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %138 = load volatile i32* %s... (idx: 0)        2                             -3                            
  %196 = load volatile i32* %s... (idx: 1)        2                             -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %138 = load volatile i32* %s... (idx: 0)        1                             0                             
  %196 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %138 = load volatile i32* %s... (idx: 0) -> main_e_local_mem_dual_port_0 (mux inputs: 2)
  %196 = load volatile i32* %s... (idx: 1) -> main_e_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_4
Binding functional unit type: f_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %23 = load volatile i32* %sc... can share an input with another operation already assigned to main_f_local_mem_dual_port_0
  %23 = load volatile i32* %sc... can share an input with another operation already assigned to main_f_local_mem_dual_port_1
  %24 = load volatile i32* %sc... can share an input with another operation already assigned to main_f_local_mem_dual_port_0
  %24 = load volatile i32* %sc... can share an input with another operation already assigned to main_f_local_mem_dual_port_1
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %23 = load volatile i32* %sc... (idx: 0)        2                             2                             
  %24 = load volatile i32* %sc... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %23 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %24 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %23 = load volatile i32* %sc... (idx: 0) -> main_f_local_mem_dual_port_0 (mux inputs: 2)
  %24 = load volatile i32* %sc... (idx: 1) -> main_f_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_4
Binding functional unit type: g_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %142 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_0
  %142 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_1
  %142 = load volatile i32* %s... can share an output register with another operation already assigned to main_g_local_mem_dual_port_1
  %200 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_0
  %200 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_1
  %200 = load volatile i32* %s... can share an output register with another operation already assigned to main_g_local_mem_dual_port_1
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %142 = load volatile i32* %s... (idx: 0)        2                             -3                            
  %200 = load volatile i32* %s... (idx: 1)        2                             -3                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %142 = load volatile i32* %s... (idx: 0)        1                             0                             
  %200 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %142 = load volatile i32* %s... (idx: 0) -> main_g_local_mem_dual_port_0 (mux inputs: 2)
  %200 = load volatile i32* %s... (idx: 1) -> main_g_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_4
Binding functional unit type: h_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %27 = load volatile i32* %sc... can share an input with another operation already assigned to main_h_local_mem_dual_port_0
  %27 = load volatile i32* %sc... can share an input with another operation already assigned to main_h_local_mem_dual_port_1
  %28 = load volatile i32* %sc... can share an input with another operation already assigned to main_h_local_mem_dual_port_0
  %28 = load volatile i32* %sc... can share an input with another operation already assigned to main_h_local_mem_dual_port_1
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %27 = load volatile i32* %sc... (idx: 0)        2                             2                             
  %28 = load volatile i32* %sc... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %27 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %28 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %27 = load volatile i32* %sc... (idx: 0) -> main_h_local_mem_dual_port_0 (mux inputs: 2)
  %28 = load volatile i32* %sc... (idx: 1) -> main_h_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_4
Binding functional unit type: j_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %30 = load volatile i32* %sc... can share an input with another operation already assigned to main_j_local_mem_dual_port_0
  %31 = load volatile i32* %sc... can share an input with another operation already assigned to main_j_local_mem_dual_port_1
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %30 = load volatile i32* %sc... (idx: 0)        1                             11                            
  %31 = load volatile i32* %sc... (idx: 1)        11                            1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %30 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %31 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %30 = load volatile i32* %sc... (idx: 0) -> main_j_local_mem_dual_port_0 (mux inputs: 1)
  %31 = load volatile i32* %sc... (idx: 1) -> main_j_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_5
Binding functional unit type: aa_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %336, i32... can share an input with another operation already assigned to main_aa_local_mem_dual_port_0
  store volatile i32 %336, i32... can share an output register with another operation already assigned to main_aa_local_mem_dual_port_0
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %336, i32... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %336, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %336, i32... (idx: 0) -> main_aa_local_mem_dual_port_0 (mux inputs: 6)
State: pipeline_time_5
Binding functional unit type: b_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %305 = load volatile i32* %s... can share an input with another operation already assigned to main_b_local_mem_dual_port_0
  %305 = load volatile i32* %s... can share an input with another operation already assigned to main_b_local_mem_dual_port_1
  %306 = load volatile i32* %s... can share an input with another operation already assigned to main_b_local_mem_dual_port_0
  %306 = load volatile i32* %s... can share an input with another operation already assigned to main_b_local_mem_dual_port_1
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %305 = load volatile i32* %s... (idx: 0)        2                             2                             
  %306 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_b_local_mem_dual_port_0  main_b_local_mem_dual_port_1  
  %305 = load volatile i32* %s... (idx: 0)        1                             0                             
  %306 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %305 = load volatile i32* %s... (idx: 0) -> main_b_local_mem_dual_port_0 (mux inputs: 2)
  %306 = load volatile i32* %s... (idx: 1) -> main_b_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_5
Binding functional unit type: bb_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %328, i32... can share an input with another operation already assigned to main_bb_local_mem_dual_port_0
  store volatile i32 %328, i32... can share an output register with another operation already assigned to main_bb_local_mem_dual_port_0
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %328, i32... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %328, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %328, i32... (idx: 0) -> main_bb_local_mem_dual_port_0 (mux inputs: 6)
State: pipeline_time_5
Binding functional unit type: c_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %307 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_0
  %307 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_1
  %308 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_0
  %308 = load volatile i32* %s... can share an input with another operation already assigned to main_c_local_mem_dual_port_1
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %307 = load volatile i32* %s... (idx: 0)        2                             2                             
  %308 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_c_local_mem_dual_port_0  main_c_local_mem_dual_port_1  
  %307 = load volatile i32* %s... (idx: 0)        1                             0                             
  %308 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %307 = load volatile i32* %s... (idx: 0) -> main_c_local_mem_dual_port_0 (mux inputs: 2)
  %308 = load volatile i32* %s... (idx: 1) -> main_c_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_5
Binding functional unit type: cc_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %339, i32... can share an input with another operation already assigned to main_cc_local_mem_dual_port_0
  store volatile i32 %339, i32... can share an output register with another operation already assigned to main_cc_local_mem_dual_port_0
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %339, i32... (idx: 0)        10                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %339, i32... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %339, i32... (idx: 0) -> main_cc_local_mem_dual_port_0 (mux inputs: 6)
State: pipeline_time_5
Binding functional unit type: d_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %309 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_0
  %309 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_1
  %310 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_0
  %310 = load volatile i32* %s... can share an input with another operation already assigned to main_d_local_mem_dual_port_1
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %309 = load volatile i32* %s... (idx: 0)        2                             2                             
  %310 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_d_local_mem_dual_port_0  main_d_local_mem_dual_port_1  
  %309 = load volatile i32* %s... (idx: 0)        1                             0                             
  %310 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %309 = load volatile i32* %s... (idx: 0) -> main_d_local_mem_dual_port_0 (mux inputs: 2)
  %310 = load volatile i32* %s... (idx: 1) -> main_d_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_5
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %186, i32... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %186, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %186, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
  %246 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %246 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %246 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  store volatile i32 %186, i32... (idx: 0)        9                             18                            
  %246 = load volatile i32* %s... (idx: 1)        9                             -2                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  store volatile i32 %186, i32... (idx: 0)        1                             0                             
  %246 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %186, i32... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 5)
  %246 = load volatile i32* %s... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 3)
State: pipeline_time_5
Binding functional unit type: e_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %22 = load volatile i32* %sc... can share an input with another operation already assigned to main_e_local_mem_dual_port_0
  %22 = load volatile i32* %sc... can share an input with another operation already assigned to main_e_local_mem_dual_port_1
  %22 = load volatile i32* %sc... can share an output register with another operation already assigned to main_e_local_mem_dual_port_1
  %312 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_0
  %312 = load volatile i32* %s... can share an input with another operation already assigned to main_e_local_mem_dual_port_1
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %22 = load volatile i32* %sc... (idx: 0)        2                             -3                            
  %312 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_e_local_mem_dual_port_0  main_e_local_mem_dual_port_1  
  %22 = load volatile i32* %sc... (idx: 0)        0                             1                             
  %312 = load volatile i32* %s... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %312 = load volatile i32* %s... (idx: 1) -> main_e_local_mem_dual_port_0 (mux inputs: 2)
  %22 = load volatile i32* %sc... (idx: 0) -> main_e_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_5
Binding functional unit type: f_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %313 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_0
  %313 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_1
  %314 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_0
  %314 = load volatile i32* %s... can share an input with another operation already assigned to main_f_local_mem_dual_port_1
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %313 = load volatile i32* %s... (idx: 0)        2                             2                             
  %314 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_f_local_mem_dual_port_0  main_f_local_mem_dual_port_1  
  %313 = load volatile i32* %s... (idx: 0)        1                             0                             
  %314 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %313 = load volatile i32* %s... (idx: 0) -> main_f_local_mem_dual_port_0 (mux inputs: 2)
  %314 = load volatile i32* %s... (idx: 1) -> main_f_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_5
Binding functional unit type: g_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %26 = load volatile i32* %sc... can share an input with another operation already assigned to main_g_local_mem_dual_port_0
  %26 = load volatile i32* %sc... can share an input with another operation already assigned to main_g_local_mem_dual_port_1
  %26 = load volatile i32* %sc... can share an output register with another operation already assigned to main_g_local_mem_dual_port_1
  %316 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_0
  %316 = load volatile i32* %s... can share an input with another operation already assigned to main_g_local_mem_dual_port_1
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %26 = load volatile i32* %sc... (idx: 0)        2                             -3                            
  %316 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_g_local_mem_dual_port_0  main_g_local_mem_dual_port_1  
  %26 = load volatile i32* %sc... (idx: 0)        0                             1                             
  %316 = load volatile i32* %s... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %316 = load volatile i32* %s... (idx: 1) -> main_g_local_mem_dual_port_0 (mux inputs: 2)
  %26 = load volatile i32* %sc... (idx: 0) -> main_g_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_5
Binding functional unit type: h_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %317 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_0
  %317 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_1
  %318 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_0
  %318 = load volatile i32* %s... can share an input with another operation already assigned to main_h_local_mem_dual_port_1
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %317 = load volatile i32* %s... (idx: 0)        2                             2                             
  %318 = load volatile i32* %s... (idx: 1)        2                             2                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_h_local_mem_dual_port_0  main_h_local_mem_dual_port_1  
  %317 = load volatile i32* %s... (idx: 0)        1                             0                             
  %318 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %317 = load volatile i32* %s... (idx: 0) -> main_h_local_mem_dual_port_0 (mux inputs: 2)
  %318 = load volatile i32* %s... (idx: 1) -> main_h_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_5
Binding functional unit type: j_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %320 = load volatile i32* %s... can share an input with another operation already assigned to main_j_local_mem_dual_port_0
  %321 = load volatile i32* %s... can share an input with another operation already assigned to main_j_local_mem_dual_port_1
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %320 = load volatile i32* %s... (idx: 0)        1                             11                            
  %321 = load volatile i32* %s... (idx: 1)        11                            1                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_j_local_mem_dual_port_0  main_j_local_mem_dual_port_1  
  %320 = load volatile i32* %s... (idx: 0)        1                             0                             
  %321 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %320 = load volatile i32* %s... (idx: 0) -> main_j_local_mem_dual_port_0 (mux inputs: 1)
  %321 = load volatile i32* %s... (idx: 1) -> main_j_local_mem_dual_port_1 (mux inputs: 1)
State: pipeline_time_6
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %244, i32... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %244, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %244, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
  %245 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %245 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %245 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  store volatile i32 %244, i32... (idx: 0)        10                            18                            
  %245 = load volatile i32* %s... (idx: 1)        10                            -2                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  store volatile i32 %244, i32... (idx: 0)        1                             0                             
  %245 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %244, i32... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 6)
  %245 = load volatile i32* %s... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 3)
State: pipeline_time_7
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %187 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %187 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %187 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
  store volatile i32 %302, i32... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %302, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %302, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %187 = load volatile i32* %s... (idx: 0)        11                            -2                            
  store volatile i32 %302, i32... (idx: 1)        11                            18                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %187 = load volatile i32* %s... (idx: 0)        0                             1                             
  store volatile i32 %302, i32... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %302, i32... (idx: 1) -> main_dd_local_mem_dual_port_0 (mux inputs: 7)
  %187 = load volatile i32* %s... (idx: 0) -> main_dd_local_mem_dual_port_1 (mux inputs: 3)
State: pipeline_time_8
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %188 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %188 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %188 = load volatile i32* %s... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
  store volatile i32 %360, i32... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %360, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  store volatile i32 %360, i32... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %188 = load volatile i32* %s... (idx: 0)        12                            -2                            
  store volatile i32 %360, i32... (idx: 1)        12                            18                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %188 = load volatile i32* %s... (idx: 0)        0                             1                             
  store volatile i32 %360, i32... (idx: 1)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %360, i32... (idx: 1) -> main_dd_local_mem_dual_port_0 (mux inputs: 8)
  %188 = load volatile i32* %s... (idx: 0) -> main_dd_local_mem_dual_port_1 (mux inputs: 3)
State: pipeline_time_9
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %13 = load volatile i32* %sc... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %13 = load volatile i32* %sc... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %13 = load volatile i32* %sc... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
  %72 = load volatile i32* %sc... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %72 = load volatile i32* %sc... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %72 = load volatile i32* %sc... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %13 = load volatile i32* %sc... (idx: 0)        13                            -2                            
  %72 = load volatile i32* %sc... (idx: 1)        13                            -2                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %13 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %72 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %13 = load volatile i32* %sc... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 9)
  %72 = load volatile i32* %sc... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 3)
State: pipeline_time_10
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %12 = load volatile i32* %sc... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %12 = load volatile i32* %sc... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %12 = load volatile i32* %sc... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
  %71 = load volatile i32* %sc... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %71 = load volatile i32* %sc... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %71 = load volatile i32* %sc... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %12 = load volatile i32* %sc... (idx: 0)        14                            -2                            
  %71 = load volatile i32* %sc... (idx: 1)        14                            -2                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %12 = load volatile i32* %sc... (idx: 0)        1                             0                             
  %71 = load volatile i32* %sc... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %12 = load volatile i32* %sc... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 10)
  %71 = load volatile i32* %sc... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 3)
State: pipeline_time_11
Binding functional unit type: aa_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %46, i32*... can share an input with another operation already assigned to main_aa_local_mem_dual_port_0
  store volatile i32 %46, i32*... can share an output register with another operation already assigned to main_aa_local_mem_dual_port_0
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %46, i32*... (idx: 0)        11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_aa_local_mem_dual_port_0 
  store volatile i32 %46, i32*... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %46, i32*... (idx: 0) -> main_aa_local_mem_dual_port_0 (mux inputs: 7)
State: pipeline_time_11
Binding functional unit type: bb_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %38, i32*... can share an input with another operation already assigned to main_bb_local_mem_dual_port_0
  store volatile i32 %38, i32*... can share an output register with another operation already assigned to main_bb_local_mem_dual_port_0
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %38, i32*... (idx: 0)        11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_bb_local_mem_dual_port_0 
  store volatile i32 %38, i32*... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %38, i32*... (idx: 0) -> main_bb_local_mem_dual_port_0 (mux inputs: 7)
State: pipeline_time_11
Binding functional unit type: cc_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store volatile i32 %49, i32*... can share an input with another operation already assigned to main_cc_local_mem_dual_port_0
  store volatile i32 %49, i32*... can share an output register with another operation already assigned to main_cc_local_mem_dual_port_0
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %49, i32*... (idx: 0)        11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_cc_local_mem_dual_port_0 
  store volatile i32 %49, i32*... (idx: 0)        1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store volatile i32 %49, i32*... (idx: 0) -> main_cc_local_mem_dual_port_0 (mux inputs: 7)
State: pipeline_time_11
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %303 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  %303 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
  %304 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_0
  %304 = load volatile i32* %s... can share an input with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %303 = load volatile i32* %s... (idx: 0)        10                            3                             
  %304 = load volatile i32* %s... (idx: 1)        10                            3                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %303 = load volatile i32* %s... (idx: 0)        1                             0                             
  %304 = load volatile i32* %s... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %303 = load volatile i32* %s... (idx: 0) -> main_dd_local_mem_dual_port_0 (mux inputs: 10)
  %304 = load volatile i32* %s... (idx: 1) -> main_dd_local_mem_dual_port_1 (mux inputs: 3)
State: LEGUP_F_main_BB__361
Binding functional unit type: dd_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %362 = load volatile i32* ge... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_0
  %362 = load volatile i32* ge... can share an output register with another operation already assigned to main_dd_local_mem_dual_port_1
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %362 = load volatile i32* ge... (idx: 0)        5                             -2                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_dd_local_mem_dual_port_0 main_dd_local_mem_dual_port_1 
  %362 = load volatile i32* ge... (idx: 0)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %362 = load volatile i32* ge... (idx: 0) -> main_dd_local_mem_dual_port_1 (mux inputs: 3)

