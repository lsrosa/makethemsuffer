//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Feb 14 19:47:56 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Apr 28 20:19:11 2017
//----------------------------------------------------------------------------//

--------------------------------------------------------------------------------
Function: main
--------------------------------------------------------------------------------
Function unit type:           Number Required               
main_0_A_local_mem_dual_port  2                             

Running Bipartite Weighted Matching on function: main
State: pipeline_time_0
Binding functional unit type: main_0_A_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  store i32 %12, i32* %scevgep... (idx: 0)        20                            20                            
  store i32 %13, i32* %scevgep... (idx: 1)        20                            20                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  store i32 %12, i32* %scevgep... (idx: 0)        1                             0                             
  store i32 %13, i32* %scevgep... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %12, i32* %scevgep... (idx: 0) -> main_main_0_A_local_mem_dual_port_0 (mux inputs: 2)
  store i32 %13, i32* %scevgep... (idx: 1) -> main_main_0_A_local_mem_dual_port_1 (mux inputs: 2)
State: pipeline_time_1
Binding functional unit type: main_0_A_local_mem_dual_port
Weight matrix for operation/function unit matching:
  store i32 %10, i32* %scevgep... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_0
  store i32 %10, i32* %scevgep... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_1
  store i32 %11, i32* %scevgep... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_0
  store i32 %11, i32* %scevgep... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_1
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  store i32 %10, i32* %scevgep... (idx: 0)        17                            17                            
  store i32 %11, i32* %scevgep... (idx: 1)        17                            17                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  store i32 %10, i32* %scevgep... (idx: 0)        1                             0                             
  store i32 %11, i32* %scevgep... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  store i32 %10, i32* %scevgep... (idx: 0) -> main_main_0_A_local_mem_dual_port_0 (mux inputs: 4)
  store i32 %11, i32* %scevgep... (idx: 1) -> main_main_0_A_local_mem_dual_port_1 (mux inputs: 4)
State: pipeline_time_2
Binding functional unit type: main_0_A_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %10 = load i32* %scevgep8, a... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_0
  %10 = load i32* %scevgep8, a... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_1
  %11 = load i32* %scevgep6, a... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_0
  %11 = load i32* %scevgep6, a... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_1
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  %10 = load i32* %scevgep8, a... (idx: 0)        9                             9                             
  %11 = load i32* %scevgep6, a... (idx: 1)        9                             9                             
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  %10 = load i32* %scevgep8, a... (idx: 0)        1                             0                             
  %11 = load i32* %scevgep6, a... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %10 = load i32* %scevgep8, a... (idx: 0) -> main_main_0_A_local_mem_dual_port_0 (mux inputs: 5)
  %11 = load i32* %scevgep6, a... (idx: 1) -> main_main_0_A_local_mem_dual_port_1 (mux inputs: 5)
State: pipeline_time_3
Binding functional unit type: main_0_A_local_mem_dual_port
Weight matrix for operation/function unit matching:
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  %12 = load i32* %scevgep4, a... (idx: 0)        15                            15                            
  %13 = load i32* %scevgep2, a... (idx: 1)        15                            15                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  %12 = load i32* %scevgep4, a... (idx: 0)        1                             0                             
  %13 = load i32* %scevgep2, a... (idx: 1)        0                             1                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %12 = load i32* %scevgep4, a... (idx: 0) -> main_main_0_A_local_mem_dual_port_0 (mux inputs: 6)
  %13 = load i32* %scevgep2, a... (idx: 1) -> main_main_0_A_local_mem_dual_port_1 (mux inputs: 6)
State: LEGUP_F_main_BB__14
Binding functional unit type: main_0_A_local_mem_dual_port
Weight matrix for operation/function unit matching:
  %16 = load i32* %15, align 4... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_0
  %16 = load i32* %15, align 4... can share an output register with another operation already assigned to main_main_0_A_local_mem_dual_port_1
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  %16 = load i32* %15, align 4... (idx: 0)        11                            11                            
Solving Bipartite Weighted Matching (minimize weights)...
Assignment matrix after operation/function unit matching:
                                                  main_main_0_A_local_mem_dual_port_0main_main_0_A_local_mem_dual_port_1
  %16 = load i32* %15, align 4... (idx: 0)        1                             0                             
Checking that every operator was assigned to a functional unit...yes
Binding operator -> functional unit assignments:
  %16 = load i32* %15, align 4... (idx: 0) -> main_main_0_A_local_mem_dual_port_0 (mux inputs: 7)

