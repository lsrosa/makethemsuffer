//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Feb 14 19:47:56 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Feb 23 13:33:52 2017
//----------------------------------------------------------------------------//

allocateRAM: %1
Constant: 0
# of Vertices: 37
Representatives: 
1 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5
6 -> 6
7 -> 7
8 -> 8
9 -> 9
10 -> 10
11 -> 11
12 -> 12
13 -> 13
14 -> 14
15 -> 15
16 -> 16
17 -> 17
18 -> 18
19 -> 19
20 -> 20
21 -> 21
22 -> 22
23 -> 23
24 -> 24
25 -> 25
26 -> 26
27 -> 27
28 -> 28
29 -> 29
30 -> 30
31 -> 31
32 -> 32
33 -> 33
34 -> 34
35 -> 35
36 -> 36
37 -> 37

Connections (Graph): 
1 -> 
2 -> 
3 -> 
4 -> 
5 -> 
6 -> 
7 -> 25 26 27 28 29 37 
8 -> 15 17 19 21 24 36 
9 -> 14 
10 -> 9 11 12 13 
11 -> 16 
12 -> 18 
13 -> 20 
14 -> 
15 -> 
16 -> 
17 -> 
18 -> 
19 -> 
20 -> 
21 -> 
22 -> 
23 -> 22 
24 -> 
25 -> 
26 -> 
27 -> 
28 -> 
29 -> 
30 -> 
31 -> 30 
32 -> 
33 -> 32 
34 -> 
35 -> 34 
36 -> 
37 -> 

Points-to-set: 
1 -> {}
2 -> {1, }
3 -> {}
4 -> {3, }
5 -> {}
6 -> {5, }
7 -> {}
8 -> {7, }
9 -> {}
10 -> {}
11 -> {}
12 -> {}
13 -> {}
14 -> {}
15 -> {7, }
16 -> {}
17 -> {7, }
18 -> {}
19 -> {7, }
20 -> {}
21 -> {7, }
22 -> {}
23 -> {}
24 -> {7, }
25 -> {}
26 -> {}
27 -> {}
28 -> {}
29 -> {}
30 -> {}
31 -> {}
32 -> {}
33 -> {}
34 -> {}
35 -> {}
36 -> {7, }
37 -> {}

Variable: Int -> Value* mapping
4: @.str1 = private unnamed_addr constant [3 x i8] c"l2\00", align 1
6: @.str2 = private unnamed_addr constant [3 x i8] c"l1\00", align 1
2: @.str = private unnamed_addr constant [3 x i8] c"l3\00", align 1
30:   %indvar.next = add i32 %indvar, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
32:   %indvar.next3 = add i32 %indvar2, 1
34:   %30 = add nsw i32 %t.03, 1
36:   %32 = getelementptr inbounds [10000 x float]* %1, i32 0, i32 9999
33:   %indvar2 = phi i32 [ %indvar.next3, %28 ], [ 0, %2 ]
10:   %4 = mul i32 %indvar2, 100
8:   %1 = alloca [10000 x float], align 4
35:   %t.03 = phi i32 [ 0, %0 ], [ %30, %29 ]
9:   %5 = add i32 %4, 101
11:   %6 = add i32 %4, 100
12:   %7 = add i32 %4, 102
13:   %8 = add i32 %4, 201
23:   %9 = or i32 %4, 1
31:   %indvar = phi i32 [ %indvar.next, %10 ], [ 0, %3 ], !legup.canonical_induction !2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
37:   %33 = load float* %32, align 4, !tbaa !4
14:   %11 = add i32 %5, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
15:   %scevgep7 = getelementptr [10000 x float]* %1, i32 0, i32 %11, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
16:   %12 = add i32 %6, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
17:   %scevgep6 = getelementptr [10000 x float]* %1, i32 0, i32 %12, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
18:   %13 = add i32 %7, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
19:   %scevgep5 = getelementptr [10000 x float]* %1, i32 0, i32 %13, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
20:   %14 = add i32 %8, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
21:   %scevgep4 = getelementptr [10000 x float]* %1, i32 0, i32 %14, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
22:   %15 = add i32 %9, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
24:   %scevgep = getelementptr [10000 x float]* %1, i32 0, i32 %15, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
25:   %16 = load float* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
26:   %17 = load float* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
27:   %19 = load float* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
28:   %21 = load float* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
29:   %23 = load float* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
Memory: Int -> Value* mapping
3: @.str1 = private unnamed_addr constant [3 x i8] c"l2\00", align 1
5: @.str2 = private unnamed_addr constant [3 x i8] c"l1\00", align 1
1: @.str = private unnamed_addr constant [3 x i8] c"l3\00", align 1
7:   %1 = alloca [10000 x float], align 4
digraph "jacobi_2d.bc" {
    1 [label="#1",color=blue,style=solid];
    2 [label=".str",color=blue,style=solid];
    3 [label="#3",color=blue,style=solid];
    4 [label=".str1",color=blue,style=solid];
    5 [label="#5",color=blue,style=solid];
    6 [label=".str2",color=blue,style=solid];
    7 [label="#7",color=blue,style=solid];
    8 [label="unknown",color=blue,style=solid];
    9 [label="unknown",color=blue,style=solid];
    10 [label="unknown",color=blue,style=solid];
    11 [label="unknown",color=blue,style=solid];
    12 [label="unknown",color=blue,style=solid];
    13 [label="unknown",color=blue,style=solid];
    14 [label="unknown",color=blue,style=solid];
    15 [label="scevgep7",color=blue,style=solid];
    16 [label="unknown",color=blue,style=solid];
    17 [label="scevgep6",color=blue,style=solid];
    18 [label="unknown",color=blue,style=solid];
    19 [label="scevgep5",color=blue,style=solid];
    20 [label="unknown",color=blue,style=solid];
    21 [label="scevgep4",color=blue,style=solid];
    22 [label="unknown",color=blue,style=solid];
    23 [label="unknown",color=blue,style=solid];
    24 [label="scevgep",color=blue,style=solid];
    25 [label="unknown",color=blue,style=solid];
    26 [label="unknown",color=blue,style=solid];
    27 [label="unknown",color=blue,style=solid];
    28 [label="unknown",color=blue,style=solid];
    29 [label="unknown",color=blue,style=solid];
    30 [label="indvar.next",color=blue,style=solid];
    31 [label="indvar",color=blue,style=solid];
    32 [label="indvar.next3",color=blue,style=solid];
    33 [label="indvar2",color=blue,style=solid];
    34 [label="unknown",color=blue,style=solid];
    35 [label="t.03",color=blue,style=solid];
    36 [label="unknown",color=blue,style=solid];
    37 [label="unknown",color=blue,style=solid];
    7 -> 25;
    7 -> 26;
    7 -> 27;
    7 -> 28;
    7 -> 29;
    7 -> 37;
    8 -> 15;
    8 -> 17;
    8 -> 19;
    8 -> 21;
    8 -> 24;
    8 -> 36;
    9 -> 14;
    10 -> 9;
    10 -> 11;
    10 -> 12;
    10 -> 13;
    11 -> 16;
    12 -> 18;
    13 -> 20;
    23 -> 22;
    31 -> 30;
    33 -> 32;
    35 -> 34;
    pts2 [label="#1",color=red,style=dashed,shape=box];
    2 -> pts2 [color=red,style=dashed];
    pts4 [label="#3",color=red,style=dashed,shape=box];
    4 -> pts4 [color=red,style=dashed];
    pts6 [label="#5",color=red,style=dashed,shape=box];
    6 -> pts6 [color=red,style=dashed];
    pts8 [label="#7",color=red,style=dashed,shape=box];
    8 -> pts8 [color=red,style=dashed];
    pts15 [label="#7",color=red,style=dashed,shape=box];
    15 -> pts15 [color=red,style=dashed];
    pts17 [label="#7",color=red,style=dashed,shape=box];
    17 -> pts17 [color=red,style=dashed];
    pts19 [label="#7",color=red,style=dashed,shape=box];
    19 -> pts19 [color=red,style=dashed];
    pts21 [label="#7",color=red,style=dashed,shape=box];
    21 -> pts21 [color=red,style=dashed];
    pts24 [label="#7",color=red,style=dashed,shape=box];
    24 -> pts24 [color=red,style=dashed];
    pts36 [label="#7",color=red,style=dashed,shape=box];
    36 -> pts36 [color=red,style=dashed];
}
%16 -> { 
	Addr: %1
		RAM: main_0_1
			Adding Local RAM: main_0_1 to Fct: @main
}
%17 -> { 
	Addr: %1
		RAM: main_0_1
			Adding Local RAM: main_0_1 to Fct: @main
}
%19 -> { 
	Addr: %1
		RAM: main_0_1
			Adding Local RAM: main_0_1 to Fct: @main
}
%21 -> { 
	Addr: %1
		RAM: main_0_1
			Adding Local RAM: main_0_1 to Fct: @main
}
%23 -> { 
	Addr: %1
		RAM: main_0_1
			Adding Local RAM: main_0_1 to Fct: @main
}
<badref> -> { 
	Addr: %1
		RAM: main_0_1
			Adding Local RAM: main_0_1 to Fct: @main
}
%33 -> { 
	Addr: %1
		RAM: main_0_1
			Adding Local RAM: main_0_1 to Fct: @main
}
Final memory allocation:
Global Memories:
Local Memories:
	RAM: main_0_1 Function: main
