//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Feb 14 19:47:56 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Feb 23 13:33:52 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 1
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val
);

parameter [3:0] LEGUP_0 = 4'd0;
parameter [3:0] LEGUP_F_main_BB__0_1 = 4'd1;
parameter [3:0] LEGUP_F_main_BB__2_2 = 4'd2;
parameter [3:0] LEGUP_F_main_BB__3_3 = 4'd3;
parameter [3:0] LEGUP_F_main_BB__3_4 = 4'd4;
parameter [3:0] LEGUP_loop_pipeline_wait_l1_1_5 = 4'd5;
parameter [3:0] LEGUP_F_main_BB__28_6 = 4'd6;
parameter [3:0] LEGUP_F_main_BB__29_7 = 4'd7;
parameter [3:0] LEGUP_F_main_BB__31_8 = 4'd8;
parameter [3:0] LEGUP_F_main_BB__31_9 = 4'd9;
parameter [3:0] LEGUP_F_main_BB__31_10 = 4'd10;
parameter [3:0] LEGUP_F_main_BB__31_11 = 4'd11;
parameter [3:0] LEGUP_F_main_BB__31_12 = 4'd12;
parameter [3:0] LEGUP_F_main_BB__31_13 = 4'd13;
parameter [3:0] LEGUP_F_main_BB__31_14 = 4'd14;
parameter [3:0] LEGUP_F_main_BB__31_15 = 4'd15;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
reg [3:0] cur_state;
reg [3:0] next_state;
reg [31:0] main_2_t03;
reg [31:0] main_2_t03_reg;
reg [31:0] main_3_indvar2;
reg [31:0] main_3_indvar2_reg;
reg [31:0] main_3_4;
reg [31:0] main_3_4_reg;
reg [31:0] main_3_5;
reg [31:0] main_3_5_reg;
reg [31:0] main_3_6;
reg [31:0] main_3_6_reg;
reg [31:0] main_3_7;
reg [31:0] main_3_7_reg;
reg [31:0] main_3_8;
reg [31:0] main_3_8_reg;
reg [31:0] main_3_9;
reg [31:0] main_3_9_reg;
reg [31:0] main_10_indvar;
reg [31:0] main_10_indvar_reg;
reg [31:0] main_10_11;
reg [31:0] main_10_11_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep7_reg;
reg [31:0] main_10_12;
reg [31:0] main_10_12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep6_reg;
reg [31:0] main_10_13;
reg [31:0] main_10_13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep5_reg;
reg [31:0] main_10_14;
reg [31:0] main_10_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep4_reg;
reg [31:0] main_10_15;
reg [31:0] main_10_15_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep_reg;
reg [31:0] main_10_16;
reg [31:0] main_10_16_reg;
reg [31:0] main_10_17;
reg [31:0] main_10_17_reg;
reg [31:0] main_10_18;
reg [31:0] main_10_18_reg;
reg [31:0] main_10_19;
reg [31:0] main_10_19_reg;
reg [31:0] main_10_20;
reg [31:0] main_10_20_reg;
reg [31:0] main_10_21;
reg [31:0] main_10_21_reg;
reg [31:0] main_10_22;
reg [31:0] main_10_22_reg;
reg [31:0] main_10_23;
reg [31:0] main_10_23_reg;
reg [31:0] main_10_24;
reg [31:0] main_10_24_reg;
reg [63:0] main_10_25;
reg [63:0] main_10_25_reg;
reg [63:0] main_10_26;
reg [63:0] main_10_26_reg;
reg [31:0] main_10_27;
reg [31:0] main_10_27_reg;
reg [31:0] main_10_indvarnext;
reg [31:0] main_10_indvarnext_reg;
reg  main_10_exitcond1;
reg  main_10_exitcond1_reg;
reg [31:0] main_28_indvarnext3;
reg [31:0] main_28_indvarnext3_reg;
reg  main_28_exitcond;
reg  main_28_exitcond_reg;
reg [31:0] main_29_30;
reg [31:0] main_29_30_reg;
reg  main_29_exitcond13;
reg  main_29_exitcond13_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_31_32_reg;
reg [31:0] main_31_33;
reg [31:0] main_31_33_reg;
reg [31:0] main_31_34;
reg [31:0] main_31_34_reg;
reg [13:0] main_0_1_address_a;
reg  main_0_1_write_enable_a;
reg [31:0] main_0_1_in_a;
wire [31:0] main_0_1_out_a;
reg [13:0] main_0_1_address_b;
reg  main_0_1_write_enable_b;
wire [31:0] main_0_1_in_b;
wire [31:0] main_0_1_out_b;
reg  l1_1_pipeline_start;
reg  l1_1_started;
reg [6:0] l1_1_ii_state;
reg [31:0] l1_1_i_stage0;
reg  l1_1_epilogue;
reg  l1_1_valid_bit_0;
reg  l1_1_valid_bit_1;
reg  l1_1_valid_bit_2;
reg  l1_1_valid_bit_3;
reg  l1_1_valid_bit_4;
reg  l1_1_valid_bit_5;
reg  l1_1_valid_bit_6;
reg  l1_1_valid_bit_7;
reg  l1_1_valid_bit_8;
reg  l1_1_valid_bit_9;
reg  l1_1_valid_bit_10;
reg  l1_1_valid_bit_11;
reg  l1_1_valid_bit_12;
reg  l1_1_valid_bit_13;
reg  l1_1_valid_bit_14;
reg  l1_1_valid_bit_15;
reg  l1_1_valid_bit_16;
reg  l1_1_valid_bit_17;
reg  l1_1_valid_bit_18;
reg  l1_1_valid_bit_19;
reg  l1_1_valid_bit_20;
reg  l1_1_valid_bit_21;
reg  l1_1_valid_bit_22;
reg  l1_1_valid_bit_23;
reg  l1_1_valid_bit_24;
reg  l1_1_valid_bit_25;
reg  l1_1_valid_bit_26;
reg  l1_1_valid_bit_27;
reg  l1_1_valid_bit_28;
reg  l1_1_valid_bit_29;
reg  l1_1_valid_bit_30;
reg  l1_1_valid_bit_31;
reg  l1_1_valid_bit_32;
reg  l1_1_valid_bit_33;
reg  l1_1_valid_bit_34;
reg  l1_1_valid_bit_35;
reg  l1_1_valid_bit_36;
reg  l1_1_valid_bit_37;
reg  l1_1_valid_bit_38;
reg  l1_1_valid_bit_39;
reg  l1_1_valid_bit_40;
reg  l1_1_valid_bit_41;
reg  l1_1_valid_bit_42;
reg  l1_1_valid_bit_43;
reg  l1_1_valid_bit_44;
reg  l1_1_valid_bit_45;
reg  l1_1_valid_bit_46;
reg  l1_1_valid_bit_47;
reg  l1_1_valid_bit_48;
reg  l1_1_valid_bit_49;
reg  l1_1_valid_bit_50;
reg  l1_1_valid_bit_51;
reg  l1_1_valid_bit_52;
reg  l1_1_valid_bit_53;
reg  l1_1_valid_bit_54;
reg  l1_1_valid_bit_55;
reg  l1_1_valid_bit_56;
reg  l1_1_valid_bit_57;
reg  l1_1_valid_bit_58;
reg  l1_1_valid_bit_59;
reg  l1_1_valid_bit_60;
reg  l1_1_valid_bit_61;
reg  l1_1_valid_bit_62;
reg  l1_1_valid_bit_63;
reg  l1_1_valid_bit_64;
reg  l1_1_valid_bit_65;
reg  l1_1_valid_bit_66;
reg  l1_1_valid_bit_67;
reg  l1_1_valid_bit_68;
reg  l1_1_valid_bit_69;
reg  l1_1_valid_bit_70;
reg  l1_1_valid_bit_71;
reg  l1_1_valid_bit_72;
reg  l1_1_valid_bit_73;
reg  l1_1_valid_bit_74;
reg  l1_1_valid_bit_75;
reg [31:0] l1_1_i_stage1;
reg [31:0] main_10_11_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep7_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep7_reg_stage1;
reg [31:0] main_10_12_reg_stage0;
reg [31:0] main_10_13_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep5_reg_stage0;
reg [31:0] main_10_14_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep4_reg_stage0;
reg [31:0] main_10_15_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_10_scevgep_reg_stage0;
reg [31:0] main_10_19_reg_stage0;
reg [31:0] main_10_21_reg_stage0;
reg [31:0] main_10_23_reg_stage0;
reg  l1_1_pipeline_exit_cond;
reg  l1_1_pipeline_finish;
reg [31:0] main_altfp_extend_32_0_op0;
wire [63:0] altfp_extend_main_10_25_out;
reg  altfp_main_10_25_en;
reg [63:0] main_altfp_extend_32_0;
reg [63:0] main_altfp_multiply_64_0_op0;
reg [63:0] main_altfp_multiply_64_0_op1;
wire [63:0] altfp_multiplier64_main_10_26_out;
reg  altfp_main_10_26_en;
reg [63:0] main_altfp_multiply_64_0;
reg [63:0] main_altfp_truncate_64_0_op0;
wire [31:0] altfp_truncate_main_10_27_out;
reg  altfp_main_10_27_en;
reg [31:0] main_altfp_truncate_64_0;
reg [31:0] main_altfp_fptosi_32_0_op0;
wire [31:0] altfp_fptosi32_main_31_34_out;
reg  altfp_main_31_34_en;
reg [31:0] main_altfp_fptosi_32_0;
reg [31:0] main_altfp_add_32_0_op0;
reg [31:0] main_altfp_add_32_0_op1;
wire [31:0] altfp_adder_main_10_18_out;
reg  altfp_main_10_18_en;
reg [31:0] main_altfp_add_32_0;
reg  lpm_mult_main_3_4_en;
reg [31:0] main_3_4_stage0_reg;
reg  altfp_main_10_20_en;
reg  altfp_main_10_22_en;
reg  altfp_main_10_24_en;

/*   %25 = fpext float %24 to double, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !3*/
altfp_extend_2 altfp_extend_2_main_10_25 (
	.result (altfp_extend_main_10_25_out),
	.dataa (main_altfp_extend_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_10_25_en)
);


/*   %26 = fmul double %25, 2.000000e-01, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !3*/
altfp_multiplier64_11 altfp_multiplier64_11_main_10_26 (
	.result (altfp_multiplier64_main_10_26_out),
	.dataa (main_altfp_multiply_64_0_op0),
	.datab (main_altfp_multiply_64_0_op1),
	.clock (clk),
	.clk_en (altfp_main_10_26_en)
);


/*   %27 = fptrunc double %26 to float, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3*/
altfp_truncate_3 altfp_truncate_3_main_10_27 (
	.result (altfp_truncate_main_10_27_out),
	.dataa (main_altfp_truncate_64_0_op0),
	.clock (clk),
	.clk_en (altfp_main_10_27_en)
);


/*   %34 = fptosi float %33 to i32*/
altfp_fptosi32_6 altfp_fptosi32_6_main_31_34 (
	.result (altfp_fptosi32_main_31_34_out),
	.dataa (main_altfp_fptosi_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_31_34_en)
);


/*   %18 = fadd float %16, %17, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3*/
altfp_adder_14 altfp_adder_14_main_10_18 (
	.result (altfp_adder_main_10_18_out),
	.dataa (main_altfp_add_32_0_op0),
	.datab (main_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_10_18_en)
);


// Local Rams


//   %1 = alloca [10000 x float], align 4
ram_dual_port main_0_1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_1_address_a ),
	.address_b( main_0_1_address_b ),
	.wren_a( main_0_1_write_enable_a ),
	.wren_b( main_0_1_write_enable_b ),
	.data_a( main_0_1_in_a ),
	.data_b( main_0_1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_1_out_a ),
	.q_b( main_0_1_out_b)
);
defparam main_0_1.width_a = 32;
defparam main_0_1.width_b = 32;
defparam main_0_1.widthad_a = 14;
defparam main_0_1.widthad_b = 14;
defparam main_0_1.width_be_a = 1;
defparam main_0_1.width_be_b = 1;
defparam main_0_1.numwords_a = 10000;
defparam main_0_1.numwords_b = 10000;
defparam main_0_1.latency = 1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__2_2;
LEGUP_F_main_BB__28_6:
	if ((main_28_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__29_7;
	else if ((main_28_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__3_3;
LEGUP_F_main_BB__29_7:
	if ((main_29_exitcond13 == 1'd1))
		next_state = LEGUP_F_main_BB__31_8;
	else if ((main_29_exitcond13 == 1'd0))
		next_state = LEGUP_F_main_BB__2_2;
LEGUP_F_main_BB__2_2:
		next_state = LEGUP_F_main_BB__3_3;
LEGUP_F_main_BB__31_10:
		next_state = LEGUP_F_main_BB__31_11;
LEGUP_F_main_BB__31_11:
		next_state = LEGUP_F_main_BB__31_12;
LEGUP_F_main_BB__31_12:
		next_state = LEGUP_F_main_BB__31_13;
LEGUP_F_main_BB__31_13:
		next_state = LEGUP_F_main_BB__31_14;
LEGUP_F_main_BB__31_14:
		next_state = LEGUP_F_main_BB__31_15;
LEGUP_F_main_BB__31_15:
		next_state = LEGUP_0;
LEGUP_F_main_BB__31_8:
		next_state = LEGUP_F_main_BB__31_9;
LEGUP_F_main_BB__31_9:
		next_state = LEGUP_F_main_BB__31_10;
LEGUP_F_main_BB__3_3:
		next_state = LEGUP_F_main_BB__3_4;
LEGUP_F_main_BB__3_4:
		next_state = LEGUP_loop_pipeline_wait_l1_1_5;
LEGUP_loop_pipeline_wait_l1_1_5:
	if ((l1_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__28_6;
	else if ((l1_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__28_6;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %2*/
	/*   %t.03 = phi i32 [ 0, %0 ], [ %30, %29 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_t03 = 32'd0;
	end
	/* main: %2*/
	/*   %t.03 = phi i32 [ 0, %0 ], [ %30, %29 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__29_7) & (memory_controller_waitrequest == 1'd0)) & (main_29_exitcond13 == 1'd0))) */ begin
		main_2_t03 = main_29_30;
	end
end
always @(posedge clk) begin
	/* main: %2*/
	/*   %t.03 = phi i32 [ 0, %0 ], [ %30, %29 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_2_t03_reg <= main_2_t03;
		if (start == 1'b0 && ^(main_2_t03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_t03_reg"); $finish; end
	end
	/* main: %2*/
	/*   %t.03 = phi i32 [ 0, %0 ], [ %30, %29 ]*/
	if ((((cur_state == LEGUP_F_main_BB__29_7) & (memory_controller_waitrequest == 1'd0)) & (main_29_exitcond13 == 1'd0))) begin
		main_2_t03_reg <= main_2_t03;
		if (start == 1'b0 && ^(main_2_t03) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_2_t03_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %indvar2 = phi i32 [ %indvar.next3, %28 ], [ 0, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_3_indvar2 = 32'd0;
	end
	/* main: %3*/
	/*   %indvar2 = phi i32 [ %indvar.next3, %28 ], [ 0, %2 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__28_6) & (memory_controller_waitrequest == 1'd0)) & (main_28_exitcond == 1'd0))) */ begin
		main_3_indvar2 = main_28_indvarnext3;
	end
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %indvar2 = phi i32 [ %indvar.next3, %28 ], [ 0, %2 ]*/
	if (((cur_state == LEGUP_F_main_BB__2_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_3_indvar2_reg <= main_3_indvar2;
		if (start == 1'b0 && ^(main_3_indvar2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_indvar2_reg"); $finish; end
	end
	/* main: %3*/
	/*   %indvar2 = phi i32 [ %indvar.next3, %28 ], [ 0, %2 ]*/
	if ((((cur_state == LEGUP_F_main_BB__28_6) & (memory_controller_waitrequest == 1'd0)) & (main_28_exitcond == 1'd0))) begin
		main_3_indvar2_reg <= main_3_indvar2;
		if (start == 1'b0 && ^(main_3_indvar2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_indvar2_reg"); $finish; end
	end
end
always @(*) begin
	main_3_4 = main_3_4_stage0_reg;
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %4 = mul i32 %indvar2, 100*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
	/* main: %3*/
	/*   %4 = mul i32 %indvar2, 100*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %5 = add i32 %4, 101*/
		main_3_5 = (main_3_4 + 32'd101);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %5 = add i32 %4, 101*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		main_3_5_reg <= main_3_5;
		if (start == 1'b0 && ^(main_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %6 = add i32 %4, 100*/
		main_3_6 = (main_3_4 + 32'd100);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %6 = add i32 %4, 100*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		main_3_6_reg <= main_3_6;
		if (start == 1'b0 && ^(main_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %7 = add i32 %4, 102*/
		main_3_7 = (main_3_4 + 32'd102);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %7 = add i32 %4, 102*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		main_3_7_reg <= main_3_7;
		if (start == 1'b0 && ^(main_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %8 = add i32 %4, 201*/
		main_3_8 = (main_3_4 + 32'd201);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %8 = add i32 %4, 201*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		main_3_8_reg <= main_3_8;
		if (start == 1'b0 && ^(main_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %9 = or i32 %4, 1*/
		main_3_9 = (main_3_4 | 32'd1);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %9 = or i32 %4, 1*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		main_3_9_reg <= main_3_9;
		if (start == 1'b0 && ^(main_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %indvar = phi i32 [ %indvar.next, %10 ], [ 0, %3 ], !legup.canonical_induction !2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
if (reset) begin main_10_indvar = 0; end
		main_10_indvar = 32'd0;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %indvar = phi i32 [ %indvar.next, %10 ], [ 0, %3 ], !legup.canonical_induction !2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
	if (((cur_state == LEGUP_F_main_BB__3_4) & (memory_controller_waitrequest == 1'd0))) begin
		main_10_indvar_reg <= main_10_indvar;
		if (start == 1'b0 && ^(main_10_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %11 = add i32 %5, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
		main_10_11 = (main_3_5_reg + l1_1_i_stage0);
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %11 = add i32 %5, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_11_reg <= main_10_11;
		if (start == 1'b0 && ^(main_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %scevgep7 = getelementptr [10000 x float]* %1, i32 0, i32 %11, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
		main_10_scevgep7 = (1'd0 + (4 * main_10_11_reg_stage0));
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %scevgep7 = getelementptr [10000 x float]* %1, i32 0, i32 %11, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1))) begin
		main_10_scevgep7_reg <= main_10_scevgep7;
		if (start == 1'b0 && ^(main_10_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %12 = add i32 %6, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
		main_10_12 = (main_3_6_reg + l1_1_i_stage0);
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %12 = add i32 %6, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_12_reg <= main_10_12;
		if (start == 1'b0 && ^(main_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %scevgep6 = getelementptr [10000 x float]* %1, i32 0, i32 %12, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
		main_10_scevgep6 = (1'd0 + (4 * main_10_12_reg_stage0));
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %scevgep6 = getelementptr [10000 x float]* %1, i32 0, i32 %12, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1))) begin
		main_10_scevgep6_reg <= main_10_scevgep6;
		if (start == 1'b0 && ^(main_10_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %13 = add i32 %7, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
		main_10_13 = (main_3_7_reg + l1_1_i_stage0);
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %13 = add i32 %7, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_13_reg <= main_10_13;
		if (start == 1'b0 && ^(main_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %scevgep5 = getelementptr [10000 x float]* %1, i32 0, i32 %13, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
		main_10_scevgep5 = (1'd0 + (4 * main_10_13_reg_stage0));
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %scevgep5 = getelementptr [10000 x float]* %1, i32 0, i32 %13, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1))) begin
		main_10_scevgep5_reg <= main_10_scevgep5;
		if (start == 1'b0 && ^(main_10_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %14 = add i32 %8, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
		main_10_14 = (main_3_8_reg + l1_1_i_stage0);
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %14 = add i32 %8, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_14_reg <= main_10_14;
		if (start == 1'b0 && ^(main_10_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %scevgep4 = getelementptr [10000 x float]* %1, i32 0, i32 %14, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
		main_10_scevgep4 = (1'd0 + (4 * main_10_14_reg_stage0));
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %scevgep4 = getelementptr [10000 x float]* %1, i32 0, i32 %14, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1))) begin
		main_10_scevgep4_reg <= main_10_scevgep4;
		if (start == 1'b0 && ^(main_10_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %15 = add i32 %9, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
		main_10_15 = (main_3_9_reg + l1_1_i_stage0);
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %15 = add i32 %9, %indvar, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_15_reg <= main_10_15;
		if (start == 1'b0 && ^(main_10_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %scevgep = getelementptr [10000 x float]* %1, i32 0, i32 %15, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
		main_10_scevgep = (1'd0 + (4 * main_10_15_reg_stage0));
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %scevgep = getelementptr [10000 x float]* %1, i32 0, i32 %15, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 1 % 74 = 1*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1))) begin
		main_10_scevgep_reg <= main_10_scevgep;
		if (start == 1'b0 && ^(main_10_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %16 = load float* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 2 % 74 = 2*/
		main_10_16 = main_0_1_out_a;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %16 = load float* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 2 % 74 = 2*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd2) & l1_1_valid_bit_2))) begin
		main_10_16_reg <= main_10_16;
		if (start == 1'b0 && ^(main_10_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %17 = load float* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 2 % 74 = 2*/
		main_10_17 = main_0_1_out_b;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %17 = load float* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 2 % 74 = 2*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd2) & l1_1_valid_bit_2))) begin
		main_10_17_reg <= main_10_17;
		if (start == 1'b0 && ^(main_10_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_17_reg"); $finish; end
	end
end
always @(*) begin
	main_10_18 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %18 = fadd float %16, %17, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 16 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 16 % 74 = 16*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd16) & l1_1_valid_bit_16))) begin
		main_10_18_reg <= main_10_18;
		if (start == 1'b0 && ^(main_10_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_18_reg"); $finish; end
	end
	/* main: %10*/
	/*   %18 = fadd float %16, %17, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 16 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 16 % 74 = 16*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd16) & l1_1_valid_bit_16))) begin
		main_10_18_reg <= main_10_18;
		if (start == 1'b0 && ^(main_10_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %19 = load float* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 3 % 74 = 3*/
		main_10_19 = main_0_1_out_a;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %19 = load float* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 3 % 74 = 3*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd3) & l1_1_valid_bit_3))) begin
		main_10_19_reg <= main_10_19;
		if (start == 1'b0 && ^(main_10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_19_reg"); $finish; end
	end
end
always @(*) begin
	main_10_20 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %20 = fadd float %18, %19, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 16 avail_time: 30 stage: 0 II: 74 start_ii_state = 16 % 74 = 16 avail_ii_state = 30 % 74 = 30*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd30) & l1_1_valid_bit_30))) begin
		main_10_20_reg <= main_10_20;
		if (start == 1'b0 && ^(main_10_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_20_reg"); $finish; end
	end
	/* main: %10*/
	/*   %20 = fadd float %18, %19, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 16 avail_time: 30 stage: 0 II: 74 start_ii_state = 16 % 74 = 16 avail_ii_state = 30 % 74 = 30*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd30) & l1_1_valid_bit_30))) begin
		main_10_20_reg <= main_10_20;
		if (start == 1'b0 && ^(main_10_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %21 = load float* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 3 % 74 = 3*/
		main_10_21 = main_0_1_out_b;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %21 = load float* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 3 % 74 = 3*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd3) & l1_1_valid_bit_3))) begin
		main_10_21_reg <= main_10_21;
		if (start == 1'b0 && ^(main_10_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_21_reg"); $finish; end
	end
end
always @(*) begin
	main_10_22 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %22 = fadd float %20, %21, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !3
	start_time: 30 avail_time: 44 stage: 0 II: 74 start_ii_state = 30 % 74 = 30 avail_ii_state = 44 % 74 = 44*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd44) & l1_1_valid_bit_44))) begin
		main_10_22_reg <= main_10_22;
		if (start == 1'b0 && ^(main_10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_22_reg"); $finish; end
	end
	/* main: %10*/
	/*   %22 = fadd float %20, %21, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !3
	start_time: 30 avail_time: 44 stage: 0 II: 74 start_ii_state = 30 % 74 = 30 avail_ii_state = 44 % 74 = 44*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd44) & l1_1_valid_bit_44))) begin
		main_10_22_reg <= main_10_22;
		if (start == 1'b0 && ^(main_10_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %23 = load float* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 74 start_ii_state = 3 % 74 = 3 avail_ii_state = 4 % 74 = 4*/
		main_10_23 = main_0_1_out_b;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %23 = load float* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 74 start_ii_state = 3 % 74 = 3 avail_ii_state = 4 % 74 = 4*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd4) & l1_1_valid_bit_4))) begin
		main_10_23_reg <= main_10_23;
		if (start == 1'b0 && ^(main_10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_23_reg"); $finish; end
	end
end
always @(*) begin
	main_10_24 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %24 = fadd float %22, %23, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !14, !legup.pipeline.stage !3
	start_time: 44 avail_time: 58 stage: 0 II: 74 start_ii_state = 44 % 74 = 44 avail_ii_state = 58 % 74 = 58*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd58) & l1_1_valid_bit_58))) begin
		main_10_24_reg <= main_10_24;
		if (start == 1'b0 && ^(main_10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_24_reg"); $finish; end
	end
	/* main: %10*/
	/*   %24 = fadd float %22, %23, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !14, !legup.pipeline.stage !3
	start_time: 44 avail_time: 58 stage: 0 II: 74 start_ii_state = 44 % 74 = 44 avail_ii_state = 58 % 74 = 58*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd58) & l1_1_valid_bit_58))) begin
		main_10_24_reg <= main_10_24;
		if (start == 1'b0 && ^(main_10_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_24_reg"); $finish; end
	end
end
always @(*) begin
	main_10_25 = main_altfp_extend_32_0;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %25 = fpext float %24 to double, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !3
	start_time: 58 avail_time: 60 stage: 0 II: 74 start_ii_state = 58 % 74 = 58 avail_ii_state = 60 % 74 = 60*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd60) & l1_1_valid_bit_60))) begin
		main_10_25_reg <= main_10_25;
		if (start == 1'b0 && ^(main_10_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_25_reg"); $finish; end
	end
	/* main: %10*/
	/*   %25 = fpext float %24 to double, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !3
	start_time: 58 avail_time: 60 stage: 0 II: 74 start_ii_state = 58 % 74 = 58 avail_ii_state = 60 % 74 = 60*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd60) & l1_1_valid_bit_60))) begin
		main_10_25_reg <= main_10_25;
		if (start == 1'b0 && ^(main_10_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_25_reg"); $finish; end
	end
end
always @(*) begin
	main_10_26 = main_altfp_multiply_64_0;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %26 = fmul double %25, 2.000000e-01, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !3
	start_time: 60 avail_time: 71 stage: 0 II: 74 start_ii_state = 60 % 74 = 60 avail_ii_state = 71 % 74 = 71*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd71) & l1_1_valid_bit_71))) begin
		main_10_26_reg <= main_10_26;
		if (start == 1'b0 && ^(main_10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_26_reg"); $finish; end
	end
	/* main: %10*/
	/*   %26 = fmul double %25, 2.000000e-01, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !3
	start_time: 60 avail_time: 71 stage: 0 II: 74 start_ii_state = 60 % 74 = 60 avail_ii_state = 71 % 74 = 71*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd71) & l1_1_valid_bit_71))) begin
		main_10_26_reg <= main_10_26;
		if (start == 1'b0 && ^(main_10_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_26_reg"); $finish; end
	end
end
always @(*) begin
	main_10_27 = main_altfp_truncate_64_0;
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %27 = fptrunc double %26 to float, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 71 avail_time: 74 stage: 0 II: 74 start_ii_state = 71 % 74 = 71 avail_ii_state = 74 % 74 = 0*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_74))) begin
		main_10_27_reg <= main_10_27;
		if (start == 1'b0 && ^(main_10_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_27_reg"); $finish; end
	end
	/* main: %10*/
	/*   %27 = fptrunc double %26 to float, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 71 avail_time: 74 stage: 0 II: 74 start_ii_state = 71 % 74 = 71 avail_ii_state = 74 % 74 = 0*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_74))) begin
		main_10_27_reg <= main_10_27;
		if (start == 1'b0 && ^(main_10_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_27_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %10*/
	/*   %indvar.next = add i32 %indvar, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
		main_10_indvarnext = (l1_1_i_stage0 + 32'd1);
end
always @(posedge clk) begin
	/* main: %10*/
	/*   %indvar.next = add i32 %indvar, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 74 start_ii_state = 0 % 74 = 0 avail_ii_state = 0 % 74 = 0*/
	if ((~(memory_controller_waitrequest) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_indvarnext_reg <= main_10_indvarnext;
		if (start == 1'b0 && ^(main_10_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
		main_10_exitcond1 = l1_1_pipeline_finish;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_loop_pipeline_wait_l1_1_5)) begin
		main_10_exitcond1_reg <= l1_1_pipeline_finish;
		if (start == 1'b0 && ^(l1_1_pipeline_finish) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_exitcond1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %indvar.next3 = add i32 %indvar2, 1*/
		main_28_indvarnext3 = (main_3_indvar2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %indvar.next3 = add i32 %indvar2, 1*/
	if ((cur_state == LEGUP_F_main_BB__28_6)) begin
		main_28_indvarnext3_reg <= main_28_indvarnext3;
		if (start == 1'b0 && ^(main_28_indvarnext3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_indvarnext3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %28*/
	/*   %exitcond = icmp eq i32 %indvar.next3, 98*/
		main_28_exitcond = (main_28_indvarnext3 == 32'd98);
end
always @(posedge clk) begin
	/* main: %28*/
	/*   %exitcond = icmp eq i32 %indvar.next3, 98*/
	if ((cur_state == LEGUP_F_main_BB__28_6)) begin
		main_28_exitcond_reg <= main_28_exitcond;
		if (start == 1'b0 && ^(main_28_exitcond) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_28_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %30 = add nsw i32 %t.03, 1*/
		main_29_30 = (main_2_t03_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %30 = add nsw i32 %t.03, 1*/
	if ((cur_state == LEGUP_F_main_BB__29_7)) begin
		main_29_30_reg <= main_29_30;
		if (start == 1'b0 && ^(main_29_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %29*/
	/*   %exitcond13 = icmp eq i32 %30, 100*/
		main_29_exitcond13 = (main_29_30 == 32'd100);
end
always @(posedge clk) begin
	/* main: %29*/
	/*   %exitcond13 = icmp eq i32 %30, 100*/
	if ((cur_state == LEGUP_F_main_BB__29_7)) begin
		main_29_exitcond13_reg <= main_29_exitcond13;
		if (start == 1'b0 && ^(main_29_exitcond13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_29_exitcond13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %32 = getelementptr inbounds [10000 x float]* %1, i32 0, i32 9999*/
if (reset) begin main_31_32 = 0; end
		main_31_32 = (1'd0 + (4 * 32'd9999));
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %32 = getelementptr inbounds [10000 x float]* %1, i32 0, i32 9999*/
	if ((cur_state == LEGUP_F_main_BB__31_8)) begin
		main_31_32_reg <= main_31_32;
		if (start == 1'b0 && ^(main_31_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_32_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %31*/
	/*   %33 = load float* %32, align 4, !tbaa !4*/
		main_31_33 = main_0_1_out_a;
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %33 = load float* %32, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__31_9)) begin
		main_31_33_reg <= main_31_33;
		if (start == 1'b0 && ^(main_31_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_33_reg"); $finish; end
	end
end
always @(*) begin
	main_31_34 = main_altfp_fptosi_32_0;
end
always @(posedge clk) begin
	/* main: %31*/
	/*   %34 = fptosi float %33 to i32*/
	if ((cur_state == LEGUP_F_main_BB__31_15)) begin
		main_31_34_reg <= main_31_34;
		if (start == 1'b0 && ^(main_31_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_34_reg"); $finish; end
	end
	/* main: %31*/
	/*   %34 = fptosi float %33 to i32*/
	if ((cur_state == LEGUP_F_main_BB__31_15)) begin
		main_31_34_reg <= main_31_34;
		if (start == 1'b0 && ^(main_31_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_31_34_reg"); $finish; end
	end
end
always @(*) begin
	main_0_1_address_a = 1'd0;
	/* main: %10*/
	/*   %16 = load float* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 2 % 74 = 2*/
	if (((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1)) begin
		main_0_1_address_a = (main_10_scevgep7 >>> 3'd2);
	end
	/* main: %10*/
	/*   %19 = load float* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 3 % 74 = 3*/
	if (((l1_1_ii_state == 7'd2) & l1_1_valid_bit_2)) begin
		main_0_1_address_a = (main_10_scevgep5_reg_stage0 >>> 3'd2);
	end
	/* main: %10*/
	/*   store float %27, float* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !18, !legup.pipeline.stage !2
	start_time: 74 avail_time: 75 stage: 1 II: 74 start_ii_state = 74 % 74 = 0 avail_ii_state = 75 % 74 = 1*/
	if (((l1_1_ii_state == 7'd0) & l1_1_valid_bit_74)) begin
		main_0_1_address_a = (main_10_scevgep7_reg_stage1 >>> 3'd2);
	end
	/* main: %31*/
	/*   %33 = load float* %32, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__31_8)) begin
		main_0_1_address_a = (main_31_32 >>> 3'd2);
	end
end
always @(*) begin
	main_0_1_write_enable_a = 1'd0;
	/* main: %10*/
	/*   %16 = load float* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 2 % 74 = 2*/
	if (((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1)) begin
		main_0_1_write_enable_a = 1'd0;
	end
	/* main: %10*/
	/*   %19 = load float* %scevgep5, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 3 % 74 = 3*/
	if (((l1_1_ii_state == 7'd2) & l1_1_valid_bit_2)) begin
		main_0_1_write_enable_a = 1'd0;
	end
	/* main: %10*/
	/*   store float %27, float* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !18, !legup.pipeline.stage !2
	start_time: 74 avail_time: 75 stage: 1 II: 74 start_ii_state = 74 % 74 = 0 avail_ii_state = 75 % 74 = 1*/
	if (((l1_1_ii_state == 7'd0) & l1_1_valid_bit_74)) begin
		main_0_1_write_enable_a = 1'd1;
	end
	/* main: %31*/
	/*   %33 = load float* %32, align 4, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__31_8)) begin
		main_0_1_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_1_in_a = 1'd0;
	/* main: %10*/
	/*   store float %27, float* %scevgep7, align 4, !tbaa !4, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !18, !legup.pipeline.stage !2
	start_time: 74 avail_time: 75 stage: 1 II: 74 start_ii_state = 74 % 74 = 0 avail_ii_state = 75 % 74 = 1*/
	if (((l1_1_ii_state == 7'd0) & l1_1_valid_bit_74)) begin
		main_0_1_in_a = main_10_27;
	end
end
always @(*) begin
	main_0_1_address_b = 1'd0;
	/* main: %10*/
	/*   %17 = load float* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 2 % 74 = 2*/
	if (((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1)) begin
		main_0_1_address_b = (main_10_scevgep6 >>> 3'd2);
	end
	/* main: %10*/
	/*   %21 = load float* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 3 % 74 = 3*/
	if (((l1_1_ii_state == 7'd2) & l1_1_valid_bit_2)) begin
		main_0_1_address_b = (main_10_scevgep4_reg_stage0 >>> 3'd2);
	end
	/* main: %10*/
	/*   %23 = load float* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 74 start_ii_state = 3 % 74 = 3 avail_ii_state = 4 % 74 = 4*/
	if (((l1_1_ii_state == 7'd3) & l1_1_valid_bit_3)) begin
		main_0_1_address_b = (main_10_scevgep_reg_stage0 >>> 3'd2);
	end
end
always @(*) begin
	main_0_1_write_enable_b = 1'd0;
	/* main: %10*/
	/*   %17 = load float* %scevgep6, align 4, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 1 avail_time: 2 stage: 0 II: 74 start_ii_state = 1 % 74 = 1 avail_ii_state = 2 % 74 = 2*/
	if (((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1)) begin
		main_0_1_write_enable_b = 1'd0;
	end
	/* main: %10*/
	/*   %21 = load float* %scevgep4, align 4, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 2 avail_time: 3 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 3 % 74 = 3*/
	if (((l1_1_ii_state == 7'd2) & l1_1_valid_bit_2)) begin
		main_0_1_write_enable_b = 1'd0;
	end
	/* main: %10*/
	/*   %23 = load float* %scevgep, align 4, !tbaa !4, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 3 avail_time: 4 stage: 0 II: 74 start_ii_state = 3 % 74 = 3 avail_ii_state = 4 % 74 = 4*/
	if (((l1_1_ii_state == 7'd3) & l1_1_valid_bit_3)) begin
		main_0_1_write_enable_b = 1'd0;
	end
end
always @(*) begin
	l1_1_pipeline_start = 1'd0;
	if (reset) begin
		l1_1_pipeline_start = 1'd0;
	end
	if (((cur_state == LEGUP_F_main_BB__3_4) & (memory_controller_waitrequest == 1'd0))) begin
		l1_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		l1_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_pipeline_start & ~(l1_1_started)))) begin
		l1_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_epilogue & (~(l1_1_valid_bit_74) & l1_1_valid_bit_75)))) begin
		l1_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		l1_1_ii_state <= 7'd0;
		if (start == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_pipeline_start & ~(l1_1_started)))) begin
		l1_1_ii_state <= 7'd0;
		if (start == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd0))) begin
		l1_1_ii_state <= 7'd1;
		if (start == 1'b0 && ^(7'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd1))) begin
		l1_1_ii_state <= 7'd2;
		if (start == 1'b0 && ^(7'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd2))) begin
		l1_1_ii_state <= 7'd3;
		if (start == 1'b0 && ^(7'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd3))) begin
		l1_1_ii_state <= 7'd4;
		if (start == 1'b0 && ^(7'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd4))) begin
		l1_1_ii_state <= 7'd5;
		if (start == 1'b0 && ^(7'd5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd5))) begin
		l1_1_ii_state <= 7'd6;
		if (start == 1'b0 && ^(7'd6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd6))) begin
		l1_1_ii_state <= 7'd7;
		if (start == 1'b0 && ^(7'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd7))) begin
		l1_1_ii_state <= 7'd8;
		if (start == 1'b0 && ^(7'd8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd8))) begin
		l1_1_ii_state <= 7'd9;
		if (start == 1'b0 && ^(7'd9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd9))) begin
		l1_1_ii_state <= 7'd10;
		if (start == 1'b0 && ^(7'd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd10))) begin
		l1_1_ii_state <= 7'd11;
		if (start == 1'b0 && ^(7'd11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd11))) begin
		l1_1_ii_state <= 7'd12;
		if (start == 1'b0 && ^(7'd12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd12))) begin
		l1_1_ii_state <= 7'd13;
		if (start == 1'b0 && ^(7'd13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd13))) begin
		l1_1_ii_state <= 7'd14;
		if (start == 1'b0 && ^(7'd14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd14))) begin
		l1_1_ii_state <= 7'd15;
		if (start == 1'b0 && ^(7'd15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd15))) begin
		l1_1_ii_state <= 7'd16;
		if (start == 1'b0 && ^(7'd16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd16))) begin
		l1_1_ii_state <= 7'd17;
		if (start == 1'b0 && ^(7'd17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd17))) begin
		l1_1_ii_state <= 7'd18;
		if (start == 1'b0 && ^(7'd18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd18))) begin
		l1_1_ii_state <= 7'd19;
		if (start == 1'b0 && ^(7'd19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd19))) begin
		l1_1_ii_state <= 7'd20;
		if (start == 1'b0 && ^(7'd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd20))) begin
		l1_1_ii_state <= 7'd21;
		if (start == 1'b0 && ^(7'd21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd21))) begin
		l1_1_ii_state <= 7'd22;
		if (start == 1'b0 && ^(7'd22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd22))) begin
		l1_1_ii_state <= 7'd23;
		if (start == 1'b0 && ^(7'd23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd23))) begin
		l1_1_ii_state <= 7'd24;
		if (start == 1'b0 && ^(7'd24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd24))) begin
		l1_1_ii_state <= 7'd25;
		if (start == 1'b0 && ^(7'd25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd25))) begin
		l1_1_ii_state <= 7'd26;
		if (start == 1'b0 && ^(7'd26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd26))) begin
		l1_1_ii_state <= 7'd27;
		if (start == 1'b0 && ^(7'd27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd27))) begin
		l1_1_ii_state <= 7'd28;
		if (start == 1'b0 && ^(7'd28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd28))) begin
		l1_1_ii_state <= 7'd29;
		if (start == 1'b0 && ^(7'd29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd29))) begin
		l1_1_ii_state <= 7'd30;
		if (start == 1'b0 && ^(7'd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd30))) begin
		l1_1_ii_state <= 7'd31;
		if (start == 1'b0 && ^(7'd31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd31))) begin
		l1_1_ii_state <= 7'd32;
		if (start == 1'b0 && ^(7'd32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd32))) begin
		l1_1_ii_state <= 7'd33;
		if (start == 1'b0 && ^(7'd33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd33))) begin
		l1_1_ii_state <= 7'd34;
		if (start == 1'b0 && ^(7'd34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd34))) begin
		l1_1_ii_state <= 7'd35;
		if (start == 1'b0 && ^(7'd35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd35))) begin
		l1_1_ii_state <= 7'd36;
		if (start == 1'b0 && ^(7'd36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd36))) begin
		l1_1_ii_state <= 7'd37;
		if (start == 1'b0 && ^(7'd37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd37))) begin
		l1_1_ii_state <= 7'd38;
		if (start == 1'b0 && ^(7'd38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd38))) begin
		l1_1_ii_state <= 7'd39;
		if (start == 1'b0 && ^(7'd39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd39))) begin
		l1_1_ii_state <= 7'd40;
		if (start == 1'b0 && ^(7'd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd40))) begin
		l1_1_ii_state <= 7'd41;
		if (start == 1'b0 && ^(7'd41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd41))) begin
		l1_1_ii_state <= 7'd42;
		if (start == 1'b0 && ^(7'd42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd42))) begin
		l1_1_ii_state <= 7'd43;
		if (start == 1'b0 && ^(7'd43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd43))) begin
		l1_1_ii_state <= 7'd44;
		if (start == 1'b0 && ^(7'd44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd44))) begin
		l1_1_ii_state <= 7'd45;
		if (start == 1'b0 && ^(7'd45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd45))) begin
		l1_1_ii_state <= 7'd46;
		if (start == 1'b0 && ^(7'd46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd46))) begin
		l1_1_ii_state <= 7'd47;
		if (start == 1'b0 && ^(7'd47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd47))) begin
		l1_1_ii_state <= 7'd48;
		if (start == 1'b0 && ^(7'd48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd48))) begin
		l1_1_ii_state <= 7'd49;
		if (start == 1'b0 && ^(7'd49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd49))) begin
		l1_1_ii_state <= 7'd50;
		if (start == 1'b0 && ^(7'd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd50))) begin
		l1_1_ii_state <= 7'd51;
		if (start == 1'b0 && ^(7'd51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd51))) begin
		l1_1_ii_state <= 7'd52;
		if (start == 1'b0 && ^(7'd52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd52))) begin
		l1_1_ii_state <= 7'd53;
		if (start == 1'b0 && ^(7'd53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd53))) begin
		l1_1_ii_state <= 7'd54;
		if (start == 1'b0 && ^(7'd54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd54))) begin
		l1_1_ii_state <= 7'd55;
		if (start == 1'b0 && ^(7'd55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd55))) begin
		l1_1_ii_state <= 7'd56;
		if (start == 1'b0 && ^(7'd56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd56))) begin
		l1_1_ii_state <= 7'd57;
		if (start == 1'b0 && ^(7'd57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd57))) begin
		l1_1_ii_state <= 7'd58;
		if (start == 1'b0 && ^(7'd58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd58))) begin
		l1_1_ii_state <= 7'd59;
		if (start == 1'b0 && ^(7'd59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd59))) begin
		l1_1_ii_state <= 7'd60;
		if (start == 1'b0 && ^(7'd60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd60))) begin
		l1_1_ii_state <= 7'd61;
		if (start == 1'b0 && ^(7'd61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd61))) begin
		l1_1_ii_state <= 7'd62;
		if (start == 1'b0 && ^(7'd62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd62))) begin
		l1_1_ii_state <= 7'd63;
		if (start == 1'b0 && ^(7'd63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd63))) begin
		l1_1_ii_state <= 7'd64;
		if (start == 1'b0 && ^(7'd64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd64))) begin
		l1_1_ii_state <= 7'd65;
		if (start == 1'b0 && ^(7'd65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd65))) begin
		l1_1_ii_state <= 7'd66;
		if (start == 1'b0 && ^(7'd66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd66))) begin
		l1_1_ii_state <= 7'd67;
		if (start == 1'b0 && ^(7'd67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd67))) begin
		l1_1_ii_state <= 7'd68;
		if (start == 1'b0 && ^(7'd68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd68))) begin
		l1_1_ii_state <= 7'd69;
		if (start == 1'b0 && ^(7'd69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd69))) begin
		l1_1_ii_state <= 7'd70;
		if (start == 1'b0 && ^(7'd70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd70))) begin
		l1_1_ii_state <= 7'd71;
		if (start == 1'b0 && ^(7'd71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd71))) begin
		l1_1_ii_state <= 7'd72;
		if (start == 1'b0 && ^(7'd72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd72))) begin
		l1_1_ii_state <= 7'd73;
		if (start == 1'b0 && ^(7'd73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd73))) begin
		l1_1_ii_state <= 7'd0;
		if (start == 1'b0 && ^(7'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		l1_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_pipeline_start & ~(l1_1_started)))) begin
		l1_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd73)) & l1_1_valid_bit_73))) begin
		l1_1_i_stage0 <= (l1_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((l1_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_i_stage0"); $finish; end
	end
	if (reset) begin
		l1_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		l1_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_started & ((l1_1_ii_state == 7'd0) & l1_1_pipeline_exit_cond)))) begin
		l1_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_epilogue & (~(l1_1_valid_bit_74) & l1_1_valid_bit_75)))) begin
		l1_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (l1_1_pipeline_start & ~(l1_1_started))) | ((l1_1_started & ~(l1_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (l1_1_started & ((l1_1_ii_state == 7'd0) & l1_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (l1_1_pipeline_start & ~(l1_1_started))) | ((l1_1_started & ~(l1_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (l1_1_started & ((l1_1_ii_state == 7'd0) & l1_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_1 <= l1_1_valid_bit_0;
		if (start == 1'b0 && ^(l1_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_2 <= l1_1_valid_bit_1;
		if (start == 1'b0 && ^(l1_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_3 <= l1_1_valid_bit_2;
		if (start == 1'b0 && ^(l1_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_4 <= l1_1_valid_bit_3;
		if (start == 1'b0 && ^(l1_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_5 <= l1_1_valid_bit_4;
		if (start == 1'b0 && ^(l1_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_6 <= l1_1_valid_bit_5;
		if (start == 1'b0 && ^(l1_1_valid_bit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_6"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_6 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_6"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_7 <= l1_1_valid_bit_6;
		if (start == 1'b0 && ^(l1_1_valid_bit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_7"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_7 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_7"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_8 <= l1_1_valid_bit_7;
		if (start == 1'b0 && ^(l1_1_valid_bit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_8"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_8 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_8"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_9 <= l1_1_valid_bit_8;
		if (start == 1'b0 && ^(l1_1_valid_bit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_9"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_9 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_9"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_10 <= l1_1_valid_bit_9;
		if (start == 1'b0 && ^(l1_1_valid_bit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_10"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_10 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_10"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_11 <= l1_1_valid_bit_10;
		if (start == 1'b0 && ^(l1_1_valid_bit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_11"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_11 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_11"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_12 <= l1_1_valid_bit_11;
		if (start == 1'b0 && ^(l1_1_valid_bit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_12"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_12 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_12"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_13 <= l1_1_valid_bit_12;
		if (start == 1'b0 && ^(l1_1_valid_bit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_13"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_13 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_13"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_14 <= l1_1_valid_bit_13;
		if (start == 1'b0 && ^(l1_1_valid_bit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_14"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_14 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_14"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_15 <= l1_1_valid_bit_14;
		if (start == 1'b0 && ^(l1_1_valid_bit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_15"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_15 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_15"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_16 <= l1_1_valid_bit_15;
		if (start == 1'b0 && ^(l1_1_valid_bit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_16"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_16 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_16"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_17 <= l1_1_valid_bit_16;
		if (start == 1'b0 && ^(l1_1_valid_bit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_17"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_17 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_17"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_18 <= l1_1_valid_bit_17;
		if (start == 1'b0 && ^(l1_1_valid_bit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_18"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_18 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_18"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_19 <= l1_1_valid_bit_18;
		if (start == 1'b0 && ^(l1_1_valid_bit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_19"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_19 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_19"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_20 <= l1_1_valid_bit_19;
		if (start == 1'b0 && ^(l1_1_valid_bit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_20"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_20 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_20"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_21 <= l1_1_valid_bit_20;
		if (start == 1'b0 && ^(l1_1_valid_bit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_21"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_21 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_21"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_22 <= l1_1_valid_bit_21;
		if (start == 1'b0 && ^(l1_1_valid_bit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_22"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_22 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_22"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_23 <= l1_1_valid_bit_22;
		if (start == 1'b0 && ^(l1_1_valid_bit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_23"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_23 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_23"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_24 <= l1_1_valid_bit_23;
		if (start == 1'b0 && ^(l1_1_valid_bit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_24"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_24 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_24"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_25 <= l1_1_valid_bit_24;
		if (start == 1'b0 && ^(l1_1_valid_bit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_25"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_25 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_25"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_26 <= l1_1_valid_bit_25;
		if (start == 1'b0 && ^(l1_1_valid_bit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_26"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_26 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_26"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_27 <= l1_1_valid_bit_26;
		if (start == 1'b0 && ^(l1_1_valid_bit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_27"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_27 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_27"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_28 <= l1_1_valid_bit_27;
		if (start == 1'b0 && ^(l1_1_valid_bit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_28"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_28 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_28"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_29 <= l1_1_valid_bit_28;
		if (start == 1'b0 && ^(l1_1_valid_bit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_29"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_29 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_29"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_30 <= l1_1_valid_bit_29;
		if (start == 1'b0 && ^(l1_1_valid_bit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_30"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_30 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_30"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_31 <= l1_1_valid_bit_30;
		if (start == 1'b0 && ^(l1_1_valid_bit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_31"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_31 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_31"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_32 <= l1_1_valid_bit_31;
		if (start == 1'b0 && ^(l1_1_valid_bit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_32"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_32 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_32"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_33 <= l1_1_valid_bit_32;
		if (start == 1'b0 && ^(l1_1_valid_bit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_33"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_33 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_33"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_34 <= l1_1_valid_bit_33;
		if (start == 1'b0 && ^(l1_1_valid_bit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_34"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_34 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_34"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_35 <= l1_1_valid_bit_34;
		if (start == 1'b0 && ^(l1_1_valid_bit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_35"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_35 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_35"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_36 <= l1_1_valid_bit_35;
		if (start == 1'b0 && ^(l1_1_valid_bit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_36"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_36 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_36"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_37 <= l1_1_valid_bit_36;
		if (start == 1'b0 && ^(l1_1_valid_bit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_37"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_37 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_37"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_38 <= l1_1_valid_bit_37;
		if (start == 1'b0 && ^(l1_1_valid_bit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_38"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_38 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_38"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_39 <= l1_1_valid_bit_38;
		if (start == 1'b0 && ^(l1_1_valid_bit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_39"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_39 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_39"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_40 <= l1_1_valid_bit_39;
		if (start == 1'b0 && ^(l1_1_valid_bit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_40"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_40 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_40"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_41 <= l1_1_valid_bit_40;
		if (start == 1'b0 && ^(l1_1_valid_bit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_41"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_41 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_41"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_42 <= l1_1_valid_bit_41;
		if (start == 1'b0 && ^(l1_1_valid_bit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_42"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_42 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_42"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_43 <= l1_1_valid_bit_42;
		if (start == 1'b0 && ^(l1_1_valid_bit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_43"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_43 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_43"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_44 <= l1_1_valid_bit_43;
		if (start == 1'b0 && ^(l1_1_valid_bit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_44"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_44 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_44"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_45 <= l1_1_valid_bit_44;
		if (start == 1'b0 && ^(l1_1_valid_bit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_45"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_45 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_45"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_46 <= l1_1_valid_bit_45;
		if (start == 1'b0 && ^(l1_1_valid_bit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_46"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_46 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_46"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_47 <= l1_1_valid_bit_46;
		if (start == 1'b0 && ^(l1_1_valid_bit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_47"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_47 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_47"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_48 <= l1_1_valid_bit_47;
		if (start == 1'b0 && ^(l1_1_valid_bit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_48"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_48 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_48"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_49 <= l1_1_valid_bit_48;
		if (start == 1'b0 && ^(l1_1_valid_bit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_49"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_49 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_49"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_50 <= l1_1_valid_bit_49;
		if (start == 1'b0 && ^(l1_1_valid_bit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_50"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_50 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_50"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_51 <= l1_1_valid_bit_50;
		if (start == 1'b0 && ^(l1_1_valid_bit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_51"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_51 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_51"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_52 <= l1_1_valid_bit_51;
		if (start == 1'b0 && ^(l1_1_valid_bit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_52"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_52 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_52"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_53 <= l1_1_valid_bit_52;
		if (start == 1'b0 && ^(l1_1_valid_bit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_53"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_53 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_53"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_54 <= l1_1_valid_bit_53;
		if (start == 1'b0 && ^(l1_1_valid_bit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_54"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_54 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_54"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_55 <= l1_1_valid_bit_54;
		if (start == 1'b0 && ^(l1_1_valid_bit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_55"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_55 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_55"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_56 <= l1_1_valid_bit_55;
		if (start == 1'b0 && ^(l1_1_valid_bit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_56"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_56 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_56"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_57 <= l1_1_valid_bit_56;
		if (start == 1'b0 && ^(l1_1_valid_bit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_57"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_57 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_57"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_58 <= l1_1_valid_bit_57;
		if (start == 1'b0 && ^(l1_1_valid_bit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_58"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_58 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_58"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_59 <= l1_1_valid_bit_58;
		if (start == 1'b0 && ^(l1_1_valid_bit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_59"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_59 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_59"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_60 <= l1_1_valid_bit_59;
		if (start == 1'b0 && ^(l1_1_valid_bit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_60"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_60 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_60"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_61 <= l1_1_valid_bit_60;
		if (start == 1'b0 && ^(l1_1_valid_bit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_61"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_61 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_61"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_62 <= l1_1_valid_bit_61;
		if (start == 1'b0 && ^(l1_1_valid_bit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_62"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_62 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_62"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_63 <= l1_1_valid_bit_62;
		if (start == 1'b0 && ^(l1_1_valid_bit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_63"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_63 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_63"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_64 <= l1_1_valid_bit_63;
		if (start == 1'b0 && ^(l1_1_valid_bit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_64"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_64 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_64"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_65 <= l1_1_valid_bit_64;
		if (start == 1'b0 && ^(l1_1_valid_bit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_65"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_65 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_65"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_66 <= l1_1_valid_bit_65;
		if (start == 1'b0 && ^(l1_1_valid_bit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_66"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_66 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_66"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_67 <= l1_1_valid_bit_66;
		if (start == 1'b0 && ^(l1_1_valid_bit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_67"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_67 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_67"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_68 <= l1_1_valid_bit_67;
		if (start == 1'b0 && ^(l1_1_valid_bit_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_68"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_68 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_68"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_69 <= l1_1_valid_bit_68;
		if (start == 1'b0 && ^(l1_1_valid_bit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_69"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_69 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_69"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_70 <= l1_1_valid_bit_69;
		if (start == 1'b0 && ^(l1_1_valid_bit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_70"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_70 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_70"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_71 <= l1_1_valid_bit_70;
		if (start == 1'b0 && ^(l1_1_valid_bit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_71"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_71 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_71"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_72 <= l1_1_valid_bit_71;
		if (start == 1'b0 && ^(l1_1_valid_bit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_72"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_72 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_72"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_73 <= l1_1_valid_bit_72;
		if (start == 1'b0 && ^(l1_1_valid_bit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_73"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_73 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_73"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_74 <= l1_1_valid_bit_73;
		if (start == 1'b0 && ^(l1_1_valid_bit_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_74"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_74 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_74"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		l1_1_valid_bit_75 <= l1_1_valid_bit_74;
		if (start == 1'b0 && ^(l1_1_valid_bit_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_75"); $finish; end
	end
	if (reset) begin
		l1_1_valid_bit_75 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_valid_bit_75"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_pipeline_start & ~(l1_1_started)))) begin
		l1_1_i_stage1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_i_stage1"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (l1_1_ii_state == 7'd73))) begin
		l1_1_i_stage1 <= l1_1_i_stage0;
		if (start == 1'b0 && ^(l1_1_i_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_i_stage1"); $finish; end
	end
	if (reset) begin
		l1_1_i_stage1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to l1_1_i_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_11_reg_stage0 <= main_10_11;
		if (start == 1'b0 && ^(main_10_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_11_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1))) begin
		main_10_scevgep7_reg_stage0 <= main_10_scevgep7;
		if (start == 1'b0 && ^(main_10_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep7_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd73) & l1_1_valid_bit_73))) begin
		main_10_scevgep7_reg_stage1 <= main_10_scevgep7_reg_stage0;
		if (start == 1'b0 && ^(main_10_scevgep7_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep7_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_12_reg_stage0 <= main_10_12;
		if (start == 1'b0 && ^(main_10_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_12_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_13_reg_stage0 <= main_10_13;
		if (start == 1'b0 && ^(main_10_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_13_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1))) begin
		main_10_scevgep5_reg_stage0 <= main_10_scevgep5;
		if (start == 1'b0 && ^(main_10_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep5_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_14_reg_stage0 <= main_10_14;
		if (start == 1'b0 && ^(main_10_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_14_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1))) begin
		main_10_scevgep4_reg_stage0 <= main_10_scevgep4;
		if (start == 1'b0 && ^(main_10_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep4_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd0) & l1_1_valid_bit_0))) begin
		main_10_15_reg_stage0 <= main_10_15;
		if (start == 1'b0 && ^(main_10_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_15_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd1) & l1_1_valid_bit_1))) begin
		main_10_scevgep_reg_stage0 <= main_10_scevgep;
		if (start == 1'b0 && ^(main_10_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_scevgep_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd3) & l1_1_valid_bit_3))) begin
		main_10_19_reg_stage0 <= main_10_19;
		if (start == 1'b0 && ^(main_10_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_19_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd3) & l1_1_valid_bit_3))) begin
		main_10_21_reg_stage0 <= main_10_21;
		if (start == 1'b0 && ^(main_10_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_21_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((l1_1_ii_state == 7'd4) & l1_1_valid_bit_4))) begin
		main_10_23_reg_stage0 <= main_10_23;
		if (start == 1'b0 && ^(main_10_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_10_23_reg_stage0"); $finish; end
	end
end
always @(*) begin
	l1_1_pipeline_exit_cond = (l1_1_i_stage0 == 97);
end
always @(*) begin
	l1_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (l1_1_epilogue & (~(l1_1_valid_bit_74) & l1_1_valid_bit_75)));
end
always @(*) begin
	/* main: %10*/
	/*   %25 = fpext float %24 to double, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !3
	start_time: 58 avail_time: 60 stage: 0 II: 74 start_ii_state = 58 % 74 = 58 avail_ii_state = 60 % 74 = 60*/
		main_altfp_extend_32_0_op0 = main_10_24;
end
always @(*) begin
	altfp_main_10_25_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_extend_32_0 = altfp_extend_main_10_25_out;
end
always @(*) begin
	/* main: %10*/
	/*   %26 = fmul double %25, 2.000000e-01, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !3
	start_time: 60 avail_time: 71 stage: 0 II: 74 start_ii_state = 60 % 74 = 60 avail_ii_state = 71 % 74 = 71*/
		main_altfp_multiply_64_0_op0 = main_10_25;
end
always @(*) begin
	/* main: %10*/
	/*   %26 = fmul double %25, 2.000000e-01, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !3
	start_time: 60 avail_time: 71 stage: 0 II: 74 start_ii_state = 60 % 74 = 60 avail_ii_state = 71 % 74 = 71*/
if (reset) begin main_altfp_multiply_64_0_op1 = 0; end
		main_altfp_multiply_64_0_op1 = 64'h3FC999999999999A;
end
always @(*) begin
	altfp_main_10_26_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_multiply_64_0 = altfp_multiplier64_main_10_26_out;
end
always @(*) begin
	/* main: %10*/
	/*   %27 = fptrunc double %26 to float, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 71 avail_time: 74 stage: 0 II: 74 start_ii_state = 71 % 74 = 71 avail_ii_state = 74 % 74 = 0*/
		main_altfp_truncate_64_0_op0 = main_10_26;
end
always @(*) begin
	altfp_main_10_27_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_truncate_64_0 = altfp_truncate_main_10_27_out;
end
always @(*) begin
	/* main: %31*/
	/*   %34 = fptosi float %33 to i32*/
		main_altfp_fptosi_32_0_op0 = main_31_33;
end
always @(*) begin
	altfp_main_31_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_fptosi_32_0 = altfp_fptosi32_main_31_34_out;
end
always @(*) begin
	/* main: %10*/
	/*   %18 = fadd float %16, %17, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 16 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 16 % 74 = 16*/
	if (((l1_1_ii_state == 7'd2) & l1_1_valid_bit_2)) begin
		main_altfp_add_32_0_op0 = main_10_16;
	end
	/* main: %10*/
	/*   %20 = fadd float %18, %19, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 16 avail_time: 30 stage: 0 II: 74 start_ii_state = 16 % 74 = 16 avail_ii_state = 30 % 74 = 30*/
	else if (((l1_1_ii_state == 7'd16) & l1_1_valid_bit_16)) begin
		main_altfp_add_32_0_op0 = main_10_18;
	end
	/* main: %10*/
	/*   %22 = fadd float %20, %21, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !3
	start_time: 30 avail_time: 44 stage: 0 II: 74 start_ii_state = 30 % 74 = 30 avail_ii_state = 44 % 74 = 44*/
	else if (((l1_1_ii_state == 7'd30) & l1_1_valid_bit_30)) begin
		main_altfp_add_32_0_op0 = main_10_20;
	end
	/* main: %10*/
	/*   %24 = fadd float %22, %23, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !14, !legup.pipeline.stage !3
	start_time: 44 avail_time: 58 stage: 0 II: 74 start_ii_state = 44 % 74 = 44 avail_ii_state = 58 % 74 = 58*/
	else /* if (((l1_1_ii_state == 7'd44) & l1_1_valid_bit_44)) */ begin
		main_altfp_add_32_0_op0 = main_10_22;
	end
end
always @(*) begin
	/* main: %10*/
	/*   %18 = fadd float %16, %17, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 16 stage: 0 II: 74 start_ii_state = 2 % 74 = 2 avail_ii_state = 16 % 74 = 16*/
	if (((l1_1_ii_state == 7'd2) & l1_1_valid_bit_2)) begin
		main_altfp_add_32_0_op1 = main_10_17;
	end
	/* main: %10*/
	/*   %20 = fadd float %18, %19, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 16 avail_time: 30 stage: 0 II: 74 start_ii_state = 16 % 74 = 16 avail_ii_state = 30 % 74 = 30*/
	else if (((l1_1_ii_state == 7'd16) & l1_1_valid_bit_16)) begin
		main_altfp_add_32_0_op1 = main_10_19_reg_stage0;
	end
	/* main: %10*/
	/*   %22 = fadd float %20, %21, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !3
	start_time: 30 avail_time: 44 stage: 0 II: 74 start_ii_state = 30 % 74 = 30 avail_ii_state = 44 % 74 = 44*/
	else if (((l1_1_ii_state == 7'd30) & l1_1_valid_bit_30)) begin
		main_altfp_add_32_0_op1 = main_10_21_reg_stage0;
	end
	/* main: %10*/
	/*   %24 = fadd float %22, %23, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !14, !legup.pipeline.stage !3
	start_time: 44 avail_time: 58 stage: 0 II: 74 start_ii_state = 44 % 74 = 44 avail_ii_state = 58 % 74 = 58*/
	else /* if (((l1_1_ii_state == 7'd44) & l1_1_valid_bit_44)) */ begin
		main_altfp_add_32_0_op1 = main_10_23_reg_stage0;
	end
end
always @(*) begin
	altfp_main_10_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_0 = altfp_adder_main_10_18_out;
end
always @(*) begin
	lpm_mult_main_3_4_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %4 = mul i32 %indvar2, 100*/
	if ((lpm_mult_main_3_4_en == 1'd1)) begin
		main_3_4_stage0_reg <= (main_3_indvar2_reg * 32'd100);
	end
end
always @(*) begin
	altfp_main_10_20_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_10_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_10_24_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %31*/
	/*   ret i32 %34*/
	if ((cur_state == LEGUP_F_main_BB__31_15)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %31*/
	/*   ret i32 %34*/
	if ((cur_state == LEGUP_F_main_BB__31_15)) begin
		return_val <= main_31_34;
		if (start == 1'b0 && ^(main_31_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/legup/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/leandro/legup/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/legup/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
