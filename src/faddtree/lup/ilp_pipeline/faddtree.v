//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  4 15:32:40 2018
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 25 17:03:49 2018
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 8
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @a = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
`define TAG_g_a `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_a_a {`TAG_g_a, 23'd0}
// @aa = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, flo...
`define TAG_g_aa `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_aa_a {`TAG_g_aa, 23'd0}
// @b = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
`define TAG_g_b `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_b_a {`TAG_g_b, 23'd0}
// @bb = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, flo...
`define TAG_g_bb `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_bb_a {`TAG_g_bb, 23'd0}
// @c = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
`define TAG_g_c `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_c_a {`TAG_g_c, 23'd0}
// @cc = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, flo...
`define TAG_g_cc `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_cc_a {`TAG_g_cc, 23'd0}
// @m = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
`define TAG_g_m `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_m_a {`TAG_g_m, 23'd0}
// @n = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
`define TAG_g_n `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_n_a {`TAG_g_n, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] a_address_a;
reg [6:0] a_address_b;
reg a_write_enable_a;
reg a_write_enable_b;
reg [31:0] a_in_a;
reg [31:0] a_in_b;
wire [31:0] a_out_a;
wire [31:0] a_out_b;

// @a = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
ram_dual_port a (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_address_a ),
	.address_b( a_address_b ),
	.wren_a( a_write_enable_a ),
	.wren_b( a_write_enable_b ),
	.data_a( a_in_a ),
	.data_b( a_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( a_out_a ),
	.q_b( a_out_b)
);
defparam a.width_a = 32;
defparam a.width_b = 32;
defparam a.widthad_a = 7;
defparam a.widthad_b = 7;
defparam a.width_be_a = 1;
defparam a.width_be_b = 1;
defparam a.numwords_a = 100;
defparam a.numwords_b = 100;
defparam a.latency = ram_latency;
defparam a.init_file = "a.mif";

reg [6:0] b_address_a;
reg [6:0] b_address_b;
reg b_write_enable_a;
reg b_write_enable_b;
reg [31:0] b_in_a;
reg [31:0] b_in_b;
wire [31:0] b_out_a;
wire [31:0] b_out_b;

// @b = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
ram_dual_port b (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( b_address_a ),
	.address_b( b_address_b ),
	.wren_a( b_write_enable_a ),
	.wren_b( b_write_enable_b ),
	.data_a( b_in_a ),
	.data_b( b_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( b_out_a ),
	.q_b( b_out_b)
);
defparam b.width_a = 32;
defparam b.width_b = 32;
defparam b.widthad_a = 7;
defparam b.widthad_b = 7;
defparam b.width_be_a = 1;
defparam b.width_be_b = 1;
defparam b.numwords_a = 100;
defparam b.numwords_b = 100;
defparam b.latency = ram_latency;
defparam b.init_file = "b.mif";

reg [6:0] c_address_a;
reg [6:0] c_address_b;
reg c_write_enable_a;
reg c_write_enable_b;
reg [31:0] c_in_a;
reg [31:0] c_in_b;
wire [31:0] c_out_a;
wire [31:0] c_out_b;

// @c = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
ram_dual_port c (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( c_address_a ),
	.address_b( c_address_b ),
	.wren_a( c_write_enable_a ),
	.wren_b( c_write_enable_b ),
	.data_a( c_in_a ),
	.data_b( c_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( c_out_a ),
	.q_b( c_out_b)
);
defparam c.width_a = 32;
defparam c.width_b = 32;
defparam c.widthad_a = 7;
defparam c.widthad_b = 7;
defparam c.width_be_a = 1;
defparam c.width_be_b = 1;
defparam c.numwords_a = 100;
defparam c.numwords_b = 100;
defparam c.latency = ram_latency;
defparam c.init_file = "c.mif";

reg [6:0] m_address_a;
reg [6:0] m_address_b;
reg m_write_enable_a;
reg m_write_enable_b;
reg [31:0] m_in_a;
reg [31:0] m_in_b;
wire [31:0] m_out_a;
wire [31:0] m_out_b;

// @m = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
ram_dual_port m (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( m_address_a ),
	.address_b( m_address_b ),
	.wren_a( m_write_enable_a ),
	.wren_b( m_write_enable_b ),
	.data_a( m_in_a ),
	.data_b( m_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( m_out_a ),
	.q_b( m_out_b)
);
defparam m.width_a = 32;
defparam m.width_b = 32;
defparam m.widthad_a = 7;
defparam m.widthad_b = 7;
defparam m.width_be_a = 1;
defparam m.width_be_b = 1;
defparam m.numwords_a = 100;
defparam m.numwords_b = 100;
defparam m.latency = ram_latency;
defparam m.init_file = "m.mif";

reg [6:0] n_address_a;
reg [6:0] n_address_b;
reg n_write_enable_a;
reg n_write_enable_b;
reg [31:0] n_in_a;
reg [31:0] n_in_b;
wire [31:0] n_out_a;
wire [31:0] n_out_b;

// @n = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, floa...
ram_dual_port n (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( n_address_a ),
	.address_b( n_address_b ),
	.wren_a( n_write_enable_a ),
	.wren_b( n_write_enable_b ),
	.data_a( n_in_a ),
	.data_b( n_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( n_out_a ),
	.q_b( n_out_b)
);
defparam n.width_a = 32;
defparam n.width_b = 32;
defparam n.widthad_a = 7;
defparam n.widthad_b = 7;
defparam n.width_be_a = 1;
defparam n.width_be_b = 1;
defparam n.numwords_a = 100;
defparam n.numwords_b = 100;
defparam n.latency = ram_latency;
defparam n.init_file = "n.mif";

reg [6:0] aa_address_a;
reg [6:0] aa_address_b;
reg aa_write_enable_a;
reg aa_write_enable_b;
reg [31:0] aa_in_a;
reg [31:0] aa_in_b;
wire [31:0] aa_out_a;
wire [31:0] aa_out_b;

// @aa = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, flo...
ram_dual_port aa (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( aa_address_a ),
	.address_b( aa_address_b ),
	.wren_a( aa_write_enable_a ),
	.wren_b( aa_write_enable_b ),
	.data_a( aa_in_a ),
	.data_b( aa_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( aa_out_a ),
	.q_b( aa_out_b)
);
defparam aa.width_a = 32;
defparam aa.width_b = 32;
defparam aa.widthad_a = 7;
defparam aa.widthad_b = 7;
defparam aa.width_be_a = 1;
defparam aa.width_be_b = 1;
defparam aa.numwords_a = 100;
defparam aa.numwords_b = 100;
defparam aa.latency = ram_latency;
defparam aa.init_file = "aa.mif";

reg [6:0] bb_address_a;
reg [6:0] bb_address_b;
reg bb_write_enable_a;
reg bb_write_enable_b;
reg [31:0] bb_in_a;
reg [31:0] bb_in_b;
wire [31:0] bb_out_a;
wire [31:0] bb_out_b;

// @bb = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, flo...
ram_dual_port bb (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( bb_address_a ),
	.address_b( bb_address_b ),
	.wren_a( bb_write_enable_a ),
	.wren_b( bb_write_enable_b ),
	.data_a( bb_in_a ),
	.data_b( bb_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( bb_out_a ),
	.q_b( bb_out_b)
);
defparam bb.width_a = 32;
defparam bb.width_b = 32;
defparam bb.widthad_a = 7;
defparam bb.widthad_b = 7;
defparam bb.width_be_a = 1;
defparam bb.width_be_b = 1;
defparam bb.numwords_a = 100;
defparam bb.numwords_b = 100;
defparam bb.latency = ram_latency;
defparam bb.init_file = "bb.mif";

reg [6:0] cc_address_a;
reg [6:0] cc_address_b;
reg cc_write_enable_a;
reg cc_write_enable_b;
reg [31:0] cc_in_a;
reg [31:0] cc_in_b;
wire [31:0] cc_out_a;
wire [31:0] cc_out_b;

// @cc = internal global [100 x float] [float 1.000000e+00, float 2.000000e+00, float 3.000000e+00, float 4.000000e+00, float 5.000000e+00, float 6.000000e+00, float 7.000000e+00, float 8.000000e+00, flo...
ram_dual_port cc (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( cc_address_a ),
	.address_b( cc_address_b ),
	.wren_a( cc_write_enable_a ),
	.wren_b( cc_write_enable_b ),
	.data_a( cc_in_a ),
	.data_b( cc_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( cc_out_a ),
	.q_b( cc_out_b)
);
defparam cc.width_a = 32;
defparam cc.width_b = 32;
defparam cc.widthad_a = 7;
defparam cc.widthad_b = 7;
defparam cc.width_be_a = 1;
defparam cc.width_be_b = 1;
defparam cc.numwords_a = 100;
defparam cc.numwords_b = 100;
defparam cc.latency = ram_latency;
defparam cc.init_file = "cc.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_a_a;
assign select_a_a = (tag_a == `TAG_g_a);
reg [ram_latency:0] select_a_reg_a;
wire [31:0] memory_controller_a_out_a;
assign memory_controller_a_out_a = {32{ select_a_reg_a[ram_latency]}} & a_out_a;

wire select_b_a;
assign select_b_a = (tag_a == `TAG_g_b);
reg [ram_latency:0] select_b_reg_a;
wire [31:0] memory_controller_b_out_a;
assign memory_controller_b_out_a = {32{ select_b_reg_a[ram_latency]}} & b_out_a;

wire select_c_a;
assign select_c_a = (tag_a == `TAG_g_c);
reg [ram_latency:0] select_c_reg_a;
wire [31:0] memory_controller_c_out_a;
assign memory_controller_c_out_a = {32{ select_c_reg_a[ram_latency]}} & c_out_a;

wire select_m_a;
assign select_m_a = (tag_a == `TAG_g_m);
reg [ram_latency:0] select_m_reg_a;
wire [31:0] memory_controller_m_out_a;
assign memory_controller_m_out_a = {32{ select_m_reg_a[ram_latency]}} & m_out_a;

wire select_n_a;
assign select_n_a = (tag_a == `TAG_g_n);
reg [ram_latency:0] select_n_reg_a;
wire [31:0] memory_controller_n_out_a;
assign memory_controller_n_out_a = {32{ select_n_reg_a[ram_latency]}} & n_out_a;

wire select_aa_a;
assign select_aa_a = (tag_a == `TAG_g_aa);
reg [ram_latency:0] select_aa_reg_a;
wire [31:0] memory_controller_aa_out_a;
assign memory_controller_aa_out_a = {32{ select_aa_reg_a[ram_latency]}} & aa_out_a;

wire select_bb_a;
assign select_bb_a = (tag_a == `TAG_g_bb);
reg [ram_latency:0] select_bb_reg_a;
wire [31:0] memory_controller_bb_out_a;
assign memory_controller_bb_out_a = {32{ select_bb_reg_a[ram_latency]}} & bb_out_a;

wire select_cc_a;
assign select_cc_a = (tag_a == `TAG_g_cc);
reg [ram_latency:0] select_cc_reg_a;
wire [31:0] memory_controller_cc_out_a;
assign memory_controller_cc_out_a = {32{ select_cc_reg_a[ram_latency]}} & cc_out_a;

always @(*)
begin
	a_address_a = memory_controller_address_a [7-1+2:2] & {7{select_a_a}};
	a_write_enable_a = memory_controller_write_enable_a & select_a_a;
	a_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	b_address_a = memory_controller_address_a [7-1+2:2] & {7{select_b_a}};
	b_write_enable_a = memory_controller_write_enable_a & select_b_a;
	b_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	c_address_a = memory_controller_address_a [7-1+2:2] & {7{select_c_a}};
	c_write_enable_a = memory_controller_write_enable_a & select_c_a;
	c_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	m_address_a = memory_controller_address_a [7-1+2:2] & {7{select_m_a}};
	m_write_enable_a = memory_controller_write_enable_a & select_m_a;
	m_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	n_address_a = memory_controller_address_a [7-1+2:2] & {7{select_n_a}};
	n_write_enable_a = memory_controller_write_enable_a & select_n_a;
	n_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	aa_address_a = memory_controller_address_a [7-1+2:2] & {7{select_aa_a}};
	aa_write_enable_a = memory_controller_write_enable_a & select_aa_a;
	aa_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	bb_address_a = memory_controller_address_a [7-1+2:2] & {7{select_bb_a}};
	bb_write_enable_a = memory_controller_write_enable_a & select_bb_a;
	bb_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	cc_address_a = memory_controller_address_a [7-1+2:2] & {7{select_cc_a}};
	cc_write_enable_a = memory_controller_write_enable_a & select_cc_a;
	cc_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_a_reg_a[ram_latency]}} | {2{select_b_reg_a[ram_latency]}} | {2{select_c_reg_a[ram_latency]}} | {2{select_m_reg_a[ram_latency]}} | {2{select_n_reg_a[ram_latency]}} | {2{select_aa_reg_a[ram_latency]}} | {2{select_bb_reg_a[ram_latency]}} | {2{select_cc_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_a_out_a | memory_controller_b_out_a | memory_controller_c_out_a | memory_controller_m_out_a | memory_controller_n_out_a | memory_controller_aa_out_a | memory_controller_bb_out_a | memory_controller_cc_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_a_reg_a[j+1] <= select_a_reg_a[j];
select_b_reg_a[j+1] <= select_b_reg_a[j];
select_c_reg_a[j+1] <= select_c_reg_a[j];
select_m_reg_a[j+1] <= select_m_reg_a[j];
select_n_reg_a[j+1] <= select_n_reg_a[j];
select_aa_reg_a[j+1] <= select_aa_reg_a[j];
select_bb_reg_a[j+1] <= select_bb_reg_a[j];
select_cc_reg_a[j+1] <= select_cc_reg_a[j];
end
always @(*)
begin
select_a_reg_a[0] <= select_a_a;
select_b_reg_a[0] <= select_b_a;
select_c_reg_a[0] <= select_c_a;
select_m_reg_a[0] <= select_m_a;
select_n_reg_a[0] <= select_n_a;
select_aa_reg_a[0] <= select_aa_a;
select_bb_reg_a[0] <= select_bb_a;
select_cc_reg_a[0] <= select_cc_a;
end

reg [2:0] select_not_struct_b;

wire select_a_b;
assign select_a_b = (tag_b == `TAG_g_a);
reg [ram_latency:0] select_a_reg_b;
wire [31:0] memory_controller_a_out_b;
assign memory_controller_a_out_b = {32{ select_a_reg_b[ram_latency]}} & a_out_b;

wire select_b_b;
assign select_b_b = (tag_b == `TAG_g_b);
reg [ram_latency:0] select_b_reg_b;
wire [31:0] memory_controller_b_out_b;
assign memory_controller_b_out_b = {32{ select_b_reg_b[ram_latency]}} & b_out_b;

wire select_c_b;
assign select_c_b = (tag_b == `TAG_g_c);
reg [ram_latency:0] select_c_reg_b;
wire [31:0] memory_controller_c_out_b;
assign memory_controller_c_out_b = {32{ select_c_reg_b[ram_latency]}} & c_out_b;

wire select_m_b;
assign select_m_b = (tag_b == `TAG_g_m);
reg [ram_latency:0] select_m_reg_b;
wire [31:0] memory_controller_m_out_b;
assign memory_controller_m_out_b = {32{ select_m_reg_b[ram_latency]}} & m_out_b;

wire select_n_b;
assign select_n_b = (tag_b == `TAG_g_n);
reg [ram_latency:0] select_n_reg_b;
wire [31:0] memory_controller_n_out_b;
assign memory_controller_n_out_b = {32{ select_n_reg_b[ram_latency]}} & n_out_b;

wire select_aa_b;
assign select_aa_b = (tag_b == `TAG_g_aa);
reg [ram_latency:0] select_aa_reg_b;
wire [31:0] memory_controller_aa_out_b;
assign memory_controller_aa_out_b = {32{ select_aa_reg_b[ram_latency]}} & aa_out_b;

wire select_bb_b;
assign select_bb_b = (tag_b == `TAG_g_bb);
reg [ram_latency:0] select_bb_reg_b;
wire [31:0] memory_controller_bb_out_b;
assign memory_controller_bb_out_b = {32{ select_bb_reg_b[ram_latency]}} & bb_out_b;

wire select_cc_b;
assign select_cc_b = (tag_b == `TAG_g_cc);
reg [ram_latency:0] select_cc_reg_b;
wire [31:0] memory_controller_cc_out_b;
assign memory_controller_cc_out_b = {32{ select_cc_reg_b[ram_latency]}} & cc_out_b;

always @(*)
begin
	a_address_b = memory_controller_address_b [7-1+2:2] & {7{select_a_b}};
	a_write_enable_b = memory_controller_write_enable_b & select_a_b;
	a_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	b_address_b = memory_controller_address_b [7-1+2:2] & {7{select_b_b}};
	b_write_enable_b = memory_controller_write_enable_b & select_b_b;
	b_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	c_address_b = memory_controller_address_b [7-1+2:2] & {7{select_c_b}};
	c_write_enable_b = memory_controller_write_enable_b & select_c_b;
	c_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	m_address_b = memory_controller_address_b [7-1+2:2] & {7{select_m_b}};
	m_write_enable_b = memory_controller_write_enable_b & select_m_b;
	m_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	n_address_b = memory_controller_address_b [7-1+2:2] & {7{select_n_b}};
	n_write_enable_b = memory_controller_write_enable_b & select_n_b;
	n_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	aa_address_b = memory_controller_address_b [7-1+2:2] & {7{select_aa_b}};
	aa_write_enable_b = memory_controller_write_enable_b & select_aa_b;
	aa_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	bb_address_b = memory_controller_address_b [7-1+2:2] & {7{select_bb_b}};
	bb_write_enable_b = memory_controller_write_enable_b & select_bb_b;
	bb_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	cc_address_b = memory_controller_address_b [7-1+2:2] & {7{select_cc_b}};
	cc_write_enable_b = memory_controller_write_enable_b & select_cc_b;
	cc_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_a_reg_b[ram_latency]}} | {2{select_b_reg_b[ram_latency]}} | {2{select_c_reg_b[ram_latency]}} | {2{select_m_reg_b[ram_latency]}} | {2{select_n_reg_b[ram_latency]}} | {2{select_aa_reg_b[ram_latency]}} | {2{select_bb_reg_b[ram_latency]}} | {2{select_cc_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_a_out_b | memory_controller_b_out_b | memory_controller_c_out_b | memory_controller_m_out_b | memory_controller_n_out_b | memory_controller_aa_out_b | memory_controller_bb_out_b | memory_controller_cc_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_a_reg_b[j+1] <= select_a_reg_b[j];
select_b_reg_b[j+1] <= select_b_reg_b[j];
select_c_reg_b[j+1] <= select_c_reg_b[j];
select_m_reg_b[j+1] <= select_m_reg_b[j];
select_n_reg_b[j+1] <= select_n_reg_b[j];
select_aa_reg_b[j+1] <= select_aa_reg_b[j];
select_bb_reg_b[j+1] <= select_bb_reg_b[j];
select_cc_reg_b[j+1] <= select_cc_reg_b[j];
end
always @(*)
begin
select_a_reg_b[0] <= select_a_b;
select_b_reg_b[0] <= select_b_b;
select_c_reg_b[0] <= select_c_b;
select_m_reg_b[0] <= select_m_b;
select_n_reg_b[0] <= select_n_b;
select_aa_reg_b[0] <= select_aa_b;
select_bb_reg_b[0] <= select_bb_b;
select_cc_reg_b[0] <= select_cc_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [5:0] LEGUP_0 = 6'd0;
parameter [5:0] LEGUP_loop_pipeline_wait_loop_1_1 = 6'd1;
parameter [5:0] LEGUP_F_main_BB__54_2 = 6'd2;
parameter [5:0] LEGUP_F_main_BB__54_3 = 6'd3;
parameter [5:0] LEGUP_F_main_BB__54_4 = 6'd4;
parameter [5:0] LEGUP_F_main_BB__54_5 = 6'd5;
parameter [5:0] LEGUP_F_main_BB__54_6 = 6'd6;
parameter [5:0] LEGUP_F_main_BB__54_7 = 6'd7;
parameter [5:0] LEGUP_F_main_BB__54_8 = 6'd8;
parameter [5:0] LEGUP_F_main_BB__54_9 = 6'd9;
parameter [5:0] LEGUP_F_main_BB__54_10 = 6'd10;
parameter [5:0] LEGUP_F_main_BB__54_11 = 6'd11;
parameter [5:0] LEGUP_F_main_BB__54_12 = 6'd12;
parameter [5:0] LEGUP_F_main_BB__54_13 = 6'd13;
parameter [5:0] LEGUP_F_main_BB__54_14 = 6'd14;
parameter [5:0] LEGUP_F_main_BB__54_15 = 6'd15;
parameter [5:0] LEGUP_F_main_BB__54_16 = 6'd16;
parameter [5:0] LEGUP_F_main_BB__63_17 = 6'd17;
parameter [5:0] LEGUP_F_main_BB__63_18 = 6'd18;
parameter [5:0] LEGUP_F_main_BB__63_19 = 6'd19;
parameter [5:0] LEGUP_F_main_BB__63_20 = 6'd20;
parameter [5:0] LEGUP_F_main_BB__63_21 = 6'd21;
parameter [5:0] LEGUP_F_main_BB__63_22 = 6'd22;
parameter [5:0] LEGUP_F_main_BB__63_23 = 6'd23;
parameter [5:0] LEGUP_F_main_BB__63_24 = 6'd24;
parameter [5:0] LEGUP_F_main_BB__63_25 = 6'd25;
parameter [5:0] LEGUP_F_main_BB__63_26 = 6'd26;
parameter [5:0] LEGUP_F_main_BB__63_27 = 6'd27;
parameter [5:0] LEGUP_F_main_BB__63_28 = 6'd28;
parameter [5:0] LEGUP_F_main_BB__63_29 = 6'd29;
parameter [5:0] LEGUP_F_main_BB__63_30 = 6'd30;
parameter [5:0] LEGUP_F_main_BB__63_31 = 6'd31;
parameter [5:0] LEGUP_F_main_BB__65_32 = 6'd32;
parameter [5:0] LEGUP_F_main_BB__65_33 = 6'd33;
parameter [5:0] LEGUP_F_main_BB__74_34 = 6'd34;
parameter [5:0] LEGUP_F_main_BB__76_35 = 6'd35;
parameter [5:0] LEGUP_F_main_BB__79_36 = 6'd36;
parameter [5:0] LEGUP_F_main_BB__79_37 = 6'd37;
parameter [5:0] LEGUP_F_main_BB__79_38 = 6'd38;
parameter [5:0] LEGUP_F_main_BB__79_39 = 6'd39;
parameter [5:0] LEGUP_F_main_BB__79_40 = 6'd40;
parameter [5:0] LEGUP_F_main_BB__79_41 = 6'd41;
parameter [5:0] LEGUP_F_main_BB__79_42 = 6'd42;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [5:0] cur_state;
reg [5:0] next_state;
reg [31:0] main_1_sumsroa006;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6;
reg [31:0] main_1_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7;
reg [31:0] main_1_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep8;
reg [31:0] main_1_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep9;
reg [31:0] main_1_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep10;
reg [31:0] main_1_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep14;
reg [31:0] main_1_8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep17;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep18;
reg [31:0] main_1_9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep20;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep21;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep22;
reg [31:0] main_1_10;
reg [31:0] main_1_12;
reg [31:0] main_1_13;
reg [31:0] main_1_14;
reg [31:0] main_1_15;
reg [31:0] main_1_16;
reg [31:0] main_1_17;
reg [31:0] main_1_18;
reg [31:0] main_1_19;
reg [31:0] main_1_20;
reg [31:0] main_1_21;
reg [31:0] main_1_22;
reg [31:0] main_1_22_reg;
reg [31:0] main_1_23;
reg [31:0] main_1_24;
reg [31:0] main_1_25;
reg [31:0] main_1_26;
reg [31:0] main_1_27;
reg [31:0] main_1_28;
reg [31:0] main_1_29;
reg [31:0] main_1_30;
reg [31:0] main_1_31;
reg [31:0] main_1_32;
reg [31:0] main_1_33;
reg [31:0] main_1_34;
reg [31:0] main_1_35;
reg [31:0] main_1_36;
reg [31:0] main_1_37;
reg [31:0] main_1_38;
reg [31:0] main_1_39;
reg [31:0] main_1_40;
reg [31:0] main_1_41;
reg [31:0] main_1_42;
reg [31:0] main_1_43;
reg [31:0] main_1_44;
reg [31:0] main_1_45;
reg [31:0] main_1_46;
reg [31:0] main_1_47;
reg [31:0] main_1_48;
reg [31:0] main_1_49;
reg [31:0] main_1_50;
reg [31:0] main_1_51;
reg [31:0] main_1_52;
reg [31:0] main_1_52_reg;
reg [31:0] main_1_53;
reg [31:0] main_1_53_reg;
reg [63:0] main_54_56;
reg [63:0] main_54_56_reg;
reg [31:0] main_54_60;
reg [31:0] main_54_60_reg;
reg [31:0] main_54_61;
reg [31:0] main_54_61_reg;
reg  main_54_62;
reg [31:0] main_63_64;
reg [31:0] main_65_66;
reg [31:0] main_65_66_reg;
reg [31:0] main_65_67;
reg  main_65_71;
reg [31:0] main_65_72;
reg [31:0] main_79_80;
reg  loop_1_pipeline_start;
reg  loop_1_started;
reg [4:0] loop_1_ii_state;
reg [31:0] loop_1_i_stage0;
reg  loop_1_epilogue;
reg  loop_1_valid_bit_0;
reg  loop_1_valid_bit_1;
reg  loop_1_valid_bit_2;
reg  loop_1_valid_bit_3;
reg  loop_1_valid_bit_4;
reg  loop_1_valid_bit_5;
reg  loop_1_valid_bit_6;
reg  loop_1_valid_bit_7;
reg  loop_1_valid_bit_8;
reg  loop_1_valid_bit_9;
reg  loop_1_valid_bit_10;
reg  loop_1_valid_bit_11;
reg  loop_1_valid_bit_12;
reg  loop_1_valid_bit_13;
reg  loop_1_valid_bit_14;
reg  loop_1_valid_bit_15;
reg  loop_1_valid_bit_16;
reg  loop_1_valid_bit_17;
reg  loop_1_valid_bit_18;
reg  loop_1_valid_bit_19;
reg  loop_1_valid_bit_20;
reg  loop_1_valid_bit_21;
reg  loop_1_valid_bit_22;
reg  loop_1_valid_bit_23;
reg  loop_1_valid_bit_24;
reg  loop_1_valid_bit_25;
reg  loop_1_valid_bit_26;
reg  loop_1_valid_bit_27;
reg  loop_1_valid_bit_28;
reg  loop_1_valid_bit_29;
reg  loop_1_valid_bit_30;
reg  loop_1_valid_bit_31;
reg  loop_1_valid_bit_32;
reg  loop_1_valid_bit_33;
reg  loop_1_valid_bit_34;
reg  loop_1_valid_bit_35;
reg  loop_1_valid_bit_36;
reg  loop_1_valid_bit_37;
reg  loop_1_valid_bit_38;
reg  loop_1_valid_bit_39;
reg  loop_1_valid_bit_40;
reg  loop_1_valid_bit_41;
reg  loop_1_valid_bit_42;
reg  loop_1_valid_bit_43;
reg  loop_1_valid_bit_44;
reg  loop_1_valid_bit_45;
reg  loop_1_valid_bit_46;
reg  loop_1_valid_bit_47;
reg  loop_1_valid_bit_48;
reg  loop_1_valid_bit_49;
reg  loop_1_valid_bit_50;
reg  loop_1_valid_bit_51;
reg  loop_1_valid_bit_52;
reg  loop_1_valid_bit_53;
reg  loop_1_valid_bit_54;
reg  loop_1_valid_bit_55;
reg  loop_1_valid_bit_56;
reg  loop_1_valid_bit_57;
reg  loop_1_valid_bit_58;
reg  loop_1_valid_bit_59;
reg  loop_1_valid_bit_60;
reg  loop_1_valid_bit_61;
reg  loop_1_valid_bit_62;
reg  loop_1_valid_bit_63;
reg  loop_1_valid_bit_64;
reg  loop_1_valid_bit_65;
reg  loop_1_valid_bit_66;
reg  loop_1_valid_bit_67;
reg  loop_1_valid_bit_68;
reg  loop_1_valid_bit_69;
reg  loop_1_valid_bit_70;
reg  loop_1_valid_bit_71;
reg  loop_1_valid_bit_72;
reg  loop_1_valid_bit_73;
reg  loop_1_valid_bit_74;
reg  loop_1_valid_bit_75;
reg  loop_1_valid_bit_76;
reg  loop_1_valid_bit_77;
reg  loop_1_valid_bit_78;
reg  loop_1_valid_bit_79;
reg  loop_1_valid_bit_80;
reg  loop_1_valid_bit_81;
reg  loop_1_valid_bit_82;
reg  loop_1_valid_bit_83;
reg  loop_1_valid_bit_84;
reg  loop_1_valid_bit_85;
reg  loop_1_valid_bit_86;
reg  loop_1_valid_bit_87;
reg  loop_1_valid_bit_88;
reg  loop_1_valid_bit_89;
reg  loop_1_valid_bit_90;
reg  loop_1_valid_bit_91;
reg  loop_1_valid_bit_92;
reg  loop_1_valid_bit_93;
reg  loop_1_valid_bit_94;
reg  loop_1_valid_bit_95;
reg  loop_1_valid_bit_96;
reg  loop_1_valid_bit_97;
reg  loop_1_valid_bit_98;
reg  loop_1_valid_bit_99;
reg  loop_1_valid_bit_100;
reg  loop_1_valid_bit_101;
reg  loop_1_valid_bit_102;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep8_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep9_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep10_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep12_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep13_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep14_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep16_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep17_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep18_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep20_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep21_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep22_reg_stage0;
reg [31:0] main_1_10_reg_stage0;
reg [31:0] main_1_15_reg_stage0;
reg [31:0] main_1_16_reg_stage0;
reg [31:0] main_1_17_reg_stage0;
reg [31:0] main_1_18_reg_stage0;
reg [31:0] main_1_20_reg_stage0;
reg [31:0] main_1_22_reg_stage0;
reg [31:0] main_1_24_reg_stage0;
reg [31:0] main_1_28_reg_stage0;
reg [31:0] main_1_29_reg_stage0;
reg [31:0] main_1_30_reg_stage0;
reg [31:0] main_1_31_reg_stage0;
reg [31:0] main_1_32_reg_stage0;
reg [31:0] main_1_35_reg_stage0;
reg [31:0] main_1_37_reg_stage0;
reg [31:0] main_1_41_reg_stage1;
reg [31:0] main_1_42_reg_stage1;
reg [31:0] main_1_46_reg_stage1;
reg [31:0] main_1_46_reg_stage2;
reg [31:0] main_1_49_reg_stage2;
reg [31:0] main_1_51_reg_stage0;
reg [31:0] main_1_51_reg_stage1;
reg [31:0] main_1_51_reg_stage2;
reg [31:0] main_1_51_reg_stage3;
reg  loop_1_pipeline_exit_cond;
reg  loop_1_pipeline_finish;
reg [31:0] main_altfp_add_32_2_op0;
reg [31:0] main_altfp_add_32_2_op1;
wire [31:0] altfp_adder_main_1_19_out;
reg  altfp_main_1_19_en;
reg [31:0] main_altfp_add_32_2;
reg [31:0] main_altfp_add_32_1_op0;
reg [31:0] main_altfp_add_32_1_op1;
wire [31:0] altfp_adder_main_1_22_out;
reg  altfp_main_1_22_en;
reg [31:0] main_altfp_add_32_1;
reg [31:0] main_altfp_add_32_0_op0;
reg [31:0] main_altfp_add_32_0_op1;
wire [31:0] altfp_adder_main_1_25_out;
reg  altfp_main_1_25_en;
reg [31:0] main_altfp_add_32_0;
reg [31:0] main_altfp_extend_32_0_op0;
wire [63:0] altfp_extend_main_54_56_out;
reg  altfp_main_54_56_en;
reg [63:0] main_altfp_extend_32_0;
reg [31:0] main_altfp_subtract_32_0_op0;
reg [31:0] main_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_main_63_64_out;
reg  altfp_main_63_64_en;
reg [31:0] main_altfp_subtract_32_0;
reg [31:0] main_altfp_sitofp_32_0_op0;
wire [31:0] altfp_sitofp32_main_1_51_out;
reg  altfp_main_1_51_en;
reg [31:0] main_altfp_sitofp_32_0;
reg [31:0] main_altfp_fptosi_32_0_op0;
wire [31:0] altfp_fptosi32_main_79_80_out;
reg  altfp_main_79_80_en;
reg [31:0] main_altfp_fptosi_32_0;
wire  altfp_compare32_1_main_54_62_out;
reg  altfp_main_54_62_en;
wire  main_54_62_unused;
wire  altfp_compare32_1_main_65_71_out;
reg  altfp_main_65_71_en;
wire  main_65_71_unused;

/*   %19 = fadd float %17, %18, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !5*/
altfp_adder_13 altfp_adder_13_main_1_19 (
	.result (altfp_adder_main_1_19_out),
	.dataa (main_altfp_add_32_2_op0),
	.datab (main_altfp_add_32_2_op1),
	.clock (clk),
	.clk_en (altfp_main_1_19_en)
);


/*   %22 = fadd float %20, %21, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !21, !legup.pipeline.stage !5*/
altfp_adder_13 altfp_adder_13_main_1_22 (
	.result (altfp_adder_main_1_22_out),
	.dataa (main_altfp_add_32_1_op0),
	.datab (main_altfp_add_32_1_op1),
	.clock (clk),
	.clk_en (altfp_main_1_22_en)
);


/*   %25 = fadd float %23, %24, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !22, !legup.pipeline.stage !5*/
altfp_adder_13 altfp_adder_13_main_1_25 (
	.result (altfp_adder_main_1_25_out),
	.dataa (main_altfp_add_32_0_op0),
	.datab (main_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_1_25_en)
);


/*   %56 = fpext float %52 to double*/
altfp_extend_2 altfp_extend_2_main_54_56 (
	.result (altfp_extend_main_54_56_out),
	.dataa (main_altfp_extend_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_54_56_en)
);


/*   %64 = fsub float -0.000000e+00, %60*/
altfp_subtractor_14 altfp_subtractor_14_main_63_64 (
	.result (altfp_subtractor_main_63_64_out),
	.dataa (main_altfp_subtract_32_0_op0),
	.datab (main_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_63_64_en)
);


/*   %51 = sitofp i32 %2 to float, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5*/
altfp_sitofp32_6 altfp_sitofp32_6_main_1_51 (
	.result (altfp_sitofp32_main_1_51_out),
	.dataa (main_altfp_sitofp_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_1_51_en)
);


/*   %80 = fptosi float %52 to i32*/
altfp_fptosi32_6 altfp_fptosi32_6_main_79_80 (
	.result (altfp_fptosi32_main_79_80_out),
	.dataa (main_altfp_fptosi_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_79_80_en)
);


/*   %62 = fcmp ult float %60, 0.000000e+00*/
altfp_compare32_1 altfp_compare32_1_main_54_62 (
	.dataa (main_54_60),
	.datab (32'h0),
	.clock (clk),
	.clk_en (altfp_main_54_62_en),
	.aeb (main_54_62_unused),
	.aneb (main_54_62_unused),
	.alb (altfp_compare32_1_main_54_62_out),
	.aleb (main_54_62_unused),
	.agb (main_54_62_unused),
	.ageb (main_54_62_unused),
	.unordered (main_54_62_unused)
);


/*   %71 = fcmp ole float %66, 0x3EB0C6F7A0000000*/
altfp_compare32_1 altfp_compare32_1_main_65_71 (
	.dataa (main_65_66_reg),
	.datab (32'h358637BD),
	.clock (clk),
	.clk_en (altfp_main_65_71_en),
	.aeb (main_65_71_unused),
	.aneb (main_65_71_unused),
	.alb (main_65_71_unused),
	.aleb (altfp_compare32_1_main_65_71_out),
	.agb (main_65_71_unused),
	.ageb (main_65_71_unused),
	.unordered (main_65_71_unused)
);



/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %54*/
	/*   %55 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str1, i32 0, i32 0), i32 %53) #2*/
	if ((cur_state == LEGUP_F_main_BB__54_2)) begin
		$write("sum = %0x\n", $signed(main_1_53_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_53_reg) === 1'bX) finish <= 0;
	end
	/* main: %54*/
	/*   %57 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @.str2, i32 0, i32 0), double %56) #2*/
	if ((cur_state == LEGUP_F_main_BB__54_4)) begin
		$write("sum = %f\n", $signed(main_54_56));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_54_56) === 1'bX) finish <= 0;
	end
	/* main: %54*/
	/*   %58 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @.str3, i32 0, i32 0), i32 %53) #2*/
	if ((cur_state == LEGUP_F_main_BB__54_4)) begin
		$write("Final value is %0x\n", $signed(main_1_53_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_53_reg) === 1'bX) finish <= 0;
	end
	/* main: %54*/
	/*   %59 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @.str4, i32 0, i32 0), i32 1183703040) #2*/
	if ((cur_state == LEGUP_F_main_BB__54_4)) begin
		$write("Expected is %0x\n", $signed(32'd1183703040));
		// to fix quartus warning
		if (reset == 1'b0 && ^(32'd1183703040) === 1'bX) finish <= 0;
	end
	/* main: %65*/
	/*   %68 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str5, i32 0, i32 0), i32 %61) #2*/
	if ((cur_state == LEGUP_F_main_BB__65_32)) begin
		$write("sub is %0x\n", $signed(main_54_61_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_54_61_reg) === 1'bX) finish <= 0;
	end
	/* main: %65*/
	/*   %69 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str6, i32 0, i32 0), i32 %67) #2*/
	if ((cur_state == LEGUP_F_main_BB__65_32)) begin
		$write("Diff is %0x\n", $signed(main_65_67));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_65_67) === 1'bX) finish <= 0;
	end
	/* main: %65*/
	/*   %70 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @.str7, i32 0, i32 0), i32 897988541) #2*/
	if ((cur_state == LEGUP_F_main_BB__65_32)) begin
		$write("eps is %0x\n", $signed(32'd897988541));
		// to fix quartus warning
		if (reset == 1'b0 && ^(32'd897988541) === 1'bX) finish <= 0;
	end
	/* main: %65*/
	/*   %73 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str8, i32 0, i32 0), i32 %72) #2*/
	if ((cur_state == LEGUP_F_main_BB__65_33)) begin
		$write("equal is %0x\n", $signed(main_65_72));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_65_72) === 1'bX) finish <= 0;
	end
	/* main: %74*/
	/*   %75 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @.str9, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__74_34)) begin
		$write("PASSED\n");
	end
	/* main: %76*/
	/*   %77 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @.str10, i32 0, i32 0), double %56) #2*/
	if ((cur_state == LEGUP_F_main_BB__76_35)) begin
		$write("Value is %f\n", $signed(main_54_56_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_54_56_reg) === 1'bX) finish <= 0;
	end
	/* main: %76*/
	/*   %78 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @.str11, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__76_35)) begin
		$write("FAILED\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_loop_pipeline_wait_loop_1_1;
LEGUP_F_main_BB__54_10:
		next_state = LEGUP_F_main_BB__54_11;
LEGUP_F_main_BB__54_11:
		next_state = LEGUP_F_main_BB__54_12;
LEGUP_F_main_BB__54_12:
		next_state = LEGUP_F_main_BB__54_13;
LEGUP_F_main_BB__54_13:
		next_state = LEGUP_F_main_BB__54_14;
LEGUP_F_main_BB__54_14:
		next_state = LEGUP_F_main_BB__54_15;
LEGUP_F_main_BB__54_15:
		next_state = LEGUP_F_main_BB__54_16;
LEGUP_F_main_BB__54_16:
	if ((main_54_62 == 1'd1))
		next_state = LEGUP_F_main_BB__63_17;
	else if ((main_54_62 == 1'd0))
		next_state = LEGUP_F_main_BB__65_32;
LEGUP_F_main_BB__54_2:
		next_state = LEGUP_F_main_BB__54_3;
LEGUP_F_main_BB__54_3:
		next_state = LEGUP_F_main_BB__54_4;
LEGUP_F_main_BB__54_4:
		next_state = LEGUP_F_main_BB__54_5;
LEGUP_F_main_BB__54_5:
		next_state = LEGUP_F_main_BB__54_6;
LEGUP_F_main_BB__54_6:
		next_state = LEGUP_F_main_BB__54_7;
LEGUP_F_main_BB__54_7:
		next_state = LEGUP_F_main_BB__54_8;
LEGUP_F_main_BB__54_8:
		next_state = LEGUP_F_main_BB__54_9;
LEGUP_F_main_BB__54_9:
		next_state = LEGUP_F_main_BB__54_10;
LEGUP_F_main_BB__63_17:
		next_state = LEGUP_F_main_BB__63_18;
LEGUP_F_main_BB__63_18:
		next_state = LEGUP_F_main_BB__63_19;
LEGUP_F_main_BB__63_19:
		next_state = LEGUP_F_main_BB__63_20;
LEGUP_F_main_BB__63_20:
		next_state = LEGUP_F_main_BB__63_21;
LEGUP_F_main_BB__63_21:
		next_state = LEGUP_F_main_BB__63_22;
LEGUP_F_main_BB__63_22:
		next_state = LEGUP_F_main_BB__63_23;
LEGUP_F_main_BB__63_23:
		next_state = LEGUP_F_main_BB__63_24;
LEGUP_F_main_BB__63_24:
		next_state = LEGUP_F_main_BB__63_25;
LEGUP_F_main_BB__63_25:
		next_state = LEGUP_F_main_BB__63_26;
LEGUP_F_main_BB__63_26:
		next_state = LEGUP_F_main_BB__63_27;
LEGUP_F_main_BB__63_27:
		next_state = LEGUP_F_main_BB__63_28;
LEGUP_F_main_BB__63_28:
		next_state = LEGUP_F_main_BB__63_29;
LEGUP_F_main_BB__63_29:
		next_state = LEGUP_F_main_BB__63_30;
LEGUP_F_main_BB__63_30:
		next_state = LEGUP_F_main_BB__63_31;
LEGUP_F_main_BB__63_31:
		next_state = LEGUP_F_main_BB__65_32;
LEGUP_F_main_BB__65_32:
		next_state = LEGUP_F_main_BB__65_33;
LEGUP_F_main_BB__65_33:
	if ((main_65_71 == 1'd1))
		next_state = LEGUP_F_main_BB__74_34;
	else if ((main_65_71 == 1'd0))
		next_state = LEGUP_F_main_BB__76_35;
LEGUP_F_main_BB__74_34:
		next_state = LEGUP_F_main_BB__79_36;
LEGUP_F_main_BB__76_35:
		next_state = LEGUP_F_main_BB__79_36;
LEGUP_F_main_BB__79_36:
		next_state = LEGUP_F_main_BB__79_37;
LEGUP_F_main_BB__79_37:
		next_state = LEGUP_F_main_BB__79_38;
LEGUP_F_main_BB__79_38:
		next_state = LEGUP_F_main_BB__79_39;
LEGUP_F_main_BB__79_39:
		next_state = LEGUP_F_main_BB__79_40;
LEGUP_F_main_BB__79_40:
		next_state = LEGUP_F_main_BB__79_41;
LEGUP_F_main_BB__79_41:
		next_state = LEGUP_F_main_BB__79_42;
LEGUP_F_main_BB__79_42:
		next_state = LEGUP_0;
LEGUP_loop_pipeline_wait_loop_1_1:
	if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__54_2;
	else if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__54_2;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %sum.sroa.0.06 = phi i32 [ 0, %0 ], [ %53, %1 ], !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 75 avail_time: 75 stage: 2 II: 27 start_ii_state = 75 % 27 = 21 avail_ii_state = 75 % 27 = 21*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd21) & loop_1_valid_bit_102))) begin
		main_1_sumsroa006 = main_1_53;
	end
	/* main: %1*/
	/*   %sum.sroa.0.06 = phi i32 [ 0, %0 ], [ %53, %1 ], !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 75 avail_time: 75 stage: 2 II: 27 start_ii_state = 75 % 27 = 21 avail_ii_state = 75 % 27 = 21*/
	else /* if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) */ begin
		main_1_sumsroa006 = 32'd0;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [100 x float]* @cc, i32 0, i32 %2, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep = (`TAG_g_cc_a + (4 * loop_1_i_stage0));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [100 x float]* @aa, i32 0, i32 %2, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep2 = (`TAG_g_aa_a + (4 * loop_1_i_stage0));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [100 x float]* @bb, i32 0, i32 %2, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep3 = (`TAG_g_bb_a + (4 * loop_1_i_stage0));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep4 = getelementptr [100 x float]* @n, i32 0, i32 %2, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep4 = (`TAG_g_n_a + (4 * loop_1_i_stage0));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [100 x float]* @m, i32 0, i32 %2, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep5 = (`TAG_g_m_a + (4 * loop_1_i_stage0));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep6 = getelementptr [100 x float]* @c, i32 0, i32 %2, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep6 = (`TAG_g_c_a + (4 * loop_1_i_stage0));
end
always @(*) begin
	/* main: %1*/
	/*   %3 = add i32 %2, 7, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_3 = (loop_1_i_stage0 + 32'd7);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep7 = getelementptr [100 x float]* @b, i32 0, i32 %3, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep7 = (`TAG_g_b_a + (4 * main_1_3));
end
always @(*) begin
	/* main: %1*/
	/*   %4 = add i32 %2, 6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 2 avail_time: 2 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 2 % 27 = 2*/
		main_1_4 = (loop_1_i_stage0 + 32'd6);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep8 = getelementptr [100 x float]* @b, i32 0, i32 %4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 2 avail_time: 2 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 2 % 27 = 2*/
		main_1_scevgep8 = (`TAG_g_b_a + (4 * main_1_4));
end
always @(*) begin
	/* main: %1*/
	/*   %5 = add i32 %2, 5, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !5
	start_time: 1 avail_time: 1 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 1 % 27 = 1*/
		main_1_5 = (loop_1_i_stage0 + 32'd5);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep9 = getelementptr [100 x float]* @b, i32 0, i32 %5, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !5
	start_time: 1 avail_time: 1 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 1 % 27 = 1*/
		main_1_scevgep9 = (`TAG_g_b_a + (4 * main_1_5));
end
always @(*) begin
	/* main: %1*/
	/*   %6 = add i32 %2, 4, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !5
	start_time: 1 avail_time: 1 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 1 % 27 = 1*/
		main_1_6 = (loop_1_i_stage0 + 32'd4);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep10 = getelementptr [100 x float]* @b, i32 0, i32 %6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !5
	start_time: 1 avail_time: 1 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 1 % 27 = 1*/
		main_1_scevgep10 = (`TAG_g_b_a + (4 * main_1_6));
end
always @(*) begin
	/* main: %1*/
	/*   %7 = add i32 %2, 3, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_7 = (loop_1_i_stage0 + 32'd3);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep11 = getelementptr [100 x float]* @n, i32 0, i32 %7, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep11 = (`TAG_g_n_a + (4 * main_1_7));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep12 = getelementptr [100 x float]* @m, i32 0, i32 %7, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep12 = (`TAG_g_m_a + (4 * main_1_7));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep13 = getelementptr [100 x float]* @c, i32 0, i32 %7, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep13 = (`TAG_g_c_a + (4 * main_1_7));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep14 = getelementptr [100 x float]* @a, i32 0, i32 %7, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep14 = (`TAG_g_a_a + (4 * main_1_7));
end
always @(*) begin
	/* main: %1*/
	/*   %8 = add i32 %2, 2, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !5
	start_time: 1 avail_time: 1 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 1 % 27 = 1*/
		main_1_8 = (loop_1_i_stage0 + 32'd2);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep15 = getelementptr [100 x float]* @n, i32 0, i32 %8, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !5
	start_time: 1 avail_time: 1 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 1 % 27 = 1*/
		main_1_scevgep15 = (`TAG_g_n_a + (4 * main_1_8));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep16 = getelementptr [100 x float]* @m, i32 0, i32 %8, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !5
	start_time: 1 avail_time: 1 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 1 % 27 = 1*/
		main_1_scevgep16 = (`TAG_g_m_a + (4 * main_1_8));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep17 = getelementptr [100 x float]* @c, i32 0, i32 %8, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !5
	start_time: 1 avail_time: 1 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 1 % 27 = 1*/
		main_1_scevgep17 = (`TAG_g_c_a + (4 * main_1_8));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep18 = getelementptr [100 x float]* @a, i32 0, i32 %8, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !5
	start_time: 1 avail_time: 1 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 1 % 27 = 1*/
		main_1_scevgep18 = (`TAG_g_a_a + (4 * main_1_8));
end
always @(*) begin
	/* main: %1*/
	/*   %9 = add i32 %2, 1, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_9 = (loop_1_i_stage0 + 32'd1);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep19 = getelementptr [100 x float]* @m, i32 0, i32 %9, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep19 = (`TAG_g_m_a + (4 * main_1_9));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep20 = getelementptr [100 x float]* @c, i32 0, i32 %9, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep20 = (`TAG_g_c_a + (4 * main_1_9));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep21 = getelementptr [100 x float]* @a, i32 0, i32 %9, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep21 = (`TAG_g_a_a + (4 * main_1_9));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep22 = getelementptr [100 x float]* @a, i32 0, i32 %2, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !5, !legup.pipeline.stage !5
	start_time: 0 avail_time: 0 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 0 % 27 = 0*/
		main_1_scevgep22 = (`TAG_g_a_a + (4 * loop_1_i_stage0));
end
always @(*) begin
	/* main: %1*/
	/*   %10 = load volatile float* %scevgep22, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
		main_1_10 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %12 = load volatile float* %scevgep21, align 4, !tbaa !6, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !5
	start_time: 9 avail_time: 11 stage: 0 II: 27 start_ii_state = 9 % 27 = 9 avail_ii_state = 11 % 27 = 11*/
		main_1_12 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_1_13 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %14 = load volatile float* %scevgep18, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
		main_1_14 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %15 = load volatile float* %scevgep14, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
		main_1_15 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_1_16 = main_altfp_add_32_1;
end
always @(*) begin
	/* main: %1*/
	/*   %17 = load volatile float* %scevgep10, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
		main_1_17 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %18 = load volatile float* %scevgep9, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
		main_1_18 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_1_19 = main_altfp_add_32_2;
end
always @(*) begin
	/* main: %1*/
	/*   %20 = load volatile float* %scevgep8, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
		main_1_20 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %21 = load volatile float* %scevgep7, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
		main_1_21 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_1_22 = main_altfp_add_32_1;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %22 = fadd float %20, %21, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !21, !legup.pipeline.stage !5
	start_time: 6 avail_time: 19 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 19 % 27 = 19*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 5'd19) & loop_1_valid_bit_19))) begin
		main_1_22_reg <= main_1_22;
		if (start == 1'b0 && ^(main_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_22_reg"); $finish; end
	end
	/* main: %1*/
	/*   %22 = fadd float %20, %21, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !21, !legup.pipeline.stage !5
	start_time: 6 avail_time: 19 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 19 % 27 = 19*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 5'd19) & loop_1_valid_bit_19))) begin
		main_1_22_reg <= main_1_22;
		if (start == 1'b0 && ^(main_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_22_reg"); $finish; end
	end
	/* main: %54*/
	/*   %60 = fadd float %52, -1.816000e+04*/
	if ((cur_state == LEGUP_F_main_BB__54_15)) begin
		main_1_22_reg <= main_54_60;
		if (start == 1'b0 && ^(main_54_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_22_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %23 = load volatile float* %scevgep6, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
		main_1_23 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %24 = load volatile float* %scevgep20, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
		main_1_24 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_1_25 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %26 = load volatile float* %scevgep17, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
		main_1_26 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %27 = load volatile float* %scevgep13, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
		main_1_27 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_1_28 = main_altfp_add_32_2;
end
always @(*) begin
	/* main: %1*/
	/*   %29 = load volatile float* %scevgep5, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
		main_1_29 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %30 = load volatile float* %scevgep19, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
		main_1_30 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_1_31 = main_altfp_add_32_2;
end
always @(*) begin
	/* main: %1*/
	/*   %32 = load volatile float* %scevgep16, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
		main_1_32 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %33 = load volatile float* %scevgep12, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
		main_1_33 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_1_34 = main_altfp_add_32_0;
end
always @(*) begin
	/* main: %1*/
	/*   %35 = load volatile float* %scevgep4, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
		main_1_35 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %36 = load volatile float* %scevgep15, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
		main_1_36 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %37 = load volatile float* %scevgep11, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
		main_1_37 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_1_38 = main_altfp_add_32_1;
end
always @(*) begin
	main_1_39 = main_altfp_add_32_0;
end
always @(*) begin
	main_1_40 = main_altfp_add_32_2;
end
always @(*) begin
	main_1_41 = main_altfp_add_32_0;
end
always @(*) begin
	main_1_42 = main_altfp_add_32_0;
end
always @(*) begin
	main_1_43 = main_altfp_add_32_1;
end
always @(*) begin
	main_1_44 = main_altfp_add_32_1;
end
always @(*) begin
	main_1_45 = main_altfp_add_32_2;
end
always @(*) begin
	main_1_46 = main_altfp_add_32_0;
end
always @(*) begin
	main_1_47 = main_altfp_add_32_2;
end
always @(*) begin
	main_1_48 = main_altfp_add_32_2;
end
always @(*) begin
	/* main: %1*/
	/*   %49 = bitcast i32 %sum.sroa.0.06 to float, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 75 avail_time: 75 stage: 2 II: 27 start_ii_state = 75 % 27 = 21 avail_ii_state = 75 % 27 = 21*/
		main_1_49 = main_1_sumsroa006;
end
always @(*) begin
	main_1_50 = main_altfp_add_32_1;
end
always @(*) begin
	main_1_51 = main_altfp_sitofp_32_0;
end
always @(*) begin
	main_1_52 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %52 = fadd float %51, %50, !legup.pipeline.start_time !38, !legup.pipeline.avail_time !39, !legup.pipeline.stage !18
	start_time: 89 avail_time: 102 stage: 3 II: 27 start_ii_state = 89 % 27 = 8 avail_ii_state = 102 % 27 = 21*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 5'd21) & loop_1_valid_bit_102))) begin
		main_1_52_reg <= main_1_52;
		if (start == 1'b0 && ^(main_1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_52_reg"); $finish; end
	end
	/* main: %1*/
	/*   %52 = fadd float %51, %50, !legup.pipeline.start_time !38, !legup.pipeline.avail_time !39, !legup.pipeline.stage !18
	start_time: 89 avail_time: 102 stage: 3 II: 27 start_ii_state = 89 % 27 = 8 avail_ii_state = 102 % 27 = 21*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 5'd21) & loop_1_valid_bit_102))) begin
		main_1_52_reg <= main_1_52;
		if (start == 1'b0 && ^(main_1_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_52_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %53 = bitcast float %52 to i32, !legup.pipeline.start_time !39, !legup.pipeline.avail_time !39, !legup.pipeline.stage !18
	start_time: 102 avail_time: 102 stage: 3 II: 27 start_ii_state = 102 % 27 = 21 avail_ii_state = 102 % 27 = 21*/
		main_1_53 = main_1_52;
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %53 = bitcast float %52 to i32, !legup.pipeline.start_time !39, !legup.pipeline.avail_time !39, !legup.pipeline.stage !18
	start_time: 102 avail_time: 102 stage: 3 II: 27 start_ii_state = 102 % 27 = 21 avail_ii_state = 102 % 27 = 21*/
	if ((~(memory_controller_waitrequest) & ((loop_1_ii_state == 5'd21) & loop_1_valid_bit_102))) begin
		main_1_53_reg <= main_1_53;
		if (start == 1'b0 && ^(main_1_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_53_reg"); $finish; end
	end
end
always @(*) begin
	main_54_56 = main_altfp_extend_32_0;
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %56 = fpext float %52 to double*/
	if ((cur_state == LEGUP_F_main_BB__54_4)) begin
		main_54_56_reg <= main_54_56;
		if (start == 1'b0 && ^(main_54_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_56_reg"); $finish; end
	end
	/* main: %54*/
	/*   %56 = fpext float %52 to double*/
	if ((cur_state == LEGUP_F_main_BB__54_4)) begin
		main_54_56_reg <= main_54_56;
		if (start == 1'b0 && ^(main_54_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_56_reg"); $finish; end
	end
end
always @(*) begin
	main_54_60 = main_altfp_add_32_1;
end
always @(*) begin
/* main: %54*/
/*   %60 = fadd float %52, -1.816000e+04*/
	main_54_60_reg = main_1_22_reg;
end
always @(*) begin
	/* main: %54*/
	/*   %61 = bitcast float %60 to i32*/
		main_54_61 = main_54_60;
end
always @(posedge clk) begin
	/* main: %54*/
	/*   %61 = bitcast float %60 to i32*/
	if ((cur_state == LEGUP_F_main_BB__54_15)) begin
		main_54_61_reg <= main_54_61;
		if (start == 1'b0 && ^(main_54_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_54_61_reg"); $finish; end
	end
end
always @(*) begin
	main_54_62 = altfp_compare32_1_main_54_62_out;
end
always @(*) begin
	main_63_64 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %65*/
	/*   %66 = phi float [ %64, %63 ], [ %60, %54 ]*/
	if ((((cur_state == LEGUP_F_main_BB__54_16) & (memory_controller_waitrequest == 1'd0)) & (main_54_62 == 1'd0))) begin
		main_65_66 = main_54_60_reg;
	end
	/* main: %65*/
	/*   %66 = phi float [ %64, %63 ], [ %60, %54 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__63_31) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_65_66 = main_63_64;
	end
end
always @(posedge clk) begin
	/* main: %65*/
	/*   %66 = phi float [ %64, %63 ], [ %60, %54 ]*/
	if ((((cur_state == LEGUP_F_main_BB__54_16) & (memory_controller_waitrequest == 1'd0)) & (main_54_62 == 1'd0))) begin
		main_65_66_reg <= main_65_66;
		if (start == 1'b0 && ^(main_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_65_66_reg"); $finish; end
	end
	/* main: %65*/
	/*   %66 = phi float [ %64, %63 ], [ %60, %54 ]*/
	if (((cur_state == LEGUP_F_main_BB__63_31) & (memory_controller_waitrequest == 1'd0))) begin
		main_65_66_reg <= main_65_66;
		if (start == 1'b0 && ^(main_65_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_65_66_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %65*/
	/*   %67 = bitcast float %66 to i32*/
		main_65_67 = main_65_66_reg;
end
always @(*) begin
	main_65_71 = altfp_compare32_1_main_65_71_out;
end
always @(*) begin
	/* main: %65*/
	/*   %72 = zext i1 %71 to i32*/
		main_65_72 = main_65_71;
end
always @(*) begin
	main_79_80 = main_altfp_fptosi_32_0;
end
always @(*) begin
	loop_1_pipeline_start = 1'd0;
	if (reset) begin
		loop_1_pipeline_start = 1'd0;
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		loop_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_101) & loop_1_valid_bit_102)))) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_ii_state <= 5'd0;
		if (start == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_ii_state <= 5'd0;
		if (start == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd0))) begin
		loop_1_ii_state <= 5'd1;
		if (start == 1'b0 && ^(5'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd1))) begin
		loop_1_ii_state <= 5'd2;
		if (start == 1'b0 && ^(5'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd2))) begin
		loop_1_ii_state <= 5'd3;
		if (start == 1'b0 && ^(5'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd3))) begin
		loop_1_ii_state <= 5'd4;
		if (start == 1'b0 && ^(5'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd4))) begin
		loop_1_ii_state <= 5'd5;
		if (start == 1'b0 && ^(5'd5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd5))) begin
		loop_1_ii_state <= 5'd6;
		if (start == 1'b0 && ^(5'd6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd6))) begin
		loop_1_ii_state <= 5'd7;
		if (start == 1'b0 && ^(5'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd7))) begin
		loop_1_ii_state <= 5'd8;
		if (start == 1'b0 && ^(5'd8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd8))) begin
		loop_1_ii_state <= 5'd9;
		if (start == 1'b0 && ^(5'd9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd9))) begin
		loop_1_ii_state <= 5'd10;
		if (start == 1'b0 && ^(5'd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd10))) begin
		loop_1_ii_state <= 5'd11;
		if (start == 1'b0 && ^(5'd11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd11))) begin
		loop_1_ii_state <= 5'd12;
		if (start == 1'b0 && ^(5'd12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd12))) begin
		loop_1_ii_state <= 5'd13;
		if (start == 1'b0 && ^(5'd13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd13))) begin
		loop_1_ii_state <= 5'd14;
		if (start == 1'b0 && ^(5'd14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd14))) begin
		loop_1_ii_state <= 5'd15;
		if (start == 1'b0 && ^(5'd15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd15))) begin
		loop_1_ii_state <= 5'd16;
		if (start == 1'b0 && ^(5'd16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd16))) begin
		loop_1_ii_state <= 5'd17;
		if (start == 1'b0 && ^(5'd17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd17))) begin
		loop_1_ii_state <= 5'd18;
		if (start == 1'b0 && ^(5'd18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd18))) begin
		loop_1_ii_state <= 5'd19;
		if (start == 1'b0 && ^(5'd19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd19))) begin
		loop_1_ii_state <= 5'd20;
		if (start == 1'b0 && ^(5'd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd20))) begin
		loop_1_ii_state <= 5'd21;
		if (start == 1'b0 && ^(5'd21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd21))) begin
		loop_1_ii_state <= 5'd22;
		if (start == 1'b0 && ^(5'd22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd22))) begin
		loop_1_ii_state <= 5'd23;
		if (start == 1'b0 && ^(5'd23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd23))) begin
		loop_1_ii_state <= 5'd24;
		if (start == 1'b0 && ^(5'd24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd24))) begin
		loop_1_ii_state <= 5'd25;
		if (start == 1'b0 && ^(5'd25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd25))) begin
		loop_1_ii_state <= 5'd26;
		if (start == 1'b0 && ^(5'd26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd26))) begin
		loop_1_ii_state <= 5'd0;
		if (start == 1'b0 && ^(5'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 5'd26)) & loop_1_valid_bit_26))) begin
		loop_1_i_stage0 <= (loop_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 5'd0) & loop_1_pipeline_exit_cond)))) begin
		loop_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_101) & loop_1_valid_bit_102)))) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 5'd0) & loop_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 5'd0) & loop_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_1 <= loop_1_valid_bit_0;
		if (start == 1'b0 && ^(loop_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_2 <= loop_1_valid_bit_1;
		if (start == 1'b0 && ^(loop_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_3 <= loop_1_valid_bit_2;
		if (start == 1'b0 && ^(loop_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_4 <= loop_1_valid_bit_3;
		if (start == 1'b0 && ^(loop_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_5 <= loop_1_valid_bit_4;
		if (start == 1'b0 && ^(loop_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_6 <= loop_1_valid_bit_5;
		if (start == 1'b0 && ^(loop_1_valid_bit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_6"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_6 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_6"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_7 <= loop_1_valid_bit_6;
		if (start == 1'b0 && ^(loop_1_valid_bit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_7"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_7 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_7"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_8 <= loop_1_valid_bit_7;
		if (start == 1'b0 && ^(loop_1_valid_bit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_8"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_8 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_8"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_9 <= loop_1_valid_bit_8;
		if (start == 1'b0 && ^(loop_1_valid_bit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_9"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_9 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_9"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_10 <= loop_1_valid_bit_9;
		if (start == 1'b0 && ^(loop_1_valid_bit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_10"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_10 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_10"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_11 <= loop_1_valid_bit_10;
		if (start == 1'b0 && ^(loop_1_valid_bit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_11"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_11 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_11"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_12 <= loop_1_valid_bit_11;
		if (start == 1'b0 && ^(loop_1_valid_bit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_12"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_12 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_12"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_13 <= loop_1_valid_bit_12;
		if (start == 1'b0 && ^(loop_1_valid_bit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_13"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_13 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_13"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_14 <= loop_1_valid_bit_13;
		if (start == 1'b0 && ^(loop_1_valid_bit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_14"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_14 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_14"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_15 <= loop_1_valid_bit_14;
		if (start == 1'b0 && ^(loop_1_valid_bit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_15"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_15 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_15"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_16 <= loop_1_valid_bit_15;
		if (start == 1'b0 && ^(loop_1_valid_bit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_16"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_16 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_16"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_17 <= loop_1_valid_bit_16;
		if (start == 1'b0 && ^(loop_1_valid_bit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_17"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_17 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_17"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_18 <= loop_1_valid_bit_17;
		if (start == 1'b0 && ^(loop_1_valid_bit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_18"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_18 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_18"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_19 <= loop_1_valid_bit_18;
		if (start == 1'b0 && ^(loop_1_valid_bit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_19"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_19 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_19"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_20 <= loop_1_valid_bit_19;
		if (start == 1'b0 && ^(loop_1_valid_bit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_20"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_20 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_20"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_21 <= loop_1_valid_bit_20;
		if (start == 1'b0 && ^(loop_1_valid_bit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_21"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_21 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_21"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_22 <= loop_1_valid_bit_21;
		if (start == 1'b0 && ^(loop_1_valid_bit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_22"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_22 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_22"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_23 <= loop_1_valid_bit_22;
		if (start == 1'b0 && ^(loop_1_valid_bit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_23"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_23 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_23"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_24 <= loop_1_valid_bit_23;
		if (start == 1'b0 && ^(loop_1_valid_bit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_24"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_24 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_24"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_25 <= loop_1_valid_bit_24;
		if (start == 1'b0 && ^(loop_1_valid_bit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_25"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_25 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_25"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_26 <= loop_1_valid_bit_25;
		if (start == 1'b0 && ^(loop_1_valid_bit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_26"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_26 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_26"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_27 <= loop_1_valid_bit_26;
		if (start == 1'b0 && ^(loop_1_valid_bit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_27"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_27 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_27"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_28 <= loop_1_valid_bit_27;
		if (start == 1'b0 && ^(loop_1_valid_bit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_28"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_28 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_28"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_29 <= loop_1_valid_bit_28;
		if (start == 1'b0 && ^(loop_1_valid_bit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_29"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_29 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_29"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_30 <= loop_1_valid_bit_29;
		if (start == 1'b0 && ^(loop_1_valid_bit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_30"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_30 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_30"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_31 <= loop_1_valid_bit_30;
		if (start == 1'b0 && ^(loop_1_valid_bit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_31"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_31 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_31"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_32 <= loop_1_valid_bit_31;
		if (start == 1'b0 && ^(loop_1_valid_bit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_32"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_32 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_32"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_33 <= loop_1_valid_bit_32;
		if (start == 1'b0 && ^(loop_1_valid_bit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_33"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_33 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_33"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_34 <= loop_1_valid_bit_33;
		if (start == 1'b0 && ^(loop_1_valid_bit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_34"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_34 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_34"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_35 <= loop_1_valid_bit_34;
		if (start == 1'b0 && ^(loop_1_valid_bit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_35"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_35 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_35"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_36 <= loop_1_valid_bit_35;
		if (start == 1'b0 && ^(loop_1_valid_bit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_36"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_36 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_36"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_37 <= loop_1_valid_bit_36;
		if (start == 1'b0 && ^(loop_1_valid_bit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_37"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_37 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_37"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_38 <= loop_1_valid_bit_37;
		if (start == 1'b0 && ^(loop_1_valid_bit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_38"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_38 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_38"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_39 <= loop_1_valid_bit_38;
		if (start == 1'b0 && ^(loop_1_valid_bit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_39"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_39 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_39"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_40 <= loop_1_valid_bit_39;
		if (start == 1'b0 && ^(loop_1_valid_bit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_40"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_40 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_40"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_41 <= loop_1_valid_bit_40;
		if (start == 1'b0 && ^(loop_1_valid_bit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_41"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_41 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_41"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_42 <= loop_1_valid_bit_41;
		if (start == 1'b0 && ^(loop_1_valid_bit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_42"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_42 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_42"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_43 <= loop_1_valid_bit_42;
		if (start == 1'b0 && ^(loop_1_valid_bit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_43"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_43 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_43"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_44 <= loop_1_valid_bit_43;
		if (start == 1'b0 && ^(loop_1_valid_bit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_44"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_44 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_44"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_45 <= loop_1_valid_bit_44;
		if (start == 1'b0 && ^(loop_1_valid_bit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_45"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_45 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_45"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_46 <= loop_1_valid_bit_45;
		if (start == 1'b0 && ^(loop_1_valid_bit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_46"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_46 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_46"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_47 <= loop_1_valid_bit_46;
		if (start == 1'b0 && ^(loop_1_valid_bit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_47"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_47 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_47"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_48 <= loop_1_valid_bit_47;
		if (start == 1'b0 && ^(loop_1_valid_bit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_48"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_48 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_48"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_49 <= loop_1_valid_bit_48;
		if (start == 1'b0 && ^(loop_1_valid_bit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_49"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_49 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_49"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_50 <= loop_1_valid_bit_49;
		if (start == 1'b0 && ^(loop_1_valid_bit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_50"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_50 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_50"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_51 <= loop_1_valid_bit_50;
		if (start == 1'b0 && ^(loop_1_valid_bit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_51"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_51 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_51"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_52 <= loop_1_valid_bit_51;
		if (start == 1'b0 && ^(loop_1_valid_bit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_52"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_52 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_52"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_53 <= loop_1_valid_bit_52;
		if (start == 1'b0 && ^(loop_1_valid_bit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_53"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_53 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_53"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_54 <= loop_1_valid_bit_53;
		if (start == 1'b0 && ^(loop_1_valid_bit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_54"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_54 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_54"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_55 <= loop_1_valid_bit_54;
		if (start == 1'b0 && ^(loop_1_valid_bit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_55"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_55 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_55"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_56 <= loop_1_valid_bit_55;
		if (start == 1'b0 && ^(loop_1_valid_bit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_56"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_56 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_56"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_57 <= loop_1_valid_bit_56;
		if (start == 1'b0 && ^(loop_1_valid_bit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_57"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_57 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_57"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_58 <= loop_1_valid_bit_57;
		if (start == 1'b0 && ^(loop_1_valid_bit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_58"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_58 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_58"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_59 <= loop_1_valid_bit_58;
		if (start == 1'b0 && ^(loop_1_valid_bit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_59"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_59 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_59"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_60 <= loop_1_valid_bit_59;
		if (start == 1'b0 && ^(loop_1_valid_bit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_60"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_60 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_60"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_61 <= loop_1_valid_bit_60;
		if (start == 1'b0 && ^(loop_1_valid_bit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_61"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_61 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_61"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_62 <= loop_1_valid_bit_61;
		if (start == 1'b0 && ^(loop_1_valid_bit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_62"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_62 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_62"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_63 <= loop_1_valid_bit_62;
		if (start == 1'b0 && ^(loop_1_valid_bit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_63"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_63 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_63"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_64 <= loop_1_valid_bit_63;
		if (start == 1'b0 && ^(loop_1_valid_bit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_64"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_64 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_64"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_65 <= loop_1_valid_bit_64;
		if (start == 1'b0 && ^(loop_1_valid_bit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_65"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_65 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_65"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_66 <= loop_1_valid_bit_65;
		if (start == 1'b0 && ^(loop_1_valid_bit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_66"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_66 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_66"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_67 <= loop_1_valid_bit_66;
		if (start == 1'b0 && ^(loop_1_valid_bit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_67"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_67 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_67"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_68 <= loop_1_valid_bit_67;
		if (start == 1'b0 && ^(loop_1_valid_bit_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_68"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_68 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_68"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_69 <= loop_1_valid_bit_68;
		if (start == 1'b0 && ^(loop_1_valid_bit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_69"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_69 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_69"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_70 <= loop_1_valid_bit_69;
		if (start == 1'b0 && ^(loop_1_valid_bit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_70"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_70 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_70"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_71 <= loop_1_valid_bit_70;
		if (start == 1'b0 && ^(loop_1_valid_bit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_71"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_71 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_71"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_72 <= loop_1_valid_bit_71;
		if (start == 1'b0 && ^(loop_1_valid_bit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_72"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_72 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_72"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_73 <= loop_1_valid_bit_72;
		if (start == 1'b0 && ^(loop_1_valid_bit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_73"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_73 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_73"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_74 <= loop_1_valid_bit_73;
		if (start == 1'b0 && ^(loop_1_valid_bit_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_74"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_74 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_74"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_75 <= loop_1_valid_bit_74;
		if (start == 1'b0 && ^(loop_1_valid_bit_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_75"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_75 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_75"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_76 <= loop_1_valid_bit_75;
		if (start == 1'b0 && ^(loop_1_valid_bit_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_76"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_76 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_76"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_77 <= loop_1_valid_bit_76;
		if (start == 1'b0 && ^(loop_1_valid_bit_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_77"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_77 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_77"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_78 <= loop_1_valid_bit_77;
		if (start == 1'b0 && ^(loop_1_valid_bit_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_78"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_78 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_78"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_79 <= loop_1_valid_bit_78;
		if (start == 1'b0 && ^(loop_1_valid_bit_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_79"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_79 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_79"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_80 <= loop_1_valid_bit_79;
		if (start == 1'b0 && ^(loop_1_valid_bit_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_80"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_80 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_80"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_81 <= loop_1_valid_bit_80;
		if (start == 1'b0 && ^(loop_1_valid_bit_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_81"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_81 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_81"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_82 <= loop_1_valid_bit_81;
		if (start == 1'b0 && ^(loop_1_valid_bit_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_82"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_82 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_82"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_83 <= loop_1_valid_bit_82;
		if (start == 1'b0 && ^(loop_1_valid_bit_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_83"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_83 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_83"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_84 <= loop_1_valid_bit_83;
		if (start == 1'b0 && ^(loop_1_valid_bit_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_84"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_84 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_84"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_85 <= loop_1_valid_bit_84;
		if (start == 1'b0 && ^(loop_1_valid_bit_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_85"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_85 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_85"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_86 <= loop_1_valid_bit_85;
		if (start == 1'b0 && ^(loop_1_valid_bit_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_86"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_86 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_86"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_87 <= loop_1_valid_bit_86;
		if (start == 1'b0 && ^(loop_1_valid_bit_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_87"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_87 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_87"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_88 <= loop_1_valid_bit_87;
		if (start == 1'b0 && ^(loop_1_valid_bit_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_88"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_88 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_88"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_89 <= loop_1_valid_bit_88;
		if (start == 1'b0 && ^(loop_1_valid_bit_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_89"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_89 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_89"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_90 <= loop_1_valid_bit_89;
		if (start == 1'b0 && ^(loop_1_valid_bit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_90"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_90 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_90"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_91 <= loop_1_valid_bit_90;
		if (start == 1'b0 && ^(loop_1_valid_bit_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_91"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_91 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_91"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_92 <= loop_1_valid_bit_91;
		if (start == 1'b0 && ^(loop_1_valid_bit_91) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_92"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_92 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_92"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_93 <= loop_1_valid_bit_92;
		if (start == 1'b0 && ^(loop_1_valid_bit_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_93"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_93 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_93"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_94 <= loop_1_valid_bit_93;
		if (start == 1'b0 && ^(loop_1_valid_bit_93) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_94"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_94 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_94"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_95 <= loop_1_valid_bit_94;
		if (start == 1'b0 && ^(loop_1_valid_bit_94) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_95"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_95 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_95"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_96 <= loop_1_valid_bit_95;
		if (start == 1'b0 && ^(loop_1_valid_bit_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_96"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_96 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_96"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_97 <= loop_1_valid_bit_96;
		if (start == 1'b0 && ^(loop_1_valid_bit_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_97"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_97 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_97"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_98 <= loop_1_valid_bit_97;
		if (start == 1'b0 && ^(loop_1_valid_bit_97) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_98"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_98 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_98"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_99 <= loop_1_valid_bit_98;
		if (start == 1'b0 && ^(loop_1_valid_bit_98) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_99"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_99 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_99"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_100 <= loop_1_valid_bit_99;
		if (start == 1'b0 && ^(loop_1_valid_bit_99) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_100"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_100 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_100"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_101 <= loop_1_valid_bit_100;
		if (start == 1'b0 && ^(loop_1_valid_bit_100) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_101"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_101 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_101"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_102 <= loop_1_valid_bit_101;
		if (start == 1'b0 && ^(loop_1_valid_bit_101) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_102"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_102 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_102"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep_reg_stage0 <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd26) & loop_1_valid_bit_26))) begin
		main_1_scevgep_reg_stage1 <= main_1_scevgep_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd26) & loop_1_valid_bit_53))) begin
		main_1_scevgep_reg_stage2 <= main_1_scevgep_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep2_reg_stage0 <= main_1_scevgep2;
		if (start == 1'b0 && ^(main_1_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd26) & loop_1_valid_bit_26))) begin
		main_1_scevgep2_reg_stage1 <= main_1_scevgep2_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep2_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd26) & loop_1_valid_bit_53))) begin
		main_1_scevgep2_reg_stage2 <= main_1_scevgep2_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep2_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep3_reg_stage0 <= main_1_scevgep3;
		if (start == 1'b0 && ^(main_1_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd26) & loop_1_valid_bit_26))) begin
		main_1_scevgep3_reg_stage1 <= main_1_scevgep3_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep3_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep3_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep4_reg_stage0 <= main_1_scevgep4;
		if (start == 1'b0 && ^(main_1_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep4_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep5_reg_stage0 <= main_1_scevgep5;
		if (start == 1'b0 && ^(main_1_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep5_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep6_reg_stage0 <= main_1_scevgep6;
		if (start == 1'b0 && ^(main_1_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep7_reg_stage0 <= main_1_scevgep7;
		if (start == 1'b0 && ^(main_1_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2))) begin
		main_1_scevgep8_reg_stage0 <= main_1_scevgep8;
		if (start == 1'b0 && ^(main_1_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep8_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1))) begin
		main_1_scevgep9_reg_stage0 <= main_1_scevgep9;
		if (start == 1'b0 && ^(main_1_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep9_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1))) begin
		main_1_scevgep10_reg_stage0 <= main_1_scevgep10;
		if (start == 1'b0 && ^(main_1_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep10_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep12_reg_stage0 <= main_1_scevgep12;
		if (start == 1'b0 && ^(main_1_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep12_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep13_reg_stage0 <= main_1_scevgep13;
		if (start == 1'b0 && ^(main_1_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep13_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep14_reg_stage0 <= main_1_scevgep14;
		if (start == 1'b0 && ^(main_1_scevgep14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep14_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1))) begin
		main_1_scevgep16_reg_stage0 <= main_1_scevgep16;
		if (start == 1'b0 && ^(main_1_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep16_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1))) begin
		main_1_scevgep17_reg_stage0 <= main_1_scevgep17;
		if (start == 1'b0 && ^(main_1_scevgep17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep17_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1))) begin
		main_1_scevgep18_reg_stage0 <= main_1_scevgep18;
		if (start == 1'b0 && ^(main_1_scevgep18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep18_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep20_reg_stage0 <= main_1_scevgep20;
		if (start == 1'b0 && ^(main_1_scevgep20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep20_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep21_reg_stage0 <= main_1_scevgep21;
		if (start == 1'b0 && ^(main_1_scevgep21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep21_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep22_reg_stage0 <= main_1_scevgep22;
		if (start == 1'b0 && ^(main_1_scevgep22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep22_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd9) & loop_1_valid_bit_9))) begin
		main_1_10_reg_stage0 <= main_1_10;
		if (start == 1'b0 && ^(main_1_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_10_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8))) begin
		main_1_15_reg_stage0 <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd22) & loop_1_valid_bit_22))) begin
		main_1_16_reg_stage0 <= main_1_16;
		if (start == 1'b0 && ^(main_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd10) & loop_1_valid_bit_10))) begin
		main_1_17_reg_stage0 <= main_1_17;
		if (start == 1'b0 && ^(main_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_17_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8))) begin
		main_1_18_reg_stage0 <= main_1_18;
		if (start == 1'b0 && ^(main_1_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_18_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5))) begin
		main_1_20_reg_stage0 <= main_1_20;
		if (start == 1'b0 && ^(main_1_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_20_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd19) & loop_1_valid_bit_19))) begin
		main_1_22_reg_stage0 <= main_1_22;
		if (start == 1'b0 && ^(main_1_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_22_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6))) begin
		main_1_24_reg_stage0 <= main_1_24;
		if (start == 1'b0 && ^(main_1_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_24_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd20) & loop_1_valid_bit_20))) begin
		main_1_28_reg_stage0 <= main_1_28;
		if (start == 1'b0 && ^(main_1_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_28_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3))) begin
		main_1_29_reg_stage0 <= main_1_29;
		if (start == 1'b0 && ^(main_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2))) begin
		main_1_30_reg_stage0 <= main_1_30;
		if (start == 1'b0 && ^(main_1_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_30_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd17) & loop_1_valid_bit_17))) begin
		main_1_31_reg_stage0 <= main_1_31;
		if (start == 1'b0 && ^(main_1_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_31_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4))) begin
		main_1_32_reg_stage0 <= main_1_32;
		if (start == 1'b0 && ^(main_1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4))) begin
		main_1_35_reg_stage0 <= main_1_35;
		if (start == 1'b0 && ^(main_1_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_35_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2))) begin
		main_1_37_reg_stage0 <= main_1_37;
		if (start == 1'b0 && ^(main_1_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd9) & loop_1_valid_bit_36))) begin
		main_1_41_reg_stage1 <= main_1_41;
		if (start == 1'b0 && ^(main_1_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_41_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd4) & loop_1_valid_bit_31))) begin
		main_1_42_reg_stage1 <= main_1_42;
		if (start == 1'b0 && ^(main_1_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_42_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd15) & loop_1_valid_bit_42))) begin
		main_1_46_reg_stage1 <= main_1_46;
		if (start == 1'b0 && ^(main_1_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_46_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd26) & loop_1_valid_bit_53))) begin
		main_1_46_reg_stage2 <= main_1_46_reg_stage1;
		if (start == 1'b0 && ^(main_1_46_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_46_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd21) & loop_1_valid_bit_75))) begin
		main_1_49_reg_stage2 <= main_1_49;
		if (start == 1'b0 && ^(main_1_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_49_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6))) begin
		main_1_51_reg_stage0 <= main_1_51;
		if (start == 1'b0 && ^(main_1_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd26) & loop_1_valid_bit_26))) begin
		main_1_51_reg_stage1 <= main_1_51_reg_stage0;
		if (start == 1'b0 && ^(main_1_51_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd26) & loop_1_valid_bit_53))) begin
		main_1_51_reg_stage2 <= main_1_51_reg_stage1;
		if (start == 1'b0 && ^(main_1_51_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 5'd26) & loop_1_valid_bit_80))) begin
		main_1_51_reg_stage3 <= main_1_51_reg_stage2;
		if (start == 1'b0 && ^(main_1_51_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage3"); $finish; end
	end
end
always @(*) begin
	loop_1_pipeline_exit_cond = (loop_1_i_stage0 == 39);
end
always @(*) begin
	loop_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_101) & loop_1_valid_bit_102)));
end
always @(*) begin
	/* main: %1*/
	/*   %19 = fadd float %17, %18, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !5
	start_time: 11 avail_time: 24 stage: 0 II: 27 start_ii_state = 11 % 27 = 11 avail_ii_state = 24 % 27 = 24*/
	if (((loop_1_ii_state == 5'd11) & loop_1_valid_bit_11)) begin
		main_altfp_add_32_2_op0 = main_1_17_reg_stage0;
	end
	/* main: %1*/
	/*   %28 = fadd float %26, %27, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !23, !legup.pipeline.stage !5
	start_time: 7 avail_time: 20 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 20 % 27 = 20*/
	else if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		main_altfp_add_32_2_op0 = main_1_26;
	end
	/* main: %1*/
	/*   %31 = fadd float %29, %30, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !24, !legup.pipeline.stage !5
	start_time: 4 avail_time: 17 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 17 % 27 = 17*/
	else if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		main_altfp_add_32_2_op0 = main_1_29_reg_stage0;
	end
	/* main: %1*/
	/*   %40 = fadd float %19, %22, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !27, !legup.pipeline.stage !5
	start_time: 24 avail_time: 37 stage: 0 II: 27 start_ii_state = 24 % 27 = 24 avail_ii_state = 37 % 27 = 10*/
	else if (((loop_1_ii_state == 5'd24) & loop_1_valid_bit_24)) begin
		main_altfp_add_32_2_op0 = main_1_19;
	end
	/* main: %1*/
	/*   %45 = fadd float %41, %42, !legup.pipeline.start_time !27, !legup.pipeline.avail_time !31, !legup.pipeline.stage !4
	start_time: 37 avail_time: 50 stage: 1 II: 27 start_ii_state = 37 % 27 = 10 avail_ii_state = 50 % 27 = 23*/
	else if (((loop_1_ii_state == 5'd10) & loop_1_valid_bit_37)) begin
		main_altfp_add_32_2_op0 = main_1_41_reg_stage1;
	end
	/* main: %1*/
	/*   %47 = fadd float %44, %45, !legup.pipeline.start_time !31, !legup.pipeline.avail_time !34, !legup.pipeline.stage !4
	start_time: 50 avail_time: 63 stage: 1 II: 27 start_ii_state = 50 % 27 = 23 avail_ii_state = 63 % 27 = 9*/
	else if (((loop_1_ii_state == 5'd23) & loop_1_valid_bit_50)) begin
		main_altfp_add_32_2_op0 = main_1_44;
	end
	/* main: %1*/
	/*   %48 = fadd float %47, %46, !legup.pipeline.start_time !34, !legup.pipeline.avail_time !36, !legup.pipeline.stage !3
	start_time: 63 avail_time: 76 stage: 2 II: 27 start_ii_state = 63 % 27 = 9 avail_ii_state = 76 % 27 = 22*/
	else /* if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_63)) */ begin
		main_altfp_add_32_2_op0 = main_1_47;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %19 = fadd float %17, %18, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !5
	start_time: 11 avail_time: 24 stage: 0 II: 27 start_ii_state = 11 % 27 = 11 avail_ii_state = 24 % 27 = 24*/
	if (((loop_1_ii_state == 5'd11) & loop_1_valid_bit_11)) begin
		main_altfp_add_32_2_op1 = main_1_18_reg_stage0;
	end
	/* main: %1*/
	/*   %28 = fadd float %26, %27, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !23, !legup.pipeline.stage !5
	start_time: 7 avail_time: 20 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 20 % 27 = 20*/
	else if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		main_altfp_add_32_2_op1 = main_1_27;
	end
	/* main: %1*/
	/*   %31 = fadd float %29, %30, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !24, !legup.pipeline.stage !5
	start_time: 4 avail_time: 17 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 17 % 27 = 17*/
	else if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		main_altfp_add_32_2_op1 = main_1_30_reg_stage0;
	end
	/* main: %1*/
	/*   %40 = fadd float %19, %22, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !27, !legup.pipeline.stage !5
	start_time: 24 avail_time: 37 stage: 0 II: 27 start_ii_state = 24 % 27 = 24 avail_ii_state = 37 % 27 = 10*/
	else if (((loop_1_ii_state == 5'd24) & loop_1_valid_bit_24)) begin
		main_altfp_add_32_2_op1 = main_1_22_reg_stage0;
	end
	/* main: %1*/
	/*   %45 = fadd float %41, %42, !legup.pipeline.start_time !27, !legup.pipeline.avail_time !31, !legup.pipeline.stage !4
	start_time: 37 avail_time: 50 stage: 1 II: 27 start_ii_state = 37 % 27 = 10 avail_ii_state = 50 % 27 = 23*/
	else if (((loop_1_ii_state == 5'd10) & loop_1_valid_bit_37)) begin
		main_altfp_add_32_2_op1 = main_1_42_reg_stage1;
	end
	/* main: %1*/
	/*   %47 = fadd float %44, %45, !legup.pipeline.start_time !31, !legup.pipeline.avail_time !34, !legup.pipeline.stage !4
	start_time: 50 avail_time: 63 stage: 1 II: 27 start_ii_state = 50 % 27 = 23 avail_ii_state = 63 % 27 = 9*/
	else if (((loop_1_ii_state == 5'd23) & loop_1_valid_bit_50)) begin
		main_altfp_add_32_2_op1 = main_1_45;
	end
	/* main: %1*/
	/*   %48 = fadd float %47, %46, !legup.pipeline.start_time !34, !legup.pipeline.avail_time !36, !legup.pipeline.stage !3
	start_time: 63 avail_time: 76 stage: 2 II: 27 start_ii_state = 63 % 27 = 9 avail_ii_state = 76 % 27 = 22*/
	else /* if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_63)) */ begin
		main_altfp_add_32_2_op1 = main_1_46_reg_stage2;
	end
end
always @(*) begin
	altfp_main_1_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_2 = altfp_adder_main_1_19_out;
end
always @(*) begin
	/* main: %1*/
	/*   %16 = fadd float %14, %15, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !16, !legup.pipeline.stage !5
	start_time: 9 avail_time: 22 stage: 0 II: 27 start_ii_state = 9 % 27 = 9 avail_ii_state = 22 % 27 = 22*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_9)) begin
		main_altfp_add_32_1_op0 = main_1_14;
	end
	/* main: %1*/
	/*   %22 = fadd float %20, %21, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !21, !legup.pipeline.stage !5
	start_time: 6 avail_time: 19 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 19 % 27 = 19*/
	else if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		main_altfp_add_32_1_op0 = main_1_20_reg_stage0;
	end
	/* main: %1*/
	/*   %38 = fadd float %36, %37, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !26, !legup.pipeline.stage !5
	start_time: 3 avail_time: 16 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 16 % 27 = 16*/
	else if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		main_altfp_add_32_1_op0 = main_1_36;
	end
	/* main: %1*/
	/*   %43 = fadd float %35, %38, !legup.pipeline.start_time !26, !legup.pipeline.avail_time !30, !legup.pipeline.stage !5
	start_time: 16 avail_time: 29 stage: 0 II: 27 start_ii_state = 16 % 27 = 16 avail_ii_state = 29 % 27 = 2*/
	else if (((loop_1_ii_state == 5'd16) & loop_1_valid_bit_16)) begin
		main_altfp_add_32_1_op0 = main_1_35_reg_stage0;
	end
	/* main: %1*/
	/*   %44 = fadd float %39, %40, !legup.pipeline.start_time !27, !legup.pipeline.avail_time !31, !legup.pipeline.stage !4
	start_time: 37 avail_time: 50 stage: 1 II: 27 start_ii_state = 37 % 27 = 10 avail_ii_state = 50 % 27 = 23*/
	else if (((loop_1_ii_state == 5'd10) & loop_1_valid_bit_37)) begin
		main_altfp_add_32_1_op0 = main_1_39;
	end
	/* main: %1*/
	/*   %50 = fadd float %49, %48, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !38, !legup.pipeline.stage !3
	start_time: 76 avail_time: 89 stage: 2 II: 27 start_ii_state = 76 % 27 = 22 avail_ii_state = 89 % 27 = 8*/
	else if (((loop_1_ii_state == 5'd22) & loop_1_valid_bit_76)) begin
		main_altfp_add_32_1_op0 = main_1_49_reg_stage2;
	end
	/* main: %54*/
	/*   %60 = fadd float %52, -1.816000e+04*/
	else /* if ((cur_state == LEGUP_F_main_BB__54_2)) */ begin
		main_altfp_add_32_1_op0 = main_1_52_reg;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %16 = fadd float %14, %15, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !16, !legup.pipeline.stage !5
	start_time: 9 avail_time: 22 stage: 0 II: 27 start_ii_state = 9 % 27 = 9 avail_ii_state = 22 % 27 = 22*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_9)) begin
		main_altfp_add_32_1_op1 = main_1_15_reg_stage0;
	end
	/* main: %1*/
	/*   %22 = fadd float %20, %21, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !21, !legup.pipeline.stage !5
	start_time: 6 avail_time: 19 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 19 % 27 = 19*/
	else if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		main_altfp_add_32_1_op1 = main_1_21;
	end
	/* main: %1*/
	/*   %38 = fadd float %36, %37, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !26, !legup.pipeline.stage !5
	start_time: 3 avail_time: 16 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 16 % 27 = 16*/
	else if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		main_altfp_add_32_1_op1 = main_1_37_reg_stage0;
	end
	/* main: %1*/
	/*   %43 = fadd float %35, %38, !legup.pipeline.start_time !26, !legup.pipeline.avail_time !30, !legup.pipeline.stage !5
	start_time: 16 avail_time: 29 stage: 0 II: 27 start_ii_state = 16 % 27 = 16 avail_ii_state = 29 % 27 = 2*/
	else if (((loop_1_ii_state == 5'd16) & loop_1_valid_bit_16)) begin
		main_altfp_add_32_1_op1 = main_1_38;
	end
	/* main: %1*/
	/*   %44 = fadd float %39, %40, !legup.pipeline.start_time !27, !legup.pipeline.avail_time !31, !legup.pipeline.stage !4
	start_time: 37 avail_time: 50 stage: 1 II: 27 start_ii_state = 37 % 27 = 10 avail_ii_state = 50 % 27 = 23*/
	else if (((loop_1_ii_state == 5'd10) & loop_1_valid_bit_37)) begin
		main_altfp_add_32_1_op1 = main_1_40;
	end
	/* main: %1*/
	/*   %50 = fadd float %49, %48, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !38, !legup.pipeline.stage !3
	start_time: 76 avail_time: 89 stage: 2 II: 27 start_ii_state = 76 % 27 = 22 avail_ii_state = 89 % 27 = 8*/
	else if (((loop_1_ii_state == 5'd22) & loop_1_valid_bit_76)) begin
		main_altfp_add_32_1_op1 = main_1_48;
	end
	/* main: %54*/
	/*   %60 = fadd float %52, -1.816000e+04*/
	else /* if ((cur_state == LEGUP_F_main_BB__54_2)) */ begin
		main_altfp_add_32_1_op1 = 32'hC68DE000;
	end
end
always @(*) begin
	altfp_main_1_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_1 = altfp_adder_main_1_22_out;
end
always @(*) begin
	/* main: %1*/
	/*   %13 = fadd float %10, %12, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !5
	start_time: 11 avail_time: 24 stage: 0 II: 27 start_ii_state = 11 % 27 = 11 avail_ii_state = 24 % 27 = 24*/
	if (((loop_1_ii_state == 5'd11) & loop_1_valid_bit_11)) begin
		main_altfp_add_32_0_op0 = main_1_10_reg_stage0;
	end
	/* main: %1*/
	/*   %25 = fadd float %23, %24, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !22, !legup.pipeline.stage !5
	start_time: 10 avail_time: 23 stage: 0 II: 27 start_ii_state = 10 % 27 = 10 avail_ii_state = 23 % 27 = 23*/
	else if (((loop_1_ii_state == 5'd10) & loop_1_valid_bit_10)) begin
		main_altfp_add_32_0_op0 = main_1_23;
	end
	/* main: %1*/
	/*   %34 = fadd float %32, %33, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !25, !legup.pipeline.stage !5
	start_time: 5 avail_time: 18 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 18 % 27 = 18*/
	else if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		main_altfp_add_32_0_op0 = main_1_32_reg_stage0;
	end
	/* main: %1*/
	/*   %39 = fadd float %13, %16, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !27, !legup.pipeline.stage !5
	start_time: 24 avail_time: 37 stage: 0 II: 27 start_ii_state = 24 % 27 = 24 avail_ii_state = 37 % 27 = 10*/
	else if (((loop_1_ii_state == 5'd24) & loop_1_valid_bit_24)) begin
		main_altfp_add_32_0_op0 = main_1_13;
	end
	/* main: %1*/
	/*   %41 = fadd float %25, %28, !legup.pipeline.start_time !22, !legup.pipeline.avail_time !28, !legup.pipeline.stage !5
	start_time: 23 avail_time: 36 stage: 0 II: 27 start_ii_state = 23 % 27 = 23 avail_ii_state = 36 % 27 = 9*/
	else if (((loop_1_ii_state == 5'd23) & loop_1_valid_bit_23)) begin
		main_altfp_add_32_0_op0 = main_1_25;
	end
	/* main: %1*/
	/*   %42 = fadd float %31, %34, !legup.pipeline.start_time !25, !legup.pipeline.avail_time !29, !legup.pipeline.stage !5
	start_time: 18 avail_time: 31 stage: 0 II: 27 start_ii_state = 18 % 27 = 18 avail_ii_state = 31 % 27 = 4*/
	else if (((loop_1_ii_state == 5'd18) & loop_1_valid_bit_18)) begin
		main_altfp_add_32_0_op0 = main_1_31_reg_stage0;
	end
	/* main: %1*/
	/*   %46 = fadd float %43, 0.000000e+00, !legup.pipeline.start_time !30, !legup.pipeline.avail_time !32, !legup.pipeline.stage !4
	start_time: 29 avail_time: 42 stage: 1 II: 27 start_ii_state = 29 % 27 = 2 avail_ii_state = 42 % 27 = 15*/
	else if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_29)) begin
		main_altfp_add_32_0_op0 = main_1_43;
	end
	/* main: %1*/
	/*   %52 = fadd float %51, %50, !legup.pipeline.start_time !38, !legup.pipeline.avail_time !39, !legup.pipeline.stage !18
	start_time: 89 avail_time: 102 stage: 3 II: 27 start_ii_state = 89 % 27 = 8 avail_ii_state = 102 % 27 = 21*/
	else /* if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_89)) */ begin
		main_altfp_add_32_0_op0 = main_1_51_reg_stage3;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %13 = fadd float %10, %12, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !5
	start_time: 11 avail_time: 24 stage: 0 II: 27 start_ii_state = 11 % 27 = 11 avail_ii_state = 24 % 27 = 24*/
	if (((loop_1_ii_state == 5'd11) & loop_1_valid_bit_11)) begin
		main_altfp_add_32_0_op1 = main_1_12;
	end
	/* main: %1*/
	/*   %25 = fadd float %23, %24, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !22, !legup.pipeline.stage !5
	start_time: 10 avail_time: 23 stage: 0 II: 27 start_ii_state = 10 % 27 = 10 avail_ii_state = 23 % 27 = 23*/
	else if (((loop_1_ii_state == 5'd10) & loop_1_valid_bit_10)) begin
		main_altfp_add_32_0_op1 = main_1_24_reg_stage0;
	end
	/* main: %1*/
	/*   %34 = fadd float %32, %33, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !25, !legup.pipeline.stage !5
	start_time: 5 avail_time: 18 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 18 % 27 = 18*/
	else if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		main_altfp_add_32_0_op1 = main_1_33;
	end
	/* main: %1*/
	/*   %39 = fadd float %13, %16, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !27, !legup.pipeline.stage !5
	start_time: 24 avail_time: 37 stage: 0 II: 27 start_ii_state = 24 % 27 = 24 avail_ii_state = 37 % 27 = 10*/
	else if (((loop_1_ii_state == 5'd24) & loop_1_valid_bit_24)) begin
		main_altfp_add_32_0_op1 = main_1_16_reg_stage0;
	end
	/* main: %1*/
	/*   %41 = fadd float %25, %28, !legup.pipeline.start_time !22, !legup.pipeline.avail_time !28, !legup.pipeline.stage !5
	start_time: 23 avail_time: 36 stage: 0 II: 27 start_ii_state = 23 % 27 = 23 avail_ii_state = 36 % 27 = 9*/
	else if (((loop_1_ii_state == 5'd23) & loop_1_valid_bit_23)) begin
		main_altfp_add_32_0_op1 = main_1_28_reg_stage0;
	end
	/* main: %1*/
	/*   %42 = fadd float %31, %34, !legup.pipeline.start_time !25, !legup.pipeline.avail_time !29, !legup.pipeline.stage !5
	start_time: 18 avail_time: 31 stage: 0 II: 27 start_ii_state = 18 % 27 = 18 avail_ii_state = 31 % 27 = 4*/
	else if (((loop_1_ii_state == 5'd18) & loop_1_valid_bit_18)) begin
		main_altfp_add_32_0_op1 = main_1_34;
	end
	/* main: %1*/
	/*   %46 = fadd float %43, 0.000000e+00, !legup.pipeline.start_time !30, !legup.pipeline.avail_time !32, !legup.pipeline.stage !4
	start_time: 29 avail_time: 42 stage: 1 II: 27 start_ii_state = 29 % 27 = 2 avail_ii_state = 42 % 27 = 15*/
	else if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_29)) begin
		main_altfp_add_32_0_op1 = 32'h0;
	end
	/* main: %1*/
	/*   %52 = fadd float %51, %50, !legup.pipeline.start_time !38, !legup.pipeline.avail_time !39, !legup.pipeline.stage !18
	start_time: 89 avail_time: 102 stage: 3 II: 27 start_ii_state = 89 % 27 = 8 avail_ii_state = 102 % 27 = 21*/
	else /* if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_89)) */ begin
		main_altfp_add_32_0_op1 = main_1_50;
	end
end
always @(*) begin
	altfp_main_1_25_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_0 = altfp_adder_main_1_25_out;
end
always @(*) begin
	/* main: %54*/
	/*   %56 = fpext float %52 to double*/
		main_altfp_extend_32_0_op0 = main_1_52_reg;
end
always @(*) begin
	altfp_main_54_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_extend_32_0 = altfp_extend_main_54_56_out;
end
always @(*) begin
	/* main: %63*/
	/*   %64 = fsub float -0.000000e+00, %60*/
if (reset) begin main_altfp_subtract_32_0_op0 = 0; end
		main_altfp_subtract_32_0_op0 = 32'h80000000;
end
always @(*) begin
	/* main: %63*/
	/*   %64 = fsub float -0.000000e+00, %60*/
		main_altfp_subtract_32_0_op1 = main_54_60_reg;
end
always @(*) begin
	altfp_main_63_64_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_subtract_32_0 = altfp_subtractor_main_63_64_out;
end
always @(*) begin
	/* main: %1*/
	/*   %51 = sitofp i32 %2 to float, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 0 avail_time: 6 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 6 % 27 = 6*/
		main_altfp_sitofp_32_0_op0 = loop_1_i_stage0;
end
always @(*) begin
	altfp_main_1_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_sitofp_32_0 = altfp_sitofp32_main_1_51_out;
end
always @(*) begin
	/* main: %79*/
	/*   %80 = fptosi float %52 to i32*/
		main_altfp_fptosi_32_0_op0 = main_1_52_reg;
end
always @(*) begin
	altfp_main_79_80_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_fptosi_32_0 = altfp_fptosi32_main_79_80_out;
end
always @(*) begin
	altfp_main_54_62_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_65_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %79*/
	/*   ret i32 %80*/
	if ((cur_state == LEGUP_F_main_BB__79_42)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %10 = load volatile float* %scevgep22, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
	if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %12 = load volatile float* %scevgep21, align 4, !tbaa !6, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !5
	start_time: 9 avail_time: 11 stage: 0 II: 27 start_ii_state = 9 % 27 = 9 avail_ii_state = 11 % 27 = 11*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %15 = load volatile float* %scevgep14, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
	if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %17 = load volatile float* %scevgep10, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
	if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %20 = load volatile float* %scevgep8, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
	if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %21 = load volatile float* %scevgep7, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
	if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %26 = load volatile float* %scevgep17, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
	if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %29 = load volatile float* %scevgep5, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
	if (((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %30 = load volatile float* %scevgep19, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
	if (((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %32 = load volatile float* %scevgep16, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
	if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store volatile float %48, float* %scevgep, align 4, !tbaa !6, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !3
	start_time: 76 avail_time: 77 stage: 2 II: 27 start_ii_state = 76 % 27 = 22 avail_ii_state = 77 % 27 = 23*/
	if (((loop_1_ii_state == 5'd22) & loop_1_valid_bit_76)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %1*/
	/*   %10 = load volatile float* %scevgep22, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
	if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		memory_controller_address_a = main_1_scevgep22_reg_stage0;
	end
	/* main: %1*/
	/*   %12 = load volatile float* %scevgep21, align 4, !tbaa !6, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !5
	start_time: 9 avail_time: 11 stage: 0 II: 27 start_ii_state = 9 % 27 = 9 avail_ii_state = 11 % 27 = 11*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_9)) begin
		memory_controller_address_a = main_1_scevgep21_reg_stage0;
	end
	/* main: %1*/
	/*   %15 = load volatile float* %scevgep14, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
	if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		memory_controller_address_a = main_1_scevgep14_reg_stage0;
	end
	/* main: %1*/
	/*   %17 = load volatile float* %scevgep10, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
	if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8)) begin
		memory_controller_address_a = main_1_scevgep10_reg_stage0;
	end
	/* main: %1*/
	/*   %20 = load volatile float* %scevgep8, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
	if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		memory_controller_address_a = main_1_scevgep8_reg_stage0;
	end
	/* main: %1*/
	/*   %21 = load volatile float* %scevgep7, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
	if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		memory_controller_address_a = main_1_scevgep7_reg_stage0;
	end
	/* main: %1*/
	/*   %26 = load volatile float* %scevgep17, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
	if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		memory_controller_address_a = main_1_scevgep17_reg_stage0;
	end
	/* main: %1*/
	/*   %29 = load volatile float* %scevgep5, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
	if (((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1)) begin
		memory_controller_address_a = main_1_scevgep5_reg_stage0;
	end
	/* main: %1*/
	/*   %30 = load volatile float* %scevgep19, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
	if (((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0)) begin
		memory_controller_address_a = main_1_scevgep19;
	end
	/* main: %1*/
	/*   %32 = load volatile float* %scevgep16, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
	if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2)) begin
		memory_controller_address_a = main_1_scevgep16_reg_stage0;
	end
	/* main: %1*/
	/*   store volatile float %48, float* %scevgep, align 4, !tbaa !6, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !3
	start_time: 76 avail_time: 77 stage: 2 II: 27 start_ii_state = 76 % 27 = 22 avail_ii_state = 77 % 27 = 23*/
	if (((loop_1_ii_state == 5'd22) & loop_1_valid_bit_76)) begin
		memory_controller_address_a = main_1_scevgep_reg_stage2;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %10 = load volatile float* %scevgep22, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
	if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %12 = load volatile float* %scevgep21, align 4, !tbaa !6, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !5
	start_time: 9 avail_time: 11 stage: 0 II: 27 start_ii_state = 9 % 27 = 9 avail_ii_state = 11 % 27 = 11*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_9)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %15 = load volatile float* %scevgep14, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
	if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %17 = load volatile float* %scevgep10, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
	if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %20 = load volatile float* %scevgep8, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
	if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %21 = load volatile float* %scevgep7, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
	if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %26 = load volatile float* %scevgep17, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
	if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %29 = load volatile float* %scevgep5, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
	if (((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %30 = load volatile float* %scevgep19, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
	if (((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %32 = load volatile float* %scevgep16, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
	if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile float %48, float* %scevgep, align 4, !tbaa !6, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !3
	start_time: 76 avail_time: 77 stage: 2 II: 27 start_ii_state = 76 % 27 = 22 avail_ii_state = 77 % 27 = 23*/
	if (((loop_1_ii_state == 5'd22) & loop_1_valid_bit_76)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile float %48, float* %scevgep, align 4, !tbaa !6, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !3
	start_time: 76 avail_time: 77 stage: 2 II: 27 start_ii_state = 76 % 27 = 22 avail_ii_state = 77 % 27 = 23*/
	if (((loop_1_ii_state == 5'd22) & loop_1_valid_bit_76)) begin
		memory_controller_in_a = main_1_48;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %1*/
	/*   %10 = load volatile float* %scevgep22, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
	if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %12 = load volatile float* %scevgep21, align 4, !tbaa !6, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !5
	start_time: 9 avail_time: 11 stage: 0 II: 27 start_ii_state = 9 % 27 = 9 avail_ii_state = 11 % 27 = 11*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %15 = load volatile float* %scevgep14, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
	if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %17 = load volatile float* %scevgep10, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
	if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %20 = load volatile float* %scevgep8, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
	if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %21 = load volatile float* %scevgep7, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
	if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %26 = load volatile float* %scevgep17, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
	if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %29 = load volatile float* %scevgep5, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
	if (((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %30 = load volatile float* %scevgep19, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
	if (((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   %32 = load volatile float* %scevgep16, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
	if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %1*/
	/*   store volatile float %48, float* %scevgep, align 4, !tbaa !6, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !3
	start_time: 76 avail_time: 77 stage: 2 II: 27 start_ii_state = 76 % 27 = 22 avail_ii_state = 77 % 27 = 23*/
	if (((loop_1_ii_state == 5'd22) & loop_1_valid_bit_76)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile float* %scevgep18, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
	if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %18 = load volatile float* %scevgep9, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
	if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %23 = load volatile float* %scevgep6, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
	if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %24 = load volatile float* %scevgep20, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
	if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %27 = load volatile float* %scevgep13, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
	if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %33 = load volatile float* %scevgep12, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
	if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %35 = load volatile float* %scevgep4, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
	if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %36 = load volatile float* %scevgep15, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
	if (((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %37 = load volatile float* %scevgep11, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
	if (((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store volatile float %44, float* %scevgep3, align 4, !tbaa !6, !legup.pipeline.start_time !31, !legup.pipeline.avail_time !33, !legup.pipeline.stage !4
	start_time: 50 avail_time: 51 stage: 1 II: 27 start_ii_state = 50 % 27 = 23 avail_ii_state = 51 % 27 = 24*/
	if (((loop_1_ii_state == 5'd23) & loop_1_valid_bit_50)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store volatile float %47, float* %scevgep2, align 4, !tbaa !6, !legup.pipeline.start_time !34, !legup.pipeline.avail_time !35, !legup.pipeline.stage !3
	start_time: 63 avail_time: 64 stage: 2 II: 27 start_ii_state = 63 % 27 = 9 avail_ii_state = 64 % 27 = 10*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_63)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile float* %scevgep18, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
	if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		memory_controller_address_b = main_1_scevgep18_reg_stage0;
	end
	/* main: %1*/
	/*   %18 = load volatile float* %scevgep9, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
	if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		memory_controller_address_b = main_1_scevgep9_reg_stage0;
	end
	/* main: %1*/
	/*   %23 = load volatile float* %scevgep6, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
	if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8)) begin
		memory_controller_address_b = main_1_scevgep6_reg_stage0;
	end
	/* main: %1*/
	/*   %24 = load volatile float* %scevgep20, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
	if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		memory_controller_address_b = main_1_scevgep20_reg_stage0;
	end
	/* main: %1*/
	/*   %27 = load volatile float* %scevgep13, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
	if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		memory_controller_address_b = main_1_scevgep13_reg_stage0;
	end
	/* main: %1*/
	/*   %33 = load volatile float* %scevgep12, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
	if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		memory_controller_address_b = main_1_scevgep12_reg_stage0;
	end
	/* main: %1*/
	/*   %35 = load volatile float* %scevgep4, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
	if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2)) begin
		memory_controller_address_b = main_1_scevgep4_reg_stage0;
	end
	/* main: %1*/
	/*   %36 = load volatile float* %scevgep15, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
	if (((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1)) begin
		memory_controller_address_b = main_1_scevgep15;
	end
	/* main: %1*/
	/*   %37 = load volatile float* %scevgep11, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
	if (((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0)) begin
		memory_controller_address_b = main_1_scevgep11;
	end
	/* main: %1*/
	/*   store volatile float %44, float* %scevgep3, align 4, !tbaa !6, !legup.pipeline.start_time !31, !legup.pipeline.avail_time !33, !legup.pipeline.stage !4
	start_time: 50 avail_time: 51 stage: 1 II: 27 start_ii_state = 50 % 27 = 23 avail_ii_state = 51 % 27 = 24*/
	if (((loop_1_ii_state == 5'd23) & loop_1_valid_bit_50)) begin
		memory_controller_address_b = main_1_scevgep3_reg_stage1;
	end
	/* main: %1*/
	/*   store volatile float %47, float* %scevgep2, align 4, !tbaa !6, !legup.pipeline.start_time !34, !legup.pipeline.avail_time !35, !legup.pipeline.stage !3
	start_time: 63 avail_time: 64 stage: 2 II: 27 start_ii_state = 63 % 27 = 9 avail_ii_state = 64 % 27 = 10*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_63)) begin
		memory_controller_address_b = main_1_scevgep2_reg_stage2;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile float* %scevgep18, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
	if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %18 = load volatile float* %scevgep9, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
	if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %23 = load volatile float* %scevgep6, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
	if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %24 = load volatile float* %scevgep20, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
	if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %27 = load volatile float* %scevgep13, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
	if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %33 = load volatile float* %scevgep12, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
	if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %35 = load volatile float* %scevgep4, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
	if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %36 = load volatile float* %scevgep15, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
	if (((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %37 = load volatile float* %scevgep11, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
	if (((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   store volatile float %44, float* %scevgep3, align 4, !tbaa !6, !legup.pipeline.start_time !31, !legup.pipeline.avail_time !33, !legup.pipeline.stage !4
	start_time: 50 avail_time: 51 stage: 1 II: 27 start_ii_state = 50 % 27 = 23 avail_ii_state = 51 % 27 = 24*/
	if (((loop_1_ii_state == 5'd23) & loop_1_valid_bit_50)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store volatile float %47, float* %scevgep2, align 4, !tbaa !6, !legup.pipeline.start_time !34, !legup.pipeline.avail_time !35, !legup.pipeline.stage !3
	start_time: 63 avail_time: 64 stage: 2 II: 27 start_ii_state = 63 % 27 = 9 avail_ii_state = 64 % 27 = 10*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_63)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %1*/
	/*   store volatile float %44, float* %scevgep3, align 4, !tbaa !6, !legup.pipeline.start_time !31, !legup.pipeline.avail_time !33, !legup.pipeline.stage !4
	start_time: 50 avail_time: 51 stage: 1 II: 27 start_ii_state = 50 % 27 = 23 avail_ii_state = 51 % 27 = 24*/
	if (((loop_1_ii_state == 5'd23) & loop_1_valid_bit_50)) begin
		memory_controller_in_b = main_1_44;
	end
	/* main: %1*/
	/*   store volatile float %47, float* %scevgep2, align 4, !tbaa !6, !legup.pipeline.start_time !34, !legup.pipeline.avail_time !35, !legup.pipeline.stage !3
	start_time: 63 avail_time: 64 stage: 2 II: 27 start_ii_state = 63 % 27 = 9 avail_ii_state = 64 % 27 = 10*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_63)) begin
		memory_controller_in_b = main_1_47;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile float* %scevgep18, align 4, !tbaa !6, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !5
	start_time: 7 avail_time: 9 stage: 0 II: 27 start_ii_state = 7 % 27 = 7 avail_ii_state = 9 % 27 = 9*/
	if (((loop_1_ii_state == 5'd7) & loop_1_valid_bit_7)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %18 = load volatile float* %scevgep9, align 4, !tbaa !6, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !5
	start_time: 6 avail_time: 8 stage: 0 II: 27 start_ii_state = 6 % 27 = 6 avail_ii_state = 8 % 27 = 8*/
	if (((loop_1_ii_state == 5'd6) & loop_1_valid_bit_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %23 = load volatile float* %scevgep6, align 4, !tbaa !6, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !5
	start_time: 8 avail_time: 10 stage: 0 II: 27 start_ii_state = 8 % 27 = 8 avail_ii_state = 10 % 27 = 10*/
	if (((loop_1_ii_state == 5'd8) & loop_1_valid_bit_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %24 = load volatile float* %scevgep20, align 4, !tbaa !6, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !14, !legup.pipeline.stage !5
	start_time: 4 avail_time: 6 stage: 0 II: 27 start_ii_state = 4 % 27 = 4 avail_ii_state = 6 % 27 = 6*/
	if (((loop_1_ii_state == 5'd4) & loop_1_valid_bit_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %27 = load volatile float* %scevgep13, align 4, !tbaa !6, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !10, !legup.pipeline.stage !5
	start_time: 5 avail_time: 7 stage: 0 II: 27 start_ii_state = 5 % 27 = 5 avail_ii_state = 7 % 27 = 7*/
	if (((loop_1_ii_state == 5'd5) & loop_1_valid_bit_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %33 = load volatile float* %scevgep12, align 4, !tbaa !6, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !19, !legup.pipeline.stage !5
	start_time: 3 avail_time: 5 stage: 0 II: 27 start_ii_state = 3 % 27 = 3 avail_ii_state = 5 % 27 = 5*/
	if (((loop_1_ii_state == 5'd3) & loop_1_valid_bit_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %35 = load volatile float* %scevgep4, align 4, !tbaa !6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !20, !legup.pipeline.stage !5
	start_time: 2 avail_time: 4 stage: 0 II: 27 start_ii_state = 2 % 27 = 2 avail_ii_state = 4 % 27 = 4*/
	if (((loop_1_ii_state == 5'd2) & loop_1_valid_bit_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %36 = load volatile float* %scevgep15, align 4, !tbaa !6, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !18, !legup.pipeline.stage !5
	start_time: 1 avail_time: 3 stage: 0 II: 27 start_ii_state = 1 % 27 = 1 avail_ii_state = 3 % 27 = 3*/
	if (((loop_1_ii_state == 5'd1) & loop_1_valid_bit_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %37 = load volatile float* %scevgep11, align 4, !tbaa !6, !legup.pipeline.start_time !5, !legup.pipeline.avail_time !3, !legup.pipeline.stage !5
	start_time: 0 avail_time: 2 stage: 0 II: 27 start_ii_state = 0 % 27 = 0 avail_ii_state = 2 % 27 = 2*/
	if (((loop_1_ii_state == 5'd0) & loop_1_valid_bit_0)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   store volatile float %44, float* %scevgep3, align 4, !tbaa !6, !legup.pipeline.start_time !31, !legup.pipeline.avail_time !33, !legup.pipeline.stage !4
	start_time: 50 avail_time: 51 stage: 1 II: 27 start_ii_state = 50 % 27 = 23 avail_ii_state = 51 % 27 = 24*/
	if (((loop_1_ii_state == 5'd23) & loop_1_valid_bit_50)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   store volatile float %47, float* %scevgep2, align 4, !tbaa !6, !legup.pipeline.start_time !34, !legup.pipeline.avail_time !35, !legup.pipeline.stage !3
	start_time: 63 avail_time: 64 stage: 2 II: 27 start_ii_state = 63 % 27 = 9 avail_ii_state = 64 % 27 = 10*/
	if (((loop_1_ii_state == 5'd9) & loop_1_valid_bit_63)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %79*/
	/*   ret i32 %80*/
	if ((cur_state == LEGUP_F_main_BB__79_42)) begin
		return_val <= main_79_80;
		if (start == 1'b0 && ^(main_79_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
