//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  4 15:32:40 2018
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 25 17:01:24 2018
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
//   %u1 = alloca [2 x [11 x [4 x float]]], align 4
`define TAG_main_0_u1 `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_main_0_u1_a {`TAG_main_0_u1, 23'd0}
//   %u2 = alloca [2 x [11 x [4 x float]]], align 4
`define TAG_main_0_u2 `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_main_0_u2_a {`TAG_main_0_u2, 23'd0}
//   %u3 = alloca [2 x [11 x [4 x float]]], align 4
`define TAG_main_0_u3 `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_main_0_u3_a {`TAG_main_0_u3, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] main_0_u1_address_a;
reg [6:0] main_0_u1_address_b;
reg main_0_u1_write_enable_a;
reg main_0_u1_write_enable_b;
reg [31:0] main_0_u1_in_a;
reg [31:0] main_0_u1_in_b;
wire [31:0] main_0_u1_out_a;
wire [31:0] main_0_u1_out_b;

//   %u1 = alloca [2 x [11 x [4 x float]]], align 4
ram_dual_port main_0_u1 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_u1_address_a ),
	.address_b( main_0_u1_address_b ),
	.wren_a( main_0_u1_write_enable_a ),
	.wren_b( main_0_u1_write_enable_b ),
	.data_a( main_0_u1_in_a ),
	.data_b( main_0_u1_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_u1_out_a ),
	.q_b( main_0_u1_out_b)
);
defparam main_0_u1.width_a = 32;
defparam main_0_u1.width_b = 32;
defparam main_0_u1.widthad_a = 7;
defparam main_0_u1.widthad_b = 7;
defparam main_0_u1.width_be_a = 1;
defparam main_0_u1.width_be_b = 1;
defparam main_0_u1.numwords_a = 88;
defparam main_0_u1.numwords_b = 88;
defparam main_0_u1.latency = ram_latency;

reg [6:0] main_0_u2_address_a;
reg [6:0] main_0_u2_address_b;
reg main_0_u2_write_enable_a;
reg main_0_u2_write_enable_b;
reg [31:0] main_0_u2_in_a;
reg [31:0] main_0_u2_in_b;
wire [31:0] main_0_u2_out_a;
wire [31:0] main_0_u2_out_b;

//   %u2 = alloca [2 x [11 x [4 x float]]], align 4
ram_dual_port main_0_u2 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_u2_address_a ),
	.address_b( main_0_u2_address_b ),
	.wren_a( main_0_u2_write_enable_a ),
	.wren_b( main_0_u2_write_enable_b ),
	.data_a( main_0_u2_in_a ),
	.data_b( main_0_u2_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_u2_out_a ),
	.q_b( main_0_u2_out_b)
);
defparam main_0_u2.width_a = 32;
defparam main_0_u2.width_b = 32;
defparam main_0_u2.widthad_a = 7;
defparam main_0_u2.widthad_b = 7;
defparam main_0_u2.width_be_a = 1;
defparam main_0_u2.width_be_b = 1;
defparam main_0_u2.numwords_a = 88;
defparam main_0_u2.numwords_b = 88;
defparam main_0_u2.latency = ram_latency;

reg [6:0] main_0_u3_address_a;
reg [6:0] main_0_u3_address_b;
reg main_0_u3_write_enable_a;
reg main_0_u3_write_enable_b;
reg [31:0] main_0_u3_in_a;
reg [31:0] main_0_u3_in_b;
wire [31:0] main_0_u3_out_a;
wire [31:0] main_0_u3_out_b;

//   %u3 = alloca [2 x [11 x [4 x float]]], align 4
ram_dual_port main_0_u3 (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_u3_address_a ),
	.address_b( main_0_u3_address_b ),
	.wren_a( main_0_u3_write_enable_a ),
	.wren_b( main_0_u3_write_enable_b ),
	.data_a( main_0_u3_in_a ),
	.data_b( main_0_u3_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_u3_out_a ),
	.q_b( main_0_u3_out_b)
);
defparam main_0_u3.width_a = 32;
defparam main_0_u3.width_b = 32;
defparam main_0_u3.widthad_a = 7;
defparam main_0_u3.widthad_b = 7;
defparam main_0_u3.width_be_a = 1;
defparam main_0_u3.width_be_b = 1;
defparam main_0_u3.numwords_a = 88;
defparam main_0_u3.numwords_b = 88;
defparam main_0_u3.latency = ram_latency;
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_main_0_u1_a;
assign select_main_0_u1_a = (tag_a == `TAG_main_0_u1);
reg [ram_latency:0] select_main_0_u1_reg_a;
wire [31:0] memory_controller_main_0_u1_out_a;
assign memory_controller_main_0_u1_out_a = {32{ select_main_0_u1_reg_a[ram_latency]}} & main_0_u1_out_a;

wire select_main_0_u2_a;
assign select_main_0_u2_a = (tag_a == `TAG_main_0_u2);
reg [ram_latency:0] select_main_0_u2_reg_a;
wire [31:0] memory_controller_main_0_u2_out_a;
assign memory_controller_main_0_u2_out_a = {32{ select_main_0_u2_reg_a[ram_latency]}} & main_0_u2_out_a;

wire select_main_0_u3_a;
assign select_main_0_u3_a = (tag_a == `TAG_main_0_u3);
reg [ram_latency:0] select_main_0_u3_reg_a;
wire [31:0] memory_controller_main_0_u3_out_a;
assign memory_controller_main_0_u3_out_a = {32{ select_main_0_u3_reg_a[ram_latency]}} & main_0_u3_out_a;

always @(*)
begin
	main_0_u1_address_a = memory_controller_address_a [7-1+2:2] & {7{select_main_0_u1_a}};
	main_0_u1_write_enable_a = memory_controller_write_enable_a & select_main_0_u1_a;
	main_0_u1_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_u2_address_a = memory_controller_address_a [7-1+2:2] & {7{select_main_0_u2_a}};
	main_0_u2_write_enable_a = memory_controller_write_enable_a & select_main_0_u2_a;
	main_0_u2_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	main_0_u3_address_a = memory_controller_address_a [7-1+2:2] & {7{select_main_0_u3_a}};
	main_0_u3_write_enable_a = memory_controller_write_enable_a & select_main_0_u3_a;
	main_0_u3_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_main_0_u1_reg_a[ram_latency]}} | {2{select_main_0_u2_reg_a[ram_latency]}} | {2{select_main_0_u3_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_main_0_u1_out_a | memory_controller_main_0_u2_out_a | memory_controller_main_0_u3_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_main_0_u1_reg_a[j+1] <= select_main_0_u1_reg_a[j];
select_main_0_u2_reg_a[j+1] <= select_main_0_u2_reg_a[j];
select_main_0_u3_reg_a[j+1] <= select_main_0_u3_reg_a[j];
end
always @(*)
begin
select_main_0_u1_reg_a[0] <= select_main_0_u1_a;
select_main_0_u2_reg_a[0] <= select_main_0_u2_a;
select_main_0_u3_reg_a[0] <= select_main_0_u3_a;
end

reg [2:0] select_not_struct_b;

wire select_main_0_u1_b;
assign select_main_0_u1_b = (tag_b == `TAG_main_0_u1);
reg [ram_latency:0] select_main_0_u1_reg_b;
wire [31:0] memory_controller_main_0_u1_out_b;
assign memory_controller_main_0_u1_out_b = {32{ select_main_0_u1_reg_b[ram_latency]}} & main_0_u1_out_b;

wire select_main_0_u2_b;
assign select_main_0_u2_b = (tag_b == `TAG_main_0_u2);
reg [ram_latency:0] select_main_0_u2_reg_b;
wire [31:0] memory_controller_main_0_u2_out_b;
assign memory_controller_main_0_u2_out_b = {32{ select_main_0_u2_reg_b[ram_latency]}} & main_0_u2_out_b;

wire select_main_0_u3_b;
assign select_main_0_u3_b = (tag_b == `TAG_main_0_u3);
reg [ram_latency:0] select_main_0_u3_reg_b;
wire [31:0] memory_controller_main_0_u3_out_b;
assign memory_controller_main_0_u3_out_b = {32{ select_main_0_u3_reg_b[ram_latency]}} & main_0_u3_out_b;

always @(*)
begin
	main_0_u1_address_b = memory_controller_address_b [7-1+2:2] & {7{select_main_0_u1_b}};
	main_0_u1_write_enable_b = memory_controller_write_enable_b & select_main_0_u1_b;
	main_0_u1_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_u2_address_b = memory_controller_address_b [7-1+2:2] & {7{select_main_0_u2_b}};
	main_0_u2_write_enable_b = memory_controller_write_enable_b & select_main_0_u2_b;
	main_0_u2_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	main_0_u3_address_b = memory_controller_address_b [7-1+2:2] & {7{select_main_0_u3_b}};
	main_0_u3_write_enable_b = memory_controller_write_enable_b & select_main_0_u3_b;
	main_0_u3_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_main_0_u1_reg_b[ram_latency]}} | {2{select_main_0_u2_reg_b[ram_latency]}} | {2{select_main_0_u3_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_main_0_u1_out_b | memory_controller_main_0_u2_out_b | memory_controller_main_0_u3_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_main_0_u1_reg_b[j+1] <= select_main_0_u1_reg_b[j];
select_main_0_u2_reg_b[j+1] <= select_main_0_u2_reg_b[j];
select_main_0_u3_reg_b[j+1] <= select_main_0_u3_reg_b[j];
end
always @(*)
begin
select_main_0_u1_reg_b[0] <= select_main_0_u1_b;
select_main_0_u2_reg_b[0] <= select_main_0_u2_b;
select_main_0_u3_reg_b[0] <= select_main_0_u3_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [4:0] LEGUP_0 = 5'd0;
parameter [4:0] LEGUP_F_main_BB__0_1 = 5'd1;
parameter [4:0] LEGUP_F_main_BB_preheader1_2 = 5'd2;
parameter [4:0] LEGUP_F_main_BB_preheader_3 = 5'd3;
parameter [4:0] LEGUP_F_main_BB_preheader_4 = 5'd4;
parameter [4:0] LEGUP_F_main_BB_preheader_5 = 5'd5;
parameter [4:0] LEGUP_F_main_BB_preheader_6 = 5'd6;
parameter [4:0] LEGUP_F_main_BB_preheader_7 = 5'd7;
parameter [4:0] LEGUP_F_main_BB_preheader_8 = 5'd8;
parameter [4:0] LEGUP_loop_pipeline_wait_loop1_1_9 = 5'd9;
parameter [4:0] LEGUP_F_main_BB__66_10 = 5'd10;
parameter [4:0] LEGUP_F_main_BB__67_11 = 5'd11;
parameter [4:0] LEGUP_F_main_BB__68_12 = 5'd12;
parameter [4:0] LEGUP_F_main_BB__68_13 = 5'd13;
parameter [4:0] LEGUP_F_main_BB__68_14 = 5'd14;
parameter [4:0] LEGUP_F_main_BB__68_15 = 5'd15;
parameter [4:0] LEGUP_F_main_BB__68_16 = 5'd16;
parameter [4:0] LEGUP_F_main_BB__68_17 = 5'd17;
parameter [4:0] LEGUP_F_main_BB__68_18 = 5'd18;
parameter [4:0] LEGUP_F_main_BB__68_19 = 5'd19;
parameter [4:0] LEGUP_F_main_BB__68_20 = 5'd20;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [4:0] cur_state;
reg [4:0] next_state;
reg [31:0] main_preheader1_indvar33;
reg [31:0] main_preheader1_indvar33_reg;
reg [31:0] main_preheader_indvar2;
reg [31:0] main_preheader_indvar2_reg;
reg [31:0] main_preheader_1;
reg [31:0] main_preheader_1_reg;
reg [31:0] main_preheader_2;
reg [31:0] main_preheader_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert12_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader_phitransinsert;
reg [31:0] main_preheader_pre;
reg [31:0] main_preheader_pre_reg;
reg [31:0] main_preheader_pre9;
reg [31:0] main_preheader_pre9_reg;
reg [31:0] main_preheader_pre11;
reg [31:0] main_preheader_pre11_reg;
reg [31:0] main_preheader_pre13;
reg [31:0] main_preheader_pre13_reg;
reg [31:0] main_preheader_pre15;
reg [31:0] main_preheader_pre2;
reg [31:0] main_3_4;
reg [31:0] main_3_4_reg;
reg [31:0] main_3_5;
reg [31:0] main_3_5_reg;
reg [31:0] main_3_6;
reg [31:0] main_3_6_reg;
reg [31:0] main_3_7;
reg [31:0] main_3_8;
reg [31:0] main_3_9;
reg [31:0] main_3_10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep4;
reg [31:0] main_3_11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep14;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep;
reg [31:0] main_3_12;
reg [31:0] main_3_13;
reg [31:0] main_3_14;
reg [31:0] main_3_15;
reg [31:0] main_3_16;
reg [31:0] main_3_17;
reg [31:0] main_3_18;
reg [31:0] main_3_19;
reg [31:0] main_3_20;
reg [31:0] main_3_21;
reg [31:0] main_3_22;
reg [31:0] main_3_23;
reg [63:0] main_3_24;
reg [31:0] main_3_25;
reg [63:0] main_3_26;
reg [63:0] main_3_27;
reg [63:0] main_3_28;
reg [63:0] main_3_29;
reg [31:0] main_3_30;
reg [63:0] main_3_31;
reg [63:0] main_3_32;
reg [63:0] main_3_33;
reg [63:0] main_3_34;
reg [31:0] main_3_35;
reg [31:0] main_3_36;
reg [31:0] main_3_37;
reg [31:0] main_3_38;
reg [63:0] main_3_39;
reg [31:0] main_3_40;
reg [63:0] main_3_41;
reg [63:0] main_3_42;
reg [63:0] main_3_43;
reg [63:0] main_3_44;
reg [31:0] main_3_45;
reg [63:0] main_3_46;
reg [63:0] main_3_47;
reg [63:0] main_3_48;
reg [63:0] main_3_49;
reg [31:0] main_3_50;
reg [31:0] main_3_51;
reg [31:0] main_3_52;
reg [31:0] main_3_53;
reg [63:0] main_3_54;
reg [31:0] main_3_55;
reg [63:0] main_3_56;
reg [63:0] main_3_57;
reg [63:0] main_3_58;
reg [63:0] main_3_59;
reg [31:0] main_3_60;
reg [63:0] main_3_61;
reg [63:0] main_3_62;
reg [63:0] main_3_63;
reg [63:0] main_3_64;
reg [31:0] main_3_65;
reg [31:0] main_66_indvarnext3;
reg  main_66_exitcond;
reg [31:0] main_67_indvarnext34;
reg  main_67_exitcond35;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_68_69;
reg [31:0] main_68_70;
reg [31:0] main_68_71;
reg  loop1_1_pipeline_start;
reg  loop1_1_started;
reg [3:0] loop1_1_ii_state;
reg [31:0] loop1_1_i_stage0;
reg  loop1_1_epilogue;
reg  loop1_1_valid_bit_0;
reg  loop1_1_valid_bit_1;
reg  loop1_1_valid_bit_2;
reg  loop1_1_valid_bit_3;
reg  loop1_1_valid_bit_4;
reg  loop1_1_valid_bit_5;
reg  loop1_1_valid_bit_6;
reg  loop1_1_valid_bit_7;
reg  loop1_1_valid_bit_8;
reg  loop1_1_valid_bit_9;
reg  loop1_1_valid_bit_10;
reg  loop1_1_valid_bit_11;
reg  loop1_1_valid_bit_12;
reg  loop1_1_valid_bit_13;
reg  loop1_1_valid_bit_14;
reg  loop1_1_valid_bit_15;
reg  loop1_1_valid_bit_16;
reg  loop1_1_valid_bit_17;
reg  loop1_1_valid_bit_18;
reg  loop1_1_valid_bit_19;
reg  loop1_1_valid_bit_20;
reg  loop1_1_valid_bit_21;
reg  loop1_1_valid_bit_22;
reg  loop1_1_valid_bit_23;
reg  loop1_1_valid_bit_24;
reg  loop1_1_valid_bit_25;
reg  loop1_1_valid_bit_26;
reg  loop1_1_valid_bit_27;
reg  loop1_1_valid_bit_28;
reg  loop1_1_valid_bit_29;
reg  loop1_1_valid_bit_30;
reg  loop1_1_valid_bit_31;
reg  loop1_1_valid_bit_32;
reg  loop1_1_valid_bit_33;
reg  loop1_1_valid_bit_34;
reg  loop1_1_valid_bit_35;
reg  loop1_1_valid_bit_36;
reg  loop1_1_valid_bit_37;
reg  loop1_1_valid_bit_38;
reg  loop1_1_valid_bit_39;
reg  loop1_1_valid_bit_40;
reg  loop1_1_valid_bit_41;
reg  loop1_1_valid_bit_42;
reg  loop1_1_valid_bit_43;
reg  loop1_1_valid_bit_44;
reg  loop1_1_valid_bit_45;
reg  loop1_1_valid_bit_46;
reg  loop1_1_valid_bit_47;
reg  loop1_1_valid_bit_48;
reg  loop1_1_valid_bit_49;
reg  loop1_1_valid_bit_50;
reg  loop1_1_valid_bit_51;
reg  loop1_1_valid_bit_52;
reg  loop1_1_valid_bit_53;
reg  loop1_1_valid_bit_54;
reg  loop1_1_valid_bit_55;
reg  loop1_1_valid_bit_56;
reg  loop1_1_valid_bit_57;
reg  loop1_1_valid_bit_58;
reg  loop1_1_valid_bit_59;
reg  loop1_1_valid_bit_60;
reg  loop1_1_valid_bit_61;
reg  loop1_1_valid_bit_62;
reg  loop1_1_valid_bit_63;
reg  loop1_1_valid_bit_64;
reg  loop1_1_valid_bit_65;
reg  loop1_1_valid_bit_66;
reg  loop1_1_valid_bit_67;
reg  loop1_1_valid_bit_68;
reg  loop1_1_valid_bit_69;
reg  loop1_1_valid_bit_70;
reg  loop1_1_valid_bit_71;
reg  loop1_1_valid_bit_72;
reg  loop1_1_valid_bit_73;
reg  loop1_1_valid_bit_74;
reg  loop1_1_valid_bit_75;
reg  loop1_1_valid_bit_76;
reg  loop1_1_valid_bit_77;
reg  loop1_1_valid_bit_78;
reg  loop1_1_valid_bit_79;
reg  loop1_1_valid_bit_80;
reg  loop1_1_valid_bit_81;
reg  loop1_1_valid_bit_82;
reg  loop1_1_valid_bit_83;
reg  loop1_1_valid_bit_84;
reg  loop1_1_valid_bit_85;
reg  loop1_1_valid_bit_86;
reg  loop1_1_valid_bit_87;
reg  loop1_1_valid_bit_88;
reg  loop1_1_valid_bit_89;
reg  loop1_1_valid_bit_90;
reg  loop1_1_valid_bit_91;
reg [31:0] main_3_4_reg_stage0;
reg [31:0] main_3_4_reg_stage1;
reg [31:0] main_3_4_reg_stage2;
reg [31:0] main_3_5_reg_stage0;
reg [31:0] main_3_5_reg_stage1;
reg [31:0] main_3_5_reg_stage2;
reg [31:0] main_3_6_reg_stage0;
reg [31:0] main_3_6_reg_stage1;
reg [31:0] main_3_6_reg_stage2;
reg [31:0] main_3_7_reg_stage0;
reg [31:0] main_3_8_reg_stage0;
reg [31:0] main_3_9_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep10_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep7_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep11_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep8_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep5_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep13_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep12_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep9_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep9_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep9_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep9_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep9_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep9_reg_stage5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep9_reg_stage6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep9_reg_stage7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep6_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep6_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep6_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep6_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep6_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep6_reg_stage5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep6_reg_stage6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep6_reg_stage7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep_reg_stage5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep_reg_stage6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep_reg_stage7;
reg [31:0] main_3_20_reg_stage2;
reg [31:0] main_3_20_reg_stage3;
reg [31:0] main_3_22_reg_stage2;
reg [31:0] main_3_22_reg_stage3;
reg [31:0] main_3_22_reg_stage4;
reg [31:0] main_3_23_reg_stage5;
reg [31:0] main_3_25_reg_stage0;
reg [63:0] main_3_26_reg_stage0;
reg [63:0] main_3_26_reg_stage1;
reg [31:0] main_3_30_reg_stage0;
reg [63:0] main_3_31_reg_stage0;
reg [63:0] main_3_31_reg_stage1;
reg [63:0] main_3_31_reg_stage2;
reg [63:0] main_3_33_reg_stage4;
reg [63:0] main_3_33_reg_stage5;
reg [63:0] main_3_33_reg_stage6;
reg [63:0] main_3_41_reg_stage0;
reg [63:0] main_3_41_reg_stage1;
reg [31:0] main_3_45_reg_stage0;
reg [63:0] main_3_46_reg_stage0;
reg [63:0] main_3_46_reg_stage1;
reg [63:0] main_3_46_reg_stage2;
reg [63:0] main_3_48_reg_stage4;
reg [63:0] main_3_48_reg_stage5;
reg [31:0] main_3_53_reg_stage5;
reg [31:0] main_3_55_reg_stage0;
reg [63:0] main_3_56_reg_stage0;
reg [63:0] main_3_56_reg_stage1;
reg [31:0] main_3_60_reg_stage0;
reg [63:0] main_3_61_reg_stage0;
reg [63:0] main_3_61_reg_stage1;
reg [63:0] main_3_61_reg_stage2;
reg [63:0] main_3_63_reg_stage4;
reg [63:0] main_3_63_reg_stage5;
reg [63:0] main_3_63_reg_stage6;
reg  loop1_1_pipeline_exit_cond;
reg  loop1_1_pipeline_finish;
reg [63:0] main_altfp_add_64_0_op0;
reg [63:0] main_altfp_add_64_0_op1;
wire [63:0] altfp_adder64_main_3_49_out;
reg  altfp_main_3_49_en;
reg [63:0] main_altfp_add_64_0;
reg [63:0] main_altfp_truncate_64_0_op0;
wire [31:0] altfp_truncate_main_3_50_out;
reg  altfp_main_3_50_en;
reg [31:0] main_altfp_truncate_64_0;
reg [31:0] main_altfp_add_32_2_op0;
reg [31:0] main_altfp_add_32_2_op1;
wire [31:0] altfp_adder_main_3_51_out;
reg  altfp_main_3_51_en;
reg [31:0] main_altfp_add_32_2;
reg [31:0] main_altfp_extend_32_0_op0;
wire [63:0] altfp_extend_main_3_54_out;
reg  altfp_main_3_54_en;
reg [63:0] main_altfp_extend_32_0;
reg [63:0] main_altfp_multiply_64_0_op0;
reg [63:0] main_altfp_multiply_64_0_op1;
wire [63:0] altfp_multiplier64_main_3_58_out;
reg  altfp_main_3_58_en;
reg [63:0] main_altfp_multiply_64_0;
reg [63:0] main_altfp_subtract_64_0_op0;
reg [63:0] main_altfp_subtract_64_0_op1;
wire [63:0] altfp_subtractor64_main_3_59_out;
reg  altfp_main_3_59_en;
reg [63:0] main_altfp_subtract_64_0;
reg [31:0] main_altfp_fptosi_32_0_op0;
wire [31:0] altfp_fptosi32_main_68_71_out;
reg  altfp_main_68_71_en;
reg [31:0] main_altfp_fptosi_32_0;
reg [31:0] main_altfp_subtract_32_0_op0;
reg [31:0] main_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_main_3_13_out;
reg  altfp_main_3_13_en;
reg [31:0] main_altfp_subtract_32_0;
reg [31:0] main_altfp_multiply_32_0_op0;
reg [31:0] main_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_main_3_18_out;
reg  altfp_main_3_18_en;
reg [31:0] main_altfp_multiply_32_0;
reg [31:0] main_altfp_add_32_0_op0;
reg [31:0] main_altfp_add_32_0_op1;
wire [31:0] altfp_adder_main_3_19_out;
reg  altfp_main_3_19_en;
reg [31:0] main_altfp_add_32_0;
reg [31:0] main_altfp_add_32_1_op0;
reg [31:0] main_altfp_add_32_1_op1;
wire [31:0] altfp_adder_main_3_36_out;
reg  altfp_main_3_36_en;
reg [31:0] main_altfp_add_32_1;

/*   %49 = fadd double %39, %48, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !35, !legup.pipeline.stage !22*/
altfp_adder64_14 altfp_adder64_14_main_3_49 (
	.result (altfp_adder64_main_3_49_out),
	.dataa (main_altfp_add_64_0_op0),
	.datab (main_altfp_add_64_0_op1),
	.clock (clk),
	.clk_en (altfp_main_3_49_en)
);


/*   %50 = fptrunc double %49 to float, !legup.pipeline.start_time !35, !legup.pipeline.avail_time !36, !legup.pipeline.stage !23*/
altfp_truncate_3 altfp_truncate_3_main_3_50 (
	.result (altfp_truncate_main_3_50_out),
	.dataa (main_altfp_truncate_64_0_op0),
	.clock (clk),
	.clk_en (altfp_main_3_50_en)
);


/*   %51 = fadd float %5, %18, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8*/
altfp_adder_14 altfp_adder_14_main_3_51 (
	.result (altfp_adder_main_3_51_out),
	.dataa (main_altfp_add_32_2_op0),
	.datab (main_altfp_add_32_2_op1),
	.clock (clk),
	.clk_en (altfp_main_3_51_en)
);


/*   %54 = fpext float %53 to double, !legup.pipeline.start_time !38, !legup.pipeline.avail_time !39, !legup.pipeline.stage !22*/
altfp_extend_2 altfp_extend_2_main_3_54 (
	.result (altfp_extend_main_3_54_out),
	.dataa (main_altfp_extend_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_3_54_en)
);


/*   %58 = fmul double %57, 2.000000e+00, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !41, !legup.pipeline.stage !7*/
altfp_multiplier64_11 altfp_multiplier64_11_main_3_58 (
	.result (altfp_multiplier64_main_3_58_out),
	.dataa (main_altfp_multiply_64_0_op0),
	.datab (main_altfp_multiply_64_0_op1),
	.clock (clk),
	.clk_en (altfp_main_3_58_en)
);


/*   %59 = fsub double %56, %58, !legup.pipeline.start_time !41, !legup.pipeline.avail_time !16, !legup.pipeline.stage !6*/
altfp_subtractor64_14 altfp_subtractor64_14_main_3_59 (
	.result (altfp_subtractor64_main_3_59_out),
	.dataa (main_altfp_subtract_64_0_op0),
	.datab (main_altfp_subtract_64_0_op1),
	.clock (clk),
	.clk_en (altfp_main_3_59_en)
);


/*   %71 = fptosi float %70 to i32*/
altfp_fptosi32_6 altfp_fptosi32_6_main_68_71 (
	.result (altfp_fptosi32_main_68_71_out),
	.dataa (main_altfp_fptosi_32_0_op0),
	.clock (clk),
	.clk_en (altfp_main_68_71_en)
);


/*   %13 = fsub float %12, %9, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !7*/
altfp_subtractor_14 altfp_subtractor_14_main_3_13 (
	.result (altfp_subtractor_main_3_13_out),
	.dataa (main_altfp_subtract_32_0_op0),
	.datab (main_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_3_13_en)
);


/*   %18 = fmul float %13, 0.000000e+00, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !14, !legup.pipeline.stage !6*/
altfp_multiplier_11 altfp_multiplier_11_main_3_18 (
	.result (altfp_multiplier_main_3_18_out),
	.dataa (main_altfp_multiply_32_0_op0),
	.datab (main_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_3_18_en)
);


/*   %19 = fadd float %4, %18, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8*/
altfp_adder_14 altfp_adder_14_main_3_19 (
	.result (altfp_adder_main_3_19_out),
	.dataa (main_altfp_add_32_0_op0),
	.datab (main_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_3_19_en)
);


/*   %36 = fadd float %6, %18, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8*/
altfp_adder_14 altfp_adder_14_main_3_36 (
	.result (altfp_adder_main_3_36_out),
	.dataa (main_altfp_add_32_1_op0),
	.datab (main_altfp_add_32_1_op1),
	.clock (clk),
	.clk_en (altfp_main_3_36_en)
);



always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB_preheader1_2;
LEGUP_F_main_BB__66_10:
	if ((main_66_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB__67_11;
	else if ((main_66_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB_preheader_3;
LEGUP_F_main_BB__67_11:
	if ((main_67_exitcond35 == 1'd1))
		next_state = LEGUP_F_main_BB__68_12;
	else if ((main_67_exitcond35 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1_2;
LEGUP_F_main_BB__68_12:
		next_state = LEGUP_F_main_BB__68_13;
LEGUP_F_main_BB__68_13:
		next_state = LEGUP_F_main_BB__68_14;
LEGUP_F_main_BB__68_14:
		next_state = LEGUP_F_main_BB__68_15;
LEGUP_F_main_BB__68_15:
		next_state = LEGUP_F_main_BB__68_16;
LEGUP_F_main_BB__68_16:
		next_state = LEGUP_F_main_BB__68_17;
LEGUP_F_main_BB__68_17:
		next_state = LEGUP_F_main_BB__68_18;
LEGUP_F_main_BB__68_18:
		next_state = LEGUP_F_main_BB__68_19;
LEGUP_F_main_BB__68_19:
		next_state = LEGUP_F_main_BB__68_20;
LEGUP_F_main_BB__68_20:
		next_state = LEGUP_0;
LEGUP_F_main_BB_preheader1_2:
		next_state = LEGUP_F_main_BB_preheader_3;
LEGUP_F_main_BB_preheader_3:
		next_state = LEGUP_F_main_BB_preheader_4;
LEGUP_F_main_BB_preheader_4:
		next_state = LEGUP_F_main_BB_preheader_5;
LEGUP_F_main_BB_preheader_5:
		next_state = LEGUP_F_main_BB_preheader_6;
LEGUP_F_main_BB_preheader_6:
		next_state = LEGUP_F_main_BB_preheader_7;
LEGUP_F_main_BB_preheader_7:
		next_state = LEGUP_F_main_BB_preheader_8;
LEGUP_F_main_BB_preheader_8:
		next_state = LEGUP_loop_pipeline_wait_loop1_1_9;
LEGUP_loop_pipeline_wait_loop1_1_9:
	if ((loop1_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__66_10;
	else if ((loop1_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__66_10;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %.preheader1*/
	/*   %indvar33 = phi i32 [ %indvar.next34, %67 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1_indvar33 = 32'd0;
	end
	/* main: %.preheader1*/
	/*   %indvar33 = phi i32 [ %indvar.next34, %67 ], [ 0, %0 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__67_11) & (memory_controller_waitrequest == 1'd0)) & (main_67_exitcond35 == 1'd0))) */ begin
		main_preheader1_indvar33 = main_67_indvarnext34;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %indvar33 = phi i32 [ %indvar.next34, %67 ], [ 0, %0 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1_indvar33_reg <= main_preheader1_indvar33;
		if (start == 1'b0 && ^(main_preheader1_indvar33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_indvar33_reg"); $finish; end
	end
	/* main: %.preheader1*/
	/*   %indvar33 = phi i32 [ %indvar.next34, %67 ], [ 0, %0 ]*/
	if ((((cur_state == LEGUP_F_main_BB__67_11) & (memory_controller_waitrequest == 1'd0)) & (main_67_exitcond35 == 1'd0))) begin
		main_preheader1_indvar33_reg <= main_preheader1_indvar33;
		if (start == 1'b0 && ^(main_preheader1_indvar33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_indvar33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %indvar2 = phi i32 [ %indvar.next3, %66 ], [ 0, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_indvar2 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %indvar2 = phi i32 [ %indvar.next3, %66 ], [ 0, %.preheader1 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__66_10) & (memory_controller_waitrequest == 1'd0)) & (main_66_exitcond == 1'd0))) */ begin
		main_preheader_indvar2 = main_66_indvarnext3;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %indvar2 = phi i32 [ %indvar.next3, %66 ], [ 0, %.preheader1 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_indvar2_reg <= main_preheader_indvar2;
		if (start == 1'b0 && ^(main_preheader_indvar2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_indvar2_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %indvar2 = phi i32 [ %indvar.next3, %66 ], [ 0, %.preheader1 ]*/
	if ((((cur_state == LEGUP_F_main_BB__66_10) & (memory_controller_waitrequest == 1'd0)) & (main_66_exitcond == 1'd0))) begin
		main_preheader_indvar2_reg <= main_preheader_indvar2;
		if (start == 1'b0 && ^(main_preheader_indvar2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_indvar2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %1 = add i32 %indvar2, 2*/
		main_preheader_1 = (main_preheader_indvar2_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %1 = add i32 %indvar2, 2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		main_preheader_1_reg <= main_preheader_1;
		if (start == 1'b0 && ^(main_preheader_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %2 = add i32 %indvar2, 1*/
		main_preheader_2 = (main_preheader_indvar2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %2 = add i32 %indvar2, 1*/
	if ((cur_state == LEGUP_F_main_BB_preheader_3)) begin
		main_preheader_2_reg <= main_preheader_2;
		if (start == 1'b0 && ^(main_preheader_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert1 = getelementptr [2 x [11 x [4 x float]]]* %u1, i32 0, i32 0, i32 1, i32 %2*/
		main_preheader_phitransinsert1 = (`TAG_main_0_u1_a + ((16 * 32'd1) + (4 * main_preheader_2_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert1 = getelementptr [2 x [11 x [4 x float]]]* %u1, i32 0, i32 0, i32 1, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		main_preheader_phitransinsert1_reg <= main_preheader_phitransinsert1;
		if (start == 1'b0 && ^(main_preheader_phitransinsert1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_phitransinsert1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert14 = getelementptr [2 x [11 x [4 x float]]]* %u3, i32 0, i32 0, i32 1, i32 %2*/
		main_preheader_phitransinsert14 = (`TAG_main_0_u3_a + ((16 * 32'd1) + (4 * main_preheader_2_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert14 = getelementptr [2 x [11 x [4 x float]]]* %u3, i32 0, i32 0, i32 1, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		main_preheader_phitransinsert14_reg <= main_preheader_phitransinsert14;
		if (start == 1'b0 && ^(main_preheader_phitransinsert14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_phitransinsert14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert12 = getelementptr [2 x [11 x [4 x float]]]* %u2, i32 0, i32 0, i32 1, i32 %2*/
		main_preheader_phitransinsert12 = (`TAG_main_0_u2_a + ((16 * 32'd1) + (4 * main_preheader_2_reg)));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert12 = getelementptr [2 x [11 x [4 x float]]]* %u2, i32 0, i32 0, i32 1, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		main_preheader_phitransinsert12_reg <= main_preheader_phitransinsert12;
		if (start == 1'b0 && ^(main_preheader_phitransinsert12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_phitransinsert12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert10 = getelementptr [2 x [11 x [4 x float]]]* %u3, i32 0, i32 0, i32 0, i32 %2*/
		main_preheader_phitransinsert10 = (`TAG_main_0_u3_a + (4 * main_preheader_2_reg));
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert10 = getelementptr [2 x [11 x [4 x float]]]* %u3, i32 0, i32 0, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		main_preheader_phitransinsert10_reg <= main_preheader_phitransinsert10;
		if (start == 1'b0 && ^(main_preheader_phitransinsert10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_phitransinsert10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert8 = getelementptr [2 x [11 x [4 x float]]]* %u2, i32 0, i32 0, i32 0, i32 %2*/
		main_preheader_phitransinsert8 = (`TAG_main_0_u2_a + (4 * main_preheader_2_reg));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.phi.trans.insert = getelementptr [2 x [11 x [4 x float]]]* %u1, i32 0, i32 0, i32 0, i32 %2*/
		main_preheader_phitransinsert = (`TAG_main_0_u1_a + (4 * main_preheader_2_reg));
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.pre = load float* %.phi.trans.insert, align 4, !tbaa !2*/
		main_preheader_pre = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.pre = load float* %.phi.trans.insert, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		main_preheader_pre_reg <= main_preheader_pre;
		if (start == 1'b0 && ^(main_preheader_pre) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_pre_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.pre9 = load float* %.phi.trans.insert8, align 4, !tbaa !2*/
		main_preheader_pre9 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.pre9 = load float* %.phi.trans.insert8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		main_preheader_pre9_reg <= main_preheader_pre9;
		if (start == 1'b0 && ^(main_preheader_pre9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_pre9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.pre11 = load float* %.phi.trans.insert10, align 4, !tbaa !2*/
		main_preheader_pre11 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.pre11 = load float* %.phi.trans.insert10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		main_preheader_pre11_reg <= main_preheader_pre11;
		if (start == 1'b0 && ^(main_preheader_pre11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_pre11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.pre13 = load float* %.phi.trans.insert12, align 4, !tbaa !2*/
		main_preheader_pre13 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %.pre13 = load float* %.phi.trans.insert12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_7)) begin
		main_preheader_pre13_reg <= main_preheader_pre13;
		if (start == 1'b0 && ^(main_preheader_pre13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_pre13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.pre15 = load float* %.phi.trans.insert14, align 4, !tbaa !2*/
		main_preheader_pre15 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %.preheader*/
	/*   %.pre2 = load float* %.phi.trans.insert1, align 4, !tbaa !2*/
		main_preheader_pre2 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %3*/
	/*   %4 = phi float [ %12, %3 ], [ %.pre2, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2))) begin
		main_3_4 = main_3_12;
	end
	/* main: %3*/
	/*   %4 = phi float [ %12, %3 ], [ %.pre2, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_3_4 = main_preheader_pre2;
	end
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %4 = phi float [ %12, %3 ], [ %.pre2, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2))) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
	/* main: %3*/
	/*   %4 = phi float [ %12, %3 ], [ %.pre2, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %5 = phi float [ %16, %3 ], [ %.pre15, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4))) begin
		main_3_5 = main_3_16;
	end
	/* main: %3*/
	/*   %5 = phi float [ %16, %3 ], [ %.pre15, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_3_5 = main_preheader_pre15;
	end
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %5 = phi float [ %16, %3 ], [ %.pre15, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4))) begin
		main_3_5_reg <= main_3_5;
		if (start == 1'b0 && ^(main_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg"); $finish; end
	end
	/* main: %3*/
	/*   %5 = phi float [ %16, %3 ], [ %.pre15, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_3_5_reg <= main_3_5;
		if (start == 1'b0 && ^(main_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %6 = phi float [ %14, %3 ], [ %.pre13, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3))) begin
		main_3_6 = main_3_14;
	end
	/* main: %3*/
	/*   %6 = phi float [ %14, %3 ], [ %.pre13, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_3_6 = main_preheader_pre13_reg;
	end
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %6 = phi float [ %14, %3 ], [ %.pre13, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3))) begin
		main_3_6_reg <= main_3_6;
		if (start == 1'b0 && ^(main_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg"); $finish; end
	end
	/* main: %3*/
	/*   %6 = phi float [ %14, %3 ], [ %.pre13, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		main_3_6_reg <= main_3_6;
		if (start == 1'b0 && ^(main_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %7 = phi float [ %5, %3 ], [ %.pre11, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_7 = main_3_5_reg;
	end
	/* main: %3*/
	/*   %7 = phi float [ %5, %3 ], [ %.pre11, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_3_7 = main_preheader_pre11_reg;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %8 = phi float [ %6, %3 ], [ %.pre9, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_8 = main_3_6_reg;
	end
	/* main: %3*/
	/*   %8 = phi float [ %6, %3 ], [ %.pre9, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_3_8 = main_preheader_pre9_reg;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %9 = phi float [ %4, %3 ], [ %.pre, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_9 = main_3_4_reg;
	end
	/* main: %3*/
	/*   %9 = phi float [ %4, %3 ], [ %.pre, %.preheader ], !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
	else /* if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_3_9 = main_preheader_pre_reg;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %10 = add i32 %indvar, 1, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_10 = (loop1_1_i_stage0 + 32'd1);
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep10 = getelementptr [2 x [11 x [4 x float]]]* %u1, i32 0, i32 0, i32 %10, i32 %indvar2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep10 = (`TAG_main_0_u1_a + ((16 * main_3_10) + (4 * main_preheader_indvar2_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep7 = getelementptr [2 x [11 x [4 x float]]]* %u2, i32 0, i32 0, i32 %10, i32 %indvar2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep7 = (`TAG_main_0_u2_a + ((16 * main_3_10) + (4 * main_preheader_indvar2_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep11 = getelementptr [2 x [11 x [4 x float]]]* %u1, i32 0, i32 0, i32 %10, i32 %1, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep11 = (`TAG_main_0_u1_a + ((16 * main_3_10) + (4 * main_preheader_1_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep8 = getelementptr [2 x [11 x [4 x float]]]* %u2, i32 0, i32 0, i32 %10, i32 %1, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep8 = (`TAG_main_0_u2_a + ((16 * main_3_10) + (4 * main_preheader_1_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep5 = getelementptr [2 x [11 x [4 x float]]]* %u3, i32 0, i32 0, i32 %10, i32 %1, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep5 = (`TAG_main_0_u3_a + ((16 * main_3_10) + (4 * main_preheader_1_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep4 = getelementptr [2 x [11 x [4 x float]]]* %u3, i32 0, i32 0, i32 %10, i32 %indvar2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep4 = (`TAG_main_0_u3_a + ((16 * main_3_10) + (4 * main_preheader_indvar2_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %11 = add i32 %indvar, 2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_11 = (loop1_1_i_stage0 + 32'd2);
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep14 = getelementptr [2 x [11 x [4 x float]]]* %u1, i32 0, i32 0, i32 %11, i32 %2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep14 = (`TAG_main_0_u1_a + ((16 * main_3_11) + (4 * main_preheader_2_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep13 = getelementptr [2 x [11 x [4 x float]]]* %u2, i32 0, i32 0, i32 %11, i32 %2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep13 = (`TAG_main_0_u2_a + ((16 * main_3_11) + (4 * main_preheader_2_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep12 = getelementptr [2 x [11 x [4 x float]]]* %u3, i32 0, i32 0, i32 %11, i32 %2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep12 = (`TAG_main_0_u3_a + ((16 * main_3_11) + (4 * main_preheader_2_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep9 = getelementptr [2 x [11 x [4 x float]]]* %u1, i32 0, i32 1, i32 %10, i32 %2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep9 = (`TAG_main_0_u1_a + (((176 * 32'd1) + (16 * main_3_10)) + (4 * main_preheader_2_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep6 = getelementptr [2 x [11 x [4 x float]]]* %u2, i32 0, i32 1, i32 %10, i32 %2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep6 = (`TAG_main_0_u2_a + (((176 * 32'd1) + (16 * main_3_10)) + (4 * main_preheader_2_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep = getelementptr [2 x [11 x [4 x float]]]* %u3, i32 0, i32 1, i32 %10, i32 %2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 0 % 12 = 0*/
		main_3_scevgep = (`TAG_main_0_u3_a + (((176 * 32'd1) + (16 * main_3_10)) + (4 * main_preheader_2_reg)));
end
always @(*) begin
	/* main: %3*/
	/*   %12 = load float* %scevgep14, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
		main_3_12 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_3_13 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %3*/
	/*   %14 = load float* %scevgep13, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
		main_3_14 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_3_15 = main_altfp_subtract_32_0;
end
always @(*) begin
	/* main: %3*/
	/*   %16 = load float* %scevgep12, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
		main_3_16 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_3_17 = main_altfp_subtract_32_0;
end
always @(*) begin
	main_3_18 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_3_19 = main_altfp_add_32_0;
end
always @(*) begin
	main_3_20 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_3_21 = main_altfp_add_32_0;
end
always @(*) begin
	main_3_22 = main_altfp_multiply_32_0;
end
always @(*) begin
	main_3_23 = main_altfp_add_32_0;
end
always @(*) begin
	main_3_24 = main_altfp_extend_32_0;
end
always @(*) begin
	/* main: %3*/
	/*   %25 = load float* %scevgep11, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
		main_3_25 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_3_26 = main_altfp_extend_32_0;
end
always @(*) begin
	main_3_27 = main_altfp_extend_32_0;
end
always @(*) begin
	main_3_28 = main_altfp_multiply_64_0;
end
always @(*) begin
	main_3_29 = main_altfp_subtract_64_0;
end
always @(*) begin
	/* main: %3*/
	/*   %30 = load float* %scevgep10, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
		main_3_30 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_3_31 = main_altfp_extend_32_0;
end
always @(*) begin
	main_3_32 = main_altfp_add_64_0;
end
always @(*) begin
	main_3_33 = main_altfp_multiply_64_0;
end
always @(*) begin
	main_3_34 = main_altfp_add_64_0;
end
always @(*) begin
	main_3_35 = main_altfp_truncate_64_0;
end
always @(*) begin
	main_3_36 = main_altfp_add_32_1;
end
always @(*) begin
	main_3_37 = main_altfp_add_32_1;
end
always @(*) begin
	main_3_38 = main_altfp_add_32_1;
end
always @(*) begin
	main_3_39 = main_altfp_extend_32_0;
end
always @(*) begin
	/* main: %3*/
	/*   %40 = load float* %scevgep8, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
		main_3_40 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_3_41 = main_altfp_extend_32_0;
end
always @(*) begin
	main_3_42 = main_altfp_extend_32_0;
end
always @(*) begin
	main_3_43 = main_altfp_multiply_64_0;
end
always @(*) begin
	main_3_44 = main_altfp_subtract_64_0;
end
always @(*) begin
	/* main: %3*/
	/*   %45 = load float* %scevgep7, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
		main_3_45 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_3_46 = main_altfp_extend_32_0;
end
always @(*) begin
	main_3_47 = main_altfp_add_64_0;
end
always @(*) begin
	main_3_48 = main_altfp_multiply_64_0;
end
always @(*) begin
	main_3_49 = main_altfp_add_64_0;
end
always @(*) begin
	main_3_50 = main_altfp_truncate_64_0;
end
always @(*) begin
	main_3_51 = main_altfp_add_32_2;
end
always @(*) begin
	main_3_52 = main_altfp_add_32_2;
end
always @(*) begin
	main_3_53 = main_altfp_add_32_2;
end
always @(*) begin
	main_3_54 = main_altfp_extend_32_0;
end
always @(*) begin
	/* main: %3*/
	/*   %55 = load float* %scevgep5, align 4, !tbaa !2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !25, !legup.pipeline.stage !7
	start_time: 4 avail_time: 6 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 6 % 12 = 6*/
		main_3_55 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_3_56 = main_altfp_extend_32_0;
end
always @(*) begin
	main_3_57 = main_altfp_extend_32_0;
end
always @(*) begin
	main_3_58 = main_altfp_multiply_64_0;
end
always @(*) begin
	main_3_59 = main_altfp_subtract_64_0;
end
always @(*) begin
	/* main: %3*/
	/*   %60 = load float* %scevgep4, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
		main_3_60 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_3_61 = main_altfp_extend_32_0;
end
always @(*) begin
	main_3_62 = main_altfp_add_64_0;
end
always @(*) begin
	main_3_63 = main_altfp_multiply_64_0;
end
always @(*) begin
	main_3_64 = main_altfp_add_64_0;
end
always @(*) begin
	main_3_65 = main_altfp_truncate_64_0;
end
always @(*) begin
	/* main: %66*/
	/*   %indvar.next3 = add i32 %indvar2, 1*/
		main_66_indvarnext3 = (main_preheader_indvar2_reg + 32'd1);
end
always @(*) begin
	/* main: %66*/
	/*   %exitcond = icmp eq i32 %indvar.next3, 2*/
		main_66_exitcond = (main_66_indvarnext3 == 32'd2);
end
always @(*) begin
	/* main: %67*/
	/*   %indvar.next34 = add i32 %indvar33, 1*/
		main_67_indvarnext34 = (main_preheader1_indvar33_reg + 32'd1);
end
always @(*) begin
	/* main: %67*/
	/*   %exitcond35 = icmp eq i32 %indvar.next34, 2*/
		main_67_exitcond35 = (main_67_indvarnext34 == 32'd2);
end
always @(*) begin
	/* main: %68*/
	/*   %69 = getelementptr inbounds [2 x [11 x [4 x float]]]* %u3, i32 0, i32 1, i32 10, i32 3*/
if (reset) begin main_68_69 = 0; end
		main_68_69 = (`TAG_main_0_u3_a + (((176 * 32'd1) + (16 * 32'd10)) + (4 * 32'd3)));
end
always @(*) begin
	/* main: %68*/
	/*   %70 = load float* %69, align 4, !tbaa !2*/
		main_68_70 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_68_71 = main_altfp_fptosi_32_0;
end
always @(*) begin
	loop1_1_pipeline_start = 1'd0;
	if (reset) begin
		loop1_1_pipeline_start = 1'd0;
	end
	if (((cur_state == LEGUP_F_main_BB_preheader_8) & (memory_controller_waitrequest == 1'd0))) begin
		loop1_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop1_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_pipeline_start & ~(loop1_1_started)))) begin
		loop1_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_epilogue & (~(loop1_1_valid_bit_90) & loop1_1_valid_bit_91)))) begin
		loop1_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop1_1_ii_state <= 4'd0;
		if (start == 1'b0 && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_pipeline_start & ~(loop1_1_started)))) begin
		loop1_1_ii_state <= 4'd0;
		if (start == 1'b0 && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd0))) begin
		loop1_1_ii_state <= 4'd1;
		if (start == 1'b0 && ^(4'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd1))) begin
		loop1_1_ii_state <= 4'd2;
		if (start == 1'b0 && ^(4'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd2))) begin
		loop1_1_ii_state <= 4'd3;
		if (start == 1'b0 && ^(4'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd3))) begin
		loop1_1_ii_state <= 4'd4;
		if (start == 1'b0 && ^(4'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd4))) begin
		loop1_1_ii_state <= 4'd5;
		if (start == 1'b0 && ^(4'd5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd5))) begin
		loop1_1_ii_state <= 4'd6;
		if (start == 1'b0 && ^(4'd6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd6))) begin
		loop1_1_ii_state <= 4'd7;
		if (start == 1'b0 && ^(4'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd7))) begin
		loop1_1_ii_state <= 4'd8;
		if (start == 1'b0 && ^(4'd8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd8))) begin
		loop1_1_ii_state <= 4'd9;
		if (start == 1'b0 && ^(4'd9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd9))) begin
		loop1_1_ii_state <= 4'd10;
		if (start == 1'b0 && ^(4'd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd10))) begin
		loop1_1_ii_state <= 4'd11;
		if (start == 1'b0 && ^(4'd11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd11))) begin
		loop1_1_ii_state <= 4'd0;
		if (start == 1'b0 && ^(4'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop1_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_pipeline_start & ~(loop1_1_started)))) begin
		loop1_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop1_1_ii_state == 4'd11)) & loop1_1_valid_bit_11))) begin
		loop1_1_i_stage0 <= (loop1_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop1_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop1_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop1_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_started & ((loop1_1_ii_state == 4'd0) & loop1_1_pipeline_exit_cond)))) begin
		loop1_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop1_1_epilogue & (~(loop1_1_valid_bit_90) & loop1_1_valid_bit_91)))) begin
		loop1_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop1_1_pipeline_start & ~(loop1_1_started))) | ((loop1_1_started & ~(loop1_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop1_1_started & ((loop1_1_ii_state == 4'd0) & loop1_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop1_1_pipeline_start & ~(loop1_1_started))) | ((loop1_1_started & ~(loop1_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop1_1_started & ((loop1_1_ii_state == 4'd0) & loop1_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_1 <= loop1_1_valid_bit_0;
		if (start == 1'b0 && ^(loop1_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_2 <= loop1_1_valid_bit_1;
		if (start == 1'b0 && ^(loop1_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_3 <= loop1_1_valid_bit_2;
		if (start == 1'b0 && ^(loop1_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_4 <= loop1_1_valid_bit_3;
		if (start == 1'b0 && ^(loop1_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_5 <= loop1_1_valid_bit_4;
		if (start == 1'b0 && ^(loop1_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_6 <= loop1_1_valid_bit_5;
		if (start == 1'b0 && ^(loop1_1_valid_bit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_6"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_6 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_6"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_7 <= loop1_1_valid_bit_6;
		if (start == 1'b0 && ^(loop1_1_valid_bit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_7"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_7 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_7"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_8 <= loop1_1_valid_bit_7;
		if (start == 1'b0 && ^(loop1_1_valid_bit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_8"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_8 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_8"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_9 <= loop1_1_valid_bit_8;
		if (start == 1'b0 && ^(loop1_1_valid_bit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_9"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_9 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_9"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_10 <= loop1_1_valid_bit_9;
		if (start == 1'b0 && ^(loop1_1_valid_bit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_10"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_10 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_10"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_11 <= loop1_1_valid_bit_10;
		if (start == 1'b0 && ^(loop1_1_valid_bit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_11"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_11 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_11"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_12 <= loop1_1_valid_bit_11;
		if (start == 1'b0 && ^(loop1_1_valid_bit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_12"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_12 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_12"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_13 <= loop1_1_valid_bit_12;
		if (start == 1'b0 && ^(loop1_1_valid_bit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_13"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_13 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_13"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_14 <= loop1_1_valid_bit_13;
		if (start == 1'b0 && ^(loop1_1_valid_bit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_14"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_14 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_14"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_15 <= loop1_1_valid_bit_14;
		if (start == 1'b0 && ^(loop1_1_valid_bit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_15"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_15 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_15"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_16 <= loop1_1_valid_bit_15;
		if (start == 1'b0 && ^(loop1_1_valid_bit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_16"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_16 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_16"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_17 <= loop1_1_valid_bit_16;
		if (start == 1'b0 && ^(loop1_1_valid_bit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_17"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_17 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_17"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_18 <= loop1_1_valid_bit_17;
		if (start == 1'b0 && ^(loop1_1_valid_bit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_18"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_18 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_18"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_19 <= loop1_1_valid_bit_18;
		if (start == 1'b0 && ^(loop1_1_valid_bit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_19"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_19 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_19"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_20 <= loop1_1_valid_bit_19;
		if (start == 1'b0 && ^(loop1_1_valid_bit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_20"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_20 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_20"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_21 <= loop1_1_valid_bit_20;
		if (start == 1'b0 && ^(loop1_1_valid_bit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_21"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_21 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_21"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_22 <= loop1_1_valid_bit_21;
		if (start == 1'b0 && ^(loop1_1_valid_bit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_22"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_22 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_22"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_23 <= loop1_1_valid_bit_22;
		if (start == 1'b0 && ^(loop1_1_valid_bit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_23"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_23 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_23"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_24 <= loop1_1_valid_bit_23;
		if (start == 1'b0 && ^(loop1_1_valid_bit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_24"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_24 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_24"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_25 <= loop1_1_valid_bit_24;
		if (start == 1'b0 && ^(loop1_1_valid_bit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_25"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_25 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_25"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_26 <= loop1_1_valid_bit_25;
		if (start == 1'b0 && ^(loop1_1_valid_bit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_26"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_26 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_26"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_27 <= loop1_1_valid_bit_26;
		if (start == 1'b0 && ^(loop1_1_valid_bit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_27"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_27 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_27"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_28 <= loop1_1_valid_bit_27;
		if (start == 1'b0 && ^(loop1_1_valid_bit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_28"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_28 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_28"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_29 <= loop1_1_valid_bit_28;
		if (start == 1'b0 && ^(loop1_1_valid_bit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_29"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_29 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_29"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_30 <= loop1_1_valid_bit_29;
		if (start == 1'b0 && ^(loop1_1_valid_bit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_30"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_30 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_30"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_31 <= loop1_1_valid_bit_30;
		if (start == 1'b0 && ^(loop1_1_valid_bit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_31"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_31 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_31"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_32 <= loop1_1_valid_bit_31;
		if (start == 1'b0 && ^(loop1_1_valid_bit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_32"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_32 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_32"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_33 <= loop1_1_valid_bit_32;
		if (start == 1'b0 && ^(loop1_1_valid_bit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_33"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_33 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_33"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_34 <= loop1_1_valid_bit_33;
		if (start == 1'b0 && ^(loop1_1_valid_bit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_34"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_34 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_34"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_35 <= loop1_1_valid_bit_34;
		if (start == 1'b0 && ^(loop1_1_valid_bit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_35"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_35 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_35"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_36 <= loop1_1_valid_bit_35;
		if (start == 1'b0 && ^(loop1_1_valid_bit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_36"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_36 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_36"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_37 <= loop1_1_valid_bit_36;
		if (start == 1'b0 && ^(loop1_1_valid_bit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_37"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_37 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_37"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_38 <= loop1_1_valid_bit_37;
		if (start == 1'b0 && ^(loop1_1_valid_bit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_38"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_38 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_38"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_39 <= loop1_1_valid_bit_38;
		if (start == 1'b0 && ^(loop1_1_valid_bit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_39"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_39 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_39"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_40 <= loop1_1_valid_bit_39;
		if (start == 1'b0 && ^(loop1_1_valid_bit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_40"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_40 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_40"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_41 <= loop1_1_valid_bit_40;
		if (start == 1'b0 && ^(loop1_1_valid_bit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_41"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_41 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_41"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_42 <= loop1_1_valid_bit_41;
		if (start == 1'b0 && ^(loop1_1_valid_bit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_42"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_42 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_42"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_43 <= loop1_1_valid_bit_42;
		if (start == 1'b0 && ^(loop1_1_valid_bit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_43"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_43 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_43"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_44 <= loop1_1_valid_bit_43;
		if (start == 1'b0 && ^(loop1_1_valid_bit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_44"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_44 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_44"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_45 <= loop1_1_valid_bit_44;
		if (start == 1'b0 && ^(loop1_1_valid_bit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_45"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_45 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_45"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_46 <= loop1_1_valid_bit_45;
		if (start == 1'b0 && ^(loop1_1_valid_bit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_46"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_46 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_46"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_47 <= loop1_1_valid_bit_46;
		if (start == 1'b0 && ^(loop1_1_valid_bit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_47"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_47 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_47"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_48 <= loop1_1_valid_bit_47;
		if (start == 1'b0 && ^(loop1_1_valid_bit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_48"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_48 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_48"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_49 <= loop1_1_valid_bit_48;
		if (start == 1'b0 && ^(loop1_1_valid_bit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_49"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_49 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_49"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_50 <= loop1_1_valid_bit_49;
		if (start == 1'b0 && ^(loop1_1_valid_bit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_50"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_50 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_50"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_51 <= loop1_1_valid_bit_50;
		if (start == 1'b0 && ^(loop1_1_valid_bit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_51"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_51 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_51"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_52 <= loop1_1_valid_bit_51;
		if (start == 1'b0 && ^(loop1_1_valid_bit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_52"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_52 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_52"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_53 <= loop1_1_valid_bit_52;
		if (start == 1'b0 && ^(loop1_1_valid_bit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_53"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_53 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_53"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_54 <= loop1_1_valid_bit_53;
		if (start == 1'b0 && ^(loop1_1_valid_bit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_54"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_54 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_54"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_55 <= loop1_1_valid_bit_54;
		if (start == 1'b0 && ^(loop1_1_valid_bit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_55"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_55 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_55"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_56 <= loop1_1_valid_bit_55;
		if (start == 1'b0 && ^(loop1_1_valid_bit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_56"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_56 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_56"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_57 <= loop1_1_valid_bit_56;
		if (start == 1'b0 && ^(loop1_1_valid_bit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_57"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_57 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_57"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_58 <= loop1_1_valid_bit_57;
		if (start == 1'b0 && ^(loop1_1_valid_bit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_58"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_58 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_58"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_59 <= loop1_1_valid_bit_58;
		if (start == 1'b0 && ^(loop1_1_valid_bit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_59"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_59 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_59"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_60 <= loop1_1_valid_bit_59;
		if (start == 1'b0 && ^(loop1_1_valid_bit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_60"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_60 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_60"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_61 <= loop1_1_valid_bit_60;
		if (start == 1'b0 && ^(loop1_1_valid_bit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_61"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_61 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_61"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_62 <= loop1_1_valid_bit_61;
		if (start == 1'b0 && ^(loop1_1_valid_bit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_62"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_62 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_62"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_63 <= loop1_1_valid_bit_62;
		if (start == 1'b0 && ^(loop1_1_valid_bit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_63"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_63 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_63"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_64 <= loop1_1_valid_bit_63;
		if (start == 1'b0 && ^(loop1_1_valid_bit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_64"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_64 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_64"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_65 <= loop1_1_valid_bit_64;
		if (start == 1'b0 && ^(loop1_1_valid_bit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_65"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_65 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_65"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_66 <= loop1_1_valid_bit_65;
		if (start == 1'b0 && ^(loop1_1_valid_bit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_66"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_66 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_66"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_67 <= loop1_1_valid_bit_66;
		if (start == 1'b0 && ^(loop1_1_valid_bit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_67"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_67 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_67"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_68 <= loop1_1_valid_bit_67;
		if (start == 1'b0 && ^(loop1_1_valid_bit_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_68"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_68 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_68"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_69 <= loop1_1_valid_bit_68;
		if (start == 1'b0 && ^(loop1_1_valid_bit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_69"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_69 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_69"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_70 <= loop1_1_valid_bit_69;
		if (start == 1'b0 && ^(loop1_1_valid_bit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_70"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_70 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_70"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_71 <= loop1_1_valid_bit_70;
		if (start == 1'b0 && ^(loop1_1_valid_bit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_71"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_71 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_71"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_72 <= loop1_1_valid_bit_71;
		if (start == 1'b0 && ^(loop1_1_valid_bit_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_72"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_72 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_72"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_73 <= loop1_1_valid_bit_72;
		if (start == 1'b0 && ^(loop1_1_valid_bit_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_73"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_73 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_73"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_74 <= loop1_1_valid_bit_73;
		if (start == 1'b0 && ^(loop1_1_valid_bit_73) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_74"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_74 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_74"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_75 <= loop1_1_valid_bit_74;
		if (start == 1'b0 && ^(loop1_1_valid_bit_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_75"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_75 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_75"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_76 <= loop1_1_valid_bit_75;
		if (start == 1'b0 && ^(loop1_1_valid_bit_75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_76"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_76 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_76"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_77 <= loop1_1_valid_bit_76;
		if (start == 1'b0 && ^(loop1_1_valid_bit_76) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_77"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_77 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_77"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_78 <= loop1_1_valid_bit_77;
		if (start == 1'b0 && ^(loop1_1_valid_bit_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_78"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_78 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_78"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_79 <= loop1_1_valid_bit_78;
		if (start == 1'b0 && ^(loop1_1_valid_bit_78) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_79"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_79 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_79"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_80 <= loop1_1_valid_bit_79;
		if (start == 1'b0 && ^(loop1_1_valid_bit_79) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_80"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_80 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_80"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_81 <= loop1_1_valid_bit_80;
		if (start == 1'b0 && ^(loop1_1_valid_bit_80) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_81"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_81 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_81"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_82 <= loop1_1_valid_bit_81;
		if (start == 1'b0 && ^(loop1_1_valid_bit_81) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_82"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_82 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_82"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_83 <= loop1_1_valid_bit_82;
		if (start == 1'b0 && ^(loop1_1_valid_bit_82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_83"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_83 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_83"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_84 <= loop1_1_valid_bit_83;
		if (start == 1'b0 && ^(loop1_1_valid_bit_83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_84"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_84 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_84"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_85 <= loop1_1_valid_bit_84;
		if (start == 1'b0 && ^(loop1_1_valid_bit_84) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_85"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_85 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_85"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_86 <= loop1_1_valid_bit_85;
		if (start == 1'b0 && ^(loop1_1_valid_bit_85) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_86"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_86 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_86"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_87 <= loop1_1_valid_bit_86;
		if (start == 1'b0 && ^(loop1_1_valid_bit_86) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_87"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_87 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_87"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_88 <= loop1_1_valid_bit_87;
		if (start == 1'b0 && ^(loop1_1_valid_bit_87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_88"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_88 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_88"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_89 <= loop1_1_valid_bit_88;
		if (start == 1'b0 && ^(loop1_1_valid_bit_88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_89"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_89 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_89"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_90 <= loop1_1_valid_bit_89;
		if (start == 1'b0 && ^(loop1_1_valid_bit_89) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_90"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_90 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_90"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop1_1_valid_bit_91 <= loop1_1_valid_bit_90;
		if (start == 1'b0 && ^(loop1_1_valid_bit_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_91"); $finish; end
	end
	if (reset) begin
		loop1_1_valid_bit_91 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop1_1_valid_bit_91"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_4_reg_stage0 <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_4_reg_stage1 <= main_3_4_reg_stage0;
		if (start == 1'b0 && ^(main_3_4_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_23))) begin
		main_3_4_reg_stage2 <= main_3_4_reg_stage1;
		if (start == 1'b0 && ^(main_3_4_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_5_reg_stage0 <= main_3_5;
		if (start == 1'b0 && ^(main_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_5_reg_stage1 <= main_3_5_reg_stage0;
		if (start == 1'b0 && ^(main_3_5_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_23))) begin
		main_3_5_reg_stage2 <= main_3_5_reg_stage1;
		if (start == 1'b0 && ^(main_3_5_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_6_reg_stage0 <= main_3_6;
		if (start == 1'b0 && ^(main_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_6_reg_stage1 <= main_3_6_reg_stage0;
		if (start == 1'b0 && ^(main_3_6_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_23))) begin
		main_3_6_reg_stage2 <= main_3_6_reg_stage1;
		if (start == 1'b0 && ^(main_3_6_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_7_reg_stage0 <= main_3_7;
		if (start == 1'b0 && ^(main_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_7_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_8_reg_stage0 <= main_3_8;
		if (start == 1'b0 && ^(main_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_8_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_9_reg_stage0 <= main_3_9;
		if (start == 1'b0 && ^(main_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_9_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep10_reg_stage0 <= main_3_scevgep10;
		if (start == 1'b0 && ^(main_3_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep10_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep7_reg_stage0 <= main_3_scevgep7;
		if (start == 1'b0 && ^(main_3_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep7_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep11_reg_stage0 <= main_3_scevgep11;
		if (start == 1'b0 && ^(main_3_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep11_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep8_reg_stage0 <= main_3_scevgep8;
		if (start == 1'b0 && ^(main_3_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep8_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep5_reg_stage0 <= main_3_scevgep5;
		if (start == 1'b0 && ^(main_3_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep5_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep13_reg_stage0 <= main_3_scevgep13;
		if (start == 1'b0 && ^(main_3_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep13_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep12_reg_stage0 <= main_3_scevgep12;
		if (start == 1'b0 && ^(main_3_scevgep12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep12_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep9_reg_stage0 <= main_3_scevgep9;
		if (start == 1'b0 && ^(main_3_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep9_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_scevgep9_reg_stage1 <= main_3_scevgep9_reg_stage0;
		if (start == 1'b0 && ^(main_3_scevgep9_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep9_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_23))) begin
		main_3_scevgep9_reg_stage2 <= main_3_scevgep9_reg_stage1;
		if (start == 1'b0 && ^(main_3_scevgep9_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep9_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_35))) begin
		main_3_scevgep9_reg_stage3 <= main_3_scevgep9_reg_stage2;
		if (start == 1'b0 && ^(main_3_scevgep9_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep9_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_47))) begin
		main_3_scevgep9_reg_stage4 <= main_3_scevgep9_reg_stage3;
		if (start == 1'b0 && ^(main_3_scevgep9_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep9_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_59))) begin
		main_3_scevgep9_reg_stage5 <= main_3_scevgep9_reg_stage4;
		if (start == 1'b0 && ^(main_3_scevgep9_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep9_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_71))) begin
		main_3_scevgep9_reg_stage6 <= main_3_scevgep9_reg_stage5;
		if (start == 1'b0 && ^(main_3_scevgep9_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep9_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_83))) begin
		main_3_scevgep9_reg_stage7 <= main_3_scevgep9_reg_stage6;
		if (start == 1'b0 && ^(main_3_scevgep9_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep9_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep6_reg_stage0 <= main_3_scevgep6;
		if (start == 1'b0 && ^(main_3_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep6_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_scevgep6_reg_stage1 <= main_3_scevgep6_reg_stage0;
		if (start == 1'b0 && ^(main_3_scevgep6_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep6_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_23))) begin
		main_3_scevgep6_reg_stage2 <= main_3_scevgep6_reg_stage1;
		if (start == 1'b0 && ^(main_3_scevgep6_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep6_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_35))) begin
		main_3_scevgep6_reg_stage3 <= main_3_scevgep6_reg_stage2;
		if (start == 1'b0 && ^(main_3_scevgep6_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep6_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_47))) begin
		main_3_scevgep6_reg_stage4 <= main_3_scevgep6_reg_stage3;
		if (start == 1'b0 && ^(main_3_scevgep6_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep6_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_59))) begin
		main_3_scevgep6_reg_stage5 <= main_3_scevgep6_reg_stage4;
		if (start == 1'b0 && ^(main_3_scevgep6_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep6_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_71))) begin
		main_3_scevgep6_reg_stage6 <= main_3_scevgep6_reg_stage5;
		if (start == 1'b0 && ^(main_3_scevgep6_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep6_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_83))) begin
		main_3_scevgep6_reg_stage7 <= main_3_scevgep6_reg_stage6;
		if (start == 1'b0 && ^(main_3_scevgep6_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep6_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0))) begin
		main_3_scevgep_reg_stage0 <= main_3_scevgep;
		if (start == 1'b0 && ^(main_3_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_scevgep_reg_stage1 <= main_3_scevgep_reg_stage0;
		if (start == 1'b0 && ^(main_3_scevgep_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_23))) begin
		main_3_scevgep_reg_stage2 <= main_3_scevgep_reg_stage1;
		if (start == 1'b0 && ^(main_3_scevgep_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_35))) begin
		main_3_scevgep_reg_stage3 <= main_3_scevgep_reg_stage2;
		if (start == 1'b0 && ^(main_3_scevgep_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_47))) begin
		main_3_scevgep_reg_stage4 <= main_3_scevgep_reg_stage3;
		if (start == 1'b0 && ^(main_3_scevgep_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_59))) begin
		main_3_scevgep_reg_stage5 <= main_3_scevgep_reg_stage4;
		if (start == 1'b0 && ^(main_3_scevgep_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_71))) begin
		main_3_scevgep_reg_stage6 <= main_3_scevgep_reg_stage5;
		if (start == 1'b0 && ^(main_3_scevgep_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_83))) begin
		main_3_scevgep_reg_stage7 <= main_3_scevgep_reg_stage6;
		if (start == 1'b0 && ^(main_3_scevgep_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_28))) begin
		main_3_20_reg_stage2 <= main_3_20;
		if (start == 1'b0 && ^(main_3_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_20_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_35))) begin
		main_3_20_reg_stage3 <= main_3_20_reg_stage2;
		if (start == 1'b0 && ^(main_3_20_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_20_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_29))) begin
		main_3_22_reg_stage2 <= main_3_22;
		if (start == 1'b0 && ^(main_3_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_22_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_35))) begin
		main_3_22_reg_stage3 <= main_3_22_reg_stage2;
		if (start == 1'b0 && ^(main_3_22_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_22_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_47))) begin
		main_3_22_reg_stage4 <= main_3_22_reg_stage3;
		if (start == 1'b0 && ^(main_3_22_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_22_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd9) & loop1_1_valid_bit_69))) begin
		main_3_23_reg_stage5 <= main_3_23;
		if (start == 1'b0 && ^(main_3_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_23_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4))) begin
		main_3_25_reg_stage0 <= main_3_25;
		if (start == 1'b0 && ^(main_3_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_25_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_7))) begin
		main_3_26_reg_stage0 <= main_3_26;
		if (start == 1'b0 && ^(main_3_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_26_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_26_reg_stage1 <= main_3_26_reg_stage0;
		if (start == 1'b0 && ^(main_3_26_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_26_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_5))) begin
		main_3_30_reg_stage0 <= main_3_30;
		if (start == 1'b0 && ^(main_3_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_30_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd8) & loop1_1_valid_bit_8))) begin
		main_3_31_reg_stage0 <= main_3_31;
		if (start == 1'b0 && ^(main_3_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_31_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_31_reg_stage1 <= main_3_31_reg_stage0;
		if (start == 1'b0 && ^(main_3_31_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_31_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_23))) begin
		main_3_31_reg_stage2 <= main_3_31_reg_stage1;
		if (start == 1'b0 && ^(main_3_31_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_31_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_54))) begin
		main_3_33_reg_stage4 <= main_3_33;
		if (start == 1'b0 && ^(main_3_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_33_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_59))) begin
		main_3_33_reg_stage5 <= main_3_33_reg_stage4;
		if (start == 1'b0 && ^(main_3_33_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_33_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_71))) begin
		main_3_33_reg_stage6 <= main_3_33_reg_stage5;
		if (start == 1'b0 && ^(main_3_33_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_33_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_5))) begin
		main_3_41_reg_stage0 <= main_3_41;
		if (start == 1'b0 && ^(main_3_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_41_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_41_reg_stage1 <= main_3_41_reg_stage0;
		if (start == 1'b0 && ^(main_3_41_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_41_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_5))) begin
		main_3_45_reg_stage0 <= main_3_45;
		if (start == 1'b0 && ^(main_3_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_45_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd10) & loop1_1_valid_bit_10))) begin
		main_3_46_reg_stage0 <= main_3_46;
		if (start == 1'b0 && ^(main_3_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_46_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_46_reg_stage1 <= main_3_46_reg_stage0;
		if (start == 1'b0 && ^(main_3_46_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_46_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_23))) begin
		main_3_46_reg_stage2 <= main_3_46_reg_stage1;
		if (start == 1'b0 && ^(main_3_46_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_46_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_52))) begin
		main_3_48_reg_stage4 <= main_3_48;
		if (start == 1'b0 && ^(main_3_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_48_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_59))) begin
		main_3_48_reg_stage5 <= main_3_48_reg_stage4;
		if (start == 1'b0 && ^(main_3_48_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_48_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd9) & loop1_1_valid_bit_69))) begin
		main_3_53_reg_stage5 <= main_3_53;
		if (start == 1'b0 && ^(main_3_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_53_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_6))) begin
		main_3_55_reg_stage0 <= main_3_55;
		if (start == 1'b0 && ^(main_3_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_55_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd9) & loop1_1_valid_bit_9))) begin
		main_3_56_reg_stage0 <= main_3_56;
		if (start == 1'b0 && ^(main_3_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_56_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_56_reg_stage1 <= main_3_56_reg_stage0;
		if (start == 1'b0 && ^(main_3_56_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_56_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2))) begin
		main_3_60_reg_stage0 <= main_3_60;
		if (start == 1'b0 && ^(main_3_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_60_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_6))) begin
		main_3_61_reg_stage0 <= main_3_61;
		if (start == 1'b0 && ^(main_3_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_61_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_11))) begin
		main_3_61_reg_stage1 <= main_3_61_reg_stage0;
		if (start == 1'b0 && ^(main_3_61_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_61_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_23))) begin
		main_3_61_reg_stage2 <= main_3_61_reg_stage1;
		if (start == 1'b0 && ^(main_3_61_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_61_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_53))) begin
		main_3_63_reg_stage4 <= main_3_63;
		if (start == 1'b0 && ^(main_3_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_63_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_59))) begin
		main_3_63_reg_stage5 <= main_3_63_reg_stage4;
		if (start == 1'b0 && ^(main_3_63_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_63_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_71))) begin
		main_3_63_reg_stage6 <= main_3_63_reg_stage5;
		if (start == 1'b0 && ^(main_3_63_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_63_reg_stage6"); $finish; end
	end
end
always @(*) begin
	loop1_1_pipeline_exit_cond = (loop1_1_i_stage0 == 8);
end
always @(*) begin
	loop1_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop1_1_epilogue & (~(loop1_1_valid_bit_90) & loop1_1_valid_bit_91)));
end
always @(*) begin
	/* main: %3*/
	/*   %32 = fadd double %29, %31, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !27, !legup.pipeline.stage !8
	start_time: 29 avail_time: 43 stage: 2 II: 12 start_ii_state = 29 % 12 = 5 avail_ii_state = 43 % 12 = 7*/
	if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_29)) begin
		main_altfp_add_64_0_op0 = main_3_29;
	end
	/* main: %3*/
	/*   %34 = fadd double %24, %33, !legup.pipeline.start_time !21, !legup.pipeline.avail_time !29, !legup.pipeline.stage !25
	start_time: 73 avail_time: 87 stage: 6 II: 12 start_ii_state = 73 % 12 = 1 avail_ii_state = 87 % 12 = 3*/
	else if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_73)) begin
		main_altfp_add_64_0_op0 = main_3_24;
	end
	/* main: %3*/
	/*   %47 = fadd double %44, %46, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 27 avail_time: 41 stage: 2 II: 12 start_ii_state = 27 % 12 = 3 avail_ii_state = 41 % 12 = 5*/
	else if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_27)) begin
		main_altfp_add_64_0_op0 = main_3_44;
	end
	/* main: %3*/
	/*   %49 = fadd double %39, %48, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !35, !legup.pipeline.stage !22
	start_time: 71 avail_time: 85 stage: 5 II: 12 start_ii_state = 71 % 12 = 11 avail_ii_state = 85 % 12 = 1*/
	else if (((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_71)) begin
		main_altfp_add_64_0_op0 = main_3_39;
	end
	/* main: %3*/
	/*   %62 = fadd double %59, %61, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !42, !legup.pipeline.stage !8
	start_time: 28 avail_time: 42 stage: 2 II: 12 start_ii_state = 28 % 12 = 4 avail_ii_state = 42 % 12 = 6*/
	else if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_28)) begin
		main_altfp_add_64_0_op0 = main_3_59;
	end
	/* main: %3*/
	/*   %64 = fadd double %54, %63, !legup.pipeline.start_time !39, !legup.pipeline.avail_time !44, !legup.pipeline.stage !25
	start_time: 72 avail_time: 86 stage: 6 II: 12 start_ii_state = 72 % 12 = 0 avail_ii_state = 86 % 12 = 2*/
	else /* if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_72)) */ begin
		main_altfp_add_64_0_op0 = main_3_54;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %32 = fadd double %29, %31, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !27, !legup.pipeline.stage !8
	start_time: 29 avail_time: 43 stage: 2 II: 12 start_ii_state = 29 % 12 = 5 avail_ii_state = 43 % 12 = 7*/
	if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_29)) begin
		main_altfp_add_64_0_op1 = main_3_31_reg_stage2;
	end
	/* main: %3*/
	/*   %34 = fadd double %24, %33, !legup.pipeline.start_time !21, !legup.pipeline.avail_time !29, !legup.pipeline.stage !25
	start_time: 73 avail_time: 87 stage: 6 II: 12 start_ii_state = 73 % 12 = 1 avail_ii_state = 87 % 12 = 3*/
	else if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_73)) begin
		main_altfp_add_64_0_op1 = main_3_33_reg_stage6;
	end
	/* main: %3*/
	/*   %47 = fadd double %44, %46, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 27 avail_time: 41 stage: 2 II: 12 start_ii_state = 27 % 12 = 3 avail_ii_state = 41 % 12 = 5*/
	else if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_27)) begin
		main_altfp_add_64_0_op1 = main_3_46_reg_stage2;
	end
	/* main: %3*/
	/*   %49 = fadd double %39, %48, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !35, !legup.pipeline.stage !22
	start_time: 71 avail_time: 85 stage: 5 II: 12 start_ii_state = 71 % 12 = 11 avail_ii_state = 85 % 12 = 1*/
	else if (((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_71)) begin
		main_altfp_add_64_0_op1 = main_3_48_reg_stage5;
	end
	/* main: %3*/
	/*   %62 = fadd double %59, %61, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !42, !legup.pipeline.stage !8
	start_time: 28 avail_time: 42 stage: 2 II: 12 start_ii_state = 28 % 12 = 4 avail_ii_state = 42 % 12 = 6*/
	else if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_28)) begin
		main_altfp_add_64_0_op1 = main_3_61_reg_stage2;
	end
	/* main: %3*/
	/*   %64 = fadd double %54, %63, !legup.pipeline.start_time !39, !legup.pipeline.avail_time !44, !legup.pipeline.stage !25
	start_time: 72 avail_time: 86 stage: 6 II: 12 start_ii_state = 72 % 12 = 0 avail_ii_state = 86 % 12 = 2*/
	else /* if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_72)) */ begin
		main_altfp_add_64_0_op1 = main_3_63_reg_stage6;
	end
end
always @(*) begin
	altfp_main_3_49_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_64_0 = altfp_adder64_main_3_49_out;
end
always @(*) begin
	/* main: %3*/
	/*   %35 = fptrunc double %34 to float, !legup.pipeline.start_time !29, !legup.pipeline.avail_time !30, !legup.pipeline.stage !23
	start_time: 87 avail_time: 90 stage: 7 II: 12 start_ii_state = 87 % 12 = 3 avail_ii_state = 90 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_87)) begin
		main_altfp_truncate_64_0_op0 = main_3_34;
	end
	/* main: %3*/
	/*   %50 = fptrunc double %49 to float, !legup.pipeline.start_time !35, !legup.pipeline.avail_time !36, !legup.pipeline.stage !23
	start_time: 85 avail_time: 88 stage: 7 II: 12 start_ii_state = 85 % 12 = 1 avail_ii_state = 88 % 12 = 4*/
	else if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_85)) begin
		main_altfp_truncate_64_0_op0 = main_3_49;
	end
	/* main: %3*/
	/*   %65 = fptrunc double %64 to float, !legup.pipeline.start_time !44, !legup.pipeline.avail_time !37, !legup.pipeline.stage !23
	start_time: 86 avail_time: 89 stage: 7 II: 12 start_ii_state = 86 % 12 = 2 avail_ii_state = 89 % 12 = 5*/
	else /* if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_86)) */ begin
		main_altfp_truncate_64_0_op0 = main_3_64;
	end
end
always @(*) begin
	altfp_main_3_50_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_truncate_64_0 = altfp_truncate_main_3_50_out;
end
always @(*) begin
	/* main: %3*/
	/*   %51 = fadd float %5, %18, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 27 avail_time: 41 stage: 2 II: 12 start_ii_state = 27 % 12 = 3 avail_ii_state = 41 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_27)) begin
		main_altfp_add_32_2_op0 = main_3_5_reg_stage2;
	end
	/* main: %3*/
	/*   %52 = fadd float %51, %20, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 41 avail_time: 55 stage: 3 II: 12 start_ii_state = 41 % 12 = 5 avail_ii_state = 55 % 12 = 7*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_41)) begin
		main_altfp_add_32_2_op0 = main_3_51;
	end
	/* main: %3*/
	/*   %53 = fadd float %52, %22, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !19, !legup.pipeline.stage !12
	start_time: 55 avail_time: 69 stage: 4 II: 12 start_ii_state = 55 % 12 = 7 avail_ii_state = 69 % 12 = 9*/
	else /* if (((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_55)) */ begin
		main_altfp_add_32_2_op0 = main_3_52;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %51 = fadd float %5, %18, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 27 avail_time: 41 stage: 2 II: 12 start_ii_state = 27 % 12 = 3 avail_ii_state = 41 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_27)) begin
		main_altfp_add_32_2_op1 = main_3_18;
	end
	/* main: %3*/
	/*   %52 = fadd float %51, %20, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 41 avail_time: 55 stage: 3 II: 12 start_ii_state = 41 % 12 = 5 avail_ii_state = 55 % 12 = 7*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_41)) begin
		main_altfp_add_32_2_op1 = main_3_20_reg_stage3;
	end
	/* main: %3*/
	/*   %53 = fadd float %52, %22, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !19, !legup.pipeline.stage !12
	start_time: 55 avail_time: 69 stage: 4 II: 12 start_ii_state = 55 % 12 = 7 avail_ii_state = 69 % 12 = 9*/
	else /* if (((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_55)) */ begin
		main_altfp_add_32_2_op1 = main_3_22_reg_stage4;
	end
end
always @(*) begin
	altfp_main_3_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_2 = altfp_adder_main_3_51_out;
end
always @(*) begin
	/* main: %3*/
	/*   %24 = fpext float %23 to double, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !21, !legup.pipeline.stage !22
	start_time: 71 avail_time: 73 stage: 5 II: 12 start_ii_state = 71 % 12 = 11 avail_ii_state = 73 % 12 = 1*/
	if (((loop1_1_ii_state == 4'd11) & loop1_1_valid_bit_71)) begin
		main_altfp_extend_32_0_op0 = main_3_23_reg_stage5;
	end
	/* main: %3*/
	/*   %26 = fpext float %25 to double, !legup.pipeline.start_time !22, !legup.pipeline.avail_time !23, !legup.pipeline.stage !7
	start_time: 5 avail_time: 7 stage: 0 II: 12 start_ii_state = 5 % 12 = 5 avail_ii_state = 7 % 12 = 7*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_5)) begin
		main_altfp_extend_32_0_op0 = main_3_25_reg_stage0;
	end
	/* main: %3*/
	/*   %27 = fpext float %4 to double, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
	else if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		main_altfp_extend_32_0_op0 = main_3_4_reg;
	end
	/* main: %3*/
	/*   %31 = fpext float %30 to double, !legup.pipeline.start_time !25, !legup.pipeline.avail_time !26, !legup.pipeline.stage !7
	start_time: 6 avail_time: 8 stage: 0 II: 12 start_ii_state = 6 % 12 = 6 avail_ii_state = 8 % 12 = 8*/
	else if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_6)) begin
		main_altfp_extend_32_0_op0 = main_3_30_reg_stage0;
	end
	/* main: %3*/
	/*   %39 = fpext float %38 to double, !legup.pipeline.start_time !19, !legup.pipeline.avail_time !20, !legup.pipeline.stage !22
	start_time: 69 avail_time: 71 stage: 5 II: 12 start_ii_state = 69 % 12 = 9 avail_ii_state = 71 % 12 = 11*/
	else if (((loop1_1_ii_state == 4'd9) & loop1_1_valid_bit_69)) begin
		main_altfp_extend_32_0_op0 = main_3_38;
	end
	/* main: %3*/
	/*   %41 = fpext float %40 to double, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
	else if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		main_altfp_extend_32_0_op0 = main_3_40;
	end
	/* main: %3*/
	/*   %42 = fpext float %6 to double, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
	else if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0)) begin
		main_altfp_extend_32_0_op0 = main_3_6_reg;
	end
	/* main: %3*/
	/*   %46 = fpext float %45 to double, !legup.pipeline.start_time !26, !legup.pipeline.avail_time !33, !legup.pipeline.stage !7
	start_time: 8 avail_time: 10 stage: 0 II: 12 start_ii_state = 8 % 12 = 8 avail_ii_state = 10 % 12 = 10*/
	else if (((loop1_1_ii_state == 4'd8) & loop1_1_valid_bit_8)) begin
		main_altfp_extend_32_0_op0 = main_3_45_reg_stage0;
	end
	/* main: %3*/
	/*   %54 = fpext float %53 to double, !legup.pipeline.start_time !38, !legup.pipeline.avail_time !39, !legup.pipeline.stage !22
	start_time: 70 avail_time: 72 stage: 5 II: 12 start_ii_state = 70 % 12 = 10 avail_ii_state = 72 % 12 = 0*/
	else if (((loop1_1_ii_state == 4'd10) & loop1_1_valid_bit_70)) begin
		main_altfp_extend_32_0_op0 = main_3_53_reg_stage5;
	end
	/* main: %3*/
	/*   %56 = fpext float %55 to double, !legup.pipeline.start_time !23, !legup.pipeline.avail_time !40, !legup.pipeline.stage !7
	start_time: 7 avail_time: 9 stage: 0 II: 12 start_ii_state = 7 % 12 = 7 avail_ii_state = 9 % 12 = 9*/
	else if (((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_7)) begin
		main_altfp_extend_32_0_op0 = main_3_55_reg_stage0;
	end
	/* main: %3*/
	/*   %57 = fpext float %5 to double, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
	else if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_1)) begin
		main_altfp_extend_32_0_op0 = main_3_5_reg;
	end
	/* main: %3*/
	/*   %61 = fpext float %60 to double, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !25, !legup.pipeline.stage !7
	start_time: 4 avail_time: 6 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 6 % 12 = 6*/
	else /* if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4)) */ begin
		main_altfp_extend_32_0_op0 = main_3_60_reg_stage0;
	end
end
always @(*) begin
	altfp_main_3_54_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_extend_32_0 = altfp_extend_main_3_54_out;
end
always @(*) begin
	/* main: %3*/
	/*   %28 = fmul double %27, 2.000000e+00, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !24, !legup.pipeline.stage !7
	start_time: 4 avail_time: 15 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 15 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4)) begin
		main_altfp_multiply_64_0_op0 = main_3_27;
	end
	/* main: %3*/
	/*   %33 = fmul double %32, 0x3FC99999A0000000, !legup.pipeline.start_time !27, !legup.pipeline.avail_time !28, !legup.pipeline.stage !10
	start_time: 43 avail_time: 54 stage: 3 II: 12 start_ii_state = 43 % 12 = 7 avail_ii_state = 54 % 12 = 6*/
	else if (((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_43)) begin
		main_altfp_multiply_64_0_op0 = main_3_32;
	end
	/* main: %3*/
	/*   %43 = fmul double %42, 2.000000e+00, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !32, !legup.pipeline.stage !7
	start_time: 2 avail_time: 13 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 13 % 12 = 1*/
	else if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		main_altfp_multiply_64_0_op0 = main_3_42;
	end
	/* main: %3*/
	/*   %48 = fmul double %47, 0x3FC99999A0000000, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !34, !legup.pipeline.stage !10
	start_time: 41 avail_time: 52 stage: 3 II: 12 start_ii_state = 41 % 12 = 5 avail_ii_state = 52 % 12 = 4*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_41)) begin
		main_altfp_multiply_64_0_op0 = main_3_47;
	end
	/* main: %3*/
	/*   %58 = fmul double %57, 2.000000e+00, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !41, !legup.pipeline.stage !7
	start_time: 3 avail_time: 14 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 14 % 12 = 2*/
	else if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		main_altfp_multiply_64_0_op0 = main_3_57;
	end
	/* main: %3*/
	/*   %63 = fmul double %62, 0x3FC99999A0000000, !legup.pipeline.start_time !42, !legup.pipeline.avail_time !43, !legup.pipeline.stage !10
	start_time: 42 avail_time: 53 stage: 3 II: 12 start_ii_state = 42 % 12 = 6 avail_ii_state = 53 % 12 = 5*/
	else /* if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_42)) */ begin
		main_altfp_multiply_64_0_op0 = main_3_62;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %28 = fmul double %27, 2.000000e+00, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !24, !legup.pipeline.stage !7
	start_time: 4 avail_time: 15 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 15 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4)) begin
		main_altfp_multiply_64_0_op1 = 64'h4000000000000000;
	end
	/* main: %3*/
	/*   %33 = fmul double %32, 0x3FC99999A0000000, !legup.pipeline.start_time !27, !legup.pipeline.avail_time !28, !legup.pipeline.stage !10
	start_time: 43 avail_time: 54 stage: 3 II: 12 start_ii_state = 43 % 12 = 7 avail_ii_state = 54 % 12 = 6*/
	else if (((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_43)) begin
		main_altfp_multiply_64_0_op1 = 64'h3FC99999A0000000;
	end
	/* main: %3*/
	/*   %43 = fmul double %42, 2.000000e+00, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !32, !legup.pipeline.stage !7
	start_time: 2 avail_time: 13 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 13 % 12 = 1*/
	else if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		main_altfp_multiply_64_0_op1 = 64'h4000000000000000;
	end
	/* main: %3*/
	/*   %48 = fmul double %47, 0x3FC99999A0000000, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !34, !legup.pipeline.stage !10
	start_time: 41 avail_time: 52 stage: 3 II: 12 start_ii_state = 41 % 12 = 5 avail_ii_state = 52 % 12 = 4*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_41)) begin
		main_altfp_multiply_64_0_op1 = 64'h3FC99999A0000000;
	end
	/* main: %3*/
	/*   %58 = fmul double %57, 2.000000e+00, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !41, !legup.pipeline.stage !7
	start_time: 3 avail_time: 14 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 14 % 12 = 2*/
	else if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		main_altfp_multiply_64_0_op1 = 64'h4000000000000000;
	end
	/* main: %3*/
	/*   %63 = fmul double %62, 0x3FC99999A0000000, !legup.pipeline.start_time !42, !legup.pipeline.avail_time !43, !legup.pipeline.stage !10
	start_time: 42 avail_time: 53 stage: 3 II: 12 start_ii_state = 42 % 12 = 6 avail_ii_state = 53 % 12 = 5*/
	else /* if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_42)) */ begin
		main_altfp_multiply_64_0_op1 = 64'h3FC99999A0000000;
	end
end
always @(*) begin
	altfp_main_3_58_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_multiply_64_0 = altfp_multiplier64_main_3_58_out;
end
always @(*) begin
	/* main: %3*/
	/*   %29 = fsub double %26, %28, !legup.pipeline.start_time !24, !legup.pipeline.avail_time !18, !legup.pipeline.stage !6
	start_time: 15 avail_time: 29 stage: 1 II: 12 start_ii_state = 15 % 12 = 3 avail_ii_state = 29 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_15)) begin
		main_altfp_subtract_64_0_op0 = main_3_26_reg_stage1;
	end
	/* main: %3*/
	/*   %44 = fsub double %41, %43, !legup.pipeline.start_time !32, !legup.pipeline.avail_time !14, !legup.pipeline.stage !6
	start_time: 13 avail_time: 27 stage: 1 II: 12 start_ii_state = 13 % 12 = 1 avail_ii_state = 27 % 12 = 3*/
	else if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_13)) begin
		main_altfp_subtract_64_0_op0 = main_3_41_reg_stage1;
	end
	/* main: %3*/
	/*   %59 = fsub double %56, %58, !legup.pipeline.start_time !41, !legup.pipeline.avail_time !16, !legup.pipeline.stage !6
	start_time: 14 avail_time: 28 stage: 1 II: 12 start_ii_state = 14 % 12 = 2 avail_ii_state = 28 % 12 = 4*/
	else /* if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_14)) */ begin
		main_altfp_subtract_64_0_op0 = main_3_56_reg_stage1;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %29 = fsub double %26, %28, !legup.pipeline.start_time !24, !legup.pipeline.avail_time !18, !legup.pipeline.stage !6
	start_time: 15 avail_time: 29 stage: 1 II: 12 start_ii_state = 15 % 12 = 3 avail_ii_state = 29 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_15)) begin
		main_altfp_subtract_64_0_op1 = main_3_28;
	end
	/* main: %3*/
	/*   %44 = fsub double %41, %43, !legup.pipeline.start_time !32, !legup.pipeline.avail_time !14, !legup.pipeline.stage !6
	start_time: 13 avail_time: 27 stage: 1 II: 12 start_ii_state = 13 % 12 = 1 avail_ii_state = 27 % 12 = 3*/
	else if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_13)) begin
		main_altfp_subtract_64_0_op1 = main_3_43;
	end
	/* main: %3*/
	/*   %59 = fsub double %56, %58, !legup.pipeline.start_time !41, !legup.pipeline.avail_time !16, !legup.pipeline.stage !6
	start_time: 14 avail_time: 28 stage: 1 II: 12 start_ii_state = 14 % 12 = 2 avail_ii_state = 28 % 12 = 4*/
	else /* if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_14)) */ begin
		main_altfp_subtract_64_0_op1 = main_3_58;
	end
end
always @(*) begin
	altfp_main_3_59_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_subtract_64_0 = altfp_subtractor64_main_3_59_out;
end
always @(*) begin
	/* main: %68*/
	/*   %71 = fptosi float %70 to i32*/
		main_altfp_fptosi_32_0_op0 = main_68_70;
end
always @(*) begin
	altfp_main_68_71_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_fptosi_32_0 = altfp_fptosi32_main_68_71_out;
end
always @(*) begin
	/* main: %3*/
	/*   %13 = fsub float %12, %9, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !7
	start_time: 2 avail_time: 16 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 16 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		main_altfp_subtract_32_0_op0 = main_3_12;
	end
	/* main: %3*/
	/*   %15 = fsub float %14, %8, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !7
	start_time: 3 avail_time: 17 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 17 % 12 = 5*/
	else if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		main_altfp_subtract_32_0_op0 = main_3_14;
	end
	/* main: %3*/
	/*   %17 = fsub float %16, %7, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !7
	start_time: 4 avail_time: 18 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 18 % 12 = 6*/
	else /* if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4)) */ begin
		main_altfp_subtract_32_0_op0 = main_3_16;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %13 = fsub float %12, %9, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !7
	start_time: 2 avail_time: 16 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 16 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		main_altfp_subtract_32_0_op1 = main_3_9_reg_stage0;
	end
	/* main: %3*/
	/*   %15 = fsub float %14, %8, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !7
	start_time: 3 avail_time: 17 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 17 % 12 = 5*/
	else if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		main_altfp_subtract_32_0_op1 = main_3_8_reg_stage0;
	end
	/* main: %3*/
	/*   %17 = fsub float %16, %7, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !13, !legup.pipeline.stage !7
	start_time: 4 avail_time: 18 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 18 % 12 = 6*/
	else /* if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4)) */ begin
		main_altfp_subtract_32_0_op1 = main_3_7_reg_stage0;
	end
end
always @(*) begin
	altfp_main_3_13_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_subtract_32_0 = altfp_subtractor_main_3_13_out;
end
always @(*) begin
	/* main: %3*/
	/*   %18 = fmul float %13, 0.000000e+00, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !14, !legup.pipeline.stage !6
	start_time: 16 avail_time: 27 stage: 1 II: 12 start_ii_state = 16 % 12 = 4 avail_ii_state = 27 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_16)) begin
		main_altfp_multiply_32_0_op0 = main_3_13;
	end
	/* main: %3*/
	/*   %20 = fmul float %15, 0.000000e+00, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !16, !legup.pipeline.stage !6
	start_time: 17 avail_time: 28 stage: 1 II: 12 start_ii_state = 17 % 12 = 5 avail_ii_state = 28 % 12 = 4*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_17)) begin
		main_altfp_multiply_32_0_op0 = main_3_15;
	end
	/* main: %3*/
	/*   %22 = fmul float %17, 0.000000e+00, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !18, !legup.pipeline.stage !6
	start_time: 18 avail_time: 29 stage: 1 II: 12 start_ii_state = 18 % 12 = 6 avail_ii_state = 29 % 12 = 5*/
	else /* if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_18)) */ begin
		main_altfp_multiply_32_0_op0 = main_3_17;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %18 = fmul float %13, 0.000000e+00, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !14, !legup.pipeline.stage !6
	start_time: 16 avail_time: 27 stage: 1 II: 12 start_ii_state = 16 % 12 = 4 avail_ii_state = 27 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_16)) begin
		main_altfp_multiply_32_0_op1 = 32'h0;
	end
	/* main: %3*/
	/*   %20 = fmul float %15, 0.000000e+00, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !16, !legup.pipeline.stage !6
	start_time: 17 avail_time: 28 stage: 1 II: 12 start_ii_state = 17 % 12 = 5 avail_ii_state = 28 % 12 = 4*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_17)) begin
		main_altfp_multiply_32_0_op1 = 32'h0;
	end
	/* main: %3*/
	/*   %22 = fmul float %17, 0.000000e+00, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !18, !legup.pipeline.stage !6
	start_time: 18 avail_time: 29 stage: 1 II: 12 start_ii_state = 18 % 12 = 6 avail_ii_state = 29 % 12 = 5*/
	else /* if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_18)) */ begin
		main_altfp_multiply_32_0_op1 = 32'h0;
	end
end
always @(*) begin
	altfp_main_3_18_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_multiply_32_0 = altfp_multiplier_main_3_18_out;
end
always @(*) begin
	/* main: %3*/
	/*   %19 = fadd float %4, %18, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 27 avail_time: 41 stage: 2 II: 12 start_ii_state = 27 % 12 = 3 avail_ii_state = 41 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_27)) begin
		main_altfp_add_32_0_op0 = main_3_4_reg_stage2;
	end
	/* main: %3*/
	/*   %21 = fadd float %19, %20, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 41 avail_time: 55 stage: 3 II: 12 start_ii_state = 41 % 12 = 5 avail_ii_state = 55 % 12 = 7*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_41)) begin
		main_altfp_add_32_0_op0 = main_3_19;
	end
	/* main: %3*/
	/*   %23 = fadd float %22, %21, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !19, !legup.pipeline.stage !12
	start_time: 55 avail_time: 69 stage: 4 II: 12 start_ii_state = 55 % 12 = 7 avail_ii_state = 69 % 12 = 9*/
	else /* if (((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_55)) */ begin
		main_altfp_add_32_0_op0 = main_3_22_reg_stage4;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %19 = fadd float %4, %18, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 27 avail_time: 41 stage: 2 II: 12 start_ii_state = 27 % 12 = 3 avail_ii_state = 41 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_27)) begin
		main_altfp_add_32_0_op1 = main_3_18;
	end
	/* main: %3*/
	/*   %21 = fadd float %19, %20, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 41 avail_time: 55 stage: 3 II: 12 start_ii_state = 41 % 12 = 5 avail_ii_state = 55 % 12 = 7*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_41)) begin
		main_altfp_add_32_0_op1 = main_3_20_reg_stage3;
	end
	/* main: %3*/
	/*   %23 = fadd float %22, %21, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !19, !legup.pipeline.stage !12
	start_time: 55 avail_time: 69 stage: 4 II: 12 start_ii_state = 55 % 12 = 7 avail_ii_state = 69 % 12 = 9*/
	else /* if (((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_55)) */ begin
		main_altfp_add_32_0_op1 = main_3_21;
	end
end
always @(*) begin
	altfp_main_3_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_0 = altfp_adder_main_3_19_out;
end
always @(*) begin
	/* main: %3*/
	/*   %36 = fadd float %6, %18, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 27 avail_time: 41 stage: 2 II: 12 start_ii_state = 27 % 12 = 3 avail_ii_state = 41 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_27)) begin
		main_altfp_add_32_1_op0 = main_3_6_reg_stage2;
	end
	/* main: %3*/
	/*   %37 = fadd float %36, %20, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 41 avail_time: 55 stage: 3 II: 12 start_ii_state = 41 % 12 = 5 avail_ii_state = 55 % 12 = 7*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_41)) begin
		main_altfp_add_32_1_op0 = main_3_36;
	end
	/* main: %3*/
	/*   %38 = fadd float %37, %22, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !19, !legup.pipeline.stage !12
	start_time: 55 avail_time: 69 stage: 4 II: 12 start_ii_state = 55 % 12 = 7 avail_ii_state = 69 % 12 = 9*/
	else /* if (((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_55)) */ begin
		main_altfp_add_32_1_op0 = main_3_37;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %36 = fadd float %6, %18, !legup.pipeline.start_time !14, !legup.pipeline.avail_time !15, !legup.pipeline.stage !8
	start_time: 27 avail_time: 41 stage: 2 II: 12 start_ii_state = 27 % 12 = 3 avail_ii_state = 41 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_27)) begin
		main_altfp_add_32_1_op1 = main_3_18;
	end
	/* main: %3*/
	/*   %37 = fadd float %36, %20, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !17, !legup.pipeline.stage !10
	start_time: 41 avail_time: 55 stage: 3 II: 12 start_ii_state = 41 % 12 = 5 avail_ii_state = 55 % 12 = 7*/
	else if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_41)) begin
		main_altfp_add_32_1_op1 = main_3_20_reg_stage3;
	end
	/* main: %3*/
	/*   %38 = fadd float %37, %22, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !19, !legup.pipeline.stage !12
	start_time: 55 avail_time: 69 stage: 4 II: 12 start_ii_state = 55 % 12 = 7 avail_ii_state = 69 % 12 = 9*/
	else /* if (((loop1_1_ii_state == 4'd7) & loop1_1_valid_bit_55)) */ begin
		main_altfp_add_32_1_op1 = main_3_22_reg_stage4;
	end
end
always @(*) begin
	altfp_main_3_36_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_1 = altfp_adder_main_3_36_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %68*/
	/*   ret i32 %71*/
	if ((cur_state == LEGUP_F_main_BB__68_20)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre = load float* %.phi.trans.insert, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %.pre11 = load float* %.phi.trans.insert10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %.preheader*/
	/*   %.pre15 = load float* %.phi.trans.insert14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   %12 = load float* %scevgep14, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
	if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   %14 = load float* %scevgep13, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   %16 = load float* %scevgep12, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   %30 = load float* %scevgep10, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   store float %35, float* %scevgep9, align 4, !tbaa !2, !legup.pipeline.start_time !30, !legup.pipeline.avail_time !31, !legup.pipeline.stage !23
	start_time: 90 avail_time: 91 stage: 7 II: 12 start_ii_state = 90 % 12 = 6 avail_ii_state = 91 % 12 = 7*/
	if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_90)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   store float %50, float* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !23
	start_time: 88 avail_time: 89 stage: 7 II: 12 start_ii_state = 88 % 12 = 4 avail_ii_state = 89 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_88)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre = load float* %.phi.trans.insert, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_address_a = main_preheader_phitransinsert;
	end
	/* main: %.preheader*/
	/*   %.pre11 = load float* %.phi.trans.insert10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_address_a = main_preheader_phitransinsert10_reg;
	end
	/* main: %.preheader*/
	/*   %.pre15 = load float* %.phi.trans.insert14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_address_a = main_preheader_phitransinsert14_reg;
	end
	/* main: %3*/
	/*   %12 = load float* %scevgep14, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
	if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0)) begin
		memory_controller_address_a = main_3_scevgep14;
	end
	/* main: %3*/
	/*   %14 = load float* %scevgep13, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_1)) begin
		memory_controller_address_a = main_3_scevgep13_reg_stage0;
	end
	/* main: %3*/
	/*   %16 = load float* %scevgep12, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		memory_controller_address_a = main_3_scevgep12_reg_stage0;
	end
	/* main: %3*/
	/*   %30 = load float* %scevgep10, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		memory_controller_address_a = main_3_scevgep10_reg_stage0;
	end
	/* main: %3*/
	/*   store float %35, float* %scevgep9, align 4, !tbaa !2, !legup.pipeline.start_time !30, !legup.pipeline.avail_time !31, !legup.pipeline.stage !23
	start_time: 90 avail_time: 91 stage: 7 II: 12 start_ii_state = 90 % 12 = 6 avail_ii_state = 91 % 12 = 7*/
	if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_90)) begin
		memory_controller_address_a = main_3_scevgep9_reg_stage7;
	end
	/* main: %3*/
	/*   store float %50, float* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !23
	start_time: 88 avail_time: 89 stage: 7 II: 12 start_ii_state = 88 % 12 = 4 avail_ii_state = 89 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_88)) begin
		memory_controller_address_a = main_3_scevgep6_reg_stage7;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre = load float* %.phi.trans.insert, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre11 = load float* %.phi.trans.insert10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre15 = load float* %.phi.trans.insert14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %3*/
	/*   %12 = load float* %scevgep14, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
	if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %3*/
	/*   %14 = load float* %scevgep13, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %3*/
	/*   %16 = load float* %scevgep12, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %3*/
	/*   %30 = load float* %scevgep10, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %3*/
	/*   store float %35, float* %scevgep9, align 4, !tbaa !2, !legup.pipeline.start_time !30, !legup.pipeline.avail_time !31, !legup.pipeline.stage !23
	start_time: 90 avail_time: 91 stage: 7 II: 12 start_ii_state = 90 % 12 = 6 avail_ii_state = 91 % 12 = 7*/
	if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_90)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   store float %50, float* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !23
	start_time: 88 avail_time: 89 stage: 7 II: 12 start_ii_state = 88 % 12 = 4 avail_ii_state = 89 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_88)) begin
		memory_controller_write_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %3*/
	/*   store float %35, float* %scevgep9, align 4, !tbaa !2, !legup.pipeline.start_time !30, !legup.pipeline.avail_time !31, !legup.pipeline.stage !23
	start_time: 90 avail_time: 91 stage: 7 II: 12 start_ii_state = 90 % 12 = 6 avail_ii_state = 91 % 12 = 7*/
	if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_90)) begin
		memory_controller_in_a = main_3_35;
	end
	/* main: %3*/
	/*   store float %50, float* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !23
	start_time: 88 avail_time: 89 stage: 7 II: 12 start_ii_state = 88 % 12 = 4 avail_ii_state = 89 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_88)) begin
		memory_controller_in_a = main_3_50;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre = load float* %.phi.trans.insert, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %.pre11 = load float* %.phi.trans.insert10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %.preheader*/
	/*   %.pre15 = load float* %.phi.trans.insert14, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %3*/
	/*   %12 = load float* %scevgep14, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
	if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %3*/
	/*   %14 = load float* %scevgep13, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_1)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %3*/
	/*   %16 = load float* %scevgep12, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %3*/
	/*   %30 = load float* %scevgep10, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %3*/
	/*   store float %35, float* %scevgep9, align 4, !tbaa !2, !legup.pipeline.start_time !30, !legup.pipeline.avail_time !31, !legup.pipeline.stage !23
	start_time: 90 avail_time: 91 stage: 7 II: 12 start_ii_state = 90 % 12 = 6 avail_ii_state = 91 % 12 = 7*/
	if (((loop1_1_ii_state == 4'd6) & loop1_1_valid_bit_90)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %3*/
	/*   store float %50, float* %scevgep6, align 4, !tbaa !2, !legup.pipeline.start_time !36, !legup.pipeline.avail_time !37, !legup.pipeline.stage !23
	start_time: 88 avail_time: 89 stage: 7 II: 12 start_ii_state = 88 % 12 = 4 avail_ii_state = 89 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_88)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre9 = load float* %.phi.trans.insert8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %.pre13 = load float* %.phi.trans.insert12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %.preheader*/
	/*   %.pre2 = load float* %.phi.trans.insert1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   %25 = load float* %scevgep11, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   %40 = load float* %scevgep8, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   %45 = load float* %scevgep7, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   %55 = load float* %scevgep5, align 4, !tbaa !2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !25, !legup.pipeline.stage !7
	start_time: 4 avail_time: 6 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 6 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   %60 = load float* %scevgep4, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
	if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   store float %65, float* %scevgep, align 4, !tbaa !2, !legup.pipeline.start_time !37, !legup.pipeline.avail_time !30, !legup.pipeline.stage !23
	start_time: 89 avail_time: 90 stage: 7 II: 12 start_ii_state = 89 % 12 = 5 avail_ii_state = 90 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_89)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %68*/
	/*   %70 = load float* %69, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__68_12)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre9 = load float* %.phi.trans.insert8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_address_b = main_preheader_phitransinsert8;
	end
	/* main: %.preheader*/
	/*   %.pre13 = load float* %.phi.trans.insert12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_address_b = main_preheader_phitransinsert12_reg;
	end
	/* main: %.preheader*/
	/*   %.pre2 = load float* %.phi.trans.insert1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_address_b = main_preheader_phitransinsert1_reg;
	end
	/* main: %3*/
	/*   %25 = load float* %scevgep11, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		memory_controller_address_b = main_3_scevgep11_reg_stage0;
	end
	/* main: %3*/
	/*   %40 = load float* %scevgep8, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_1)) begin
		memory_controller_address_b = main_3_scevgep8_reg_stage0;
	end
	/* main: %3*/
	/*   %45 = load float* %scevgep7, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		memory_controller_address_b = main_3_scevgep7_reg_stage0;
	end
	/* main: %3*/
	/*   %55 = load float* %scevgep5, align 4, !tbaa !2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !25, !legup.pipeline.stage !7
	start_time: 4 avail_time: 6 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 6 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4)) begin
		memory_controller_address_b = main_3_scevgep5_reg_stage0;
	end
	/* main: %3*/
	/*   %60 = load float* %scevgep4, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
	if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0)) begin
		memory_controller_address_b = main_3_scevgep4;
	end
	/* main: %3*/
	/*   store float %65, float* %scevgep, align 4, !tbaa !2, !legup.pipeline.start_time !37, !legup.pipeline.avail_time !30, !legup.pipeline.stage !23
	start_time: 89 avail_time: 90 stage: 7 II: 12 start_ii_state = 89 % 12 = 5 avail_ii_state = 90 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_89)) begin
		memory_controller_address_b = main_3_scevgep_reg_stage7;
	end
	/* main: %68*/
	/*   %70 = load float* %69, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__68_12)) begin
		memory_controller_address_b = main_68_69;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre9 = load float* %.phi.trans.insert8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre13 = load float* %.phi.trans.insert12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre2 = load float* %.phi.trans.insert1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %3*/
	/*   %25 = load float* %scevgep11, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %3*/
	/*   %40 = load float* %scevgep8, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %3*/
	/*   %45 = load float* %scevgep7, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %3*/
	/*   %55 = load float* %scevgep5, align 4, !tbaa !2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !25, !legup.pipeline.stage !7
	start_time: 4 avail_time: 6 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 6 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %3*/
	/*   %60 = load float* %scevgep4, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
	if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %3*/
	/*   store float %65, float* %scevgep, align 4, !tbaa !2, !legup.pipeline.start_time !37, !legup.pipeline.avail_time !30, !legup.pipeline.stage !23
	start_time: 89 avail_time: 90 stage: 7 II: 12 start_ii_state = 89 % 12 = 5 avail_ii_state = 90 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_89)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %68*/
	/*   %70 = load float* %69, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__68_12)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %3*/
	/*   store float %65, float* %scevgep, align 4, !tbaa !2, !legup.pipeline.start_time !37, !legup.pipeline.avail_time !30, !legup.pipeline.stage !23
	start_time: 89 avail_time: 90 stage: 7 II: 12 start_ii_state = 89 % 12 = 5 avail_ii_state = 90 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_89)) begin
		memory_controller_in_b = main_3_65;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %.preheader*/
	/*   %.pre9 = load float* %.phi.trans.insert8, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %.pre13 = load float* %.phi.trans.insert12, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_5)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %.preheader*/
	/*   %.pre2 = load float* %.phi.trans.insert1, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader_6)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %3*/
	/*   %25 = load float* %scevgep11, align 4, !tbaa !2, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !12, !legup.pipeline.stage !7
	start_time: 2 avail_time: 4 stage: 0 II: 12 start_ii_state = 2 % 12 = 2 avail_ii_state = 4 % 12 = 4*/
	if (((loop1_1_ii_state == 4'd2) & loop1_1_valid_bit_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %3*/
	/*   %40 = load float* %scevgep8, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 3 stage: 0 II: 12 start_ii_state = 1 % 12 = 1 avail_ii_state = 3 % 12 = 3*/
	if (((loop1_1_ii_state == 4'd1) & loop1_1_valid_bit_1)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %3*/
	/*   %45 = load float* %scevgep7, align 4, !tbaa !2, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !22, !legup.pipeline.stage !7
	start_time: 3 avail_time: 5 stage: 0 II: 12 start_ii_state = 3 % 12 = 3 avail_ii_state = 5 % 12 = 5*/
	if (((loop1_1_ii_state == 4'd3) & loop1_1_valid_bit_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %3*/
	/*   %55 = load float* %scevgep5, align 4, !tbaa !2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !25, !legup.pipeline.stage !7
	start_time: 4 avail_time: 6 stage: 0 II: 12 start_ii_state = 4 % 12 = 4 avail_ii_state = 6 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd4) & loop1_1_valid_bit_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %3*/
	/*   %60 = load float* %scevgep4, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 0 avail_time: 2 stage: 0 II: 12 start_ii_state = 0 % 12 = 0 avail_ii_state = 2 % 12 = 2*/
	if (((loop1_1_ii_state == 4'd0) & loop1_1_valid_bit_0)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %3*/
	/*   store float %65, float* %scevgep, align 4, !tbaa !2, !legup.pipeline.start_time !37, !legup.pipeline.avail_time !30, !legup.pipeline.stage !23
	start_time: 89 avail_time: 90 stage: 7 II: 12 start_ii_state = 89 % 12 = 5 avail_ii_state = 90 % 12 = 6*/
	if (((loop1_1_ii_state == 4'd5) & loop1_1_valid_bit_89)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %68*/
	/*   %70 = load float* %69, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__68_12)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %68*/
	/*   ret i32 %71*/
	if ((cur_state == LEGUP_F_main_BB__68_20)) begin
		return_val <= main_68_71;
		if (start == 1'b0 && ^(main_68_71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
