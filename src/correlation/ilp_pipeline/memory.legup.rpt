//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Feb 14 19:47:56 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Apr 28 20:03:19 2017
//----------------------------------------------------------------------------//

allocateRAM: %data
Constant: 0
allocateRAM: %mean
Constant: 0
allocateRAM: %stddev
Constant: 0
allocateRAM: %1
Constant: 0
allocateRAM: %2
Constant: 0
allocateRAM: %z
Constant: 0
allocateRAM: %sign
Constant: 0
allocateRAM: %r
Constant: 0
allocateRAM: %t1
Constant: 0
allocateRAM: %s1
Constant: 0
allocateRAM: %ix1
Constant: 0
allocateRAM: %q1
Constant: 0
allocateRAM: %ix0
Constant: 0
allocateRAM: %s0
Constant: 0
allocateRAM: %q
Constant: 0
allocateRAM: %m
Constant: 0
allocateRAM: %t
Constant: 0
allocateRAM: %i
Constant: 0
allocateRAM: %ew_u
Constant: 0
allocateRAM: %iw_u
Constant: 0
# of Vertices: 217
Representatives: 
1 -> 1
2 -> 2
3 -> 3
4 -> 4
5 -> 5
6 -> 6
7 -> 7
8 -> 8
9 -> 9
10 -> 10
11 -> 11
12 -> 12
13 -> 13
14 -> 14
15 -> 15
16 -> 16
17 -> 17
18 -> 18
19 -> 19
20 -> 20
21 -> 21
22 -> 22
23 -> 23
24 -> 24
25 -> 25
26 -> 26
27 -> 27
28 -> 28
29 -> 29
30 -> 30
31 -> 31
32 -> 32
33 -> 33
34 -> 34
35 -> 35
36 -> 36
37 -> 37
38 -> 38
39 -> 39
40 -> 40
41 -> 41
42 -> 42
43 -> 43
44 -> 44
45 -> 45
46 -> 46
47 -> 47
48 -> 48
49 -> 49
50 -> 50
51 -> 51
52 -> 52
53 -> 53
54 -> 54
55 -> 55
56 -> 56
57 -> 57
58 -> 58
59 -> 59
60 -> 60
61 -> 61
62 -> 62
63 -> 63
64 -> 64
65 -> 65
66 -> 66
67 -> 67
68 -> 68
69 -> 69
70 -> 70
71 -> 71
72 -> 72
73 -> 73
74 -> 74
75 -> 75
76 -> 76
77 -> 77
78 -> 78
79 -> 79
80 -> 80
81 -> 81
82 -> 82
83 -> 83
84 -> 84
85 -> 85
86 -> 86
87 -> 87
88 -> 88
89 -> 89
90 -> 90
91 -> 91
92 -> 92
93 -> 93
94 -> 94
95 -> 95
96 -> 96
97 -> 97
98 -> 98
99 -> 99
100 -> 100
101 -> 101
102 -> 102
103 -> 103
104 -> 104
105 -> 105
106 -> 106
107 -> 107
108 -> 108
109 -> 109
110 -> 110
111 -> 111
112 -> 112
113 -> 113
114 -> 114
115 -> 115
116 -> 116
117 -> 117
118 -> 118
119 -> 119
120 -> 120
121 -> 121
122 -> 122
123 -> 123
124 -> 124
125 -> 125
126 -> 126
127 -> 127
128 -> 128
129 -> 129
130 -> 130
131 -> 131
132 -> 132
133 -> 133
134 -> 134
135 -> 135
136 -> 136
137 -> 137
138 -> 138
139 -> 139
140 -> 140
141 -> 141
142 -> 142
143 -> 143
144 -> 144
145 -> 145
146 -> 146
147 -> 147
148 -> 148
149 -> 149
150 -> 150
151 -> 151
152 -> 152
153 -> 153
154 -> 154
155 -> 155
156 -> 156
157 -> 157
158 -> 158
159 -> 159
160 -> 160
161 -> 161
162 -> 162
163 -> 163
164 -> 164
165 -> 165
166 -> 166
167 -> 167
168 -> 168
169 -> 169
170 -> 170
171 -> 171
172 -> 172
173 -> 173
174 -> 174
175 -> 175
176 -> 176
177 -> 177
178 -> 178
179 -> 179
180 -> 180
181 -> 181
182 -> 182
183 -> 183
184 -> 184
185 -> 185
186 -> 186
187 -> 187
188 -> 188
189 -> 189
190 -> 190
191 -> 191
192 -> 192
193 -> 193
194 -> 194
195 -> 195
196 -> 196
197 -> 197
198 -> 198
199 -> 199
200 -> 200
201 -> 201
202 -> 202
203 -> 203
204 -> 204
205 -> 205
206 -> 206
207 -> 207
208 -> 208
209 -> 209
210 -> 210
211 -> 211
212 -> 212
213 -> 213
214 -> 214
215 -> 215
216 -> 216
217 -> 217

Connections (Graph): 
1 -> 
2 -> 
3 -> 
4 -> 
5 -> 
6 -> 
7 -> 17 27 37 
8 -> 16 26 33 
9 -> 23 36 
10 -> 13 21 35 
11 -> 38 
12 -> 22 34 
13 -> 
14 -> 
15 -> 14 20 
16 -> 
17 -> 
18 -> 
19 -> 18 
20 -> 
21 -> 
22 -> 
23 -> 
24 -> 
25 -> 24 30 
26 -> 
27 -> 
28 -> 
29 -> 28 
30 -> 
31 -> 
32 -> 31 
33 -> 
34 -> 
35 -> 
36 -> 
37 -> 
38 -> 
39 -> 
40 -> 39 
41 -> 
42 -> 41 
43 -> 214 
44 -> 
45 -> 77 87 92 94 
46 -> 
47 -> 186 213 
48 -> 
49 -> 90 117 124 140 145 158 160 176 199 
50 -> 
51 -> 129 133 144 147 156 171 180 
52 -> 
53 -> 153 155 166 169 
54 -> 
55 -> 146 159 
56 -> 
57 -> 91 99 108 111 116 120 123 127 139 143 154 165 170 175 179 182 200 209 
58 -> 
59 -> 172 183 187 190 192 197 
60 -> 
61 -> 86 88 89 93 95 96 100 101 102 109 114 115 122 131 135 138 150 152 164 167 174 181 202 204 
62 -> 
63 -> 128 149 161 
64 -> 
65 -> 136 184 188 194 198 
66 -> 
67 -> 97 107 112 121 201 
68 -> 
69 -> 132 151 163 
70 -> 
71 -> 103 105 110 
72 -> 
73 -> 85 
74 -> 81 84 
75 -> 212 
76 -> 207 210 
77 -> 
78 -> 
79 -> 
80 -> 83 
81 -> 
82 -> 
83 -> 
84 -> 
85 -> 
86 -> 
87 -> 
88 -> 
89 -> 
90 -> 
91 -> 
92 -> 
93 -> 
94 -> 
95 -> 
96 -> 
97 -> 98 
98 -> 
99 -> 
100 -> 
101 -> 
102 -> 
103 -> 104 
104 -> 
105 -> 106 
106 -> 
107 -> 
108 -> 
109 -> 
110 -> 
111 -> 
112 -> 113 
113 -> 
114 -> 
115 -> 118 119 
116 -> 
117 -> 
118 -> 119 
119 -> 
120 -> 
121 -> 
122 -> 125 126 
123 -> 
124 -> 
125 -> 126 
126 -> 
127 -> 
128 -> 130 
129 -> 130 
130 -> 
131 -> 
132 -> 134 
133 -> 134 137 
134 -> 
135 -> 
136 -> 137 
137 -> 
138 -> 141 142 
139 -> 
140 -> 
141 -> 142 
142 -> 
143 -> 
144 -> 
145 -> 
146 -> 148 
147 -> 148 
148 -> 
149 -> 
150 -> 
151 -> 
152 -> 
153 -> 
154 -> 
155 -> 157 
156 -> 157 
157 -> 
158 -> 
159 -> 
160 -> 
161 -> 162 
162 -> 
163 -> 
164 -> 
165 -> 
166 -> 
167 -> 168 
168 -> 
169 -> 
170 -> 
171 -> 173 
172 -> 173 
173 -> 
174 -> 177 178 
175 -> 
176 -> 
177 -> 178 
178 -> 
179 -> 
180 -> 
181 -> 
182 -> 
183 -> 
184 -> 185 
185 -> 
186 -> 
187 -> 
188 -> 189 
189 -> 
190 -> 191 
191 -> 
192 -> 193 
193 -> 
194 -> 
195 -> 
196 -> 195 
197 -> 
198 -> 
199 -> 
200 -> 
201 -> 
202 -> 203 
203 -> 
204 -> 
205 -> 
206 -> 
207 -> 
208 -> 
209 -> 
210 -> 
211 -> 
212 -> 
213 -> 
214 -> 217 
215 -> 
216 -> 215 
217 -> 

Points-to-set: 
1 -> {}
2 -> {1, }
3 -> {}
4 -> {3, }
5 -> {}
6 -> {5, }
7 -> {}
8 -> {7, }
9 -> {}
10 -> {9, }
11 -> {}
12 -> {11, }
13 -> {9, }
14 -> {}
15 -> {}
16 -> {7, }
17 -> {}
18 -> {}
19 -> {}
20 -> {}
21 -> {9, }
22 -> {11, }
23 -> {}
24 -> {}
25 -> {}
26 -> {7, }
27 -> {}
28 -> {}
29 -> {}
30 -> {}
31 -> {}
32 -> {}
33 -> {7, }
34 -> {11, }
35 -> {9, }
36 -> {}
37 -> {}
38 -> {}
39 -> {}
40 -> {}
41 -> {}
42 -> {}
43 -> {}
44 -> {43, }
45 -> {}
46 -> {45, }
47 -> {}
48 -> {47, }
49 -> {}
50 -> {49, }
51 -> {}
52 -> {51, }
53 -> {}
54 -> {53, }
55 -> {}
56 -> {55, }
57 -> {}
58 -> {57, }
59 -> {}
60 -> {59, }
61 -> {}
62 -> {61, }
63 -> {}
64 -> {63, }
65 -> {}
66 -> {65, }
67 -> {}
68 -> {67, }
69 -> {}
70 -> {69, }
71 -> {}
72 -> {71, }
73 -> {79, 80, }
74 -> {73, }
75 -> {205, 206, }
76 -> {75, }
77 -> {}
78 -> {73, }
79 -> {}
80 -> {}
81 -> {73, }
82 -> {80, }
83 -> {}
84 -> {73, }
85 -> {79, 80, }
86 -> {}
87 -> {}
88 -> {}
89 -> {}
90 -> {}
91 -> {}
92 -> {}
93 -> {}
94 -> {}
95 -> {}
96 -> {}
97 -> {}
98 -> {}
99 -> {}
100 -> {}
101 -> {}
102 -> {}
103 -> {}
104 -> {}
105 -> {}
106 -> {}
107 -> {}
108 -> {}
109 -> {}
110 -> {}
111 -> {}
112 -> {}
113 -> {}
114 -> {}
115 -> {}
116 -> {}
117 -> {}
118 -> {}
119 -> {}
120 -> {}
121 -> {}
122 -> {}
123 -> {}
124 -> {}
125 -> {}
126 -> {}
127 -> {}
128 -> {}
129 -> {}
130 -> {}
131 -> {}
132 -> {}
133 -> {}
134 -> {}
135 -> {}
136 -> {}
137 -> {}
138 -> {}
139 -> {}
140 -> {}
141 -> {}
142 -> {}
143 -> {}
144 -> {}
145 -> {}
146 -> {}
147 -> {}
148 -> {}
149 -> {}
150 -> {}
151 -> {}
152 -> {}
153 -> {}
154 -> {}
155 -> {}
156 -> {}
157 -> {}
158 -> {}
159 -> {}
160 -> {}
161 -> {}
162 -> {}
163 -> {}
164 -> {}
165 -> {}
166 -> {}
167 -> {}
168 -> {}
169 -> {}
170 -> {}
171 -> {}
172 -> {}
173 -> {}
174 -> {}
175 -> {}
176 -> {}
177 -> {}
178 -> {}
179 -> {}
180 -> {}
181 -> {}
182 -> {}
183 -> {}
184 -> {}
185 -> {}
186 -> {}
187 -> {}
188 -> {}
189 -> {}
190 -> {}
191 -> {}
192 -> {}
193 -> {}
194 -> {}
195 -> {}
196 -> {}
197 -> {}
198 -> {}
199 -> {}
200 -> {}
201 -> {}
202 -> {}
203 -> {}
204 -> {}
205 -> {}
206 -> {}
207 -> {75, }
208 -> {206, }
209 -> {}
210 -> {75, }
211 -> {75, }
212 -> {205, 206, }
213 -> {}
214 -> {}
215 -> {}
216 -> {}
217 -> {}

Variable: Int -> Value* mapping
17:   %8 = load float* %scevgep13, align 4, !tbaa !1
18:   %10 = add nsw i32 %5, 1
6: @.str2 = private unnamed_addr constant [6 x i8] c"loop2\00", align 1
4: @.str1 = private unnamed_addr constant [6 x i8] c"loop3\00", align 1
2: @.str = private unnamed_addr constant [6 x i8] c"loop4\00", align 1
217: 
; Function Attrs: nounwind
define internal double @__ieee754_sqrt(double %x) #2 {
  %1 = alloca double, align 8
  %2 = alloca double, align 8
  %z = alloca double, align 8
  %sign = alloca i32, align 4
  %r = alloca i32, align 4
  %t1 = alloca i32, align 4
  %s1 = alloca i32, align 4
  %ix1 = alloca i32, align 4
  %q1 = alloca i32, align 4
  %ix0 = alloca i32, align 4
  %s0 = alloca i32, align 4
  %q = alloca i32, align 4
  %m = alloca i32, align 4
  %t = alloca i32, align 4
  %i = alloca i32, align 4
  %ew_u = alloca %union.ieee_double_shape_type, align 8
  %iw_u = alloca %union.ieee_double_shape_type, align 8
  store double %x, double* %2, align 8
  store i32 -2147483648, i32* %sign, align 4
  br label %3

; <label>:3                                       ; preds = %0
  %4 = load double* %2, align 8
  %5 = getelementptr inbounds %union.ieee_double_shape_type* %ew_u, i32 0, i32 0
  store double %4, double* %5, align 8
  %6 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
  %7 = getelementptr inbounds %struct.anon* %6, i32 0, i32 1
  %8 = load i32* %7, align 4
  store i32 %8, i32* %ix0, align 4
  %9 = bitcast %union.ieee_double_shape_type* %ew_u to i32*
  %10 = load i32* %9, align 8
  store i32 %10, i32* %ix1, align 4
  br label %11

; <label>:11                                      ; preds = %3
  %12 = load i32* %ix0, align 4
  %13 = and i32 %12, 2146435072
  %14 = icmp eq i32 %13, 2146435072
  br i1 %14, label %15, label %19

; <label>:15                                      ; preds = %11
  %16 = load double* %2, align 8
  %17 = fmul double %16, %16
  %18 = fadd double %17, %16
  store double %18, double* %1, align 8
  br label %262

; <label>:19                                      ; preds = %11
  %20 = load i32* %ix0, align 4
  %21 = icmp slt i32 %20, 1
  br i1 %21, label %22, label %42

; <label>:22                                      ; preds = %19
  %23 = load i32* %ix0, align 4
  %24 = load i32* %sign, align 4
  %25 = xor i32 %24, -1
  %26 = and i32 %23, %25
  %27 = load i32* %ix1, align 4
  %28 = or i32 %26, %27
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %30, label %32

; <label>:30                                      ; preds = %22
  %31 = load double* %2, align 8
  store double %31, double* %1, align 8
  br label %262

; <label>:32                                      ; preds = %22
  %33 = load i32* %ix0, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %40

; <label>:35                                      ; preds = %32
  %36 = load double* %2, align 8
  %37 = fsub double %36, %36
  %38 = fsub double %36, %36
  %39 = fdiv double %37, %38
  store double %39, double* %1, align 8
  br label %262

; <label>:40                                      ; preds = %32
  br label %41

; <label>:41                                      ; preds = %40
  br label %42

; <label>:42                                      ; preds = %41, %19
  %43 = load i32* %ix0, align 4
  %44 = ashr i32 %43, 20
  store i32 %44, i32* %m, align 4
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %82

; <label>:46                                      ; preds = %42
  br label %47

; <label>:47                                      ; preds = %50, %46
  %48 = load i32* %ix0, align 4
  %49 = icmp eq i32 %48, 0
  br i1 %49, label %50, label %58

; <label>:50                                      ; preds = %47
  %51 = load i32* %m, align 4
  %52 = add nsw i32 %51, -21
  store i32 %52, i32* %m, align 4
  %53 = load i32* %ix1, align 4
  %54 = lshr i32 %53, 11
  %55 = load i32* %ix0, align 4
  %56 = or i32 %55, %54
  store i32 %56, i32* %ix0, align 4
  %57 = shl i32 %53, 21
  store i32 %57, i32* %ix1, align 4
  br label %47

; <label>:58                                      ; preds = %47
  br label %59

; <label>:59                                      ; preds = %66, %58
  %storemerge3 = phi i32 [ 0, %58 ], [ %68, %66 ]
  store i32 %storemerge3, i32* %i, align 4
  %60 = load i32* %ix0, align 4
  %61 = and i32 %60, 1048576
  %62 = icmp eq i32 %61, 0
  br i1 %62, label %63, label %69

; <label>:63                                      ; preds = %59
  %64 = load i32* %ix0, align 4
  %65 = shl i32 %64, 1
  store i32 %65, i32* %ix0, align 4
  br label %66

; <label>:66                                      ; preds = %63
  %67 = load i32* %i, align 4
  %68 = add nsw i32 %67, 1
  br label %59

; <label>:69                                      ; preds = %59
  %70 = load i32* %i, align 4
  %71 = add nsw i32 %70, -1
  %72 = load i32* %m, align 4
  %73 = sub nsw i32 %72, %71
  store i32 %73, i32* %m, align 4
  %74 = load i32* %ix1, align 4
  %75 = sub nsw i32 32, %70
  %76 = lshr i32 %74, %75
  %77 = load i32* %ix0, align 4
  %78 = or i32 %77, %76
  store i32 %78, i32* %ix0, align 4
  %79 = load i32* %i, align 4
  %80 = load i32* %ix1, align 4
  %81 = shl i32 %80, %79
  store i32 %81, i32* %ix1, align 4
  br label %82

; <label>:82                                      ; preds = %69, %42
  %83 = load i32* %m, align 4
  %84 = add nsw i32 %83, -1023
  store i32 %84, i32* %m, align 4
  %85 = load i32* %ix0, align 4
  %86 = and i32 %85, 1048575
  %87 = or i32 %86, 1048576
  store i32 %87, i32* %ix0, align 4
  %88 = and i32 %84, 1
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %100, label %90

; <label>:90                                      ; preds = %82
  %91 = load i32* %ix0, align 4
  %92 = load i32* %ix1, align 4
  %93 = load i32* %sign, align 4
  %94 = and i32 %92, %93
  %95 = lshr i32 %94, 31
  %96 = add i32 %91, %95
  %97 = add i32 %91, %96
  store i32 %97, i32* %ix0, align 4
  %98 = load i32* %ix1, align 4
  %99 = shl i32 %98, 1
  store i32 %99, i32* %ix1, align 4
  br label %100

; <label>:100                                     ; preds = %90, %82
  %101 = load i32* %m, align 4
  %102 = ashr i32 %101, 1
  store i32 %102, i32* %m, align 4
  %103 = load i32* %ix0, align 4
  %104 = load i32* %ix1, align 4
  %105 = load i32* %sign, align 4
  %106 = and i32 %104, %105
  %107 = lshr i32 %106, 31
  %108 = add i32 %103, %107
  %109 = add i32 %103, %108
  store i32 %109, i32* %ix0, align 4
  %110 = load i32* %ix1, align 4
  %111 = shl i32 %110, 1
  store i32 %111, i32* %ix1, align 4
  store i32 0, i32* %s1, align 4
  store i32 0, i32* %s0, align 4
  store i32 0, i32* %q1, align 4
  store i32 0, i32* %q, align 4
  br label %112

; <label>:112                                     ; preds = %128, %100
  %storemerge = phi i32 [ 2097152, %100 ], [ %139, %128 ]
  store i32 %storemerge, i32* %r, align 4
  %113 = icmp eq i32 %storemerge, 0
  br i1 %113, label %140, label %114

; <label>:114                                     ; preds = %112
  %115 = load i32* %s0, align 4
  %116 = load i32* %r, align 4
  %117 = add i32 %115, %116
  store i32 %117, i32* %t, align 4
  %118 = load i32* %ix0, align 4
  %119 = icmp sgt i32 %117, %118
  br i1 %119, label %128, label %120

; <label>:120                                     ; preds = %114
  %121 = load i32* %t, align 4
  %122 = load i32* %r, align 4
  %123 = add i32 %121, %122
  store i32 %123, i32* %s0, align 4
  %124 = load i32* %ix0, align 4
  %125 = sub nsw i32 %124, %121
  store i32 %125, i32* %ix0, align 4
  %126 = load i32* %q, align 4
  %127 = add i32 %126, %122
  store i32 %127, i32* %q, align 4
  br label %128

; <label>:128                                     ; preds = %120, %114
  %129 = load i32* %ix0, align 4
  %130 = load i32* %ix1, align 4
  %131 = load i32* %sign, align 4
  %132 = and i32 %130, %131
  %133 = lshr i32 %132, 31
  %134 = add i32 %129, %133
  %135 = add i32 %129, %134
  store i32 %135, i32* %ix0, align 4
  %136 = load i32* %ix1, align 4
  %137 = shl i32 %136, 1
  store i32 %137, i32* %ix1, align 4
  %138 = load i32* %r, align 4
  %139 = lshr i32 %138, 1
  br label %112

; <label>:140                                     ; preds = %112
  %141 = load i32* %sign, align 4
  br label %142

; <label>:142                                     ; preds = %191, %140
  %storemerge1 = phi i32 [ %141, %140 ], [ %202, %191 ]
  store i32 %storemerge1, i32* %r, align 4
  %143 = icmp eq i32 %storemerge1, 0
  br i1 %143, label %203, label %144

; <label>:144                                     ; preds = %142
  %145 = load i32* %s1, align 4
  %146 = load i32* %r, align 4
  %147 = add i32 %145, %146
  store i32 %147, i32* %t1, align 4
  %148 = load i32* %s0, align 4
  store i32 %148, i32* %t, align 4
  %149 = load i32* %ix0, align 4
  %150 = icmp slt i32 %148, %149
  br i1 %150, label %159, label %151

; <label>:151                                     ; preds = %144
  %152 = load i32* %t, align 4
  %153 = load i32* %ix0, align 4
  %154 = icmp eq i32 %152, %153
  br i1 %154, label %155, label %191

; <label>:155                                     ; preds = %151
  %156 = load i32* %t1, align 4
  %157 = load i32* %ix1, align 4
  %158 = icmp ugt i32 %156, %157
  br i1 %158, label %191, label %159

; <label>:159                                     ; preds = %155, %144
  %160 = load i32* %t1, align 4
  %161 = load i32* %r, align 4
  %162 = add i32 %160, %161
  store i32 %162, i32* %s1, align 4
  %163 = load i32* %sign, align 4
  %164 = and i32 %160, %163
  %165 = icmp eq i32 %164, %163
  br i1 %165, label %166, label %174

; <label>:166                                     ; preds = %159
  %167 = load i32* %s1, align 4
  %168 = load i32* %sign, align 4
  %169 = and i32 %167, %168
  %170 = icmp eq i32 %169, 0
  br i1 %170, label %171, label %174

; <label>:171                                     ; preds = %166
  %172 = load i32* %s0, align 4
  %173 = add nsw i32 %172, 1
  store i32 %173, i32* %s0, align 4
  br label %174

; <label>:174                                     ; preds = %171, %166, %159
  %175 = load i32* %t, align 4
  %176 = load i32* %ix0, align 4
  %177 = sub nsw i32 %176, %175
  store i32 %177, i32* %ix0, align 4
  %178 = load i32* %ix1, align 4
  %179 = load i32* %t1, align 4
  %180 = icmp ult i32 %178, %179
  br i1 %180, label %181, label %184

; <label>:181                                     ; preds = %174
  %182 = load i32* %ix0, align 4
  %183 = add nsw i32 %182, -1
  store i32 %183, i32* %ix0, align 4
  br label %184

; <label>:184                                     ; preds = %181, %174
  %185 = load i32* %t1, align 4
  %186 = load i32* %ix1, align 4
  %187 = sub i32 %186, %185
  store i32 %187, i32* %ix1, align 4
  %188 = load i32* %r, align 4
  %189 = load i32* %q1, align 4
  %190 = add i32 %189, %188
  store i32 %190, i32* %q1, align 4
  br label %191

; <label>:191                                     ; preds = %184, %155, %151
  %192 = load i32* %ix0, align 4
  %193 = load i32* %ix1, align 4
  %194 = load i32* %sign, align 4
  %195 = and i32 %193, %194
  %196 = lshr i32 %195, 31
  %197 = add i32 %192, %196
  %198 = add i32 %192, %197
  store i32 %198, i32* %ix0, align 4
  %199 = load i32* %ix1, align 4
  %200 = shl i32 %199, 1
  store i32 %200, i32* %ix1, align 4
  %201 = load i32* %r, align 4
  %202 = lshr i32 %201, 1
  br label %142

; <label>:203                                     ; preds = %142
  %204 = load i32* %ix0, align 4
  %205 = load i32* %ix1, align 4
  %206 = or i32 %204, %205
  %207 = icmp eq i32 %206, 0
  br i1 %207, label %234, label %208

; <label>:208                                     ; preds = %203
  store double 1.000000e+00, double* %z, align 8
  br i1 true, label %209, label %233

; <label>:209                                     ; preds = %208
  store double 1.000000e+00, double* %z, align 8
  %210 = load i32* %q1, align 4
  %211 = icmp eq i32 %210, -1
  br i1 %211, label %212, label %215

; <label>:212                                     ; preds = %209
  store i32 0, i32* %q1, align 4
  %213 = load i32* %q, align 4
  %214 = add nsw i32 %213, 1
  store i32 %214, i32* %q, align 4
  br label %232

; <label>:215                                     ; preds = %209
  %216 = load double* %z, align 8
  %217 = fcmp ogt double %216, 1.000000e+00
  br i1 %217, label %218, label %227

; <label>:218                                     ; preds = %215
  %219 = load i32* %q1, align 4
  %220 = icmp eq i32 %219, -2
  br i1 %220, label %221, label %224

; <label>:221                                     ; preds = %218
  %222 = load i32* %q, align 4
  %223 = add nsw i32 %222, 1
  store i32 %223, i32* %q, align 4
  br label %224

; <label>:224                                     ; preds = %221, %218
  %225 = load i32* %q1, align 4
  %226 = add i32 %225, 2
  br label %231

; <label>:227                                     ; preds = %215
  %228 = load i32* %q1, align 4
  %229 = and i32 %228, 1
  %230 = add i32 %228, %229
  br label %231

; <label>:231                                     ; preds = %227, %224
  %storemerge2 = phi i32 [ %230, %227 ], [ %226, %224 ]
  store i32 %storemerge2, i32* %q1, align 4
  br label %232

; <label>:232                                     ; preds = %231, %212
  br label %233

; <label>:233                                     ; preds = %232, %208
  br label %234

; <label>:234                                     ; preds = %233, %203
  %235 = load i32* %q, align 4
  %236 = ashr i32 %235, 1
  %237 = add nsw i32 %236, 1071644672
  store i32 %237, i32* %ix0, align 4
  %238 = load i32* %q1, align 4
  %239 = lshr i32 %238, 1
  store i32 %239, i32* %ix1, align 4
  %240 = load i32* %q, align 4
  %241 = and i32 %240, 1
  %242 = icmp eq i32 %241, 0
  br i1 %242, label %247, label %243

; <label>:243                                     ; preds = %234
  %244 = load i32* %sign, align 4
  %245 = load i32* %ix1, align 4
  %246 = or i32 %245, %244
  store i32 %246, i32* %ix1, align 4
  br label %247

; <label>:247                                     ; preds = %243, %234
  %248 = load i32* %m, align 4
  %249 = shl i32 %248, 20
  %250 = load i32* %ix0, align 4
  %251 = add nsw i32 %250, %249
  store i32 %251, i32* %ix0, align 4
  br label %252

; <label>:252                                     ; preds = %247
  %253 = load i32* %ix0, align 4
  %254 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
  %255 = getelementptr inbounds %struct.anon* %254, i32 0, i32 1
  store i32 %253, i32* %255, align 4
  %256 = load i32* %ix1, align 4
  %257 = bitcast %union.ieee_double_shape_type* %iw_u to i32*
  store i32 %256, i32* %257, align 8
  %258 = getelementptr inbounds %union.ieee_double_shape_type* %iw_u, i32 0, i32 0
  %259 = load double* %258, align 8
  store double %259, double* %z, align 8
  br label %260

; <label>:260                                     ; preds = %252
  %261 = load double* %z, align 8
  store double %261, double* %1, align 8
  br label %262

; <label>:262                                     ; preds = %260, %35, %30, %15
  %263 = load double* %1, align 8
  ret double %263
}

19:   %5 = phi i32 [ 0, %1 ], [ %10, %3 ]
14:   %7 = add i32 %2, %6
8:   %data = alloca [2500 x float], align 4
10:   %mean = alloca [50 x float], align 4
12:   %stddev = alloca [50 x float], align 4
15:   %2 = phi i32 [ 0, %0 ], [ %13, %11 ]
23:   %15 = load float* %scevgep10, align 4, !tbaa !1
29:   %18 = phi i32 [ 0, %.preheader2 ], [ %25, %16 ]
215: double %x
91:   %27 = load i32* %ix1, align 4
92:   %31 = load double* %2, align 8
93:   %33 = load i32* %ix0, align 4
94:   %36 = load double* %2, align 8
20:   %13 = add nsw i32 %2, 1
25:   %14 = phi i32 [ %33, %26 ], [ 0, %.preheader2.preheader ]
103:   %67 = load i32* %i, align 4
104:   %68 = add nsw i32 %67, 1
105:   %70 = load i32* %i, align 4
106:   %71 = add nsw i32 %70, -1
107:   %72 = load i32* %m, align 4
108:   %74 = load i32* %ix1, align 4
109:   %77 = load i32* %ix0, align 4
27:   %21 = load float* %scevgep7, align 4, !tbaa !1
28:   %25 = add nsw i32 %18, 1
30:   %33 = add nsw i32 %14, 1
42:   %34 = phi i32 [ %49, %48 ], [ 0, %.preheader1.preheader ]
40:   %37 = phi i32 [ 0, %.preheader1 ], [ %47, %36 ]
36:   %39 = load float* %scevgep3, align 4, !tbaa !1
16:   %scevgep13 = getelementptr [2500 x float]* %data, i32 0, i32 %7
37:   %40 = load float* %scevgep2, align 4, !tbaa !1
118:   %96 = add i32 %91, %95
119:   %97 = add i32 %91, %96
120:   %98 = load i32* %ix1, align 4
31:   %38 = add i32 %35, %37
38:   %44 = load float* %scevgep, align 4, !tbaa !1
39:   %47 = add nsw i32 %37, 1
41:   %49 = add nsw i32 %34, 1
33:   %scevgep2 = getelementptr [2500 x float]* %data, i32 0, i32 %38
216: double %x
44:   %1 = alloca double, align 8
46:   %2 = alloca double, align 8
48:   %z = alloca double, align 8
50:   %sign = alloca i32, align 4
52:   %r = alloca i32, align 4
54:   %t1 = alloca i32, align 4
56:   %s1 = alloca i32, align 4
58:   %ix1 = alloca i32, align 4
60:   %q1 = alloca i32, align 4
62:   %ix0 = alloca i32, align 4
64:   %s0 = alloca i32, align 4
66:   %q = alloca i32, align 4
68:   %m = alloca i32, align 4
70:   %t = alloca i32, align 4
72:   %i = alloca i32, align 4
74:   %ew_u = alloca %union.ieee_double_shape_type, align 8
76:   %iw_u = alloca %union.ieee_double_shape_type, align 8
77:   %4 = load double* %2, align 8
78:   %5 = getelementptr inbounds %union.ieee_double_shape_type* %ew_u, i32 0, i32 0
81:   %6 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
82:   %7 = getelementptr inbounds %struct.anon* %6, i32 0, i32 1
83:   %8 = load i32* %7, align 4
84:   %9 = bitcast %union.ieee_double_shape_type* %ew_u to i32*
85:   %10 = load i32* %9, align 8
86:   %12 = load i32* %ix0, align 4
87:   %16 = load double* %2, align 8
88:   %20 = load i32* %ix0, align 4
89:   %23 = load i32* %ix0, align 4
90:   %24 = load i32* %sign, align 4
100:   %55 = load i32* %ix0, align 4
101:   %60 = load i32* %ix0, align 4
102:   %64 = load i32* %ix0, align 4
95:   %43 = load i32* %ix0, align 4
96:   %48 = load i32* %ix0, align 4
97:   %51 = load i32* %m, align 4
98:   %52 = add nsw i32 %51, -21
99:   %53 = load i32* %ix1, align 4
161:   %172 = load i32* %s0, align 4
162:   %173 = add nsw i32 %172, 1
163:   %175 = load i32* %t, align 4
164:   %176 = load i32* %ix0, align 4
165:   %178 = load i32* %ix1, align 4
166:   %179 = load i32* %t1, align 4
167:   %182 = load i32* %ix0, align 4
168:   %183 = add nsw i32 %182, -1
169:   %185 = load i32* %t1, align 4
170:   %186 = load i32* %ix1, align 4
171:   %188 = load i32* %r, align 4
172:   %189 = load i32* %q1, align 4
173:   %190 = add i32 %189, %188
174:   %192 = load i32* %ix0, align 4
175:   %193 = load i32* %ix1, align 4
176:   %194 = load i32* %sign, align 4
183:   %210 = load i32* %q1, align 4
146:   %145 = load i32* %s1, align 4
147:   %146 = load i32* %r, align 4
148:   %147 = add i32 %145, %146
149:   %148 = load i32* %s0, align 4
150:   %149 = load i32* %ix0, align 4
151:   %152 = load i32* %t, align 4
152:   %153 = load i32* %ix0, align 4
153:   %156 = load i32* %t1, align 4
154:   %157 = load i32* %ix1, align 4
155:   %160 = load i32* %t1, align 4
156:   %161 = load i32* %r, align 4
157:   %162 = add i32 %160, %161
158:   %163 = load i32* %sign, align 4
159:   %167 = load i32* %s1, align 4
160:   %168 = load i32* %sign, align 4
110:   %79 = load i32* %i, align 4
111:   %80 = load i32* %ix1, align 4
112:   %83 = load i32* %m, align 4
113:   %84 = add nsw i32 %83, -1023
114:   %85 = load i32* %ix0, align 4
115:   %91 = load i32* %ix0, align 4
116:   %92 = load i32* %ix1, align 4
117:   %93 = load i32* %sign, align 4
179:   %199 = load i32* %ix1, align 4
180:   %201 = load i32* %r, align 4
181:   %204 = load i32* %ix0, align 4
182:   %205 = load i32* %ix1, align 4
121:   %101 = load i32* %m, align 4
122:   %103 = load i32* %ix0, align 4
123:   %104 = load i32* %ix1, align 4
124:   %105 = load i32* %sign, align 4
125:   %108 = add i32 %103, %107
126:   %109 = add i32 %103, %108
127:   %110 = load i32* %ix1, align 4
128:   %115 = load i32* %s0, align 4
129:   %116 = load i32* %r, align 4
130:   %117 = add i32 %115, %116
131:   %118 = load i32* %ix0, align 4
132:   %121 = load i32* %t, align 4
133:   %122 = load i32* %r, align 4
134:   %123 = add i32 %121, %122
135:   %124 = load i32* %ix0, align 4
136:   %126 = load i32* %q, align 4
137:   %127 = add i32 %126, %122
138:   %129 = load i32* %ix0, align 4
139:   %130 = load i32* %ix1, align 4
140:   %131 = load i32* %sign, align 4
141:   %134 = add i32 %129, %133
142:   %135 = add i32 %129, %134
143:   %136 = load i32* %ix1, align 4
144:   %138 = load i32* %r, align 4
145:   %141 = load i32* %sign, align 4
177:   %197 = add i32 %192, %196
178:   %198 = add i32 %192, %197
184:   %213 = load i32* %q, align 4
185:   %214 = add nsw i32 %213, 1
186:   %216 = load double* %z, align 8
187:   %219 = load i32* %q1, align 4
188:   %222 = load i32* %q, align 4
189:   %223 = add nsw i32 %222, 1
190:   %225 = load i32* %q1, align 4
191:   %226 = add i32 %225, 2
192:   %228 = load i32* %q1, align 4
193:   %230 = add i32 %228, %229
194:   %235 = load i32* %q, align 4
196:   %236 = ashr i32 %235, 1
195:   %237 = add nsw i32 %236, 1071644672
197:   %238 = load i32* %q1, align 4
198:   %240 = load i32* %q, align 4
199:   %244 = load i32* %sign, align 4
200:   %245 = load i32* %ix1, align 4
201:   %248 = load i32* %m, align 4
202:   %250 = load i32* %ix0, align 4
203:   %251 = add nsw i32 %250, %249
204:   %253 = load i32* %ix0, align 4
207:   %254 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
208:   %255 = getelementptr inbounds %struct.anon* %254, i32 0, i32 1
209:   %256 = load i32* %ix1, align 4
210:   %257 = bitcast %union.ieee_double_shape_type* %iw_u to i32*
211:   %258 = getelementptr inbounds %union.ieee_double_shape_type* %iw_u, i32 0, i32 0
212:   %259 = load double* %258, align 8
213:   %261 = load double* %z, align 8
214:   %263 = load double* %1, align 8
24:   %20 = add i32 %14, %19
32:   %35 = mul i32 %34, 50
34:   %scevgep = getelementptr [50 x float]* %stddev, i32 0, i32 %37
13:   %scevgep16 = getelementptr [50 x float]* %mean, i32 0, i32 %2
35:   %scevgep3 = getelementptr [50 x float]* %mean, i32 0, i32 %37
26:   %scevgep7 = getelementptr [2500 x float]* %data, i32 0, i32 %20
21:   %scevgep10 = getelementptr [50 x float]* %mean, i32 0, i32 %14
22:   %scevgep11 = getelementptr [50 x float]* %stddev, i32 0, i32 %14
Memory: Int -> Value* mapping
5: @.str2 = private unnamed_addr constant [6 x i8] c"loop2\00", align 1
3: @.str1 = private unnamed_addr constant [6 x i8] c"loop3\00", align 1
1: @.str = private unnamed_addr constant [6 x i8] c"loop4\00", align 1
7:   %data = alloca [2500 x float], align 4
9:   %mean = alloca [50 x float], align 4
11:   %stddev = alloca [50 x float], align 4
43:   %1 = alloca double, align 8
45:   %2 = alloca double, align 8
47:   %z = alloca double, align 8
49:   %sign = alloca i32, align 4
51:   %r = alloca i32, align 4
53:   %t1 = alloca i32, align 4
55:   %s1 = alloca i32, align 4
57:   %ix1 = alloca i32, align 4
59:   %q1 = alloca i32, align 4
61:   %ix0 = alloca i32, align 4
63:   %s0 = alloca i32, align 4
65:   %q = alloca i32, align 4
67:   %m = alloca i32, align 4
69:   %t = alloca i32, align 4
71:   %i = alloca i32, align 4
73:   %ew_u = alloca %union.ieee_double_shape_type, align 8
75:   %iw_u = alloca %union.ieee_double_shape_type, align 8
73:   %6 = bitcast %union.ieee_double_shape_type* %ew_u to %struct.anon*
75:   %254 = bitcast %union.ieee_double_shape_type* %iw_u to %struct.anon*
digraph "correlation.postlto.bc" {
    1 [label="#1",color=blue,style=solid];
    2 [label=".str",color=blue,style=solid];
    3 [label="#3",color=blue,style=solid];
    4 [label=".str1",color=blue,style=solid];
    5 [label="#5",color=blue,style=solid];
    6 [label=".str2",color=blue,style=solid];
    7 [label="#7",color=blue,style=solid];
    8 [label="data",color=blue,style=solid];
    9 [label="#9",color=blue,style=solid];
    10 [label="mean",color=blue,style=solid];
    11 [label="#11",color=blue,style=solid];
    12 [label="stddev",color=blue,style=solid];
    13 [label="scevgep16",color=blue,style=solid];
    14 [label="unknown",color=blue,style=solid];
    15 [label="unknown",color=blue,style=solid];
    16 [label="scevgep13",color=blue,style=solid];
    17 [label="unknown",color=blue,style=solid];
    18 [label="unknown",color=blue,style=solid];
    19 [label="unknown",color=blue,style=solid];
    20 [label="unknown",color=blue,style=solid];
    21 [label="scevgep10",color=blue,style=solid];
    22 [label="scevgep11",color=blue,style=solid];
    23 [label="unknown",color=blue,style=solid];
    24 [label="unknown",color=blue,style=solid];
    25 [label="unknown",color=blue,style=solid];
    26 [label="scevgep7",color=blue,style=solid];
    27 [label="unknown",color=blue,style=solid];
    28 [label="unknown",color=blue,style=solid];
    29 [label="unknown",color=blue,style=solid];
    30 [label="unknown",color=blue,style=solid];
    31 [label="unknown",color=blue,style=solid];
    32 [label="unknown",color=blue,style=solid];
    33 [label="scevgep2",color=blue,style=solid];
    34 [label="scevgep",color=blue,style=solid];
    35 [label="scevgep3",color=blue,style=solid];
    36 [label="unknown",color=blue,style=solid];
    37 [label="unknown",color=blue,style=solid];
    38 [label="unknown",color=blue,style=solid];
    39 [label="unknown",color=blue,style=solid];
    40 [label="unknown",color=blue,style=solid];
    41 [label="unknown",color=blue,style=solid];
    42 [label="unknown",color=blue,style=solid];
    43 [label="#43",color=blue,style=solid];
    44 [label="unknown",color=blue,style=solid];
    45 [label="#45",color=blue,style=solid];
    46 [label="unknown",color=blue,style=solid];
    47 [label="#47",color=blue,style=solid];
    48 [label="z",color=blue,style=solid];
    49 [label="#49",color=blue,style=solid];
    50 [label="sign",color=blue,style=solid];
    51 [label="#51",color=blue,style=solid];
    52 [label="r",color=blue,style=solid];
    53 [label="#53",color=blue,style=solid];
    54 [label="t1",color=blue,style=solid];
    55 [label="#55",color=blue,style=solid];
    56 [label="s1",color=blue,style=solid];
    57 [label="#57",color=blue,style=solid];
    58 [label="ix1",color=blue,style=solid];
    59 [label="#59",color=blue,style=solid];
    60 [label="q1",color=blue,style=solid];
    61 [label="#61",color=blue,style=solid];
    62 [label="ix0",color=blue,style=solid];
    63 [label="#63",color=blue,style=solid];
    64 [label="s0",color=blue,style=solid];
    65 [label="#65",color=blue,style=solid];
    66 [label="q",color=blue,style=solid];
    67 [label="#67",color=blue,style=solid];
    68 [label="m",color=blue,style=solid];
    69 [label="#69",color=blue,style=solid];
    70 [label="t",color=blue,style=solid];
    71 [label="#71",color=blue,style=solid];
    72 [label="i",color=blue,style=solid];
    73 [label="#73",color=blue,style=solid];
    74 [label="ew_u",color=blue,style=solid];
    75 [label="#75",color=blue,style=solid];
    76 [label="iw_u",color=blue,style=solid];
    77 [label="unknown",color=blue,style=solid];
    78 [label="unknown",color=blue,style=solid];
    79 [label="#79",color=blue,style=solid];
    80 [label="#80",color=blue,style=solid];
    81 [label="unknown",color=blue,style=solid];
    82 [label="unknown",color=blue,style=solid];
    83 [label="unknown",color=blue,style=solid];
    84 [label="unknown",color=blue,style=solid];
    85 [label="unknown",color=blue,style=solid];
    86 [label="unknown",color=blue,style=solid];
    87 [label="unknown",color=blue,style=solid];
    88 [label="unknown",color=blue,style=solid];
    89 [label="unknown",color=blue,style=solid];
    90 [label="unknown",color=blue,style=solid];
    91 [label="unknown",color=blue,style=solid];
    92 [label="unknown",color=blue,style=solid];
    93 [label="unknown",color=blue,style=solid];
    94 [label="unknown",color=blue,style=solid];
    95 [label="unknown",color=blue,style=solid];
    96 [label="unknown",color=blue,style=solid];
    97 [label="unknown",color=blue,style=solid];
    98 [label="unknown",color=blue,style=solid];
    99 [label="unknown",color=blue,style=solid];
    100 [label="unknown",color=blue,style=solid];
    101 [label="unknown",color=blue,style=solid];
    102 [label="unknown",color=blue,style=solid];
    103 [label="unknown",color=blue,style=solid];
    104 [label="unknown",color=blue,style=solid];
    105 [label="unknown",color=blue,style=solid];
    106 [label="unknown",color=blue,style=solid];
    107 [label="unknown",color=blue,style=solid];
    108 [label="unknown",color=blue,style=solid];
    109 [label="unknown",color=blue,style=solid];
    110 [label="unknown",color=blue,style=solid];
    111 [label="unknown",color=blue,style=solid];
    112 [label="unknown",color=blue,style=solid];
    113 [label="unknown",color=blue,style=solid];
    114 [label="unknown",color=blue,style=solid];
    115 [label="unknown",color=blue,style=solid];
    116 [label="unknown",color=blue,style=solid];
    117 [label="unknown",color=blue,style=solid];
    118 [label="unknown",color=blue,style=solid];
    119 [label="unknown",color=blue,style=solid];
    120 [label="unknown",color=blue,style=solid];
    121 [label="unknown",color=blue,style=solid];
    122 [label="unknown",color=blue,style=solid];
    123 [label="unknown",color=blue,style=solid];
    124 [label="unknown",color=blue,style=solid];
    125 [label="unknown",color=blue,style=solid];
    126 [label="unknown",color=blue,style=solid];
    127 [label="unknown",color=blue,style=solid];
    128 [label="unknown",color=blue,style=solid];
    129 [label="unknown",color=blue,style=solid];
    130 [label="unknown",color=blue,style=solid];
    131 [label="unknown",color=blue,style=solid];
    132 [label="unknown",color=blue,style=solid];
    133 [label="unknown",color=blue,style=solid];
    134 [label="unknown",color=blue,style=solid];
    135 [label="unknown",color=blue,style=solid];
    136 [label="unknown",color=blue,style=solid];
    137 [label="unknown",color=blue,style=solid];
    138 [label="unknown",color=blue,style=solid];
    139 [label="unknown",color=blue,style=solid];
    140 [label="unknown",color=blue,style=solid];
    141 [label="unknown",color=blue,style=solid];
    142 [label="unknown",color=blue,style=solid];
    143 [label="unknown",color=blue,style=solid];
    144 [label="unknown",color=blue,style=solid];
    145 [label="unknown",color=blue,style=solid];
    146 [label="unknown",color=blue,style=solid];
    147 [label="unknown",color=blue,style=solid];
    148 [label="unknown",color=blue,style=solid];
    149 [label="unknown",color=blue,style=solid];
    150 [label="unknown",color=blue,style=solid];
    151 [label="unknown",color=blue,style=solid];
    152 [label="unknown",color=blue,style=solid];
    153 [label="unknown",color=blue,style=solid];
    154 [label="unknown",color=blue,style=solid];
    155 [label="unknown",color=blue,style=solid];
    156 [label="unknown",color=blue,style=solid];
    157 [label="unknown",color=blue,style=solid];
    158 [label="unknown",color=blue,style=solid];
    159 [label="unknown",color=blue,style=solid];
    160 [label="unknown",color=blue,style=solid];
    161 [label="unknown",color=blue,style=solid];
    162 [label="unknown",color=blue,style=solid];
    163 [label="unknown",color=blue,style=solid];
    164 [label="unknown",color=blue,style=solid];
    165 [label="unknown",color=blue,style=solid];
    166 [label="unknown",color=blue,style=solid];
    167 [label="unknown",color=blue,style=solid];
    168 [label="unknown",color=blue,style=solid];
    169 [label="unknown",color=blue,style=solid];
    170 [label="unknown",color=blue,style=solid];
    171 [label="unknown",color=blue,style=solid];
    172 [label="unknown",color=blue,style=solid];
    173 [label="unknown",color=blue,style=solid];
    174 [label="unknown",color=blue,style=solid];
    175 [label="unknown",color=blue,style=solid];
    176 [label="unknown",color=blue,style=solid];
    177 [label="unknown",color=blue,style=solid];
    178 [label="unknown",color=blue,style=solid];
    179 [label="unknown",color=blue,style=solid];
    180 [label="unknown",color=blue,style=solid];
    181 [label="unknown",color=blue,style=solid];
    182 [label="unknown",color=blue,style=solid];
    183 [label="unknown",color=blue,style=solid];
    184 [label="unknown",color=blue,style=solid];
    185 [label="unknown",color=blue,style=solid];
    186 [label="unknown",color=blue,style=solid];
    187 [label="unknown",color=blue,style=solid];
    188 [label="unknown",color=blue,style=solid];
    189 [label="unknown",color=blue,style=solid];
    190 [label="unknown",color=blue,style=solid];
    191 [label="unknown",color=blue,style=solid];
    192 [label="unknown",color=blue,style=solid];
    193 [label="unknown",color=blue,style=solid];
    194 [label="unknown",color=blue,style=solid];
    195 [label="unknown",color=blue,style=solid];
    196 [label="unknown",color=blue,style=solid];
    197 [label="unknown",color=blue,style=solid];
    198 [label="unknown",color=blue,style=solid];
    199 [label="unknown",color=blue,style=solid];
    200 [label="unknown",color=blue,style=solid];
    201 [label="unknown",color=blue,style=solid];
    202 [label="unknown",color=blue,style=solid];
    203 [label="unknown",color=blue,style=solid];
    204 [label="unknown",color=blue,style=solid];
    205 [label="#205",color=blue,style=solid];
    206 [label="#206",color=blue,style=solid];
    207 [label="unknown",color=blue,style=solid];
    208 [label="unknown",color=blue,style=solid];
    209 [label="unknown",color=blue,style=solid];
    210 [label="unknown",color=blue,style=solid];
    211 [label="unknown",color=blue,style=solid];
    212 [label="unknown",color=blue,style=solid];
    213 [label="unknown",color=blue,style=solid];
    214 [label="unknown",color=blue,style=solid];
    215 [label="x",color=blue,style=solid];
    216 [label="x",color=blue,style=solid];
    217 [label="__ieee754_sqrt",color=blue,style=solid];
    7 -> 17;
    7 -> 27;
    7 -> 37;
    8 -> 16;
    8 -> 26;
    8 -> 33;
    9 -> 23;
    9 -> 36;
    10 -> 13;
    10 -> 21;
    10 -> 35;
    11 -> 38;
    12 -> 22;
    12 -> 34;
    15 -> 14;
    15 -> 20;
    19 -> 18;
    25 -> 24;
    25 -> 30;
    29 -> 28;
    32 -> 31;
    40 -> 39;
    42 -> 41;
    43 -> 214;
    45 -> 77;
    45 -> 87;
    45 -> 92;
    45 -> 94;
    47 -> 186;
    47 -> 213;
    49 -> 90;
    49 -> 117;
    49 -> 124;
    49 -> 140;
    49 -> 145;
    49 -> 158;
    49 -> 160;
    49 -> 176;
    49 -> 199;
    51 -> 129;
    51 -> 133;
    51 -> 144;
    51 -> 147;
    51 -> 156;
    51 -> 171;
    51 -> 180;
    53 -> 153;
    53 -> 155;
    53 -> 166;
    53 -> 169;
    55 -> 146;
    55 -> 159;
    57 -> 91;
    57 -> 99;
    57 -> 108;
    57 -> 111;
    57 -> 116;
    57 -> 120;
    57 -> 123;
    57 -> 127;
    57 -> 139;
    57 -> 143;
    57 -> 154;
    57 -> 165;
    57 -> 170;
    57 -> 175;
    57 -> 179;
    57 -> 182;
    57 -> 200;
    57 -> 209;
    59 -> 172;
    59 -> 183;
    59 -> 187;
    59 -> 190;
    59 -> 192;
    59 -> 197;
    61 -> 86;
    61 -> 88;
    61 -> 89;
    61 -> 93;
    61 -> 95;
    61 -> 96;
    61 -> 100;
    61 -> 101;
    61 -> 102;
    61 -> 109;
    61 -> 114;
    61 -> 115;
    61 -> 122;
    61 -> 131;
    61 -> 135;
    61 -> 138;
    61 -> 150;
    61 -> 152;
    61 -> 164;
    61 -> 167;
    61 -> 174;
    61 -> 181;
    61 -> 202;
    61 -> 204;
    63 -> 128;
    63 -> 149;
    63 -> 161;
    65 -> 136;
    65 -> 184;
    65 -> 188;
    65 -> 194;
    65 -> 198;
    67 -> 97;
    67 -> 107;
    67 -> 112;
    67 -> 121;
    67 -> 201;
    69 -> 132;
    69 -> 151;
    69 -> 163;
    71 -> 103;
    71 -> 105;
    71 -> 110;
    73 -> 85;
    74 -> 81;
    74 -> 84;
    75 -> 212;
    76 -> 207;
    76 -> 210;
    80 -> 83;
    97 -> 98;
    103 -> 104;
    105 -> 106;
    112 -> 113;
    115 -> 118;
    115 -> 119;
    118 -> 119;
    122 -> 125;
    122 -> 126;
    125 -> 126;
    128 -> 130;
    129 -> 130;
    132 -> 134;
    133 -> 134;
    133 -> 137;
    136 -> 137;
    138 -> 141;
    138 -> 142;
    141 -> 142;
    146 -> 148;
    147 -> 148;
    155 -> 157;
    156 -> 157;
    161 -> 162;
    167 -> 168;
    171 -> 173;
    172 -> 173;
    174 -> 177;
    174 -> 178;
    177 -> 178;
    184 -> 185;
    188 -> 189;
    190 -> 191;
    192 -> 193;
    196 -> 195;
    202 -> 203;
    214 -> 217;
    216 -> 215;
    pts2 [label="#1",color=red,style=dashed,shape=box];
    2 -> pts2 [color=red,style=dashed];
    pts4 [label="#3",color=red,style=dashed,shape=box];
    4 -> pts4 [color=red,style=dashed];
    pts6 [label="#5",color=red,style=dashed,shape=box];
    6 -> pts6 [color=red,style=dashed];
    pts8 [label="#7",color=red,style=dashed,shape=box];
    8 -> pts8 [color=red,style=dashed];
    pts10 [label="#9",color=red,style=dashed,shape=box];
    10 -> pts10 [color=red,style=dashed];
    pts12 [label="#11",color=red,style=dashed,shape=box];
    12 -> pts12 [color=red,style=dashed];
    pts13 [label="#9",color=red,style=dashed,shape=box];
    13 -> pts13 [color=red,style=dashed];
    pts16 [label="#7",color=red,style=dashed,shape=box];
    16 -> pts16 [color=red,style=dashed];
    pts21 [label="#9",color=red,style=dashed,shape=box];
    21 -> pts21 [color=red,style=dashed];
    pts22 [label="#11",color=red,style=dashed,shape=box];
    22 -> pts22 [color=red,style=dashed];
    pts26 [label="#7",color=red,style=dashed,shape=box];
    26 -> pts26 [color=red,style=dashed];
    pts33 [label="#7",color=red,style=dashed,shape=box];
    33 -> pts33 [color=red,style=dashed];
    pts34 [label="#11",color=red,style=dashed,shape=box];
    34 -> pts34 [color=red,style=dashed];
    pts35 [label="#9",color=red,style=dashed,shape=box];
    35 -> pts35 [color=red,style=dashed];
    pts44 [label="#43",color=red,style=dashed,shape=box];
    44 -> pts44 [color=red,style=dashed];
    pts46 [label="#45",color=red,style=dashed,shape=box];
    46 -> pts46 [color=red,style=dashed];
    pts48 [label="#47",color=red,style=dashed,shape=box];
    48 -> pts48 [color=red,style=dashed];
    pts50 [label="#49",color=red,style=dashed,shape=box];
    50 -> pts50 [color=red,style=dashed];
    pts52 [label="#51",color=red,style=dashed,shape=box];
    52 -> pts52 [color=red,style=dashed];
    pts54 [label="#53",color=red,style=dashed,shape=box];
    54 -> pts54 [color=red,style=dashed];
    pts56 [label="#55",color=red,style=dashed,shape=box];
    56 -> pts56 [color=red,style=dashed];
    pts58 [label="#57",color=red,style=dashed,shape=box];
    58 -> pts58 [color=red,style=dashed];
    pts60 [label="#59",color=red,style=dashed,shape=box];
    60 -> pts60 [color=red,style=dashed];
    pts62 [label="#61",color=red,style=dashed,shape=box];
    62 -> pts62 [color=red,style=dashed];
    pts64 [label="#63",color=red,style=dashed,shape=box];
    64 -> pts64 [color=red,style=dashed];
    pts66 [label="#65",color=red,style=dashed,shape=box];
    66 -> pts66 [color=red,style=dashed];
    pts68 [label="#67",color=red,style=dashed,shape=box];
    68 -> pts68 [color=red,style=dashed];
    pts70 [label="#69",color=red,style=dashed,shape=box];
    70 -> pts70 [color=red,style=dashed];
    pts72 [label="#71",color=red,style=dashed,shape=box];
    72 -> pts72 [color=red,style=dashed];
    pts73 [label="#79, #80",color=red,style=dashed,shape=box];
    73 -> pts73 [color=red,style=dashed];
    pts74 [label="#73",color=red,style=dashed,shape=box];
    74 -> pts74 [color=red,style=dashed];
    pts75 [label="#205, #206",color=red,style=dashed,shape=box];
    75 -> pts75 [color=red,style=dashed];
    pts76 [label="#75",color=red,style=dashed,shape=box];
    76 -> pts76 [color=red,style=dashed];
    pts78 [label="#73",color=red,style=dashed,shape=box];
    78 -> pts78 [color=red,style=dashed];
    pts81 [label="#73",color=red,style=dashed,shape=box];
    81 -> pts81 [color=red,style=dashed];
    pts82 [label="#80",color=red,style=dashed,shape=box];
    82 -> pts82 [color=red,style=dashed];
    pts84 [label="#73",color=red,style=dashed,shape=box];
    84 -> pts84 [color=red,style=dashed];
    pts85 [label="#79, #80",color=red,style=dashed,shape=box];
    85 -> pts85 [color=red,style=dashed];
    pts207 [label="#75",color=red,style=dashed,shape=box];
    207 -> pts207 [color=red,style=dashed];
    pts208 [label="#206",color=red,style=dashed,shape=box];
    208 -> pts208 [color=red,style=dashed];
    pts210 [label="#75",color=red,style=dashed,shape=box];
    210 -> pts210 [color=red,style=dashed];
    pts211 [label="#75",color=red,style=dashed,shape=box];
    211 -> pts211 [color=red,style=dashed];
    pts212 [label="#205, #206",color=red,style=dashed,shape=box];
    212 -> pts212 [color=red,style=dashed];
}
<badref> -> { 
	Addr: %mean
		RAM: main_0_mean
			Adding Local RAM: main_0_mean to Fct: @main
}
%8 -> { 
	Addr: %data
		RAM: main_0_data
			Adding Local RAM: main_0_data to Fct: @main
}
<badref> -> { 
	Addr: %mean
		RAM: main_0_mean
			Adding Local RAM: main_0_mean to Fct: @main
}
<badref> -> { 
	Addr: %stddev
		RAM: main_0_stddev
			Adding Local RAM: main_0_stddev to Fct: @main
}
%15 -> { 
	Addr: %mean
		RAM: main_0_mean
			Adding Local RAM: main_0_mean to Fct: @main
}
%21 -> { 
	Addr: %data
		RAM: main_0_data
			Adding Local RAM: main_0_data to Fct: @main
}
<badref> -> { 
	Addr: %stddev
		RAM: main_0_stddev
			Adding Local RAM: main_0_stddev to Fct: @main
}
%39 -> { 
	Addr: %mean
		RAM: main_0_mean
			Adding Local RAM: main_0_mean to Fct: @main
}
%40 -> { 
	Addr: %data
		RAM: main_0_data
			Adding Local RAM: main_0_data to Fct: @main
}
%44 -> { 
	Addr: %stddev
		RAM: main_0_stddev
			Adding Local RAM: main_0_stddev to Fct: @main
}
<badref> -> { 
	Addr: %data
		RAM: main_0_data
			Adding Local RAM: main_0_data to Fct: @main
}
<badref> -> { 
	Addr: %2
		RAM: __ieee754_sqrt_0_2
			Adding Local RAM: __ieee754_sqrt_0_2 to Fct: @__ieee754_sqrt
}
<badref> -> { 
	Addr: %sign
		RAM: __ieee754_sqrt_0_sign
			Adding Local RAM: __ieee754_sqrt_0_sign to Fct: @__ieee754_sqrt
}
%4 -> { 
	Addr: %2
		RAM: __ieee754_sqrt_0_2
			Adding Local RAM: __ieee754_sqrt_0_2 to Fct: @__ieee754_sqrt
}
