//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Feb 14 19:47:56 2017
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Fri Apr  7 13:44:18 2017
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest)
);

endmodule

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	return_val,
	arg_argc,
	arg_argv
);

parameter [7:0] LEGUP_0 = 8'd0;
parameter [7:0] LEGUP_F_main_BB__0_1 = 8'd1;
parameter [7:0] LEGUP_F_main_BB__1_2 = 8'd2;
parameter [7:0] LEGUP_F_main_BB__1_3 = 8'd3;
parameter [7:0] LEGUP_F_main_BB__3_4 = 8'd4;
parameter [7:0] LEGUP_F_main_BB__3_5 = 8'd5;
parameter [7:0] LEGUP_F_main_BB__3_6 = 8'd6;
parameter [7:0] LEGUP_F_main_BB__3_7 = 8'd7;
parameter [7:0] LEGUP_F_main_BB__3_8 = 8'd8;
parameter [7:0] LEGUP_F_main_BB__3_9 = 8'd9;
parameter [7:0] LEGUP_F_main_BB__3_10 = 8'd10;
parameter [7:0] LEGUP_F_main_BB__3_11 = 8'd11;
parameter [7:0] LEGUP_F_main_BB__3_12 = 8'd12;
parameter [7:0] LEGUP_F_main_BB__3_13 = 8'd13;
parameter [7:0] LEGUP_F_main_BB__3_14 = 8'd14;
parameter [7:0] LEGUP_F_main_BB__3_15 = 8'd15;
parameter [7:0] LEGUP_F_main_BB__3_16 = 8'd16;
parameter [7:0] LEGUP_F_main_BB__3_17 = 8'd17;
parameter [7:0] LEGUP_F_main_BB__3_18 = 8'd18;
parameter [7:0] LEGUP_F_main_BB__3_19 = 8'd19;
parameter [7:0] LEGUP_F_main_BB__3_20 = 8'd20;
parameter [7:0] LEGUP_F_main_BB__3_21 = 8'd21;
parameter [7:0] LEGUP_F_main_BB__11_22 = 8'd22;
parameter [7:0] LEGUP_F_main_BB__11_23 = 8'd23;
parameter [7:0] LEGUP_F_main_BB__11_24 = 8'd24;
parameter [7:0] LEGUP_F_main_BB__11_25 = 8'd25;
parameter [7:0] LEGUP_F_main_BB__11_26 = 8'd26;
parameter [7:0] LEGUP_F_main_BB__11_27 = 8'd27;
parameter [7:0] LEGUP_F_main_BB__11_28 = 8'd28;
parameter [7:0] LEGUP_F_main_BB__11_29 = 8'd29;
parameter [7:0] LEGUP_F_main_BB__11_30 = 8'd30;
parameter [7:0] LEGUP_F_main_BB__11_31 = 8'd31;
parameter [7:0] LEGUP_F_main_BB__11_32 = 8'd32;
parameter [7:0] LEGUP_F_main_BB__11_33 = 8'd33;
parameter [7:0] LEGUP_F_main_BB__11_34 = 8'd34;
parameter [7:0] LEGUP_F_main_BB__11_35 = 8'd35;
parameter [7:0] LEGUP_F_main_BB__11_36 = 8'd36;
parameter [7:0] LEGUP_F_main_BB__11_37 = 8'd37;
parameter [7:0] LEGUP_F_main_BB__11_38 = 8'd38;
parameter [7:0] LEGUP_F_main_BB__11_39 = 8'd39;
parameter [7:0] LEGUP_F_main_BB__11_40 = 8'd40;
parameter [7:0] LEGUP_F_main_BB__11_41 = 8'd41;
parameter [7:0] LEGUP_F_main_BB__11_42 = 8'd42;
parameter [7:0] LEGUP_F_main_BB__11_43 = 8'd43;
parameter [7:0] LEGUP_F_main_BB__11_44 = 8'd44;
parameter [7:0] LEGUP_F_main_BB__11_45 = 8'd45;
parameter [7:0] LEGUP_F_main_BB__11_46 = 8'd46;
parameter [7:0] LEGUP_F_main_BB__11_47 = 8'd47;
parameter [7:0] LEGUP_F_main_BB__11_48 = 8'd48;
parameter [7:0] LEGUP_F_main_BB__11_49 = 8'd49;
parameter [7:0] LEGUP_F_main_BB__11_50 = 8'd50;
parameter [7:0] LEGUP_F_main_BB__11_51 = 8'd51;
parameter [7:0] LEGUP_F_main_BB__11_52 = 8'd52;
parameter [7:0] LEGUP_F_main_BB__11_53 = 8'd53;
parameter [7:0] LEGUP_F_main_BB__11_54 = 8'd54;
parameter [7:0] LEGUP_F_main_BB__11_55 = 8'd55;
parameter [7:0] LEGUP_F_main_BB__11_56 = 8'd56;
parameter [7:0] LEGUP_F_main_BB_preheader2preheader_57 = 8'd57;
parameter [7:0] LEGUP_F_main_BB_preheader2_58 = 8'd58;
parameter [7:0] LEGUP_F_main_BB_preheader2_59 = 8'd59;
parameter [7:0] LEGUP_F_main_BB__16_60 = 8'd60;
parameter [7:0] LEGUP_F_main_BB__16_61 = 8'd61;
parameter [7:0] LEGUP_F_main_BB__16_62 = 8'd62;
parameter [7:0] LEGUP_F_main_BB__16_63 = 8'd63;
parameter [7:0] LEGUP_F_main_BB__16_64 = 8'd64;
parameter [7:0] LEGUP_F_main_BB__16_65 = 8'd65;
parameter [7:0] LEGUP_F_main_BB__16_66 = 8'd66;
parameter [7:0] LEGUP_F_main_BB__16_67 = 8'd67;
parameter [7:0] LEGUP_F_main_BB__16_68 = 8'd68;
parameter [7:0] LEGUP_F_main_BB__16_69 = 8'd69;
parameter [7:0] LEGUP_F_main_BB__16_70 = 8'd70;
parameter [7:0] LEGUP_F_main_BB__16_71 = 8'd71;
parameter [7:0] LEGUP_F_main_BB__16_72 = 8'd72;
parameter [7:0] LEGUP_F_main_BB__16_73 = 8'd73;
parameter [7:0] LEGUP_F_main_BB__16_74 = 8'd74;
parameter [7:0] LEGUP_F_main_BB__16_75 = 8'd75;
parameter [7:0] LEGUP_F_main_BB__16_76 = 8'd76;
parameter [7:0] LEGUP_F_main_BB__16_77 = 8'd77;
parameter [7:0] LEGUP_F_main_BB__16_78 = 8'd78;
parameter [7:0] LEGUP_F_main_BB__16_79 = 8'd79;
parameter [7:0] LEGUP_F_main_BB__16_80 = 8'd80;
parameter [7:0] LEGUP_F_main_BB__16_81 = 8'd81;
parameter [7:0] LEGUP_F_main_BB__16_82 = 8'd82;
parameter [7:0] LEGUP_F_main_BB__16_83 = 8'd83;
parameter [7:0] LEGUP_F_main_BB__16_84 = 8'd84;
parameter [7:0] LEGUP_F_main_BB__16_85 = 8'd85;
parameter [7:0] LEGUP_F_main_BB__16_86 = 8'd86;
parameter [7:0] LEGUP_F_main_BB__16_87 = 8'd87;
parameter [7:0] LEGUP_F_main_BB__16_88 = 8'd88;
parameter [7:0] LEGUP_F_main_BB__16_89 = 8'd89;
parameter [7:0] LEGUP_F_main_BB__16_90 = 8'd90;
parameter [7:0] LEGUP_F_main_BB__16_91 = 8'd91;
parameter [7:0] LEGUP_F_main_BB__16_92 = 8'd92;
parameter [7:0] LEGUP_F_main_BB__16_93 = 8'd93;
parameter [7:0] LEGUP_F_main_BB__16_94 = 8'd94;
parameter [7:0] LEGUP_F_main_BB__16_95 = 8'd95;
parameter [7:0] LEGUP_F_main_BB__16_96 = 8'd96;
parameter [7:0] LEGUP_F_main_BB__16_97 = 8'd97;
parameter [7:0] LEGUP_F_main_BB__16_98 = 8'd98;
parameter [7:0] LEGUP_F_main_BB__16_99 = 8'd99;
parameter [7:0] LEGUP_F_main_BB__16_100 = 8'd100;
parameter [7:0] LEGUP_F_main_BB__16_101 = 8'd101;
parameter [7:0] LEGUP_F_main_BB__16_102 = 8'd102;
parameter [7:0] LEGUP_F_main_BB__26_103 = 8'd103;
parameter [7:0] LEGUP_F_main_BB__26_104 = 8'd104;
parameter [7:0] LEGUP_F_main_BB__26_105 = 8'd105;
parameter [7:0] LEGUP_F_main_BB__26_106 = 8'd106;
parameter [7:0] LEGUP_F_main_BB__26_107 = 8'd107;
parameter [7:0] LEGUP_F_main_BB__26_108 = 8'd108;
parameter [7:0] LEGUP_F_main_BB__26_109 = 8'd109;
parameter [7:0] LEGUP_F_main_BB__26_110 = 8'd110;
parameter [7:0] LEGUP_F_main_BB__26_111 = 8'd111;
parameter [7:0] LEGUP_F_main_BB__26_112 = 8'd112;
parameter [7:0] LEGUP_F_main_BB__26_113 = 8'd113;
parameter [7:0] LEGUP_F_main_BB__26_114 = 8'd114;
parameter [7:0] LEGUP_F_main_BB__26_115 = 8'd115;
parameter [7:0] LEGUP_F_main_BB__26_116 = 8'd116;
parameter [7:0] LEGUP_F_main_BB__26_117 = 8'd117;
parameter [7:0] LEGUP_F_main_BB__26_118 = 8'd118;
parameter [7:0] LEGUP_F_main_BB__26_119 = 8'd119;
parameter [7:0] LEGUP_F_main_BB__26_120 = 8'd120;
parameter [7:0] LEGUP_F_main_BB__26_121 = 8'd121;
parameter [7:0] LEGUP_F_main_BB__26_122 = 8'd122;
parameter [7:0] LEGUP_F_main_BB__26_123 = 8'd123;
parameter [7:0] LEGUP_F_main_BB__26_124 = 8'd124;
parameter [7:0] LEGUP_F_main_BB__26_125 = 8'd125;
parameter [7:0] LEGUP_F_main_BB__26_126 = 8'd126;
parameter [7:0] LEGUP_F_main_BB__26_127 = 8'd127;
parameter [7:0] LEGUP_F_main_BB__26_128 = 8'd128;
parameter [7:0] LEGUP_F_main_BB__26_129 = 8'd129;
parameter [7:0] LEGUP_F_main_BB__26_130 = 8'd130;
parameter [7:0] LEGUP_F_main_BB__26_131 = 8'd131;
parameter [7:0] LEGUP_F_main_BB__26_132 = 8'd132;
parameter [7:0] LEGUP_F_main_BB__26_133 = 8'd133;
parameter [7:0] LEGUP_F_main_BB__26_134 = 8'd134;
parameter [7:0] LEGUP_F_main_BB__26_135 = 8'd135;
parameter [7:0] LEGUP_F_main_BB__26_136 = 8'd136;
parameter [7:0] LEGUP_F_main_BB__26_137 = 8'd137;
parameter [7:0] LEGUP_F_main_BB__26_138 = 8'd138;
parameter [7:0] LEGUP_F_main_BB__26_139 = 8'd139;
parameter [7:0] LEGUP_F_main_BB__26_140 = 8'd140;
parameter [7:0] LEGUP_F_main_BB__26_141 = 8'd141;
parameter [7:0] LEGUP_F_main_BB__26_142 = 8'd142;
parameter [7:0] LEGUP_F_main_BB__26_143 = 8'd143;
parameter [7:0] LEGUP_F_main_BB__26_144 = 8'd144;
parameter [7:0] LEGUP_F_main_BB__26_145 = 8'd145;
parameter [7:0] LEGUP_F_main_BB__26_146 = 8'd146;
parameter [7:0] LEGUP_F_main_BB__26_147 = 8'd147;
parameter [7:0] LEGUP_F_main_BB__26_148 = 8'd148;
parameter [7:0] LEGUP_F_main_BB__26_149 = 8'd149;
parameter [7:0] LEGUP_F_main_BB_preheader1preheader_150 = 8'd150;
parameter [7:0] LEGUP_F_main_BB_preheader1_151 = 8'd151;
parameter [7:0] LEGUP_F_main_BB_preheader1_152 = 8'd152;
parameter [7:0] LEGUP_loop_pipeline_wait_loop2_1_153 = 8'd153;
parameter [7:0] LEGUP_F_main_BB__44_154 = 8'd154;
parameter [7:0] LEGUP_F_main_BB_loopexitpreheader_155 = 8'd155;
parameter [7:0] LEGUP_F_main_BB_loopexit_156 = 8'd156;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg [31:0] return_val;
input [31:0] arg_argc;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] arg_argv;
reg [7:0] cur_state;
reg [7:0] next_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep16_reg;
reg [31:0] main_3_4;
reg [31:0] main_3_4_reg;
reg [31:0] main_3_5;
reg [31:0] main_3_5_reg;
reg [31:0] main_3_6;
reg [31:0] main_3_6_reg;
reg [31:0] main_3_7;
reg [31:0] main_3_7_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep13_reg;
reg [31:0] main_3_8;
reg [31:0] main_3_8_reg;
reg [31:0] main_3_9;
reg [31:0] main_3_9_reg;
reg [31:0] main_3_10;
reg [31:0] main_3_10_reg;
reg  main_3_exitcond12;
reg  main_3_exitcond12_reg;
reg [31:0] main_11_12;
reg [31:0] main_11_12_reg;
reg [31:0] main_11_13;
reg [31:0] main_11_13_reg;
reg  main_11_exitcond14;
reg  main_11_exitcond14_reg;
reg [31:0] main_preheader2_14;
reg [31:0] main_preheader2_14_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2_scevgep10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2_scevgep10_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2_scevgep11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader2_scevgep11_reg;
reg [31:0] main_preheader2_15;
reg [31:0] main_preheader2_15_reg;
reg [31:0] main_16_17;
reg [31:0] main_16_17_reg;
reg [31:0] main_16_18;
reg [31:0] main_16_18_reg;
reg [31:0] main_16_19;
reg [31:0] main_16_19_reg;
reg [31:0] main_16_20;
reg [31:0] main_16_20_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_16_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_16_scevgep7_reg;
reg [31:0] main_16_21;
reg [31:0] main_16_21_reg;
reg [31:0] main_16_22;
reg [31:0] main_16_22_reg;
reg [31:0] main_16_23;
reg [31:0] main_16_23_reg;
reg [31:0] main_16_24;
reg [31:0] main_16_24_reg;
reg [31:0] main_16_25;
reg [31:0] main_16_25_reg;
reg  main_16_exitcond6;
reg  main_16_exitcond6_reg;
reg [31:0] main_26_27;
reg [31:0] main_26_27_reg;
reg [31:0] main_26_28;
reg [31:0] main_26_28_reg;
reg  main_26_29;
reg  main_26_29_reg;
reg [31:0] main_26_30;
reg [31:0] main_26_30_reg;
reg [31:0] main_26_31;
reg [31:0] main_26_31_reg;
reg  main_26_exitcond8;
reg  main_26_exitcond8_reg;
reg [31:0] main_preheader1_32;
reg [31:0] main_preheader1_32_reg;
reg [31:0] main_preheader1_33;
reg [31:0] main_preheader1_33_reg;
reg [31:0] main_34_35;
reg [31:0] main_34_35_reg;
reg [31:0] main_34_36;
reg [31:0] main_34_36_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_34_scevgep2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_34_scevgep2_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_34_scevgep;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_34_scevgep_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_34_scevgep3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_34_scevgep3_reg;
reg [31:0] main_34_37;
reg [31:0] main_34_37_reg;
reg [31:0] main_34_38;
reg [31:0] main_34_38_reg;
reg [31:0] main_34_39;
reg [31:0] main_34_39_reg;
reg [31:0] main_34_40;
reg [31:0] main_34_40_reg;
reg [31:0] main_34_41;
reg [31:0] main_34_41_reg;
reg [31:0] main_34_42;
reg [31:0] main_34_42_reg;
reg [31:0] main_34_43;
reg [31:0] main_34_43_reg;
reg  main_34_exitcond;
reg  main_34_exitcond_reg;
reg [31:0] main_44_45;
reg [31:0] main_44_45_reg;
reg  main_44_exitcond4;
reg  main_44_exitcond4_reg;
reg [11:0] main_0_data_address_a;
reg  main_0_data_write_enable_a;
reg [31:0] main_0_data_in_a;
wire [31:0] main_0_data_out_a;
wire [11:0] main_0_data_address_b;
wire  main_0_data_write_enable_b;
wire [31:0] main_0_data_in_b;
wire [31:0] main_0_data_out_b;
reg [5:0] main_0_mean_address_a;
reg  main_0_mean_write_enable_a;
reg [31:0] main_0_mean_in_a;
wire [31:0] main_0_mean_out_a;
wire [5:0] main_0_mean_address_b;
wire  main_0_mean_write_enable_b;
wire [31:0] main_0_mean_in_b;
wire [31:0] main_0_mean_out_b;
reg [5:0] main_0_stddev_address_a;
reg  main_0_stddev_write_enable_a;
reg [31:0] main_0_stddev_in_a;
wire [31:0] main_0_stddev_out_a;
wire [5:0] main_0_stddev_address_b;
wire  main_0_stddev_write_enable_b;
wire [31:0] main_0_stddev_in_b;
wire [31:0] main_0_stddev_out_b;
reg  loop2_1_pipeline_start;
reg  loop2_1_started;
reg [5:0] loop2_1_ii_state;
reg [31:0] loop2_1_i_stage0;
reg  loop2_1_epilogue;
reg  loop2_1_valid_bit_0;
reg  loop2_1_valid_bit_1;
reg  loop2_1_valid_bit_2;
reg  loop2_1_valid_bit_3;
reg  loop2_1_valid_bit_4;
reg  loop2_1_valid_bit_5;
reg  loop2_1_valid_bit_6;
reg  loop2_1_valid_bit_7;
reg  loop2_1_valid_bit_8;
reg  loop2_1_valid_bit_9;
reg  loop2_1_valid_bit_10;
reg  loop2_1_valid_bit_11;
reg  loop2_1_valid_bit_12;
reg  loop2_1_valid_bit_13;
reg  loop2_1_valid_bit_14;
reg  loop2_1_valid_bit_15;
reg  loop2_1_valid_bit_16;
reg  loop2_1_valid_bit_17;
reg  loop2_1_valid_bit_18;
reg  loop2_1_valid_bit_19;
reg  loop2_1_valid_bit_20;
reg  loop2_1_valid_bit_21;
reg  loop2_1_valid_bit_22;
reg  loop2_1_valid_bit_23;
reg  loop2_1_valid_bit_24;
reg  loop2_1_valid_bit_25;
reg  loop2_1_valid_bit_26;
reg  loop2_1_valid_bit_27;
reg  loop2_1_valid_bit_28;
reg  loop2_1_valid_bit_29;
reg  loop2_1_valid_bit_30;
reg  loop2_1_valid_bit_31;
reg  loop2_1_valid_bit_32;
reg  loop2_1_valid_bit_33;
reg  loop2_1_valid_bit_34;
reg  loop2_1_valid_bit_35;
reg  loop2_1_valid_bit_36;
reg  loop2_1_valid_bit_37;
reg  loop2_1_valid_bit_38;
reg  loop2_1_valid_bit_39;
reg  loop2_1_valid_bit_40;
reg  loop2_1_valid_bit_41;
reg  loop2_1_valid_bit_42;
reg  loop2_1_valid_bit_43;
reg  loop2_1_valid_bit_44;
reg  loop2_1_valid_bit_45;
reg  loop2_1_valid_bit_46;
reg  loop2_1_valid_bit_47;
reg  loop2_1_valid_bit_48;
reg  loop2_1_valid_bit_49;
reg  loop2_1_valid_bit_50;
reg [31:0] loop2_1_i_stage1;
reg [31:0] main_34_36_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_34_scevgep2_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_34_scevgep2_reg_stage1;
reg [31:0] main_34_37_reg_stage0;
reg [31:0] main_34_41_reg_stage0;
reg  loop2_1_pipeline_exit_cond;
reg  loop2_1_pipeline_finish;
reg [31:0] main_altfp_subtract_32_0_op0;
reg [31:0] main_altfp_subtract_32_0_op1;
wire [31:0] altfp_subtractor_main_34_39_out;
reg  altfp_main_34_39_en;
reg [31:0] main_altfp_subtract_32_0;
reg [31:0] main_altfp_add_32_0_op0;
reg [31:0] main_altfp_add_32_0_op1;
wire [31:0] altfp_adder_main_3_9_out;
reg  altfp_main_3_9_en;
reg [31:0] main_altfp_add_32_0;
reg [31:0] main_altfp_divide_32_0_op0;
reg [31:0] main_altfp_divide_32_0_op1;
wire [31:0] altfp_divider_main_11_12_out;
reg  altfp_main_11_12_en;
reg [31:0] main_altfp_divide_32_0;
reg [31:0] main_altfp_multiply_32_0_op0;
reg [31:0] main_altfp_multiply_32_0_op1;
wire [31:0] altfp_multiplier_main_16_23_out;
reg  altfp_main_16_23_en;
reg [31:0] main_altfp_multiply_32_0;
reg  lpm_mult_main_3_6_en;
reg [31:0] main_3_6_stage0_reg;
reg  lpm_mult_main_16_19_en;
reg [31:0] main_16_19_stage0_reg;
reg  altfp_main_16_22_en;
reg  altfp_main_16_24_en;
reg  altfp_main_26_27_en;
reg  altfp_main_26_28_en;
wire  altfp_compare32_1_main_26_29_out;
reg  altfp_main_26_29_en;
wire  main_26_29_unused;
reg  lpm_mult_main_preheader1_33_en;
reg [31:0] main_preheader1_33_stage0_reg;
reg  altfp_main_34_41_en;
reg  altfp_main_34_42_en;

/*   %39 = fsub float %38, %37, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !7*/
altfp_subtractor_14 altfp_subtractor_14_main_34_39 (
	.result (altfp_subtractor_main_34_39_out),
	.dataa (main_altfp_subtract_32_0_op0),
	.datab (main_altfp_subtract_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_34_39_en)
);


/*   %9 = fadd float %8, %4*/
altfp_adder_14 altfp_adder_14_main_3_9 (
	.result (altfp_adder_main_3_9_out),
	.dataa (main_altfp_add_32_0_op0),
	.datab (main_altfp_add_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_3_9_en)
);


/*   %12 = fdiv float %9, 0x3FF3333340000000*/
altfp_divider_33 altfp_divider_33_main_11_12 (
	.result (altfp_divider_main_11_12_out),
	.dataa (main_altfp_divide_32_0_op0),
	.datab (main_altfp_divide_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_11_12_en)
);


/*   %23 = fmul float %22, %22*/
altfp_multiplier_11 altfp_multiplier_11_main_16_23 (
	.result (altfp_multiplier_main_16_23_out),
	.dataa (main_altfp_multiply_32_0_op0),
	.datab (main_altfp_multiply_32_0_op1),
	.clock (clk),
	.clk_en (altfp_main_16_23_en)
);


/*   %29 = fcmp ugt float %28, 0x3FB99999A0000000*/
altfp_compare32_1 altfp_compare32_1_main_26_29 (
	.dataa (main_26_28),
	.datab (32'h3DCCCCCD),
	.clock (clk),
	.clk_en (altfp_main_26_29_en),
	.aeb (main_26_29_unused),
	.aneb (main_26_29_unused),
	.alb (main_26_29_unused),
	.aleb (main_26_29_unused),
	.agb (altfp_compare32_1_main_26_29_out),
	.ageb (main_26_29_unused),
	.unordered (main_26_29_unused)
);


// Local Rams


//   %data = alloca [2500 x float], align 4
ram_dual_port main_0_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_data_address_a ),
	.address_b( main_0_data_address_b ),
	.wren_a( main_0_data_write_enable_a ),
	.wren_b( main_0_data_write_enable_b ),
	.data_a( main_0_data_in_a ),
	.data_b( main_0_data_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_data_out_a ),
	.q_b( main_0_data_out_b)
);
defparam main_0_data.width_a = 32;
defparam main_0_data.width_b = 32;
defparam main_0_data.widthad_a = 12;
defparam main_0_data.widthad_b = 12;
defparam main_0_data.width_be_a = 1;
defparam main_0_data.width_be_b = 1;
defparam main_0_data.numwords_a = 2500;
defparam main_0_data.numwords_b = 2500;
defparam main_0_data.latency = 1;


//   %mean = alloca [50 x float], align 4
ram_dual_port main_0_mean (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_mean_address_a ),
	.address_b( main_0_mean_address_b ),
	.wren_a( main_0_mean_write_enable_a ),
	.wren_b( main_0_mean_write_enable_b ),
	.data_a( main_0_mean_in_a ),
	.data_b( main_0_mean_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_mean_out_a ),
	.q_b( main_0_mean_out_b)
);
defparam main_0_mean.width_a = 32;
defparam main_0_mean.width_b = 32;
defparam main_0_mean.widthad_a = 6;
defparam main_0_mean.widthad_b = 6;
defparam main_0_mean.width_be_a = 1;
defparam main_0_mean.width_be_b = 1;
defparam main_0_mean.numwords_a = 50;
defparam main_0_mean.numwords_b = 50;
defparam main_0_mean.latency = 1;


//   %stddev = alloca [50 x float], align 4
ram_dual_port main_0_stddev (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( main_0_stddev_address_a ),
	.address_b( main_0_stddev_address_b ),
	.wren_a( main_0_stddev_write_enable_a ),
	.wren_b( main_0_stddev_write_enable_b ),
	.data_a( main_0_stddev_in_a ),
	.data_b( main_0_stddev_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( main_0_stddev_out_a ),
	.q_b( main_0_stddev_out_b)
);
defparam main_0_stddev.width_a = 32;
defparam main_0_stddev.width_b = 32;
defparam main_0_stddev.widthad_a = 6;
defparam main_0_stddev.widthad_b = 6;
defparam main_0_stddev.width_be_a = 1;
defparam main_0_stddev.width_be_b = 1;
defparam main_0_stddev.numwords_a = 50;
defparam main_0_stddev.numwords_b = 50;
defparam main_0_stddev.latency = 1;


always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__0_1;
LEGUP_F_main_BB__0_1:
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__11_22:
		next_state = LEGUP_F_main_BB__11_23;
LEGUP_F_main_BB__11_23:
		next_state = LEGUP_F_main_BB__11_24;
LEGUP_F_main_BB__11_24:
		next_state = LEGUP_F_main_BB__11_25;
LEGUP_F_main_BB__11_25:
		next_state = LEGUP_F_main_BB__11_26;
LEGUP_F_main_BB__11_26:
		next_state = LEGUP_F_main_BB__11_27;
LEGUP_F_main_BB__11_27:
		next_state = LEGUP_F_main_BB__11_28;
LEGUP_F_main_BB__11_28:
		next_state = LEGUP_F_main_BB__11_29;
LEGUP_F_main_BB__11_29:
		next_state = LEGUP_F_main_BB__11_30;
LEGUP_F_main_BB__11_30:
		next_state = LEGUP_F_main_BB__11_31;
LEGUP_F_main_BB__11_31:
		next_state = LEGUP_F_main_BB__11_32;
LEGUP_F_main_BB__11_32:
		next_state = LEGUP_F_main_BB__11_33;
LEGUP_F_main_BB__11_33:
		next_state = LEGUP_F_main_BB__11_34;
LEGUP_F_main_BB__11_34:
		next_state = LEGUP_F_main_BB__11_35;
LEGUP_F_main_BB__11_35:
		next_state = LEGUP_F_main_BB__11_36;
LEGUP_F_main_BB__11_36:
		next_state = LEGUP_F_main_BB__11_37;
LEGUP_F_main_BB__11_37:
		next_state = LEGUP_F_main_BB__11_38;
LEGUP_F_main_BB__11_38:
		next_state = LEGUP_F_main_BB__11_39;
LEGUP_F_main_BB__11_39:
		next_state = LEGUP_F_main_BB__11_40;
LEGUP_F_main_BB__11_40:
		next_state = LEGUP_F_main_BB__11_41;
LEGUP_F_main_BB__11_41:
		next_state = LEGUP_F_main_BB__11_42;
LEGUP_F_main_BB__11_42:
		next_state = LEGUP_F_main_BB__11_43;
LEGUP_F_main_BB__11_43:
		next_state = LEGUP_F_main_BB__11_44;
LEGUP_F_main_BB__11_44:
		next_state = LEGUP_F_main_BB__11_45;
LEGUP_F_main_BB__11_45:
		next_state = LEGUP_F_main_BB__11_46;
LEGUP_F_main_BB__11_46:
		next_state = LEGUP_F_main_BB__11_47;
LEGUP_F_main_BB__11_47:
		next_state = LEGUP_F_main_BB__11_48;
LEGUP_F_main_BB__11_48:
		next_state = LEGUP_F_main_BB__11_49;
LEGUP_F_main_BB__11_49:
		next_state = LEGUP_F_main_BB__11_50;
LEGUP_F_main_BB__11_50:
		next_state = LEGUP_F_main_BB__11_51;
LEGUP_F_main_BB__11_51:
		next_state = LEGUP_F_main_BB__11_52;
LEGUP_F_main_BB__11_52:
		next_state = LEGUP_F_main_BB__11_53;
LEGUP_F_main_BB__11_53:
		next_state = LEGUP_F_main_BB__11_54;
LEGUP_F_main_BB__11_54:
		next_state = LEGUP_F_main_BB__11_55;
LEGUP_F_main_BB__11_55:
		next_state = LEGUP_F_main_BB__11_56;
LEGUP_F_main_BB__11_56:
	if ((main_11_exitcond14_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader2preheader_57;
	else if ((main_11_exitcond14_reg == 1'd0))
		next_state = LEGUP_F_main_BB__1_2;
LEGUP_F_main_BB__16_100:
		next_state = LEGUP_F_main_BB__16_101;
LEGUP_F_main_BB__16_101:
		next_state = LEGUP_F_main_BB__16_102;
LEGUP_F_main_BB__16_102:
	if ((main_16_exitcond6_reg == 1'd1))
		next_state = LEGUP_F_main_BB__26_103;
	else if ((main_16_exitcond6_reg == 1'd0))
		next_state = LEGUP_F_main_BB__16_60;
LEGUP_F_main_BB__16_60:
		next_state = LEGUP_F_main_BB__16_61;
LEGUP_F_main_BB__16_61:
		next_state = LEGUP_F_main_BB__16_62;
LEGUP_F_main_BB__16_62:
		next_state = LEGUP_F_main_BB__16_63;
LEGUP_F_main_BB__16_63:
		next_state = LEGUP_F_main_BB__16_64;
LEGUP_F_main_BB__16_64:
		next_state = LEGUP_F_main_BB__16_65;
LEGUP_F_main_BB__16_65:
		next_state = LEGUP_F_main_BB__16_66;
LEGUP_F_main_BB__16_66:
		next_state = LEGUP_F_main_BB__16_67;
LEGUP_F_main_BB__16_67:
		next_state = LEGUP_F_main_BB__16_68;
LEGUP_F_main_BB__16_68:
		next_state = LEGUP_F_main_BB__16_69;
LEGUP_F_main_BB__16_69:
		next_state = LEGUP_F_main_BB__16_70;
LEGUP_F_main_BB__16_70:
		next_state = LEGUP_F_main_BB__16_71;
LEGUP_F_main_BB__16_71:
		next_state = LEGUP_F_main_BB__16_72;
LEGUP_F_main_BB__16_72:
		next_state = LEGUP_F_main_BB__16_73;
LEGUP_F_main_BB__16_73:
		next_state = LEGUP_F_main_BB__16_74;
LEGUP_F_main_BB__16_74:
		next_state = LEGUP_F_main_BB__16_75;
LEGUP_F_main_BB__16_75:
		next_state = LEGUP_F_main_BB__16_76;
LEGUP_F_main_BB__16_76:
		next_state = LEGUP_F_main_BB__16_77;
LEGUP_F_main_BB__16_77:
		next_state = LEGUP_F_main_BB__16_78;
LEGUP_F_main_BB__16_78:
		next_state = LEGUP_F_main_BB__16_79;
LEGUP_F_main_BB__16_79:
		next_state = LEGUP_F_main_BB__16_80;
LEGUP_F_main_BB__16_80:
		next_state = LEGUP_F_main_BB__16_81;
LEGUP_F_main_BB__16_81:
		next_state = LEGUP_F_main_BB__16_82;
LEGUP_F_main_BB__16_82:
		next_state = LEGUP_F_main_BB__16_83;
LEGUP_F_main_BB__16_83:
		next_state = LEGUP_F_main_BB__16_84;
LEGUP_F_main_BB__16_84:
		next_state = LEGUP_F_main_BB__16_85;
LEGUP_F_main_BB__16_85:
		next_state = LEGUP_F_main_BB__16_86;
LEGUP_F_main_BB__16_86:
		next_state = LEGUP_F_main_BB__16_87;
LEGUP_F_main_BB__16_87:
		next_state = LEGUP_F_main_BB__16_88;
LEGUP_F_main_BB__16_88:
		next_state = LEGUP_F_main_BB__16_89;
LEGUP_F_main_BB__16_89:
		next_state = LEGUP_F_main_BB__16_90;
LEGUP_F_main_BB__16_90:
		next_state = LEGUP_F_main_BB__16_91;
LEGUP_F_main_BB__16_91:
		next_state = LEGUP_F_main_BB__16_92;
LEGUP_F_main_BB__16_92:
		next_state = LEGUP_F_main_BB__16_93;
LEGUP_F_main_BB__16_93:
		next_state = LEGUP_F_main_BB__16_94;
LEGUP_F_main_BB__16_94:
		next_state = LEGUP_F_main_BB__16_95;
LEGUP_F_main_BB__16_95:
		next_state = LEGUP_F_main_BB__16_96;
LEGUP_F_main_BB__16_96:
		next_state = LEGUP_F_main_BB__16_97;
LEGUP_F_main_BB__16_97:
		next_state = LEGUP_F_main_BB__16_98;
LEGUP_F_main_BB__16_98:
		next_state = LEGUP_F_main_BB__16_99;
LEGUP_F_main_BB__16_99:
		next_state = LEGUP_F_main_BB__16_100;
LEGUP_F_main_BB__1_2:
		next_state = LEGUP_F_main_BB__1_3;
LEGUP_F_main_BB__1_3:
		next_state = LEGUP_F_main_BB__3_4;
LEGUP_F_main_BB__26_103:
		next_state = LEGUP_F_main_BB__26_104;
LEGUP_F_main_BB__26_104:
		next_state = LEGUP_F_main_BB__26_105;
LEGUP_F_main_BB__26_105:
		next_state = LEGUP_F_main_BB__26_106;
LEGUP_F_main_BB__26_106:
		next_state = LEGUP_F_main_BB__26_107;
LEGUP_F_main_BB__26_107:
		next_state = LEGUP_F_main_BB__26_108;
LEGUP_F_main_BB__26_108:
		next_state = LEGUP_F_main_BB__26_109;
LEGUP_F_main_BB__26_109:
		next_state = LEGUP_F_main_BB__26_110;
LEGUP_F_main_BB__26_110:
		next_state = LEGUP_F_main_BB__26_111;
LEGUP_F_main_BB__26_111:
		next_state = LEGUP_F_main_BB__26_112;
LEGUP_F_main_BB__26_112:
		next_state = LEGUP_F_main_BB__26_113;
LEGUP_F_main_BB__26_113:
		next_state = LEGUP_F_main_BB__26_114;
LEGUP_F_main_BB__26_114:
		next_state = LEGUP_F_main_BB__26_115;
LEGUP_F_main_BB__26_115:
		next_state = LEGUP_F_main_BB__26_116;
LEGUP_F_main_BB__26_116:
		next_state = LEGUP_F_main_BB__26_117;
LEGUP_F_main_BB__26_117:
		next_state = LEGUP_F_main_BB__26_118;
LEGUP_F_main_BB__26_118:
		next_state = LEGUP_F_main_BB__26_119;
LEGUP_F_main_BB__26_119:
		next_state = LEGUP_F_main_BB__26_120;
LEGUP_F_main_BB__26_120:
		next_state = LEGUP_F_main_BB__26_121;
LEGUP_F_main_BB__26_121:
		next_state = LEGUP_F_main_BB__26_122;
LEGUP_F_main_BB__26_122:
		next_state = LEGUP_F_main_BB__26_123;
LEGUP_F_main_BB__26_123:
		next_state = LEGUP_F_main_BB__26_124;
LEGUP_F_main_BB__26_124:
		next_state = LEGUP_F_main_BB__26_125;
LEGUP_F_main_BB__26_125:
		next_state = LEGUP_F_main_BB__26_126;
LEGUP_F_main_BB__26_126:
		next_state = LEGUP_F_main_BB__26_127;
LEGUP_F_main_BB__26_127:
		next_state = LEGUP_F_main_BB__26_128;
LEGUP_F_main_BB__26_128:
		next_state = LEGUP_F_main_BB__26_129;
LEGUP_F_main_BB__26_129:
		next_state = LEGUP_F_main_BB__26_130;
LEGUP_F_main_BB__26_130:
		next_state = LEGUP_F_main_BB__26_131;
LEGUP_F_main_BB__26_131:
		next_state = LEGUP_F_main_BB__26_132;
LEGUP_F_main_BB__26_132:
		next_state = LEGUP_F_main_BB__26_133;
LEGUP_F_main_BB__26_133:
		next_state = LEGUP_F_main_BB__26_134;
LEGUP_F_main_BB__26_134:
		next_state = LEGUP_F_main_BB__26_135;
LEGUP_F_main_BB__26_135:
		next_state = LEGUP_F_main_BB__26_136;
LEGUP_F_main_BB__26_136:
		next_state = LEGUP_F_main_BB__26_137;
LEGUP_F_main_BB__26_137:
		next_state = LEGUP_F_main_BB__26_138;
LEGUP_F_main_BB__26_138:
		next_state = LEGUP_F_main_BB__26_139;
LEGUP_F_main_BB__26_139:
		next_state = LEGUP_F_main_BB__26_140;
LEGUP_F_main_BB__26_140:
		next_state = LEGUP_F_main_BB__26_141;
LEGUP_F_main_BB__26_141:
		next_state = LEGUP_F_main_BB__26_142;
LEGUP_F_main_BB__26_142:
		next_state = LEGUP_F_main_BB__26_143;
LEGUP_F_main_BB__26_143:
		next_state = LEGUP_F_main_BB__26_144;
LEGUP_F_main_BB__26_144:
		next_state = LEGUP_F_main_BB__26_145;
LEGUP_F_main_BB__26_145:
		next_state = LEGUP_F_main_BB__26_146;
LEGUP_F_main_BB__26_146:
		next_state = LEGUP_F_main_BB__26_147;
LEGUP_F_main_BB__26_147:
		next_state = LEGUP_F_main_BB__26_148;
LEGUP_F_main_BB__26_148:
		next_state = LEGUP_F_main_BB__26_149;
LEGUP_F_main_BB__26_149:
	if ((main_26_exitcond8_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader1preheader_150;
	else if ((main_26_exitcond8_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader2_58;
LEGUP_F_main_BB__3_10:
		next_state = LEGUP_F_main_BB__3_11;
LEGUP_F_main_BB__3_11:
		next_state = LEGUP_F_main_BB__3_12;
LEGUP_F_main_BB__3_12:
		next_state = LEGUP_F_main_BB__3_13;
LEGUP_F_main_BB__3_13:
		next_state = LEGUP_F_main_BB__3_14;
LEGUP_F_main_BB__3_14:
		next_state = LEGUP_F_main_BB__3_15;
LEGUP_F_main_BB__3_15:
		next_state = LEGUP_F_main_BB__3_16;
LEGUP_F_main_BB__3_16:
		next_state = LEGUP_F_main_BB__3_17;
LEGUP_F_main_BB__3_17:
		next_state = LEGUP_F_main_BB__3_18;
LEGUP_F_main_BB__3_18:
		next_state = LEGUP_F_main_BB__3_19;
LEGUP_F_main_BB__3_19:
		next_state = LEGUP_F_main_BB__3_20;
LEGUP_F_main_BB__3_20:
		next_state = LEGUP_F_main_BB__3_21;
LEGUP_F_main_BB__3_21:
	if ((main_3_exitcond12_reg == 1'd1))
		next_state = LEGUP_F_main_BB__11_22;
	else if ((main_3_exitcond12_reg == 1'd0))
		next_state = LEGUP_F_main_BB__3_4;
LEGUP_F_main_BB__3_4:
		next_state = LEGUP_F_main_BB__3_5;
LEGUP_F_main_BB__3_5:
		next_state = LEGUP_F_main_BB__3_6;
LEGUP_F_main_BB__3_6:
		next_state = LEGUP_F_main_BB__3_7;
LEGUP_F_main_BB__3_7:
		next_state = LEGUP_F_main_BB__3_8;
LEGUP_F_main_BB__3_8:
		next_state = LEGUP_F_main_BB__3_9;
LEGUP_F_main_BB__3_9:
		next_state = LEGUP_F_main_BB__3_10;
LEGUP_F_main_BB__44_154:
	if ((main_44_exitcond4 == 1'd1))
		next_state = LEGUP_F_main_BB_loopexitpreheader_155;
	else if ((main_44_exitcond4 == 1'd0))
		next_state = LEGUP_F_main_BB_preheader1_151;
LEGUP_F_main_BB_loopexit_156:
		next_state = LEGUP_0;
LEGUP_F_main_BB_loopexitpreheader_155:
		next_state = LEGUP_F_main_BB_loopexit_156;
LEGUP_F_main_BB_preheader1_151:
		next_state = LEGUP_F_main_BB_preheader1_152;
LEGUP_F_main_BB_preheader1_152:
		next_state = LEGUP_loop_pipeline_wait_loop2_1_153;
LEGUP_F_main_BB_preheader1preheader_150:
		next_state = LEGUP_F_main_BB_preheader1_151;
LEGUP_F_main_BB_preheader2_58:
		next_state = LEGUP_F_main_BB_preheader2_59;
LEGUP_F_main_BB_preheader2_59:
		next_state = LEGUP_F_main_BB__16_60;
LEGUP_F_main_BB_preheader2preheader_57:
		next_state = LEGUP_F_main_BB_preheader2_58;
LEGUP_loop_pipeline_wait_loop2_1_153:
	if ((loop2_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__44_154;
	else if ((loop2_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__44_154;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %13, %11 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %13, %11 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__11_56) & (memory_controller_waitrequest == 1'd0)) & (main_11_exitcond14_reg == 1'd0))) */ begin
		main_1_2 = main_11_13_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %13, %11 ]*/
	if (((cur_state == LEGUP_F_main_BB__0_1) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %13, %11 ]*/
	if ((((cur_state == LEGUP_F_main_BB__11_56) & (memory_controller_waitrequest == 1'd0)) & (main_11_exitcond14_reg == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep16 = getelementptr [50 x float]* %mean, i32 0, i32 %2*/
		main_1_scevgep16 = (1'd0 + (4 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %scevgep16 = getelementptr [50 x float]* %mean, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_1_scevgep16_reg <= main_1_scevgep16;
		if (start == 1'b0 && ^(main_1_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %4 = phi float [ 0.000000e+00, %1 ], [ %9, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_3_4 = 32'h0;
	end
	/* main: %3*/
	/*   %4 = phi float [ 0.000000e+00, %1 ], [ %9, %3 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__3_21) & (memory_controller_waitrequest == 1'd0)) & (main_3_exitcond12_reg == 1'd0))) */ begin
		main_3_4 = main_3_9;
	end
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %4 = phi float [ 0.000000e+00, %1 ], [ %9, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
	/* main: %3*/
	/*   %4 = phi float [ 0.000000e+00, %1 ], [ %9, %3 ]*/
	if ((((cur_state == LEGUP_F_main_BB__3_21) & (memory_controller_waitrequest == 1'd0)) & (main_3_exitcond12_reg == 1'd0))) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %5 = phi i32 [ 0, %1 ], [ %10, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_3_5 = 32'd0;
	end
	/* main: %3*/
	/*   %5 = phi i32 [ 0, %1 ], [ %10, %3 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__3_21) & (memory_controller_waitrequest == 1'd0)) & (main_3_exitcond12_reg == 1'd0))) */ begin
		main_3_5 = main_3_10_reg;
	end
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %5 = phi i32 [ 0, %1 ], [ %10, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB__1_3) & (memory_controller_waitrequest == 1'd0))) begin
		main_3_5_reg <= main_3_5;
		if (start == 1'b0 && ^(main_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg"); $finish; end
	end
	/* main: %3*/
	/*   %5 = phi i32 [ 0, %1 ], [ %10, %3 ]*/
	if ((((cur_state == LEGUP_F_main_BB__3_21) & (memory_controller_waitrequest == 1'd0)) & (main_3_exitcond12_reg == 1'd0))) begin
		main_3_5_reg <= main_3_5;
		if (start == 1'b0 && ^(main_3_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_5_reg"); $finish; end
	end
end
always @(*) begin
	main_3_6 = main_3_6_stage0_reg;
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %6 = mul i32 %5, 50*/
	if ((cur_state == LEGUP_F_main_BB__3_5)) begin
		main_3_6_reg <= main_3_6;
		if (start == 1'b0 && ^(main_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg"); $finish; end
	end
	/* main: %3*/
	/*   %6 = mul i32 %5, 50*/
	if ((cur_state == LEGUP_F_main_BB__3_5)) begin
		main_3_6_reg <= main_3_6;
		if (start == 1'b0 && ^(main_3_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_6_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %7 = add i32 %2, %6*/
		main_3_7 = (main_1_2_reg + main_3_6);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %7 = add i32 %2, %6*/
	if ((cur_state == LEGUP_F_main_BB__3_5)) begin
		main_3_7_reg <= main_3_7;
		if (start == 1'b0 && ^(main_3_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep13 = getelementptr [2500 x float]* %data, i32 0, i32 %7*/
		main_3_scevgep13 = (1'd0 + (4 * main_3_7_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep13 = getelementptr [2500 x float]* %data, i32 0, i32 %7*/
	if ((cur_state == LEGUP_F_main_BB__3_6)) begin
		main_3_scevgep13_reg <= main_3_scevgep13;
		if (start == 1'b0 && ^(main_3_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %8 = load float* %scevgep13, align 4, !tbaa !2*/
		main_3_8 = main_0_data_out_a;
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %8 = load float* %scevgep13, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__3_7)) begin
		main_3_8_reg <= main_3_8;
		if (start == 1'b0 && ^(main_3_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_8_reg"); $finish; end
	end
end
always @(*) begin
	main_3_9 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %9 = fadd float %8, %4*/
	if ((cur_state == LEGUP_F_main_BB__3_21)) begin
		main_3_9_reg <= main_3_9;
		if (start == 1'b0 && ^(main_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_9_reg"); $finish; end
	end
	/* main: %3*/
	/*   %9 = fadd float %8, %4*/
	if ((cur_state == LEGUP_F_main_BB__3_21)) begin
		main_3_9_reg <= main_3_9;
		if (start == 1'b0 && ^(main_3_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_9_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %10 = add nsw i32 %5, 1*/
		main_3_10 = (main_3_5_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %10 = add nsw i32 %5, 1*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		main_3_10_reg <= main_3_10;
		if (start == 1'b0 && ^(main_3_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %exitcond12 = icmp eq i32 %10, 50*/
		main_3_exitcond12 = (main_3_10 == 32'd50);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %exitcond12 = icmp eq i32 %10, 50*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		main_3_exitcond12_reg <= main_3_exitcond12;
		if (start == 1'b0 && ^(main_3_exitcond12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_exitcond12_reg"); $finish; end
	end
end
always @(*) begin
	main_11_12 = main_altfp_divide_32_0;
end
always @(posedge clk) begin
	/* main: %11*/
	/*   %12 = fdiv float %9, 0x3FF3333340000000*/
	if ((cur_state == LEGUP_F_main_BB__11_55)) begin
		main_11_12_reg <= main_11_12;
		if (start == 1'b0 && ^(main_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_12_reg"); $finish; end
	end
	/* main: %11*/
	/*   %12 = fdiv float %9, 0x3FF3333340000000*/
	if ((cur_state == LEGUP_F_main_BB__11_55)) begin
		main_11_12_reg <= main_11_12;
		if (start == 1'b0 && ^(main_11_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_12_reg"); $finish; end
	end
	/* main: %26*/
	/*   %27 = fdiv float %24, 0x3FF3333340000000*/
	if ((cur_state == LEGUP_F_main_BB__26_136)) begin
		main_11_12_reg <= main_26_27;
		if (start == 1'b0 && ^(main_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_12_reg"); $finish; end
	end
	/* main: %34*/
	/*   %42 = fdiv float %39, %41, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !11, !legup.pipeline.stage !7
	start_time: 16 avail_time: 49 stage: 0 II: 49 start_ii_state = 16 % 49 = 16 avail_ii_state = 49 % 49 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_49))) begin
		main_11_12_reg <= main_34_42;
		if (start == 1'b0 && ^(main_34_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_12_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %11*/
	/*   %13 = add nsw i32 %2, 1*/
		main_11_13 = (main_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %11*/
	/*   %13 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB__11_22)) begin
		main_11_13_reg <= main_11_13;
		if (start == 1'b0 && ^(main_11_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %11*/
	/*   %exitcond14 = icmp eq i32 %13, 50*/
		main_11_exitcond14 = (main_11_13 == 32'd50);
end
always @(posedge clk) begin
	/* main: %11*/
	/*   %exitcond14 = icmp eq i32 %13, 50*/
	if ((cur_state == LEGUP_F_main_BB__11_22)) begin
		main_11_exitcond14_reg <= main_11_exitcond14;
		if (start == 1'b0 && ^(main_11_exitcond14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_11_exitcond14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %14 = phi i32 [ %31, %26 ], [ 0, %.preheader2.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2preheader_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2_14 = 32'd0;
	end
	/* main: %.preheader2*/
	/*   %14 = phi i32 [ %31, %26 ], [ 0, %.preheader2.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__26_149) & (memory_controller_waitrequest == 1'd0)) & (main_26_exitcond8_reg == 1'd0))) */ begin
		main_preheader2_14 = main_26_31_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %14 = phi i32 [ %31, %26 ], [ 0, %.preheader2.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2preheader_57) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader2_14_reg <= main_preheader2_14;
		if (start == 1'b0 && ^(main_preheader2_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_14_reg"); $finish; end
	end
	/* main: %.preheader2*/
	/*   %14 = phi i32 [ %31, %26 ], [ 0, %.preheader2.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__26_149) & (memory_controller_waitrequest == 1'd0)) & (main_26_exitcond8_reg == 1'd0))) begin
		main_preheader2_14_reg <= main_preheader2_14;
		if (start == 1'b0 && ^(main_preheader2_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_14_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %scevgep10 = getelementptr [50 x float]* %mean, i32 0, i32 %14*/
		main_preheader2_scevgep10 = (1'd0 + (4 * main_preheader2_14_reg));
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %scevgep10 = getelementptr [50 x float]* %mean, i32 0, i32 %14*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_58)) begin
		main_preheader2_scevgep10_reg <= main_preheader2_scevgep10;
		if (start == 1'b0 && ^(main_preheader2_scevgep10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_scevgep10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %scevgep11 = getelementptr [50 x float]* %stddev, i32 0, i32 %14*/
		main_preheader2_scevgep11 = (1'd0 + (4 * main_preheader2_14_reg));
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %scevgep11 = getelementptr [50 x float]* %stddev, i32 0, i32 %14*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_58)) begin
		main_preheader2_scevgep11_reg <= main_preheader2_scevgep11;
		if (start == 1'b0 && ^(main_preheader2_scevgep11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_scevgep11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader2*/
	/*   %15 = load float* %scevgep10, align 4, !tbaa !2*/
		main_preheader2_15 = main_0_mean_out_a;
end
always @(posedge clk) begin
	/* main: %.preheader2*/
	/*   %15 = load float* %scevgep10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_59)) begin
		main_preheader2_15_reg <= main_preheader2_15;
		if (start == 1'b0 && ^(main_preheader2_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader2_15_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %17 = phi float [ 0.000000e+00, %.preheader2 ], [ %24, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_17 = 32'h0;
	end
	/* main: %16*/
	/*   %17 = phi float [ 0.000000e+00, %.preheader2 ], [ %24, %16 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__16_102) & (memory_controller_waitrequest == 1'd0)) & (main_16_exitcond6_reg == 1'd0))) */ begin
		main_16_17 = main_16_24;
	end
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %17 = phi float [ 0.000000e+00, %.preheader2 ], [ %24, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_17_reg <= main_16_17;
		if (start == 1'b0 && ^(main_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_17_reg"); $finish; end
	end
	/* main: %16*/
	/*   %17 = phi float [ 0.000000e+00, %.preheader2 ], [ %24, %16 ]*/
	if ((((cur_state == LEGUP_F_main_BB__16_102) & (memory_controller_waitrequest == 1'd0)) & (main_16_exitcond6_reg == 1'd0))) begin
		main_16_17_reg <= main_16_17;
		if (start == 1'b0 && ^(main_16_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %18 = phi i32 [ 0, %.preheader2 ], [ %25, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_18 = 32'd0;
	end
	/* main: %16*/
	/*   %18 = phi i32 [ 0, %.preheader2 ], [ %25, %16 ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__16_102) & (memory_controller_waitrequest == 1'd0)) & (main_16_exitcond6_reg == 1'd0))) */ begin
		main_16_18 = main_16_25_reg;
	end
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %18 = phi i32 [ 0, %.preheader2 ], [ %25, %16 ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader2_59) & (memory_controller_waitrequest == 1'd0))) begin
		main_16_18_reg <= main_16_18;
		if (start == 1'b0 && ^(main_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_18_reg"); $finish; end
	end
	/* main: %16*/
	/*   %18 = phi i32 [ 0, %.preheader2 ], [ %25, %16 ]*/
	if ((((cur_state == LEGUP_F_main_BB__16_102) & (memory_controller_waitrequest == 1'd0)) & (main_16_exitcond6_reg == 1'd0))) begin
		main_16_18_reg <= main_16_18;
		if (start == 1'b0 && ^(main_16_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_18_reg"); $finish; end
	end
end
always @(*) begin
	main_16_19 = main_16_19_stage0_reg;
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %19 = mul i32 %18, 50*/
	if ((cur_state == LEGUP_F_main_BB__16_61)) begin
		main_16_19_reg <= main_16_19;
		if (start == 1'b0 && ^(main_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_19_reg"); $finish; end
	end
	/* main: %16*/
	/*   %19 = mul i32 %18, 50*/
	if ((cur_state == LEGUP_F_main_BB__16_61)) begin
		main_16_19_reg <= main_16_19;
		if (start == 1'b0 && ^(main_16_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %20 = add i32 %14, %19*/
		main_16_20 = (main_preheader2_14_reg + main_16_19);
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %20 = add i32 %14, %19*/
	if ((cur_state == LEGUP_F_main_BB__16_61)) begin
		main_16_20_reg <= main_16_20;
		if (start == 1'b0 && ^(main_16_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %scevgep7 = getelementptr [2500 x float]* %data, i32 0, i32 %20*/
		main_16_scevgep7 = (1'd0 + (4 * main_16_20_reg));
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %scevgep7 = getelementptr [2500 x float]* %data, i32 0, i32 %20*/
	if ((cur_state == LEGUP_F_main_BB__16_62)) begin
		main_16_scevgep7_reg <= main_16_scevgep7;
		if (start == 1'b0 && ^(main_16_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_scevgep7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %21 = load float* %scevgep7, align 4, !tbaa !2*/
		main_16_21 = main_0_data_out_a;
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %21 = load float* %scevgep7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__16_63)) begin
		main_16_21_reg <= main_16_21;
		if (start == 1'b0 && ^(main_16_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_21_reg"); $finish; end
	end
end
always @(*) begin
	main_16_22 = main_altfp_subtract_32_0;
end
always @(*) begin
/* main: %16*/
/*   %22 = fsub float %21, %15*/
	main_16_22_reg = main_34_39_reg;
end
always @(*) begin
	main_16_23 = main_altfp_multiply_32_0;
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %23 = fmul float %22, %22*/
	if ((cur_state == LEGUP_F_main_BB__16_88)) begin
		main_16_23_reg <= main_16_23;
		if (start == 1'b0 && ^(main_16_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_23_reg"); $finish; end
	end
	/* main: %16*/
	/*   %23 = fmul float %22, %22*/
	if ((cur_state == LEGUP_F_main_BB__16_88)) begin
		main_16_23_reg <= main_16_23;
		if (start == 1'b0 && ^(main_16_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_23_reg"); $finish; end
	end
	/* main: %26*/
	/*   %28 = fmul float %27, %27*/
	if ((cur_state == LEGUP_F_main_BB__26_147)) begin
		main_16_23_reg <= main_26_28;
		if (start == 1'b0 && ^(main_26_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_23_reg"); $finish; end
	end
	/* main: %34*/
	/*   %41 = fmul float %40, 0x3FF70A3D80000000, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 12 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 12 % 49 = 12*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd12) & loop2_1_valid_bit_12))) begin
		main_16_23_reg <= main_34_41;
		if (start == 1'b0 && ^(main_34_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_23_reg"); $finish; end
	end
end
always @(*) begin
	main_16_24 = main_altfp_add_32_0;
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %24 = fadd float %17, %23*/
	if ((cur_state == LEGUP_F_main_BB__16_102)) begin
		main_16_24_reg <= main_16_24;
		if (start == 1'b0 && ^(main_16_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_24_reg"); $finish; end
	end
	/* main: %16*/
	/*   %24 = fadd float %17, %23*/
	if ((cur_state == LEGUP_F_main_BB__16_102)) begin
		main_16_24_reg <= main_16_24;
		if (start == 1'b0 && ^(main_16_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_24_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %25 = add nsw i32 %18, 1*/
		main_16_25 = (main_16_18_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %25 = add nsw i32 %18, 1*/
	if ((cur_state == LEGUP_F_main_BB__16_60)) begin
		main_16_25_reg <= main_16_25;
		if (start == 1'b0 && ^(main_16_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %16*/
	/*   %exitcond6 = icmp eq i32 %25, 50*/
		main_16_exitcond6 = (main_16_25 == 32'd50);
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %exitcond6 = icmp eq i32 %25, 50*/
	if ((cur_state == LEGUP_F_main_BB__16_60)) begin
		main_16_exitcond6_reg <= main_16_exitcond6;
		if (start == 1'b0 && ^(main_16_exitcond6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_16_exitcond6_reg"); $finish; end
	end
end
always @(*) begin
	main_26_27 = main_altfp_divide_32_0;
end
always @(*) begin
/* main: %26*/
/*   %27 = fdiv float %24, 0x3FF3333340000000*/
	main_26_27_reg = main_11_12_reg;
end
always @(*) begin
	main_26_28 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %26*/
/*   %28 = fmul float %27, %27*/
	main_26_28_reg = main_16_23_reg;
end
always @(*) begin
	main_26_29 = altfp_compare32_1_main_26_29_out;
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %29 = fcmp ugt float %28, 0x3FB99999A0000000*/
	if ((cur_state == LEGUP_F_main_BB__26_148)) begin
		main_26_29_reg <= main_26_29;
		if (start == 1'b0 && ^(main_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_29_reg"); $finish; end
	end
	/* main: %26*/
	/*   %29 = fcmp ugt float %28, 0x3FB99999A0000000*/
	if ((cur_state == LEGUP_F_main_BB__26_148)) begin
		main_26_29_reg <= main_26_29;
		if (start == 1'b0 && ^(main_26_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %30 = select i1 %29, float %28, float 1.000000e+00*/
		main_26_30 = (main_26_29 ? main_26_28_reg : 32'h3F800000);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %30 = select i1 %29, float %28, float 1.000000e+00*/
	if ((cur_state == LEGUP_F_main_BB__26_148)) begin
		main_26_30_reg <= main_26_30;
		if (start == 1'b0 && ^(main_26_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_30_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %31 = add nsw i32 %14, 1*/
		main_26_31 = (main_preheader2_14_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %31 = add nsw i32 %14, 1*/
	if ((cur_state == LEGUP_F_main_BB__26_103)) begin
		main_26_31_reg <= main_26_31;
		if (start == 1'b0 && ^(main_26_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %26*/
	/*   %exitcond8 = icmp eq i32 %31, 50*/
		main_26_exitcond8 = (main_26_31 == 32'd50);
end
always @(posedge clk) begin
	/* main: %26*/
	/*   %exitcond8 = icmp eq i32 %31, 50*/
	if ((cur_state == LEGUP_F_main_BB__26_103)) begin
		main_26_exitcond8_reg <= main_26_exitcond8;
		if (start == 1'b0 && ^(main_26_exitcond8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_26_exitcond8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader1*/
	/*   %32 = phi i32 [ %45, %44 ], [ 0, %.preheader1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1preheader_150) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1_32 = 32'd0;
	end
	/* main: %.preheader1*/
	/*   %32 = phi i32 [ %45, %44 ], [ 0, %.preheader1.preheader ]*/
	else /* if ((((cur_state == LEGUP_F_main_BB__44_154) & (memory_controller_waitrequest == 1'd0)) & (main_44_exitcond4 == 1'd0))) */ begin
		main_preheader1_32 = main_44_45;
	end
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %32 = phi i32 [ %45, %44 ], [ 0, %.preheader1.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader1preheader_150) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader1_32_reg <= main_preheader1_32;
		if (start == 1'b0 && ^(main_preheader1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_32_reg"); $finish; end
	end
	/* main: %.preheader1*/
	/*   %32 = phi i32 [ %45, %44 ], [ 0, %.preheader1.preheader ]*/
	if ((((cur_state == LEGUP_F_main_BB__44_154) & (memory_controller_waitrequest == 1'd0)) & (main_44_exitcond4 == 1'd0))) begin
		main_preheader1_32_reg <= main_preheader1_32;
		if (start == 1'b0 && ^(main_preheader1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_32_reg"); $finish; end
	end
end
always @(*) begin
	main_preheader1_33 = main_preheader1_33_stage0_reg;
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %33 = mul i32 %32, 50*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_152)) begin
		main_preheader1_33_reg <= main_preheader1_33;
		if (start == 1'b0 && ^(main_preheader1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_33_reg"); $finish; end
	end
	/* main: %.preheader1*/
	/*   %33 = mul i32 %32, 50*/
	if ((cur_state == LEGUP_F_main_BB_preheader1_152)) begin
		main_preheader1_33_reg <= main_preheader1_33;
		if (start == 1'b0 && ^(main_preheader1_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader1_33_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %35 = phi i32 [ 0, %.preheader1 ], [ %43, %34 ], !legup.canonical_induction !6, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
if (reset) begin main_34_35 = 0; end
		main_34_35 = 32'd0;
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %35 = phi i32 [ 0, %.preheader1 ], [ %43, %34 ], !legup.canonical_induction !6, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
	if (((cur_state == LEGUP_F_main_BB_preheader1_152) & (memory_controller_waitrequest == 1'd0))) begin
		main_34_35_reg <= main_34_35;
		if (start == 1'b0 && ^(main_34_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_35_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %36 = add i32 %33, %35, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
		main_34_36 = (main_preheader1_33_reg + loop2_1_i_stage0);
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %36 = add i32 %33, %35, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_0))) begin
		main_34_36_reg <= main_34_36;
		if (start == 1'b0 && ^(main_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %scevgep2 = getelementptr [2500 x float]* %data, i32 0, i32 %36, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 1 avail_time: 1 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 1 % 49 = 1*/
		main_34_scevgep2 = (1'd0 + (4 * main_34_36_reg_stage0));
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %scevgep2 = getelementptr [2500 x float]* %data, i32 0, i32 %36, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 1 avail_time: 1 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 1 % 49 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd1) & loop2_1_valid_bit_1))) begin
		main_34_scevgep2_reg <= main_34_scevgep2;
		if (start == 1'b0 && ^(main_34_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_scevgep2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %scevgep = getelementptr [50 x float]* %stddev, i32 0, i32 %35, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
		main_34_scevgep = (1'd0 + (4 * loop2_1_i_stage0));
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %scevgep = getelementptr [50 x float]* %stddev, i32 0, i32 %35, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_0))) begin
		main_34_scevgep_reg <= main_34_scevgep;
		if (start == 1'b0 && ^(main_34_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_scevgep_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %scevgep3 = getelementptr [50 x float]* %mean, i32 0, i32 %35, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
		main_34_scevgep3 = (1'd0 + (4 * loop2_1_i_stage0));
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %scevgep3 = getelementptr [50 x float]* %mean, i32 0, i32 %35, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_0))) begin
		main_34_scevgep3_reg <= main_34_scevgep3;
		if (start == 1'b0 && ^(main_34_scevgep3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_scevgep3_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %37 = load float* %scevgep3, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 0 avail_time: 1 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 1 % 49 = 1*/
		main_34_37 = main_0_mean_out_a;
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %37 = load float* %scevgep3, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 0 avail_time: 1 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 1 % 49 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd1) & loop2_1_valid_bit_1))) begin
		main_34_37_reg <= main_34_37;
		if (start == 1'b0 && ^(main_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %38 = load float* %scevgep2, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 1 avail_time: 2 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 2 % 49 = 2*/
		main_34_38 = main_0_data_out_a;
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %38 = load float* %scevgep2, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 1 avail_time: 2 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 2 % 49 = 2*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd2) & loop2_1_valid_bit_2))) begin
		main_34_38_reg <= main_34_38;
		if (start == 1'b0 && ^(main_34_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_38_reg"); $finish; end
	end
end
always @(*) begin
	main_34_39 = main_altfp_subtract_32_0;
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %39 = fsub float %38, %37, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !7
	start_time: 2 avail_time: 16 stage: 0 II: 49 start_ii_state = 2 % 49 = 2 avail_ii_state = 16 % 49 = 16*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd16) & loop2_1_valid_bit_16))) begin
		main_34_39_reg <= main_34_39;
		if (start == 1'b0 && ^(main_34_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_39_reg"); $finish; end
	end
	/* main: %34*/
	/*   %39 = fsub float %38, %37, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !7
	start_time: 2 avail_time: 16 stage: 0 II: 49 start_ii_state = 2 % 49 = 2 avail_ii_state = 16 % 49 = 16*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd16) & loop2_1_valid_bit_16))) begin
		main_34_39_reg <= main_34_39;
		if (start == 1'b0 && ^(main_34_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_39_reg"); $finish; end
	end
	/* main: %16*/
	/*   %22 = fsub float %21, %15*/
	if ((cur_state == LEGUP_F_main_BB__16_77)) begin
		main_34_39_reg <= main_16_22;
		if (start == 1'b0 && ^(main_16_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %34*/
	/*   %40 = load float* %scevgep, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 0 avail_time: 1 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 1 % 49 = 1*/
		main_34_40 = main_0_stddev_out_a;
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %40 = load float* %scevgep, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 0 avail_time: 1 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 1 % 49 = 1*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd1) & loop2_1_valid_bit_1))) begin
		main_34_40_reg <= main_34_40;
		if (start == 1'b0 && ^(main_34_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_40_reg"); $finish; end
	end
end
always @(*) begin
	main_34_41 = main_altfp_multiply_32_0;
end
always @(*) begin
/* main: %34*/
/*   %41 = fmul float %40, 0x3FF70A3D80000000, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
start_time: 1 avail_time: 12 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 12 % 49 = 12*/
	main_34_41_reg = main_16_23_reg;
end
always @(*) begin
	main_34_42 = main_altfp_divide_32_0;
end
always @(*) begin
/* main: %34*/
/*   %42 = fdiv float %39, %41, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !11, !legup.pipeline.stage !7
start_time: 16 avail_time: 49 stage: 0 II: 49 start_ii_state = 16 % 49 = 16 avail_ii_state = 49 % 49 = 0*/
	main_34_42_reg = main_11_12_reg;
end
always @(*) begin
	/* main: %34*/
	/*   %43 = add nsw i32 %35, 1, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
		main_34_43 = (loop2_1_i_stage0 + 32'd1);
end
always @(posedge clk) begin
	/* main: %34*/
	/*   %43 = add nsw i32 %35, 1, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !7, !legup.pipeline.stage !7
	start_time: 0 avail_time: 0 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 0 % 49 = 0*/
	if ((~(memory_controller_waitrequest) & ((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_0))) begin
		main_34_43_reg <= main_34_43;
		if (start == 1'b0 && ^(main_34_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_43_reg"); $finish; end
	end
end
always @(*) begin
		main_34_exitcond = loop2_1_pipeline_finish;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_loop_pipeline_wait_loop2_1_153)) begin
		main_34_exitcond_reg <= loop2_1_pipeline_finish;
		if (start == 1'b0 && ^(loop2_1_pipeline_finish) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_exitcond_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %44*/
	/*   %45 = add nsw i32 %32, 1*/
		main_44_45 = (main_preheader1_32_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %44*/
	/*   %45 = add nsw i32 %32, 1*/
	if ((cur_state == LEGUP_F_main_BB__44_154)) begin
		main_44_45_reg <= main_44_45;
		if (start == 1'b0 && ^(main_44_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_44_45_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %44*/
	/*   %exitcond4 = icmp eq i32 %45, 50*/
		main_44_exitcond4 = (main_44_45 == 32'd50);
end
always @(posedge clk) begin
	/* main: %44*/
	/*   %exitcond4 = icmp eq i32 %45, 50*/
	if ((cur_state == LEGUP_F_main_BB__44_154)) begin
		main_44_exitcond4_reg <= main_44_exitcond4;
		if (start == 1'b0 && ^(main_44_exitcond4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_44_exitcond4_reg"); $finish; end
	end
end
always @(*) begin
	main_0_data_address_a = 1'd0;
	/* main: %3*/
	/*   %8 = load float* %scevgep13, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__3_6)) begin
		main_0_data_address_a = (main_3_scevgep13 >>> 3'd2);
	end
	/* main: %16*/
	/*   %21 = load float* %scevgep7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__16_62)) begin
		main_0_data_address_a = (main_16_scevgep7 >>> 3'd2);
	end
	/* main: %34*/
	/*   %38 = load float* %scevgep2, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 1 avail_time: 2 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 2 % 49 = 2*/
	if (((loop2_1_ii_state == 6'd1) & loop2_1_valid_bit_1)) begin
		main_0_data_address_a = (main_34_scevgep2 >>> 3'd2);
	end
	/* main: %34*/
	/*   store float %42, float* %scevgep2, align 4, !tbaa !2, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !6
	start_time: 49 avail_time: 50 stage: 1 II: 49 start_ii_state = 49 % 49 = 0 avail_ii_state = 50 % 49 = 1*/
	if (((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_49)) begin
		main_0_data_address_a = (main_34_scevgep2_reg_stage1 >>> 3'd2);
	end
end
always @(*) begin
	main_0_data_write_enable_a = 1'd0;
	/* main: %3*/
	/*   %8 = load float* %scevgep13, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__3_6)) begin
		main_0_data_write_enable_a = 1'd0;
	end
	/* main: %16*/
	/*   %21 = load float* %scevgep7, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__16_62)) begin
		main_0_data_write_enable_a = 1'd0;
	end
	/* main: %34*/
	/*   %38 = load float* %scevgep2, align 4, !tbaa !2, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !8, !legup.pipeline.stage !7
	start_time: 1 avail_time: 2 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 2 % 49 = 2*/
	if (((loop2_1_ii_state == 6'd1) & loop2_1_valid_bit_1)) begin
		main_0_data_write_enable_a = 1'd0;
	end
	/* main: %34*/
	/*   store float %42, float* %scevgep2, align 4, !tbaa !2, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !6
	start_time: 49 avail_time: 50 stage: 1 II: 49 start_ii_state = 49 % 49 = 0 avail_ii_state = 50 % 49 = 1*/
	if (((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_49)) begin
		main_0_data_write_enable_a = 1'd1;
	end
end
always @(*) begin
	main_0_data_in_a = 1'd0;
	/* main: %34*/
	/*   store float %42, float* %scevgep2, align 4, !tbaa !2, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !6
	start_time: 49 avail_time: 50 stage: 1 II: 49 start_ii_state = 49 % 49 = 0 avail_ii_state = 50 % 49 = 1*/
	if (((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_49)) begin
		main_0_data_in_a = main_34_42;
	end
end
always @(*) begin
	main_0_mean_address_a = 1'd0;
	/* main: %1*/
	/*   store float 0.000000e+00, float* %scevgep16, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_0_mean_address_a = (main_1_scevgep16 >>> 3'd2);
	end
	/* main: %11*/
	/*   store float %12, float* %scevgep16, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__11_55)) begin
		main_0_mean_address_a = (main_1_scevgep16_reg >>> 3'd2);
	end
	/* main: %.preheader2*/
	/*   %15 = load float* %scevgep10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_58)) begin
		main_0_mean_address_a = (main_preheader2_scevgep10 >>> 3'd2);
	end
	/* main: %34*/
	/*   %37 = load float* %scevgep3, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 0 avail_time: 1 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 1 % 49 = 1*/
	if (((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_0)) begin
		main_0_mean_address_a = (main_34_scevgep3 >>> 3'd2);
	end
end
always @(*) begin
	main_0_mean_write_enable_a = 1'd0;
	/* main: %1*/
	/*   store float 0.000000e+00, float* %scevgep16, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_0_mean_write_enable_a = 1'd1;
	end
	/* main: %11*/
	/*   store float %12, float* %scevgep16, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__11_55)) begin
		main_0_mean_write_enable_a = 1'd1;
	end
	/* main: %.preheader2*/
	/*   %15 = load float* %scevgep10, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_58)) begin
		main_0_mean_write_enable_a = 1'd0;
	end
	/* main: %34*/
	/*   %37 = load float* %scevgep3, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 0 avail_time: 1 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 1 % 49 = 1*/
	if (((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_0)) begin
		main_0_mean_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_mean_in_a = 1'd0;
	/* main: %1*/
	/*   store float 0.000000e+00, float* %scevgep16, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__1_2)) begin
		main_0_mean_in_a = 32'h0;
	end
	/* main: %11*/
	/*   store float %12, float* %scevgep16, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__11_55)) begin
		main_0_mean_in_a = main_11_12;
	end
end
always @(*) begin
	main_0_stddev_address_a = 1'd0;
	/* main: %.preheader2*/
	/*   store float 0.000000e+00, float* %scevgep11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_58)) begin
		main_0_stddev_address_a = (main_preheader2_scevgep11 >>> 3'd2);
	end
	/* main: %26*/
	/*   store float %30, float* %scevgep11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__26_148)) begin
		main_0_stddev_address_a = (main_preheader2_scevgep11_reg >>> 3'd2);
	end
	/* main: %34*/
	/*   %40 = load float* %scevgep, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 0 avail_time: 1 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 1 % 49 = 1*/
	if (((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_0)) begin
		main_0_stddev_address_a = (main_34_scevgep >>> 3'd2);
	end
end
always @(*) begin
	main_0_stddev_write_enable_a = 1'd0;
	/* main: %.preheader2*/
	/*   store float 0.000000e+00, float* %scevgep11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_58)) begin
		main_0_stddev_write_enable_a = 1'd1;
	end
	/* main: %26*/
	/*   store float %30, float* %scevgep11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__26_148)) begin
		main_0_stddev_write_enable_a = 1'd1;
	end
	/* main: %34*/
	/*   %40 = load float* %scevgep, align 4, !tbaa !2, !legup.pipeline.start_time !7, !legup.pipeline.avail_time !6, !legup.pipeline.stage !7
	start_time: 0 avail_time: 1 stage: 0 II: 49 start_ii_state = 0 % 49 = 0 avail_ii_state = 1 % 49 = 1*/
	if (((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_0)) begin
		main_0_stddev_write_enable_a = 1'd0;
	end
end
always @(*) begin
	main_0_stddev_in_a = 1'd0;
	/* main: %.preheader2*/
	/*   store float 0.000000e+00, float* %scevgep11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB_preheader2_58)) begin
		main_0_stddev_in_a = 32'h0;
	end
	/* main: %26*/
	/*   store float %30, float* %scevgep11, align 4, !tbaa !2*/
	if ((cur_state == LEGUP_F_main_BB__26_148)) begin
		main_0_stddev_in_a = main_26_30;
	end
end
always @(*) begin
	loop2_1_pipeline_start = 1'd0;
	if (reset) begin
		loop2_1_pipeline_start = 1'd0;
	end
	if (((cur_state == LEGUP_F_main_BB_preheader1_152) & (memory_controller_waitrequest == 1'd0))) begin
		loop2_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop2_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started)))) begin
		loop2_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_epilogue & (~(loop2_1_valid_bit_49) & loop2_1_valid_bit_50)))) begin
		loop2_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop2_1_ii_state <= 6'd0;
		if (start == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started)))) begin
		loop2_1_ii_state <= 6'd0;
		if (start == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd0))) begin
		loop2_1_ii_state <= 6'd1;
		if (start == 1'b0 && ^(6'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd1))) begin
		loop2_1_ii_state <= 6'd2;
		if (start == 1'b0 && ^(6'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd2))) begin
		loop2_1_ii_state <= 6'd3;
		if (start == 1'b0 && ^(6'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd3))) begin
		loop2_1_ii_state <= 6'd4;
		if (start == 1'b0 && ^(6'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd4))) begin
		loop2_1_ii_state <= 6'd5;
		if (start == 1'b0 && ^(6'd5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd5))) begin
		loop2_1_ii_state <= 6'd6;
		if (start == 1'b0 && ^(6'd6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd6))) begin
		loop2_1_ii_state <= 6'd7;
		if (start == 1'b0 && ^(6'd7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd7))) begin
		loop2_1_ii_state <= 6'd8;
		if (start == 1'b0 && ^(6'd8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd8))) begin
		loop2_1_ii_state <= 6'd9;
		if (start == 1'b0 && ^(6'd9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd9))) begin
		loop2_1_ii_state <= 6'd10;
		if (start == 1'b0 && ^(6'd10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd10))) begin
		loop2_1_ii_state <= 6'd11;
		if (start == 1'b0 && ^(6'd11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd11))) begin
		loop2_1_ii_state <= 6'd12;
		if (start == 1'b0 && ^(6'd12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd12))) begin
		loop2_1_ii_state <= 6'd13;
		if (start == 1'b0 && ^(6'd13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd13))) begin
		loop2_1_ii_state <= 6'd14;
		if (start == 1'b0 && ^(6'd14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd14))) begin
		loop2_1_ii_state <= 6'd15;
		if (start == 1'b0 && ^(6'd15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd15))) begin
		loop2_1_ii_state <= 6'd16;
		if (start == 1'b0 && ^(6'd16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd16))) begin
		loop2_1_ii_state <= 6'd17;
		if (start == 1'b0 && ^(6'd17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd17))) begin
		loop2_1_ii_state <= 6'd18;
		if (start == 1'b0 && ^(6'd18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd18))) begin
		loop2_1_ii_state <= 6'd19;
		if (start == 1'b0 && ^(6'd19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd19))) begin
		loop2_1_ii_state <= 6'd20;
		if (start == 1'b0 && ^(6'd20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd20))) begin
		loop2_1_ii_state <= 6'd21;
		if (start == 1'b0 && ^(6'd21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd21))) begin
		loop2_1_ii_state <= 6'd22;
		if (start == 1'b0 && ^(6'd22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd22))) begin
		loop2_1_ii_state <= 6'd23;
		if (start == 1'b0 && ^(6'd23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd23))) begin
		loop2_1_ii_state <= 6'd24;
		if (start == 1'b0 && ^(6'd24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd24))) begin
		loop2_1_ii_state <= 6'd25;
		if (start == 1'b0 && ^(6'd25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd25))) begin
		loop2_1_ii_state <= 6'd26;
		if (start == 1'b0 && ^(6'd26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd26))) begin
		loop2_1_ii_state <= 6'd27;
		if (start == 1'b0 && ^(6'd27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd27))) begin
		loop2_1_ii_state <= 6'd28;
		if (start == 1'b0 && ^(6'd28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd28))) begin
		loop2_1_ii_state <= 6'd29;
		if (start == 1'b0 && ^(6'd29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd29))) begin
		loop2_1_ii_state <= 6'd30;
		if (start == 1'b0 && ^(6'd30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd30))) begin
		loop2_1_ii_state <= 6'd31;
		if (start == 1'b0 && ^(6'd31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd31))) begin
		loop2_1_ii_state <= 6'd32;
		if (start == 1'b0 && ^(6'd32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd32))) begin
		loop2_1_ii_state <= 6'd33;
		if (start == 1'b0 && ^(6'd33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd33))) begin
		loop2_1_ii_state <= 6'd34;
		if (start == 1'b0 && ^(6'd34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd34))) begin
		loop2_1_ii_state <= 6'd35;
		if (start == 1'b0 && ^(6'd35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd35))) begin
		loop2_1_ii_state <= 6'd36;
		if (start == 1'b0 && ^(6'd36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd36))) begin
		loop2_1_ii_state <= 6'd37;
		if (start == 1'b0 && ^(6'd37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd37))) begin
		loop2_1_ii_state <= 6'd38;
		if (start == 1'b0 && ^(6'd38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd38))) begin
		loop2_1_ii_state <= 6'd39;
		if (start == 1'b0 && ^(6'd39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd39))) begin
		loop2_1_ii_state <= 6'd40;
		if (start == 1'b0 && ^(6'd40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd40))) begin
		loop2_1_ii_state <= 6'd41;
		if (start == 1'b0 && ^(6'd41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd41))) begin
		loop2_1_ii_state <= 6'd42;
		if (start == 1'b0 && ^(6'd42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd42))) begin
		loop2_1_ii_state <= 6'd43;
		if (start == 1'b0 && ^(6'd43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd43))) begin
		loop2_1_ii_state <= 6'd44;
		if (start == 1'b0 && ^(6'd44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd44))) begin
		loop2_1_ii_state <= 6'd45;
		if (start == 1'b0 && ^(6'd45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd45))) begin
		loop2_1_ii_state <= 6'd46;
		if (start == 1'b0 && ^(6'd46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd46))) begin
		loop2_1_ii_state <= 6'd47;
		if (start == 1'b0 && ^(6'd47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd47))) begin
		loop2_1_ii_state <= 6'd48;
		if (start == 1'b0 && ^(6'd48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd48))) begin
		loop2_1_ii_state <= 6'd0;
		if (start == 1'b0 && ^(6'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop2_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started)))) begin
		loop2_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd48)) & loop2_1_valid_bit_48))) begin
		loop2_1_i_stage0 <= (loop2_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop2_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop2_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop2_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_started & ((loop2_1_ii_state == 6'd0) & loop2_1_pipeline_exit_cond)))) begin
		loop2_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_epilogue & (~(loop2_1_valid_bit_49) & loop2_1_valid_bit_50)))) begin
		loop2_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started))) | ((loop2_1_started & ~(loop2_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop2_1_started & ((loop2_1_ii_state == 6'd0) & loop2_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started))) | ((loop2_1_started & ~(loop2_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop2_1_started & ((loop2_1_ii_state == 6'd0) & loop2_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_1 <= loop2_1_valid_bit_0;
		if (start == 1'b0 && ^(loop2_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_2 <= loop2_1_valid_bit_1;
		if (start == 1'b0 && ^(loop2_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_3 <= loop2_1_valid_bit_2;
		if (start == 1'b0 && ^(loop2_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_4 <= loop2_1_valid_bit_3;
		if (start == 1'b0 && ^(loop2_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_5 <= loop2_1_valid_bit_4;
		if (start == 1'b0 && ^(loop2_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_6 <= loop2_1_valid_bit_5;
		if (start == 1'b0 && ^(loop2_1_valid_bit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_6"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_6 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_6"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_7 <= loop2_1_valid_bit_6;
		if (start == 1'b0 && ^(loop2_1_valid_bit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_7"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_7 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_7"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_8 <= loop2_1_valid_bit_7;
		if (start == 1'b0 && ^(loop2_1_valid_bit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_8"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_8 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_8"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_9 <= loop2_1_valid_bit_8;
		if (start == 1'b0 && ^(loop2_1_valid_bit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_9"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_9 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_9"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_10 <= loop2_1_valid_bit_9;
		if (start == 1'b0 && ^(loop2_1_valid_bit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_10"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_10 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_10"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_11 <= loop2_1_valid_bit_10;
		if (start == 1'b0 && ^(loop2_1_valid_bit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_11"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_11 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_11"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_12 <= loop2_1_valid_bit_11;
		if (start == 1'b0 && ^(loop2_1_valid_bit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_12"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_12 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_12"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_13 <= loop2_1_valid_bit_12;
		if (start == 1'b0 && ^(loop2_1_valid_bit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_13"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_13 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_13"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_14 <= loop2_1_valid_bit_13;
		if (start == 1'b0 && ^(loop2_1_valid_bit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_14"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_14 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_14"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_15 <= loop2_1_valid_bit_14;
		if (start == 1'b0 && ^(loop2_1_valid_bit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_15"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_15 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_15"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_16 <= loop2_1_valid_bit_15;
		if (start == 1'b0 && ^(loop2_1_valid_bit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_16"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_16 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_16"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_17 <= loop2_1_valid_bit_16;
		if (start == 1'b0 && ^(loop2_1_valid_bit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_17"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_17 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_17"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_18 <= loop2_1_valid_bit_17;
		if (start == 1'b0 && ^(loop2_1_valid_bit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_18"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_18 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_18"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_19 <= loop2_1_valid_bit_18;
		if (start == 1'b0 && ^(loop2_1_valid_bit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_19"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_19 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_19"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_20 <= loop2_1_valid_bit_19;
		if (start == 1'b0 && ^(loop2_1_valid_bit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_20"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_20 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_20"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_21 <= loop2_1_valid_bit_20;
		if (start == 1'b0 && ^(loop2_1_valid_bit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_21"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_21 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_21"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_22 <= loop2_1_valid_bit_21;
		if (start == 1'b0 && ^(loop2_1_valid_bit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_22"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_22 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_22"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_23 <= loop2_1_valid_bit_22;
		if (start == 1'b0 && ^(loop2_1_valid_bit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_23"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_23 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_23"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_24 <= loop2_1_valid_bit_23;
		if (start == 1'b0 && ^(loop2_1_valid_bit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_24"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_24 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_24"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_25 <= loop2_1_valid_bit_24;
		if (start == 1'b0 && ^(loop2_1_valid_bit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_25"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_25 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_25"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_26 <= loop2_1_valid_bit_25;
		if (start == 1'b0 && ^(loop2_1_valid_bit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_26"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_26 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_26"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_27 <= loop2_1_valid_bit_26;
		if (start == 1'b0 && ^(loop2_1_valid_bit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_27"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_27 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_27"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_28 <= loop2_1_valid_bit_27;
		if (start == 1'b0 && ^(loop2_1_valid_bit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_28"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_28 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_28"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_29 <= loop2_1_valid_bit_28;
		if (start == 1'b0 && ^(loop2_1_valid_bit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_29"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_29 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_29"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_30 <= loop2_1_valid_bit_29;
		if (start == 1'b0 && ^(loop2_1_valid_bit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_30"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_30 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_30"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_31 <= loop2_1_valid_bit_30;
		if (start == 1'b0 && ^(loop2_1_valid_bit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_31"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_31 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_31"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_32 <= loop2_1_valid_bit_31;
		if (start == 1'b0 && ^(loop2_1_valid_bit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_32"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_32 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_32"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_33 <= loop2_1_valid_bit_32;
		if (start == 1'b0 && ^(loop2_1_valid_bit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_33"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_33 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_33"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_34 <= loop2_1_valid_bit_33;
		if (start == 1'b0 && ^(loop2_1_valid_bit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_34"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_34 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_34"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_35 <= loop2_1_valid_bit_34;
		if (start == 1'b0 && ^(loop2_1_valid_bit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_35"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_35 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_35"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_36 <= loop2_1_valid_bit_35;
		if (start == 1'b0 && ^(loop2_1_valid_bit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_36"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_36 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_36"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_37 <= loop2_1_valid_bit_36;
		if (start == 1'b0 && ^(loop2_1_valid_bit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_37"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_37 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_37"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_38 <= loop2_1_valid_bit_37;
		if (start == 1'b0 && ^(loop2_1_valid_bit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_38"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_38 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_38"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_39 <= loop2_1_valid_bit_38;
		if (start == 1'b0 && ^(loop2_1_valid_bit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_39"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_39 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_39"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_40 <= loop2_1_valid_bit_39;
		if (start == 1'b0 && ^(loop2_1_valid_bit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_40"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_40 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_40"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_41 <= loop2_1_valid_bit_40;
		if (start == 1'b0 && ^(loop2_1_valid_bit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_41"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_41 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_41"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_42 <= loop2_1_valid_bit_41;
		if (start == 1'b0 && ^(loop2_1_valid_bit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_42"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_42 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_42"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_43 <= loop2_1_valid_bit_42;
		if (start == 1'b0 && ^(loop2_1_valid_bit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_43"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_43 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_43"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_44 <= loop2_1_valid_bit_43;
		if (start == 1'b0 && ^(loop2_1_valid_bit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_44"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_44 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_44"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_45 <= loop2_1_valid_bit_44;
		if (start == 1'b0 && ^(loop2_1_valid_bit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_45"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_45 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_45"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_46 <= loop2_1_valid_bit_45;
		if (start == 1'b0 && ^(loop2_1_valid_bit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_46"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_46 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_46"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_47 <= loop2_1_valid_bit_46;
		if (start == 1'b0 && ^(loop2_1_valid_bit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_47"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_47 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_47"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_48 <= loop2_1_valid_bit_47;
		if (start == 1'b0 && ^(loop2_1_valid_bit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_48"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_48 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_48"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_49 <= loop2_1_valid_bit_48;
		if (start == 1'b0 && ^(loop2_1_valid_bit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_49"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_49 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_49"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop2_1_valid_bit_50 <= loop2_1_valid_bit_49;
		if (start == 1'b0 && ^(loop2_1_valid_bit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_50"); $finish; end
	end
	if (reset) begin
		loop2_1_valid_bit_50 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_valid_bit_50"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_pipeline_start & ~(loop2_1_started)))) begin
		loop2_1_i_stage1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage1"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop2_1_ii_state == 6'd48))) begin
		loop2_1_i_stage1 <= loop2_1_i_stage0;
		if (start == 1'b0 && ^(loop2_1_i_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage1"); $finish; end
	end
	if (reset) begin
		loop2_1_i_stage1 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop2_1_i_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 6'd0) & loop2_1_valid_bit_0))) begin
		main_34_36_reg_stage0 <= main_34_36;
		if (start == 1'b0 && ^(main_34_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_36_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 6'd1) & loop2_1_valid_bit_1))) begin
		main_34_scevgep2_reg_stage0 <= main_34_scevgep2;
		if (start == 1'b0 && ^(main_34_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_scevgep2_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 6'd48) & loop2_1_valid_bit_48))) begin
		main_34_scevgep2_reg_stage1 <= main_34_scevgep2_reg_stage0;
		if (start == 1'b0 && ^(main_34_scevgep2_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_scevgep2_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 6'd1) & loop2_1_valid_bit_1))) begin
		main_34_37_reg_stage0 <= main_34_37;
		if (start == 1'b0 && ^(main_34_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_37_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop2_1_ii_state == 6'd12) & loop2_1_valid_bit_12))) begin
		main_34_41_reg_stage0 <= main_34_41;
		if (start == 1'b0 && ^(main_34_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_34_41_reg_stage0"); $finish; end
	end
end
always @(*) begin
	loop2_1_pipeline_exit_cond = (loop2_1_i_stage0 == 49);
end
always @(*) begin
	loop2_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop2_1_epilogue & (~(loop2_1_valid_bit_49) & loop2_1_valid_bit_50)));
end
always @(*) begin
	/* main: %16*/
	/*   %22 = fsub float %21, %15*/
	if ((cur_state == LEGUP_F_main_BB__16_63)) begin
		main_altfp_subtract_32_0_op0 = main_16_21;
	end
	/* main: %34*/
	/*   %39 = fsub float %38, %37, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !7
	start_time: 2 avail_time: 16 stage: 0 II: 49 start_ii_state = 2 % 49 = 2 avail_ii_state = 16 % 49 = 16*/
	else /* if (((loop2_1_ii_state == 6'd2) & loop2_1_valid_bit_2)) */ begin
		main_altfp_subtract_32_0_op0 = main_34_38;
	end
end
always @(*) begin
	/* main: %16*/
	/*   %22 = fsub float %21, %15*/
	if ((cur_state == LEGUP_F_main_BB__16_63)) begin
		main_altfp_subtract_32_0_op1 = main_preheader2_15_reg;
	end
	/* main: %34*/
	/*   %39 = fsub float %38, %37, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !7
	start_time: 2 avail_time: 16 stage: 0 II: 49 start_ii_state = 2 % 49 = 2 avail_ii_state = 16 % 49 = 16*/
	else /* if (((loop2_1_ii_state == 6'd2) & loop2_1_valid_bit_2)) */ begin
		main_altfp_subtract_32_0_op1 = main_34_37_reg_stage0;
	end
end
always @(*) begin
	altfp_main_34_39_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_subtract_32_0 = altfp_subtractor_main_34_39_out;
end
always @(*) begin
	/* main: %3*/
	/*   %9 = fadd float %8, %4*/
	if ((cur_state == LEGUP_F_main_BB__3_7)) begin
		main_altfp_add_32_0_op0 = main_3_8;
	end
	/* main: %16*/
	/*   %24 = fadd float %17, %23*/
	else /* if ((cur_state == LEGUP_F_main_BB__16_88)) */ begin
		main_altfp_add_32_0_op0 = main_16_17_reg;
	end
end
always @(*) begin
	/* main: %3*/
	/*   %9 = fadd float %8, %4*/
	if ((cur_state == LEGUP_F_main_BB__3_7)) begin
		main_altfp_add_32_0_op1 = main_3_4_reg;
	end
	/* main: %16*/
	/*   %24 = fadd float %17, %23*/
	else /* if ((cur_state == LEGUP_F_main_BB__16_88)) */ begin
		main_altfp_add_32_0_op1 = main_16_23;
	end
end
always @(*) begin
	altfp_main_3_9_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_add_32_0 = altfp_adder_main_3_9_out;
end
always @(*) begin
	/* main: %11*/
	/*   %12 = fdiv float %9, 0x3FF3333340000000*/
	if ((cur_state == LEGUP_F_main_BB__11_22)) begin
		main_altfp_divide_32_0_op0 = main_3_9_reg;
	end
	/* main: %26*/
	/*   %27 = fdiv float %24, 0x3FF3333340000000*/
	else if ((cur_state == LEGUP_F_main_BB__26_103)) begin
		main_altfp_divide_32_0_op0 = main_16_24_reg;
	end
	/* main: %34*/
	/*   %42 = fdiv float %39, %41, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !11, !legup.pipeline.stage !7
	start_time: 16 avail_time: 49 stage: 0 II: 49 start_ii_state = 16 % 49 = 16 avail_ii_state = 49 % 49 = 0*/
	else /* if (((loop2_1_ii_state == 6'd16) & loop2_1_valid_bit_16)) */ begin
		main_altfp_divide_32_0_op0 = main_34_39;
	end
end
always @(*) begin
	/* main: %11*/
	/*   %12 = fdiv float %9, 0x3FF3333340000000*/
	if ((cur_state == LEGUP_F_main_BB__11_22)) begin
		main_altfp_divide_32_0_op1 = 32'h3F99999A;
	end
	/* main: %26*/
	/*   %27 = fdiv float %24, 0x3FF3333340000000*/
	else if ((cur_state == LEGUP_F_main_BB__26_103)) begin
		main_altfp_divide_32_0_op1 = 32'h3F99999A;
	end
	/* main: %34*/
	/*   %42 = fdiv float %39, %41, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !11, !legup.pipeline.stage !7
	start_time: 16 avail_time: 49 stage: 0 II: 49 start_ii_state = 16 % 49 = 16 avail_ii_state = 49 % 49 = 0*/
	else /* if (((loop2_1_ii_state == 6'd16) & loop2_1_valid_bit_16)) */ begin
		main_altfp_divide_32_0_op1 = main_34_41_reg_stage0;
	end
end
always @(*) begin
	altfp_main_11_12_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_divide_32_0 = altfp_divider_main_11_12_out;
end
always @(*) begin
	/* main: %16*/
	/*   %23 = fmul float %22, %22*/
	if ((cur_state == LEGUP_F_main_BB__16_77)) begin
		main_altfp_multiply_32_0_op0 = main_16_22;
	end
	/* main: %26*/
	/*   %28 = fmul float %27, %27*/
	else if ((cur_state == LEGUP_F_main_BB__26_136)) begin
		main_altfp_multiply_32_0_op0 = main_26_27;
	end
	/* main: %34*/
	/*   %41 = fmul float %40, 0x3FF70A3D80000000, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 12 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 12 % 49 = 12*/
	else /* if (((loop2_1_ii_state == 6'd1) & loop2_1_valid_bit_1)) */ begin
		main_altfp_multiply_32_0_op0 = main_34_40;
	end
end
always @(*) begin
	/* main: %16*/
	/*   %23 = fmul float %22, %22*/
	if ((cur_state == LEGUP_F_main_BB__16_77)) begin
		main_altfp_multiply_32_0_op1 = main_16_22;
	end
	/* main: %26*/
	/*   %28 = fmul float %27, %27*/
	else if ((cur_state == LEGUP_F_main_BB__26_136)) begin
		main_altfp_multiply_32_0_op1 = main_26_27;
	end
	/* main: %34*/
	/*   %41 = fmul float %40, 0x3FF70A3D80000000, !legup.pipeline.start_time !6, !legup.pipeline.avail_time !10, !legup.pipeline.stage !7
	start_time: 1 avail_time: 12 stage: 0 II: 49 start_ii_state = 1 % 49 = 1 avail_ii_state = 12 % 49 = 12*/
	else /* if (((loop2_1_ii_state == 6'd1) & loop2_1_valid_bit_1)) */ begin
		main_altfp_multiply_32_0_op1 = 32'h3FB851EC;
	end
end
always @(*) begin
	altfp_main_16_23_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	main_altfp_multiply_32_0 = altfp_multiplier_main_16_23_out;
end
always @(*) begin
	lpm_mult_main_3_6_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %6 = mul i32 %5, 50*/
	if ((lpm_mult_main_3_6_en == 1'd1)) begin
		main_3_6_stage0_reg <= (main_3_5_reg * 32'd50);
	end
end
always @(*) begin
	lpm_mult_main_16_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %16*/
	/*   %19 = mul i32 %18, 50*/
	if ((lpm_mult_main_16_19_en == 1'd1)) begin
		main_16_19_stage0_reg <= (main_16_18_reg * 32'd50);
	end
end
always @(*) begin
	altfp_main_16_22_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_16_24_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_26_27_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_26_28_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_26_29_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_mult_main_preheader1_33_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %.preheader1*/
	/*   %33 = mul i32 %32, 50*/
	if ((lpm_mult_main_preheader1_33_en == 1'd1)) begin
		main_preheader1_33_stage0_reg <= (main_preheader1_32_reg * 32'd50);
	end
end
always @(*) begin
	altfp_main_34_41_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	altfp_main_34_42_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %.loopexit*/
	/*   ret i32 50*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_156)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %.loopexit*/
	/*   ret i32 50*/
	if ((cur_state == LEGUP_F_main_BB_loopexit_156)) begin
		return_val <= 32'd50;
		if (start == 1'b0 && ^(32'd50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/legup/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/leandro/legup/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/legup/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);


// Local Rams



initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
