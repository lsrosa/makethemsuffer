//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  4 15:32:40 2018
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 25 16:54:31 2018
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 3
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @a = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22,...
`define TAG_g_a `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_a_a {`TAG_g_a, 23'd0}
// @c = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22,...
`define TAG_g_c `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_c_a {`TAG_g_c, 23'd0}
// @d = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22,...
`define TAG_g_d `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_d_a {`TAG_g_d, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] a_address_a;
reg [6:0] a_address_b;
reg a_write_enable_a;
reg a_write_enable_b;
reg [63:0] a_in_a;
reg [63:0] a_in_b;
wire [63:0] a_out_a;
wire [63:0] a_out_b;

// @a = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22,...
ram_dual_port a (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( a_address_a ),
	.address_b( a_address_b ),
	.wren_a( a_write_enable_a ),
	.wren_b( a_write_enable_b ),
	.data_a( a_in_a ),
	.data_b( a_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( a_out_a ),
	.q_b( a_out_b)
);
defparam a.width_a = 64;
defparam a.width_b = 64;
defparam a.widthad_a = 7;
defparam a.widthad_b = 7;
defparam a.width_be_a = 1;
defparam a.width_be_b = 1;
defparam a.numwords_a = 100;
defparam a.numwords_b = 100;
defparam a.latency = ram_latency;
defparam a.init_file = "a.mif";

reg [6:0] c_address_a;
reg [6:0] c_address_b;
reg c_write_enable_a;
reg c_write_enable_b;
reg [63:0] c_in_a;
reg [63:0] c_in_b;
wire [63:0] c_out_a;
wire [63:0] c_out_b;

// @c = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22,...
ram_dual_port c (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( c_address_a ),
	.address_b( c_address_b ),
	.wren_a( c_write_enable_a ),
	.wren_b( c_write_enable_b ),
	.data_a( c_in_a ),
	.data_b( c_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( c_out_a ),
	.q_b( c_out_b)
);
defparam c.width_a = 64;
defparam c.width_b = 64;
defparam c.widthad_a = 7;
defparam c.widthad_b = 7;
defparam c.width_be_a = 1;
defparam c.width_be_b = 1;
defparam c.numwords_a = 100;
defparam c.numwords_b = 100;
defparam c.latency = ram_latency;
defparam c.init_file = "c.mif";

reg [6:0] d_address_a;
reg [6:0] d_address_b;
reg d_write_enable_a;
reg d_write_enable_b;
reg [63:0] d_in_a;
reg [63:0] d_in_b;
wire [63:0] d_out_a;
wire [63:0] d_out_b;

// @d = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22,...
ram_dual_port d (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( d_address_a ),
	.address_b( d_address_b ),
	.wren_a( d_write_enable_a ),
	.wren_b( d_write_enable_b ),
	.data_a( d_in_a ),
	.data_b( d_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( d_out_a ),
	.q_b( d_out_b)
);
defparam d.width_a = 64;
defparam d.width_b = 64;
defparam d.widthad_a = 7;
defparam d.widthad_b = 7;
defparam d.width_be_a = 1;
defparam d.width_be_b = 1;
defparam d.numwords_a = 100;
defparam d.numwords_b = 100;
defparam d.latency = ram_latency;
defparam d.init_file = "d.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_a_a;
assign select_a_a = (tag_a == `TAG_g_a);
reg [ram_latency:0] select_a_reg_a;
wire [63:0] memory_controller_a_out_a;
assign memory_controller_a_out_a = {64{ select_a_reg_a[ram_latency]}} & a_out_a;

wire select_c_a;
assign select_c_a = (tag_a == `TAG_g_c);
reg [ram_latency:0] select_c_reg_a;
wire [63:0] memory_controller_c_out_a;
assign memory_controller_c_out_a = {64{ select_c_reg_a[ram_latency]}} & c_out_a;

wire select_d_a;
assign select_d_a = (tag_a == `TAG_g_d);
reg [ram_latency:0] select_d_reg_a;
wire [63:0] memory_controller_d_out_a;
assign memory_controller_d_out_a = {64{ select_d_reg_a[ram_latency]}} & d_out_a;

always @(*)
begin
	a_address_a = memory_controller_address_a [7-1+3:3] & {7{select_a_a}};
	a_write_enable_a = memory_controller_write_enable_a & select_a_a;
	a_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	c_address_a = memory_controller_address_a [7-1+3:3] & {7{select_c_a}};
	c_write_enable_a = memory_controller_write_enable_a & select_c_a;
	c_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	d_address_a = memory_controller_address_a [7-1+3:3] & {7{select_d_a}};
	d_write_enable_a = memory_controller_write_enable_a & select_d_a;
	d_in_a [64-1:0] = memory_controller_in_a[64-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {3{select_a_reg_a[ram_latency]}} | {3{select_c_reg_a[ram_latency]}} | {3{select_d_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_a_out_a | memory_controller_c_out_a | memory_controller_d_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_a_reg_a[j+1] <= select_a_reg_a[j];
select_c_reg_a[j+1] <= select_c_reg_a[j];
select_d_reg_a[j+1] <= select_d_reg_a[j];
end
always @(*)
begin
select_a_reg_a[0] <= select_a_a;
select_c_reg_a[0] <= select_c_a;
select_d_reg_a[0] <= select_d_a;
end

reg [2:0] select_not_struct_b;

wire select_a_b;
assign select_a_b = (tag_b == `TAG_g_a);
reg [ram_latency:0] select_a_reg_b;
wire [63:0] memory_controller_a_out_b;
assign memory_controller_a_out_b = {64{ select_a_reg_b[ram_latency]}} & a_out_b;

wire select_c_b;
assign select_c_b = (tag_b == `TAG_g_c);
reg [ram_latency:0] select_c_reg_b;
wire [63:0] memory_controller_c_out_b;
assign memory_controller_c_out_b = {64{ select_c_reg_b[ram_latency]}} & c_out_b;

wire select_d_b;
assign select_d_b = (tag_b == `TAG_g_d);
reg [ram_latency:0] select_d_reg_b;
wire [63:0] memory_controller_d_out_b;
assign memory_controller_d_out_b = {64{ select_d_reg_b[ram_latency]}} & d_out_b;

always @(*)
begin
	a_address_b = memory_controller_address_b [7-1+3:3] & {7{select_a_b}};
	a_write_enable_b = memory_controller_write_enable_b & select_a_b;
	a_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	c_address_b = memory_controller_address_b [7-1+3:3] & {7{select_c_b}};
	c_write_enable_b = memory_controller_write_enable_b & select_c_b;
	c_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	d_address_b = memory_controller_address_b [7-1+3:3] & {7{select_d_b}};
	d_write_enable_b = memory_controller_write_enable_b & select_d_b;
	d_in_b [64-1:0] = memory_controller_in_b[64-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {3{select_a_reg_b[ram_latency]}} | {3{select_c_reg_b[ram_latency]}} | {3{select_d_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_a_out_b | memory_controller_c_out_b | memory_controller_d_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_a_reg_b[j+1] <= select_a_reg_b[j];
select_c_reg_b[j+1] <= select_c_reg_b[j];
select_d_reg_b[j+1] <= select_d_reg_b[j];
end
always @(*)
begin
select_a_reg_b[0] <= select_a_b;
select_c_reg_b[0] <= select_c_b;
select_d_reg_b[0] <= select_d_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_loop_pipeline_wait_loop_1_1 = 3'd1;
parameter [2:0] LEGUP_F_main_BB__18_2 = 3'd2;
parameter [2:0] LEGUP_F_main_BB__18_3 = 3'd3;
parameter [2:0] LEGUP_F_main_BB__18_4 = 3'd4;
parameter [2:0] LEGUP_F_main_BB__22_5 = 3'd5;
parameter [2:0] LEGUP_F_main_BB__24_6 = 3'd6;
parameter [2:0] LEGUP_F_main_BB__26_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [31:0] main_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2;
reg [31:0] main_1_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3;
reg [31:0] main_1_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4;
reg [31:0] main_1_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7;
reg [63:0] main_1_7;
reg [63:0] main_1_8;
reg [63:0] main_1_9;
reg [63:0] main_1_10;
reg [63:0] main_1_11;
reg [63:0] main_1_12;
reg [63:0] main_1_13;
reg [63:0] main_1_14;
reg [63:0] main_1_15;
reg [63:0] main_1_16;
reg [63:0] main_18_19;
reg [63:0] main_18_19_reg;
reg  main_18_21;
reg [31:0] main_26_27;
reg  loop_1_pipeline_start;
reg  loop_1_started;
reg [1:0] loop_1_ii_state;
reg [31:0] loop_1_i_stage0;
reg  loop_1_epilogue;
reg  loop_1_valid_bit_0;
reg  loop_1_valid_bit_1;
reg  loop_1_valid_bit_2;
reg  loop_1_valid_bit_3;
reg  loop_1_valid_bit_4;
reg  loop_1_valid_bit_5;
reg  loop_1_valid_bit_6;
reg  loop_1_valid_bit_7;
reg  loop_1_valid_bit_8;
reg  loop_1_valid_bit_9;
reg  loop_1_valid_bit_10;
reg  loop_1_valid_bit_11;
reg  loop_1_valid_bit_12;
reg  loop_1_valid_bit_13;
reg  loop_1_valid_bit_14;
reg  loop_1_valid_bit_15;
reg  loop_1_valid_bit_16;
reg  loop_1_valid_bit_17;
reg  loop_1_valid_bit_18;
reg  loop_1_valid_bit_19;
reg  loop_1_valid_bit_20;
reg  loop_1_valid_bit_21;
reg  loop_1_valid_bit_22;
reg  loop_1_valid_bit_23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage4;
reg [31:0] main_1_5_reg_stage0;
reg [31:0] main_1_5_reg_stage1;
reg [31:0] main_1_5_reg_stage2;
reg [31:0] main_1_5_reg_stage3;
reg [31:0] main_1_5_reg_stage4;
reg [31:0] main_1_5_reg_stage5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6_reg_stage5;
reg [63:0] main_1_9_reg_stage5;
reg [63:0] main_1_15_reg_stage5;
reg [63:0] main_1_16_reg_stage1;
reg [63:0] main_1_16_reg_stage2;
reg [63:0] main_1_16_reg_stage3;
reg [63:0] main_1_16_reg_stage4;
reg [63:0] main_1_16_reg_stage5;
reg  loop_1_pipeline_exit_cond;
reg  loop_1_pipeline_finish;
reg  lpm_mult_main_1_9_en;
reg [63:0] main_1_9_stage0_reg;
reg [63:0] main_1_9_stage1_reg;
reg [63:0] main_1_9_stage2_reg;
reg [63:0] main_1_9_stage3_reg;
reg [63:0] main_1_9_stage4_reg;
reg [63:0] main_1_9_stage5_reg;
reg [63:0] main_1_9_stage6_reg;
reg [63:0] main_1_9_stage7_reg;
reg [63:0] main_1_9_stage8_reg;
reg [63:0] main_1_9_stage9_reg;
reg [63:0] main_1_9_stage10_reg;
reg [63:0] main_1_9_stage11_reg;
reg [63:0] main_1_9_stage12_reg;
reg [63:0] main_1_9_stage13_reg;
reg [63:0] main_1_9_stage14_reg;
reg [63:0] main_1_9_stage15_reg;
reg [63:0] main_1_9_stage16_reg;
reg [63:0] main_1_9_stage17_reg;
reg  lpm_mult_main_1_12_en;
reg [63:0] main_1_12_stage0_reg;
reg [63:0] main_1_12_stage1_reg;
reg [63:0] main_1_12_stage2_reg;
reg [63:0] main_1_12_stage3_reg;
reg [63:0] main_1_12_stage4_reg;
reg [63:0] main_1_12_stage5_reg;
reg [63:0] main_1_12_stage6_reg;
reg [63:0] main_1_12_stage7_reg;
reg [63:0] main_1_12_stage8_reg;
reg [63:0] main_1_12_stage9_reg;
reg [63:0] main_1_12_stage10_reg;
reg [63:0] main_1_12_stage11_reg;
reg [63:0] main_1_12_stage12_reg;
reg [63:0] main_1_12_stage13_reg;
reg [63:0] main_1_12_stage14_reg;
reg [63:0] main_1_12_stage15_reg;
reg [63:0] main_1_12_stage16_reg;
reg [63:0] main_1_12_stage17_reg;


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %1*/
	/*   %17 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0), i32 %5, i64 %16) #2, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !16, !legup.pipeline.stage !12
	start_time: 23 avail_time: 23 stage: 5 II: 4 start_ii_state = 23 % 4 = 3 avail_ii_state = 23 % 4 = 3*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_23)) begin
		$write("d[%d] = %d\n", $signed(main_1_5_reg_stage5), $signed(main_1_16_reg_stage5));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_5_reg_stage5) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_16_reg_stage5) === 1'bX) finish <= 0;
	end
	/* main: %18*/
	/*   %20 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str2, i32 0, i32 0), i64 %19) #2*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		$write("sum = %d\n", $signed(main_18_19));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_18_19) === 1'bX) finish <= 0;
	end
	/* main: %22*/
	/*   %23 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @.str3, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__22_5)) begin
		$write("PASSED\n");
	end
	/* main: %24*/
	/*   %25 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @.str4, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__24_6)) begin
		$write("FAILED\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_loop_pipeline_wait_loop_1_1;
LEGUP_F_main_BB__18_2:
		next_state = LEGUP_F_main_BB__18_3;
LEGUP_F_main_BB__18_3:
		next_state = LEGUP_F_main_BB__18_4;
LEGUP_F_main_BB__18_4:
	if ((main_18_21 == 1'd1))
		next_state = LEGUP_F_main_BB__22_5;
	else if ((main_18_21 == 1'd0))
		next_state = LEGUP_F_main_BB__24_6;
LEGUP_F_main_BB__22_5:
		next_state = LEGUP_F_main_BB__26_7;
LEGUP_F_main_BB__24_6:
		next_state = LEGUP_F_main_BB__26_7;
LEGUP_F_main_BB__26_7:
		next_state = LEGUP_0;
LEGUP_loop_pipeline_wait_loop_1_1:
	if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__18_2;
	else if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__18_2;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [100 x i64]* @c, i32 0, i32 %i.01, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep = (`TAG_g_c_a + (8 * loop_1_i_stage0));
end
always @(*) begin
	/* main: %1*/
	/*   %2 = add i32 %i.01, 7, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 1 % 4 = 1*/
		main_1_2 = (loop_1_i_stage0 + 32'd7);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [100 x i64]* @c, i32 0, i32 %2, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 1 % 4 = 1*/
		main_1_scevgep2 = (`TAG_g_c_a + (8 * main_1_2));
end
always @(*) begin
	/* main: %1*/
	/*   %3 = add i32 %i.01, 4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 1 % 4 = 1*/
		main_1_3 = (loop_1_i_stage0 + 32'd4);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [100 x i64]* @d, i32 0, i32 %3, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 1 % 4 = 1*/
		main_1_scevgep3 = (`TAG_g_d_a + (8 * main_1_3));
end
always @(*) begin
	/* main: %1*/
	/*   %4 = add i32 %i.01, 6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_4 = (loop_1_i_stage0 + 32'd6);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep4 = getelementptr [100 x i64]* @c, i32 0, i32 %4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep4 = (`TAG_g_c_a + (8 * main_1_4));
end
always @(*) begin
	/* main: %1*/
	/*   %5 = add i32 %i.01, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_5 = (loop_1_i_stage0 + 32'd1);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [100 x i64]* @d, i32 0, i32 %5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep5 = (`TAG_g_d_a + (8 * main_1_5));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep6 = getelementptr [100 x i64]* @c, i32 0, i32 %5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep6 = (`TAG_g_c_a + (8 * main_1_5));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep7 = getelementptr [100 x i64]* @a, i32 0, i32 %5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 0 % 4 = 0*/
		main_1_scevgep7 = (`TAG_g_a_a + (8 * main_1_5));
end
always @(*) begin
	/* main: %1*/
	/*   %7 = load volatile i64* %scevgep7, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
		main_1_7 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %8 = load volatile i64* %scevgep4, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
		main_1_8 = memory_controller_out_b[63:0];
end
always @(*) begin
	main_1_9 = main_1_9_stage17_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %10 = load volatile i64* %scevgep3, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
		main_1_10 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %11 = load volatile i64* %scevgep2, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
		main_1_11 = memory_controller_out_b[63:0];
end
always @(*) begin
	main_1_12 = main_1_12_stage17_reg;
end
always @(*) begin
	/* main: %1*/
	/*   %13 = add nsw i64 %12, %9, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !11, !legup.pipeline.stage !12
	start_time: 21 avail_time: 21 stage: 5 II: 4 start_ii_state = 21 % 4 = 1 avail_ii_state = 21 % 4 = 1*/
		main_1_13 = (main_1_12 + main_1_9_reg_stage5);
end
always @(*) begin
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep, align 8, !tbaa !4, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !11, !legup.pipeline.stage !14
	start_time: 19 avail_time: 21 stage: 4 II: 4 start_ii_state = 19 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
		main_1_14 = memory_controller_out_b[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %15 = add nsw i64 %13, %14, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !11, !legup.pipeline.stage !12
	start_time: 21 avail_time: 21 stage: 5 II: 4 start_ii_state = 21 % 4 = 1 avail_ii_state = 21 % 4 = 1*/
		main_1_15 = (main_1_13 + main_1_14);
end
always @(*) begin
	/* main: %1*/
	/*   %16 = load volatile i64* %scevgep5, align 8, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !14, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 4 % 4 = 0*/
		main_1_16 = memory_controller_out_b[63:0];
end
always @(*) begin
	/* main: %18*/
	/*   %19 = load volatile i64* getelementptr inbounds ([100 x i64]* @d, i32 0, i32 90), align 8, !tbaa !4*/
		main_18_19 = memory_controller_out_a[63:0];
end
always @(posedge clk) begin
	/* main: %18*/
	/*   %19 = load volatile i64* getelementptr inbounds ([100 x i64]* @d, i32 0, i32 90), align 8, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__18_4)) begin
		main_18_19_reg <= main_18_19;
		if (start == 1'b0 && ^(main_18_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_18_19_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %18*/
	/*   %21 = icmp eq i64 %19, 91*/
		main_18_21 = (main_18_19 == 64'd91);
end
always @(*) begin
	/* main: %26*/
	/*   %27 = trunc i64 %19 to i32*/
		main_26_27 = main_18_19_reg[31:0];
end
always @(*) begin
	loop_1_pipeline_start = 1'd0;
	if (reset) begin
		loop_1_pipeline_start = 1'd0;
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		loop_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_22) & loop_1_valid_bit_23)))) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_ii_state <= 2'd0;
		if (start == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_ii_state <= 2'd0;
		if (start == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd0))) begin
		loop_1_ii_state <= 2'd1;
		if (start == 1'b0 && ^(2'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd1))) begin
		loop_1_ii_state <= 2'd2;
		if (start == 1'b0 && ^(2'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd2))) begin
		loop_1_ii_state <= 2'd3;
		if (start == 1'b0 && ^(2'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd3))) begin
		loop_1_ii_state <= 2'd0;
		if (start == 1'b0 && ^(2'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 2'd3)) & loop_1_valid_bit_3))) begin
		loop_1_i_stage0 <= (loop_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 2'd0) & loop_1_pipeline_exit_cond)))) begin
		loop_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_22) & loop_1_valid_bit_23)))) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 2'd0) & loop_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 2'd0) & loop_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_1 <= loop_1_valid_bit_0;
		if (start == 1'b0 && ^(loop_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_2 <= loop_1_valid_bit_1;
		if (start == 1'b0 && ^(loop_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_3 <= loop_1_valid_bit_2;
		if (start == 1'b0 && ^(loop_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_4 <= loop_1_valid_bit_3;
		if (start == 1'b0 && ^(loop_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_5 <= loop_1_valid_bit_4;
		if (start == 1'b0 && ^(loop_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_6 <= loop_1_valid_bit_5;
		if (start == 1'b0 && ^(loop_1_valid_bit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_6"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_6 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_6"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_7 <= loop_1_valid_bit_6;
		if (start == 1'b0 && ^(loop_1_valid_bit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_7"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_7 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_7"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_8 <= loop_1_valid_bit_7;
		if (start == 1'b0 && ^(loop_1_valid_bit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_8"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_8 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_8"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_9 <= loop_1_valid_bit_8;
		if (start == 1'b0 && ^(loop_1_valid_bit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_9"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_9 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_9"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_10 <= loop_1_valid_bit_9;
		if (start == 1'b0 && ^(loop_1_valid_bit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_10"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_10 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_10"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_11 <= loop_1_valid_bit_10;
		if (start == 1'b0 && ^(loop_1_valid_bit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_11"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_11 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_11"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_12 <= loop_1_valid_bit_11;
		if (start == 1'b0 && ^(loop_1_valid_bit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_12"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_12 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_12"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_13 <= loop_1_valid_bit_12;
		if (start == 1'b0 && ^(loop_1_valid_bit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_13"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_13 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_13"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_14 <= loop_1_valid_bit_13;
		if (start == 1'b0 && ^(loop_1_valid_bit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_14"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_14 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_14"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_15 <= loop_1_valid_bit_14;
		if (start == 1'b0 && ^(loop_1_valid_bit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_15"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_15 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_15"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_16 <= loop_1_valid_bit_15;
		if (start == 1'b0 && ^(loop_1_valid_bit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_16"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_16 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_16"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_17 <= loop_1_valid_bit_16;
		if (start == 1'b0 && ^(loop_1_valid_bit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_17"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_17 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_17"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_18 <= loop_1_valid_bit_17;
		if (start == 1'b0 && ^(loop_1_valid_bit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_18"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_18 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_18"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_19 <= loop_1_valid_bit_18;
		if (start == 1'b0 && ^(loop_1_valid_bit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_19"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_19 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_19"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_20 <= loop_1_valid_bit_19;
		if (start == 1'b0 && ^(loop_1_valid_bit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_20"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_20 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_20"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_21 <= loop_1_valid_bit_20;
		if (start == 1'b0 && ^(loop_1_valid_bit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_21"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_21 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_21"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_22 <= loop_1_valid_bit_21;
		if (start == 1'b0 && ^(loop_1_valid_bit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_22"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_22 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_22"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_23 <= loop_1_valid_bit_22;
		if (start == 1'b0 && ^(loop_1_valid_bit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_23"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_23 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_23"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep_reg_stage0 <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_scevgep_reg_stage1 <= main_1_scevgep_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_scevgep_reg_stage2 <= main_1_scevgep_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_scevgep_reg_stage3 <= main_1_scevgep_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_scevgep_reg_stage4 <= main_1_scevgep_reg_stage3;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_5_reg_stage0 <= main_1_5;
		if (start == 1'b0 && ^(main_1_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_5_reg_stage1 <= main_1_5_reg_stage0;
		if (start == 1'b0 && ^(main_1_5_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_5_reg_stage2 <= main_1_5_reg_stage1;
		if (start == 1'b0 && ^(main_1_5_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_5_reg_stage3 <= main_1_5_reg_stage2;
		if (start == 1'b0 && ^(main_1_5_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_5_reg_stage4 <= main_1_5_reg_stage3;
		if (start == 1'b0 && ^(main_1_5_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_19))) begin
		main_1_5_reg_stage5 <= main_1_5_reg_stage4;
		if (start == 1'b0 && ^(main_1_5_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_5_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep5_reg_stage0 <= main_1_scevgep5;
		if (start == 1'b0 && ^(main_1_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep5_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep6_reg_stage0 <= main_1_scevgep6;
		if (start == 1'b0 && ^(main_1_scevgep6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_3))) begin
		main_1_scevgep6_reg_stage1 <= main_1_scevgep6_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep6_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_scevgep6_reg_stage2 <= main_1_scevgep6_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep6_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_scevgep6_reg_stage3 <= main_1_scevgep6_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep6_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_scevgep6_reg_stage4 <= main_1_scevgep6_reg_stage3;
		if (start == 1'b0 && ^(main_1_scevgep6_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_19))) begin
		main_1_scevgep6_reg_stage5 <= main_1_scevgep6_reg_stage4;
		if (start == 1'b0 && ^(main_1_scevgep6_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep6_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_20))) begin
		main_1_9_reg_stage5 <= main_1_9;
		if (start == 1'b0 && ^(main_1_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_9_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd1) & loop_1_valid_bit_21))) begin
		main_1_15_reg_stage5 <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd0) & loop_1_valid_bit_4))) begin
		main_1_16_reg_stage1 <= main_1_16;
		if (start == 1'b0 && ^(main_1_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_7))) begin
		main_1_16_reg_stage2 <= main_1_16_reg_stage1;
		if (start == 1'b0 && ^(main_1_16_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_11))) begin
		main_1_16_reg_stage3 <= main_1_16_reg_stage2;
		if (start == 1'b0 && ^(main_1_16_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_15))) begin
		main_1_16_reg_stage4 <= main_1_16_reg_stage3;
		if (start == 1'b0 && ^(main_1_16_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 2'd3) & loop_1_valid_bit_19))) begin
		main_1_16_reg_stage5 <= main_1_16_reg_stage4;
		if (start == 1'b0 && ^(main_1_16_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_16_reg_stage5"); $finish; end
	end
end
always @(*) begin
	loop_1_pipeline_exit_cond = (loop_1_i_stage0 == 89);
end
always @(*) begin
	loop_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_22) & loop_1_valid_bit_23)));
end
always @(*) begin
	lpm_mult_main_1_9_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage0_reg <= (main_1_8 * main_1_7);
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage1_reg <= main_1_9_stage0_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage2_reg <= main_1_9_stage1_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage3_reg <= main_1_9_stage2_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage4_reg <= main_1_9_stage3_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage5_reg <= main_1_9_stage4_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage6_reg <= main_1_9_stage5_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage7_reg <= main_1_9_stage6_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage8_reg <= main_1_9_stage7_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage9_reg <= main_1_9_stage8_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage10_reg <= main_1_9_stage9_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage11_reg <= main_1_9_stage10_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage12_reg <= main_1_9_stage11_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage13_reg <= main_1_9_stage12_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage14_reg <= main_1_9_stage13_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage15_reg <= main_1_9_stage14_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage16_reg <= main_1_9_stage15_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %9 = mul nsw i64 %8, %7, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 20 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 20 % 4 = 0*/
	if ((lpm_mult_main_1_9_en == 1'd1)) begin
		main_1_9_stage17_reg <= main_1_9_stage16_reg;
	end
end
always @(*) begin
	lpm_mult_main_1_12_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage0_reg <= (main_1_11 * main_1_10);
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage1_reg <= main_1_12_stage0_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage2_reg <= main_1_12_stage1_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage3_reg <= main_1_12_stage2_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage4_reg <= main_1_12_stage3_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage5_reg <= main_1_12_stage4_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage6_reg <= main_1_12_stage5_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage7_reg <= main_1_12_stage6_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage8_reg <= main_1_12_stage7_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage9_reg <= main_1_12_stage8_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage10_reg <= main_1_12_stage9_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage11_reg <= main_1_12_stage10_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage12_reg <= main_1_12_stage11_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage13_reg <= main_1_12_stage12_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage14_reg <= main_1_12_stage13_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage15_reg <= main_1_12_stage14_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage16_reg <= main_1_12_stage15_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %12 = mul nsw i64 %11, %10, !legup.pipeline.start_time !10, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 21 stage: 0 II: 4 start_ii_state = 3 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if ((lpm_mult_main_1_12_en == 1'd1)) begin
		main_1_12_stage17_reg <= main_1_12_stage16_reg;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %26*/
	/*   ret i32 %27*/
	if ((cur_state == LEGUP_F_main_BB__26_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %7 = load volatile i64* %scevgep7, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %10 = load volatile i64* %scevgep3, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   store volatile i64 %15, i64* %scevgep6, align 8, !tbaa !4, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !12
	start_time: 22 avail_time: 23 stage: 5 II: 4 start_ii_state = 22 % 4 = 2 avail_ii_state = 23 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_22)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   %19 = load volatile i64* getelementptr inbounds ([100 x i64]* @d, i32 0, i32 90), align 8, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__18_2)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %1*/
	/*   %7 = load volatile i64* %scevgep7, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		memory_controller_address_a = main_1_scevgep7;
	end
	/* main: %1*/
	/*   %10 = load volatile i64* %scevgep3, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		memory_controller_address_a = main_1_scevgep3;
	end
	/* main: %1*/
	/*   store volatile i64 %15, i64* %scevgep6, align 8, !tbaa !4, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !12
	start_time: 22 avail_time: 23 stage: 5 II: 4 start_ii_state = 22 % 4 = 2 avail_ii_state = 23 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_22)) begin
		memory_controller_address_a = main_1_scevgep6_reg_stage5;
	end
	/* main: %18*/
	/*   %19 = load volatile i64* getelementptr inbounds ([100 x i64]* @d, i32 0, i32 90), align 8, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__18_2)) begin
		memory_controller_address_a = (`TAG_g_d_a + (8 * 32'd90));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %7 = load volatile i64* %scevgep7, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %10 = load volatile i64* %scevgep3, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i64 %15, i64* %scevgep6, align 8, !tbaa !4, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !12
	start_time: 22 avail_time: 23 stage: 5 II: 4 start_ii_state = 22 % 4 = 2 avail_ii_state = 23 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_22)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %18*/
	/*   %19 = load volatile i64* getelementptr inbounds ([100 x i64]* @d, i32 0, i32 90), align 8, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__18_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i64 %15, i64* %scevgep6, align 8, !tbaa !4, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !12
	start_time: 22 avail_time: 23 stage: 5 II: 4 start_ii_state = 22 % 4 = 2 avail_ii_state = 23 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_22)) begin
		memory_controller_in_a = main_1_15_reg_stage5;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %1*/
	/*   %7 = load volatile i64* %scevgep7, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %1*/
	/*   %10 = load volatile i64* %scevgep3, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %1*/
	/*   store volatile i64 %15, i64* %scevgep6, align 8, !tbaa !4, !legup.pipeline.start_time !15, !legup.pipeline.avail_time !16, !legup.pipeline.stage !12
	start_time: 22 avail_time: 23 stage: 5 II: 4 start_ii_state = 22 % 4 = 2 avail_ii_state = 23 % 4 = 3*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_22)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %18*/
	/*   %19 = load volatile i64* getelementptr inbounds ([100 x i64]* @d, i32 0, i32 90), align 8, !tbaa !4*/
	if ((cur_state == LEGUP_F_main_BB__18_2)) begin
		memory_controller_size_a = 2'd3;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %8 = load volatile i64* %scevgep4, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %11 = load volatile i64* %scevgep2, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep, align 8, !tbaa !4, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !11, !legup.pipeline.stage !14
	start_time: 19 avail_time: 21 stage: 4 II: 4 start_ii_state = 19 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_19)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %16 = load volatile i64* %scevgep5, align 8, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !14, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %1*/
	/*   %8 = load volatile i64* %scevgep4, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		memory_controller_address_b = main_1_scevgep4;
	end
	/* main: %1*/
	/*   %11 = load volatile i64* %scevgep2, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		memory_controller_address_b = main_1_scevgep2;
	end
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep, align 8, !tbaa !4, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !11, !legup.pipeline.stage !14
	start_time: 19 avail_time: 21 stage: 4 II: 4 start_ii_state = 19 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_19)) begin
		memory_controller_address_b = main_1_scevgep_reg_stage4;
	end
	/* main: %1*/
	/*   %16 = load volatile i64* %scevgep5, align 8, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !14, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2)) begin
		memory_controller_address_b = main_1_scevgep5_reg_stage0;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %8 = load volatile i64* %scevgep4, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %11 = load volatile i64* %scevgep2, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep, align 8, !tbaa !4, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !11, !legup.pipeline.stage !14
	start_time: 19 avail_time: 21 stage: 4 II: 4 start_ii_state = 19 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_19)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %16 = load volatile i64* %scevgep5, align 8, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !14, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %1*/
	/*   %8 = load volatile i64* %scevgep4, align 8, !tbaa !4, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !8, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 4 start_ii_state = 0 % 4 = 0 avail_ii_state = 2 % 4 = 2*/
	if (((loop_1_ii_state == 2'd0) & loop_1_valid_bit_0)) begin
		memory_controller_size_b = 2'd3;
	end
	/* main: %1*/
	/*   %11 = load volatile i64* %scevgep2, align 8, !tbaa !4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !10, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 4 start_ii_state = 1 % 4 = 1 avail_ii_state = 3 % 4 = 3*/
	if (((loop_1_ii_state == 2'd1) & loop_1_valid_bit_1)) begin
		memory_controller_size_b = 2'd3;
	end
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep, align 8, !tbaa !4, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !11, !legup.pipeline.stage !14
	start_time: 19 avail_time: 21 stage: 4 II: 4 start_ii_state = 19 % 4 = 3 avail_ii_state = 21 % 4 = 1*/
	if (((loop_1_ii_state == 2'd3) & loop_1_valid_bit_19)) begin
		memory_controller_size_b = 2'd3;
	end
	/* main: %1*/
	/*   %16 = load volatile i64* %scevgep5, align 8, !tbaa !4, !legup.pipeline.start_time !8, !legup.pipeline.avail_time !14, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 4 start_ii_state = 2 % 4 = 2 avail_ii_state = 4 % 4 = 0*/
	if (((loop_1_ii_state == 2'd2) & loop_1_valid_bit_2)) begin
		memory_controller_size_b = 2'd3;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %26*/
	/*   ret i32 %27*/
	if ((cur_state == LEGUP_F_main_BB__26_7)) begin
		return_val <= main_26_27;
		if (start == 1'b0 && ^(main_26_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
