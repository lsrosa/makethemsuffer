//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Mon Jun  4 15:32:40 2018
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Mon Jun 25 16:59:11 2018
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 5
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @aa = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22...
`define TAG_g_aa `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_aa_a {`TAG_g_aa, 23'd0}
// @bb = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22...
`define TAG_g_bb `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_bb_a {`TAG_g_bb, 23'd0}
// @c = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22,...
`define TAG_g_c `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_c_a {`TAG_g_c, 23'd0}
// @cc = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22...
`define TAG_g_cc `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_cc_a {`TAG_g_cc, 23'd0}
// @dd = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22...
`define TAG_g_dd `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_dd_a {`TAG_g_dd, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [6:0] c_address_a;
reg [6:0] c_address_b;
reg c_write_enable_a;
reg c_write_enable_b;
reg [63:0] c_in_a;
reg [63:0] c_in_b;
wire [63:0] c_out_a;
wire [63:0] c_out_b;

// @c = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22,...
ram_dual_port c (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( c_address_a ),
	.address_b( c_address_b ),
	.wren_a( c_write_enable_a ),
	.wren_b( c_write_enable_b ),
	.data_a( c_in_a ),
	.data_b( c_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( c_out_a ),
	.q_b( c_out_b)
);
defparam c.width_a = 64;
defparam c.width_b = 64;
defparam c.widthad_a = 7;
defparam c.widthad_b = 7;
defparam c.width_be_a = 1;
defparam c.width_be_b = 1;
defparam c.numwords_a = 100;
defparam c.numwords_b = 100;
defparam c.latency = ram_latency;
defparam c.init_file = "c.mif";

reg [6:0] aa_address_a;
reg [6:0] aa_address_b;
reg aa_write_enable_a;
reg aa_write_enable_b;
reg [63:0] aa_in_a;
reg [63:0] aa_in_b;
wire [63:0] aa_out_a;
wire [63:0] aa_out_b;

// @aa = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22...
ram_dual_port aa (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( aa_address_a ),
	.address_b( aa_address_b ),
	.wren_a( aa_write_enable_a ),
	.wren_b( aa_write_enable_b ),
	.data_a( aa_in_a ),
	.data_b( aa_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( aa_out_a ),
	.q_b( aa_out_b)
);
defparam aa.width_a = 64;
defparam aa.width_b = 64;
defparam aa.widthad_a = 7;
defparam aa.widthad_b = 7;
defparam aa.width_be_a = 1;
defparam aa.width_be_b = 1;
defparam aa.numwords_a = 100;
defparam aa.numwords_b = 100;
defparam aa.latency = ram_latency;
defparam aa.init_file = "aa.mif";

reg [6:0] bb_address_a;
reg [6:0] bb_address_b;
reg bb_write_enable_a;
reg bb_write_enable_b;
reg [63:0] bb_in_a;
reg [63:0] bb_in_b;
wire [63:0] bb_out_a;
wire [63:0] bb_out_b;

// @bb = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22...
ram_dual_port bb (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( bb_address_a ),
	.address_b( bb_address_b ),
	.wren_a( bb_write_enable_a ),
	.wren_b( bb_write_enable_b ),
	.data_a( bb_in_a ),
	.data_b( bb_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( bb_out_a ),
	.q_b( bb_out_b)
);
defparam bb.width_a = 64;
defparam bb.width_b = 64;
defparam bb.widthad_a = 7;
defparam bb.widthad_b = 7;
defparam bb.width_be_a = 1;
defparam bb.width_be_b = 1;
defparam bb.numwords_a = 100;
defparam bb.numwords_b = 100;
defparam bb.latency = ram_latency;
defparam bb.init_file = "bb.mif";

reg [6:0] cc_address_a;
reg [6:0] cc_address_b;
reg cc_write_enable_a;
reg cc_write_enable_b;
reg [31:0] cc_in_a;
reg [31:0] cc_in_b;
wire [31:0] cc_out_a;
wire [31:0] cc_out_b;

// @cc = internal global [100 x i32] [i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22...
ram_dual_port cc (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( cc_address_a ),
	.address_b( cc_address_b ),
	.wren_a( cc_write_enable_a ),
	.wren_b( cc_write_enable_b ),
	.data_a( cc_in_a ),
	.data_b( cc_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( cc_out_a ),
	.q_b( cc_out_b)
);
defparam cc.width_a = 32;
defparam cc.width_b = 32;
defparam cc.widthad_a = 7;
defparam cc.widthad_b = 7;
defparam cc.width_be_a = 1;
defparam cc.width_be_b = 1;
defparam cc.numwords_a = 100;
defparam cc.numwords_b = 100;
defparam cc.latency = ram_latency;
defparam cc.init_file = "cc.mif";

reg [6:0] dd_address_a;
reg [6:0] dd_address_b;
reg dd_write_enable_a;
reg dd_write_enable_b;
reg [63:0] dd_in_a;
reg [63:0] dd_in_b;
wire [63:0] dd_out_a;
wire [63:0] dd_out_b;

// @dd = internal global [100 x i64] [i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15, i64 16, i64 17, i64 18, i64 19, i64 20, i64 21, i64 22...
ram_dual_port dd (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dd_address_a ),
	.address_b( dd_address_b ),
	.wren_a( dd_write_enable_a ),
	.wren_b( dd_write_enable_b ),
	.data_a( dd_in_a ),
	.data_b( dd_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dd_out_a ),
	.q_b( dd_out_b)
);
defparam dd.width_a = 64;
defparam dd.width_b = 64;
defparam dd.widthad_a = 7;
defparam dd.widthad_b = 7;
defparam dd.width_be_a = 1;
defparam dd.width_be_b = 1;
defparam dd.numwords_a = 100;
defparam dd.numwords_b = 100;
defparam dd.latency = ram_latency;
defparam dd.init_file = "dd.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_c_a;
assign select_c_a = (tag_a == `TAG_g_c);
reg [ram_latency:0] select_c_reg_a;
wire [63:0] memory_controller_c_out_a;
assign memory_controller_c_out_a = {64{ select_c_reg_a[ram_latency]}} & c_out_a;

wire select_aa_a;
assign select_aa_a = (tag_a == `TAG_g_aa);
reg [ram_latency:0] select_aa_reg_a;
wire [63:0] memory_controller_aa_out_a;
assign memory_controller_aa_out_a = {64{ select_aa_reg_a[ram_latency]}} & aa_out_a;

wire select_bb_a;
assign select_bb_a = (tag_a == `TAG_g_bb);
reg [ram_latency:0] select_bb_reg_a;
wire [63:0] memory_controller_bb_out_a;
assign memory_controller_bb_out_a = {64{ select_bb_reg_a[ram_latency]}} & bb_out_a;

wire select_cc_a;
assign select_cc_a = (tag_a == `TAG_g_cc);
reg [ram_latency:0] select_cc_reg_a;
wire [31:0] memory_controller_cc_out_a;
assign memory_controller_cc_out_a = {32{ select_cc_reg_a[ram_latency]}} & cc_out_a;

wire select_dd_a;
assign select_dd_a = (tag_a == `TAG_g_dd);
reg [ram_latency:0] select_dd_reg_a;
wire [63:0] memory_controller_dd_out_a;
assign memory_controller_dd_out_a = {64{ select_dd_reg_a[ram_latency]}} & dd_out_a;

always @(*)
begin
	c_address_a = memory_controller_address_a [7-1+3:3] & {7{select_c_a}};
	c_write_enable_a = memory_controller_write_enable_a & select_c_a;
	c_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	aa_address_a = memory_controller_address_a [7-1+3:3] & {7{select_aa_a}};
	aa_write_enable_a = memory_controller_write_enable_a & select_aa_a;
	aa_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	bb_address_a = memory_controller_address_a [7-1+3:3] & {7{select_bb_a}};
	bb_write_enable_a = memory_controller_write_enable_a & select_bb_a;
	bb_in_a [64-1:0] = memory_controller_in_a[64-1:0];

	cc_address_a = memory_controller_address_a [7-1+2:2] & {7{select_cc_a}};
	cc_write_enable_a = memory_controller_write_enable_a & select_cc_a;
	cc_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	dd_address_a = memory_controller_address_a [7-1+3:3] & {7{select_dd_a}};
	dd_write_enable_a = memory_controller_write_enable_a & select_dd_a;
	dd_in_a [64-1:0] = memory_controller_in_a[64-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {3{select_c_reg_a[ram_latency]}} | {3{select_aa_reg_a[ram_latency]}} | {3{select_bb_reg_a[ram_latency]}} | {2{select_cc_reg_a[ram_latency]}} | {3{select_dd_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_c_out_a | memory_controller_aa_out_a | memory_controller_bb_out_a | memory_controller_cc_out_a | memory_controller_dd_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_c_reg_a[j+1] <= select_c_reg_a[j];
select_aa_reg_a[j+1] <= select_aa_reg_a[j];
select_bb_reg_a[j+1] <= select_bb_reg_a[j];
select_cc_reg_a[j+1] <= select_cc_reg_a[j];
select_dd_reg_a[j+1] <= select_dd_reg_a[j];
end
always @(*)
begin
select_c_reg_a[0] <= select_c_a;
select_aa_reg_a[0] <= select_aa_a;
select_bb_reg_a[0] <= select_bb_a;
select_cc_reg_a[0] <= select_cc_a;
select_dd_reg_a[0] <= select_dd_a;
end

reg [2:0] select_not_struct_b;

wire select_c_b;
assign select_c_b = (tag_b == `TAG_g_c);
reg [ram_latency:0] select_c_reg_b;
wire [63:0] memory_controller_c_out_b;
assign memory_controller_c_out_b = {64{ select_c_reg_b[ram_latency]}} & c_out_b;

wire select_aa_b;
assign select_aa_b = (tag_b == `TAG_g_aa);
reg [ram_latency:0] select_aa_reg_b;
wire [63:0] memory_controller_aa_out_b;
assign memory_controller_aa_out_b = {64{ select_aa_reg_b[ram_latency]}} & aa_out_b;

wire select_bb_b;
assign select_bb_b = (tag_b == `TAG_g_bb);
reg [ram_latency:0] select_bb_reg_b;
wire [63:0] memory_controller_bb_out_b;
assign memory_controller_bb_out_b = {64{ select_bb_reg_b[ram_latency]}} & bb_out_b;

wire select_cc_b;
assign select_cc_b = (tag_b == `TAG_g_cc);
reg [ram_latency:0] select_cc_reg_b;
wire [31:0] memory_controller_cc_out_b;
assign memory_controller_cc_out_b = {32{ select_cc_reg_b[ram_latency]}} & cc_out_b;

wire select_dd_b;
assign select_dd_b = (tag_b == `TAG_g_dd);
reg [ram_latency:0] select_dd_reg_b;
wire [63:0] memory_controller_dd_out_b;
assign memory_controller_dd_out_b = {64{ select_dd_reg_b[ram_latency]}} & dd_out_b;

always @(*)
begin
	c_address_b = memory_controller_address_b [7-1+3:3] & {7{select_c_b}};
	c_write_enable_b = memory_controller_write_enable_b & select_c_b;
	c_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	aa_address_b = memory_controller_address_b [7-1+3:3] & {7{select_aa_b}};
	aa_write_enable_b = memory_controller_write_enable_b & select_aa_b;
	aa_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	bb_address_b = memory_controller_address_b [7-1+3:3] & {7{select_bb_b}};
	bb_write_enable_b = memory_controller_write_enable_b & select_bb_b;
	bb_in_b [64-1:0] = memory_controller_in_b[64-1:0];

	cc_address_b = memory_controller_address_b [7-1+2:2] & {7{select_cc_b}};
	cc_write_enable_b = memory_controller_write_enable_b & select_cc_b;
	cc_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	dd_address_b = memory_controller_address_b [7-1+3:3] & {7{select_dd_b}};
	dd_write_enable_b = memory_controller_write_enable_b & select_dd_b;
	dd_in_b [64-1:0] = memory_controller_in_b[64-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {3{select_c_reg_b[ram_latency]}} | {3{select_aa_reg_b[ram_latency]}} | {3{select_bb_reg_b[ram_latency]}} | {2{select_cc_reg_b[ram_latency]}} | {3{select_dd_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_c_out_b | memory_controller_aa_out_b | memory_controller_bb_out_b | memory_controller_cc_out_b | memory_controller_dd_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_c_reg_b[j+1] <= select_c_reg_b[j];
select_aa_reg_b[j+1] <= select_aa_reg_b[j];
select_bb_reg_b[j+1] <= select_bb_reg_b[j];
select_cc_reg_b[j+1] <= select_cc_reg_b[j];
select_dd_reg_b[j+1] <= select_dd_reg_b[j];
end
always @(*)
begin
select_c_reg_b[0] <= select_c_b;
select_aa_reg_b[0] <= select_aa_b;
select_bb_reg_b[0] <= select_bb_b;
select_cc_reg_b[0] <= select_cc_b;
select_dd_reg_b[0] <= select_dd_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [2:0] LEGUP_0 = 3'd0;
parameter [2:0] LEGUP_loop_pipeline_wait_loop_1_1 = 3'd1;
parameter [2:0] LEGUP_F_main_BB__59_2 = 3'd2;
parameter [2:0] LEGUP_F_main_BB__59_3 = 3'd3;
parameter [2:0] LEGUP_F_main_BB__59_4 = 3'd4;
parameter [2:0] LEGUP_F_main_BB__64_5 = 3'd5;
parameter [2:0] LEGUP_F_main_BB__66_6 = 3'd6;
parameter [2:0] LEGUP_F_main_BB__68_7 = 3'd7;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [2:0] cur_state;
reg [2:0] next_state;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep;
reg [31:0] main_1_2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2;
reg [31:0] main_1_3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep3;
reg [31:0] main_1_4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5;
reg [31:0] main_1_5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep6;
reg [31:0] main_1_6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep10;
reg [31:0] main_1_7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep11;
reg [63:0] main_1_12;
reg [63:0] main_1_14;
reg [63:0] main_1_15;
reg [63:0] main_1_16;
reg [63:0] main_1_17;
reg [63:0] main_1_18;
reg [63:0] main_1_21;
reg [63:0] main_1_22;
reg [63:0] main_1_23;
reg [63:0] main_1_24;
reg [63:0] main_1_25;
reg [63:0] main_1_26;
reg [63:0] main_1_29;
reg [31:0] main_1_30;
reg [31:0] main_1_31;
reg [63:0] main_1_32;
reg [63:0] main_1_33;
reg [63:0] main_1_34;
reg [63:0] main_1_35;
reg [63:0] main_1_37;
reg [31:0] main_1_38;
reg [31:0] main_1_39;
reg [63:0] main_1_40;
reg [63:0] main_1_41;
reg [63:0] main_1_42;
reg [63:0] main_1_43;
reg [63:0] main_1_45;
reg [31:0] main_1_46;
reg [63:0] main_1_47;
reg [31:0] main_1_48;
reg [31:0] main_1_49;
reg [63:0] main_1_50;
reg [63:0] main_1_51;
reg [63:0] main_1_52;
reg [31:0] main_1_53;
reg [63:0] main_1_54;
reg [63:0] main_1_55;
reg [63:0] main_1_56;
reg [63:0] main_1_57;
reg [31:0] main_1_58;
reg [31:0] main_59_60;
reg [31:0] main_59_60_reg;
reg [63:0] main_59_61;
reg  main_59_63;
reg  loop_1_pipeline_start;
reg  loop_1_started;
reg [2:0] loop_1_ii_state;
reg [31:0] loop_1_i_stage0;
reg  loop_1_epilogue;
reg  loop_1_valid_bit_0;
reg  loop_1_valid_bit_1;
reg  loop_1_valid_bit_2;
reg  loop_1_valid_bit_3;
reg  loop_1_valid_bit_4;
reg  loop_1_valid_bit_5;
reg  loop_1_valid_bit_6;
reg  loop_1_valid_bit_7;
reg  loop_1_valid_bit_8;
reg  loop_1_valid_bit_9;
reg  loop_1_valid_bit_10;
reg  loop_1_valid_bit_11;
reg  loop_1_valid_bit_12;
reg  loop_1_valid_bit_13;
reg  loop_1_valid_bit_14;
reg  loop_1_valid_bit_15;
reg  loop_1_valid_bit_16;
reg  loop_1_valid_bit_17;
reg  loop_1_valid_bit_18;
reg  loop_1_valid_bit_19;
reg  loop_1_valid_bit_20;
reg  loop_1_valid_bit_21;
reg  loop_1_valid_bit_22;
reg  loop_1_valid_bit_23;
reg  loop_1_valid_bit_24;
reg  loop_1_valid_bit_25;
reg  loop_1_valid_bit_26;
reg  loop_1_valid_bit_27;
reg  loop_1_valid_bit_28;
reg  loop_1_valid_bit_29;
reg  loop_1_valid_bit_30;
reg  loop_1_valid_bit_31;
reg  loop_1_valid_bit_32;
reg  loop_1_valid_bit_33;
reg  loop_1_valid_bit_34;
reg  loop_1_valid_bit_35;
reg  loop_1_valid_bit_36;
reg  loop_1_valid_bit_37;
reg  loop_1_valid_bit_38;
reg  loop_1_valid_bit_39;
reg  loop_1_valid_bit_40;
reg  loop_1_valid_bit_41;
reg  loop_1_valid_bit_42;
reg  loop_1_valid_bit_43;
reg  loop_1_valid_bit_44;
reg  loop_1_valid_bit_45;
reg  loop_1_valid_bit_46;
reg  loop_1_valid_bit_47;
reg  loop_1_valid_bit_48;
reg  loop_1_valid_bit_49;
reg  loop_1_valid_bit_50;
reg  loop_1_valid_bit_51;
reg  loop_1_valid_bit_52;
reg  loop_1_valid_bit_53;
reg  loop_1_valid_bit_54;
reg  loop_1_valid_bit_55;
reg  loop_1_valid_bit_56;
reg  loop_1_valid_bit_57;
reg  loop_1_valid_bit_58;
reg  loop_1_valid_bit_59;
reg  loop_1_valid_bit_60;
reg  loop_1_valid_bit_61;
reg  loop_1_valid_bit_62;
reg  loop_1_valid_bit_63;
reg  loop_1_valid_bit_64;
reg  loop_1_valid_bit_65;
reg  loop_1_valid_bit_66;
reg  loop_1_valid_bit_67;
reg  loop_1_valid_bit_68;
reg  loop_1_valid_bit_69;
reg  loop_1_valid_bit_70;
reg  loop_1_valid_bit_71;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep_reg_stage10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep2_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep4_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep5_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage2;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage3;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage4;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage7;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage10;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep7_reg_stage11;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep8_reg_stage0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_1_scevgep9_reg_stage0;
reg [63:0] main_1_12_reg_stage0;
reg [63:0] main_1_12_reg_stage1;
reg [63:0] main_1_12_reg_stage2;
reg [63:0] main_1_12_reg_stage3;
reg [63:0] main_1_12_reg_stage4;
reg [63:0] main_1_12_reg_stage5;
reg [63:0] main_1_12_reg_stage6;
reg [63:0] main_1_12_reg_stage7;
reg [63:0] main_1_12_reg_stage8;
reg [63:0] main_1_12_reg_stage9;
reg [63:0] main_1_12_reg_stage10;
reg [63:0] main_1_12_reg_stage11;
reg [63:0] main_1_15_reg_stage0;
reg [63:0] main_1_15_reg_stage1;
reg [63:0] main_1_15_reg_stage2;
reg [63:0] main_1_15_reg_stage3;
reg [63:0] main_1_15_reg_stage4;
reg [63:0] main_1_15_reg_stage5;
reg [63:0] main_1_15_reg_stage6;
reg [63:0] main_1_15_reg_stage7;
reg [63:0] main_1_15_reg_stage8;
reg [63:0] main_1_15_reg_stage9;
reg [63:0] main_1_15_reg_stage10;
reg [63:0] main_1_15_reg_stage11;
reg [63:0] main_1_17_reg_stage11;
reg [63:0] main_1_21_reg_stage0;
reg [63:0] main_1_21_reg_stage1;
reg [63:0] main_1_21_reg_stage2;
reg [63:0] main_1_21_reg_stage3;
reg [63:0] main_1_21_reg_stage4;
reg [63:0] main_1_21_reg_stage5;
reg [63:0] main_1_21_reg_stage6;
reg [63:0] main_1_21_reg_stage7;
reg [63:0] main_1_21_reg_stage8;
reg [63:0] main_1_21_reg_stage9;
reg [63:0] main_1_21_reg_stage10;
reg [63:0] main_1_21_reg_stage11;
reg [63:0] main_1_23_reg_stage0;
reg [63:0] main_1_23_reg_stage1;
reg [63:0] main_1_23_reg_stage2;
reg [63:0] main_1_23_reg_stage3;
reg [63:0] main_1_23_reg_stage4;
reg [63:0] main_1_23_reg_stage5;
reg [63:0] main_1_23_reg_stage6;
reg [63:0] main_1_23_reg_stage7;
reg [63:0] main_1_23_reg_stage8;
reg [63:0] main_1_23_reg_stage9;
reg [63:0] main_1_23_reg_stage10;
reg [63:0] main_1_23_reg_stage11;
reg [63:0] main_1_29_reg_stage0;
reg [63:0] main_1_29_reg_stage1;
reg [63:0] main_1_29_reg_stage2;
reg [63:0] main_1_29_reg_stage3;
reg [63:0] main_1_29_reg_stage4;
reg [63:0] main_1_29_reg_stage5;
reg [63:0] main_1_29_reg_stage6;
reg [63:0] main_1_29_reg_stage7;
reg [63:0] main_1_29_reg_stage8;
reg [63:0] main_1_29_reg_stage9;
reg [63:0] main_1_29_reg_stage10;
reg [63:0] main_1_29_reg_stage11;
reg [63:0] main_1_32_reg_stage0;
reg [63:0] main_1_32_reg_stage1;
reg [63:0] main_1_32_reg_stage2;
reg [63:0] main_1_32_reg_stage3;
reg [63:0] main_1_32_reg_stage4;
reg [63:0] main_1_32_reg_stage5;
reg [63:0] main_1_32_reg_stage6;
reg [63:0] main_1_32_reg_stage7;
reg [63:0] main_1_32_reg_stage8;
reg [63:0] main_1_32_reg_stage9;
reg [63:0] main_1_32_reg_stage10;
reg [63:0] main_1_32_reg_stage11;
reg [63:0] main_1_34_reg_stage11;
reg [63:0] main_1_37_reg_stage1;
reg [63:0] main_1_37_reg_stage2;
reg [63:0] main_1_37_reg_stage3;
reg [63:0] main_1_37_reg_stage4;
reg [63:0] main_1_37_reg_stage5;
reg [63:0] main_1_37_reg_stage6;
reg [63:0] main_1_37_reg_stage7;
reg [63:0] main_1_37_reg_stage8;
reg [63:0] main_1_37_reg_stage9;
reg [63:0] main_1_37_reg_stage10;
reg [63:0] main_1_37_reg_stage11;
reg [63:0] main_1_40_reg_stage1;
reg [63:0] main_1_40_reg_stage2;
reg [63:0] main_1_40_reg_stage3;
reg [63:0] main_1_40_reg_stage4;
reg [63:0] main_1_40_reg_stage5;
reg [63:0] main_1_40_reg_stage6;
reg [63:0] main_1_40_reg_stage7;
reg [63:0] main_1_40_reg_stage8;
reg [63:0] main_1_40_reg_stage9;
reg [63:0] main_1_40_reg_stage10;
reg [63:0] main_1_40_reg_stage11;
reg [31:0] main_1_48_reg_stage11;
reg [63:0] main_1_51_reg_stage1;
reg [63:0] main_1_51_reg_stage2;
reg [63:0] main_1_51_reg_stage3;
reg [63:0] main_1_51_reg_stage4;
reg [63:0] main_1_51_reg_stage5;
reg [63:0] main_1_51_reg_stage6;
reg [63:0] main_1_51_reg_stage7;
reg [63:0] main_1_51_reg_stage8;
reg [63:0] main_1_51_reg_stage9;
reg [63:0] main_1_51_reg_stage10;
reg [63:0] main_1_51_reg_stage11;
reg [63:0] main_1_55_reg_stage11;
reg [31:0] main_1_58_reg_stage11;
reg  loop_1_pipeline_exit_cond;
reg  loop_1_pipeline_finish;
reg [63:0] main_unsigned_divide_64_0_op0;
reg [63:0] main_unsigned_divide_64_0_op1;
wire [63:0] lpm_divide_main_1_17_temp_out;
wire [63:0] main_1_17_unused;
reg  lpm_divide_main_1_17_en;
reg [63:0] lpm_divide_main_1_17_out;
reg [63:0] main_unsigned_divide_64_0;

/*   %17 = udiv i64 %16, %15, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3*/
lpm_divide lpm_divide_main_1_17 (
	.quotient (lpm_divide_main_1_17_temp_out),
	.remain (main_1_17_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_1_17_en),
	.numer (main_unsigned_divide_64_0_op0),
	.denom (main_unsigned_divide_64_0_op1)
);

defparam
	lpm_divide_main_1_17.lpm_pipeline = 64,
	lpm_divide_main_1_17.lpm_widthn = 64,
	lpm_divide_main_1_17.lpm_widthd = 64,
	lpm_divide_main_1_17.lpm_drepresentation = "UNSIGNED",
	lpm_divide_main_1_17.lpm_nrepresentation = "UNSIGNED",
	lpm_divide_main_1_17.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %1*/
	/*   %8 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str1, i32 0, i32 0)) #2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		$write("test:\n");
	end
	/* main: %1*/
	/*   %9 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str9, i32 0, i32 0), i64 100, i64 3, i64 33) #2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		$write("div = a/b = %d/%d = %d\n", $signed(64'd100), $signed(64'd3), $signed(64'd33));
		// to fix quartus warning
		if (reset == 1'b0 && ^(64'd100) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(64'd3) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(64'd33) === 1'bX) finish <= 0;
	end
	/* main: %1*/
	/*   %10 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([33 x i8]* @.str2, i32 0, i32 0), i64 100, i64 3, i64 33) #2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		$write("test = 100/3 = %d/%d = %d\n", $signed(64'd100), $signed(64'd3), $signed(64'd33));
		// to fix quartus warning
		if (reset == 1'b0 && ^(64'd100) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(64'd3) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(64'd33) === 1'bX) finish <= 0;
	end
	/* main: %1*/
	/*   %11 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str3, i32 0, i32 0)) #2, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		$write("tmp7: ");
	end
	/* main: %1*/
	/*   %19 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str9, i32 0, i32 0), i64 %12, i64 %15, i64 %18) #2, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !10
	start_time: 66 avail_time: 66 stage: 11 II: 6 start_ii_state = 66 % 6 = 0 avail_ii_state = 66 % 6 = 0*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_66)) begin
		$write("div = a/b = %d/%d = %d\n", $signed(main_1_12_reg_stage11), $signed(main_1_15_reg_stage11), $signed(main_1_18));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_12_reg_stage11) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_15_reg_stage11) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_18) === 1'bX) finish <= 0;
	end
	/* main: %1*/
	/*   %20 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str4, i32 0, i32 0)) #2, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !10
	start_time: 66 avail_time: 66 stage: 11 II: 6 start_ii_state = 66 % 6 = 0 avail_ii_state = 66 % 6 = 0*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_66)) begin
		$write("tmp3: ");
	end
	/* main: %1*/
	/*   %27 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str9, i32 0, i32 0), i64 %21, i64 %23, i64 %26) #2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !10
	start_time: 67 avail_time: 67 stage: 11 II: 6 start_ii_state = 67 % 6 = 1 avail_ii_state = 67 % 6 = 1*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_67)) begin
		$write("div = a/b = %d/%d = %d\n", $signed(main_1_21_reg_stage11), $signed(main_1_23_reg_stage11), $signed(main_1_26));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_21_reg_stage11) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_23_reg_stage11) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_26) === 1'bX) finish <= 0;
	end
	/* main: %1*/
	/*   %28 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([7 x i8]* @.str5, i32 0, i32 0)) #2, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !10
	start_time: 67 avail_time: 67 stage: 11 II: 6 start_ii_state = 67 % 6 = 1 avail_ii_state = 67 % 6 = 1*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_67)) begin
		$write("tmp2: ");
	end
	/* main: %1*/
	/*   %36 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str9, i32 0, i32 0), i64 %29, i64 %32, i64 %35) #2, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !16, !legup.pipeline.stage !10
	start_time: 68 avail_time: 68 stage: 11 II: 6 start_ii_state = 68 % 6 = 2 avail_ii_state = 68 % 6 = 2*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_68)) begin
		$write("div = a/b = %d/%d = %d\n", $signed(main_1_29_reg_stage11), $signed(main_1_32_reg_stage11), $signed(main_1_35));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_29_reg_stage11) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_32_reg_stage11) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_35) === 1'bX) finish <= 0;
	end
	/* main: %1*/
	/*   %44 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([30 x i8]* @.str9, i32 0, i32 0), i64 %37, i64 %40, i64 %43) #2, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
	if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_69)) begin
		$write("div = a/b = %d/%d = %d\n", $signed(main_1_37_reg_stage11), $signed(main_1_40_reg_stage11), $signed(main_1_43));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_1_37_reg_stage11) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_40_reg_stage11) === 1'bX) finish <= 0;
		if (reset == 1'b0 && ^(main_1_43) === 1'bX) finish <= 0;
	end
	/* main: %59*/
	/*   %62 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str6, i32 0, i32 0), i64 %61) #2*/
	if ((cur_state == LEGUP_F_main_BB__59_4)) begin
		$write("sum = %d\n", $signed(main_59_61));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_59_61) === 1'bX) finish <= 0;
	end
	/* main: %64*/
	/*   %65 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @.str7, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__64_5)) begin
		$write("PASSED\n");
	end
	/* main: %66*/
	/*   %67 = tail call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @.str8, i32 0, i32 0)) #2*/
	if ((cur_state == LEGUP_F_main_BB__66_6)) begin
		$write("FAILED\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_loop_pipeline_wait_loop_1_1;
LEGUP_F_main_BB__59_2:
		next_state = LEGUP_F_main_BB__59_3;
LEGUP_F_main_BB__59_3:
		next_state = LEGUP_F_main_BB__59_4;
LEGUP_F_main_BB__59_4:
	if ((main_59_63 == 1'd1))
		next_state = LEGUP_F_main_BB__64_5;
	else if ((main_59_63 == 1'd0))
		next_state = LEGUP_F_main_BB__66_6;
LEGUP_F_main_BB__64_5:
		next_state = LEGUP_F_main_BB__68_7;
LEGUP_F_main_BB__66_6:
		next_state = LEGUP_F_main_BB__68_7;
LEGUP_F_main_BB__68_7:
		next_state = LEGUP_0;
LEGUP_loop_pipeline_wait_loop_1_1:
	if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__59_2;
	else if ((loop_1_pipeline_finish == 1'd1))
		next_state = LEGUP_F_main_BB__59_2;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %scevgep = getelementptr [100 x i32]* @cc, i32 0, i32 %i.01, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
		main_1_scevgep = (`TAG_g_cc_a + (4 * loop_1_i_stage0));
end
always @(*) begin
	/* main: %1*/
	/*   %2 = add i32 %i.01, 8, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 1 % 6 = 1*/
		main_1_2 = (loop_1_i_stage0 + 32'd8);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep2 = getelementptr [100 x i64]* @aa, i32 0, i32 %2, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 1 % 6 = 1*/
		main_1_scevgep2 = (`TAG_g_aa_a + (8 * main_1_2));
end
always @(*) begin
	/* main: %1*/
	/*   %3 = add i32 %i.01, 7, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 2 avail_time: 2 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 2 % 6 = 2*/
		main_1_3 = (loop_1_i_stage0 + 32'd7);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep3 = getelementptr [100 x i32]* @cc, i32 0, i32 %3, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 2 avail_time: 2 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 2 % 6 = 2*/
		main_1_scevgep3 = (`TAG_g_cc_a + (4 * main_1_3));
end
always @(*) begin
	/* main: %1*/
	/*   %4 = add i32 %i.01, 4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 1 % 6 = 1*/
		main_1_4 = (loop_1_i_stage0 + 32'd4);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep4 = getelementptr [100 x i32]* @cc, i32 0, i32 %4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 1 % 6 = 1*/
		main_1_scevgep4 = (`TAG_g_cc_a + (4 * main_1_4));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep5 = getelementptr [100 x i64]* @dd, i32 0, i32 %4, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 1 % 6 = 1*/
		main_1_scevgep5 = (`TAG_g_dd_a + (8 * main_1_4));
end
always @(*) begin
	/* main: %1*/
	/*   %5 = add i32 %i.01, 6, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 1 % 6 = 1*/
		main_1_5 = (loop_1_i_stage0 + 32'd6);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep6 = getelementptr [100 x i64]* @bb, i32 0, i32 %5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !2, !legup.pipeline.stage !3
	start_time: 1 avail_time: 1 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 1 % 6 = 1*/
		main_1_scevgep6 = (`TAG_g_bb_a + (8 * main_1_5));
end
always @(*) begin
	/* main: %1*/
	/*   %6 = add i32 %i.01, 1, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
		main_1_6 = (loop_1_i_stage0 + 32'd1);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep7 = getelementptr [100 x i32]* @cc, i32 0, i32 %6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
		main_1_scevgep7 = (`TAG_g_cc_a + (4 * main_1_6));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep8 = getelementptr [100 x i64]* @c, i32 0, i32 %6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
		main_1_scevgep8 = (`TAG_g_c_a + (8 * main_1_6));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep9 = getelementptr [100 x i64]* @aa, i32 0, i32 %6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
		main_1_scevgep9 = (`TAG_g_aa_a + (8 * main_1_6));
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep10 = getelementptr [100 x i64]* @bb, i32 0, i32 %6, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
		main_1_scevgep10 = (`TAG_g_bb_a + (8 * main_1_6));
end
always @(*) begin
	/* main: %1*/
	/*   %7 = add i32 %i.01, 10, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
		main_1_7 = (loop_1_i_stage0 + 32'd10);
end
always @(*) begin
	/* main: %1*/
	/*   %scevgep11 = getelementptr [100 x i64]* @aa, i32 0, i32 %7, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !3, !legup.pipeline.stage !3
	start_time: 0 avail_time: 0 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 0 % 6 = 0*/
		main_1_scevgep11 = (`TAG_g_aa_a + (8 * main_1_7));
end
always @(*) begin
	/* main: %1*/
	/*   %12 = load volatile i64* %scevgep11, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
		main_1_12 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep10, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
		main_1_14 = memory_controller_out_b[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %15 = lshr i64 %14, 1, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 2 avail_time: 2 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 2 % 6 = 2*/
		main_1_15 = (main_1_14 >>> (64'd1 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %16 = shl i64 %12, 57, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 2 avail_time: 2 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 2 % 6 = 2*/
		main_1_16 = (main_1_12 <<< (64'd57 % 64'd64));
end
always @(*) begin
	main_1_17 = main_unsigned_divide_64_0;
end
always @(*) begin
	/* main: %1*/
	/*   %18 = lshr i64 %17, 57, !legup.pipeline.start_time !9, !legup.pipeline.avail_time !9, !legup.pipeline.stage !10
	start_time: 66 avail_time: 66 stage: 11 II: 6 start_ii_state = 66 % 6 = 0 avail_ii_state = 66 % 6 = 0*/
		main_1_18 = (main_1_17 >>> (64'd57 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %21 = load volatile i64* %scevgep9, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
		main_1_21 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %22 = load volatile i64* %scevgep6, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
		main_1_22 = memory_controller_out_b[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %23 = lshr i64 %22, 2, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 3 % 6 = 3*/
		main_1_23 = (main_1_22 >>> (64'd2 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %24 = shl i64 %21, 57, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 3 avail_time: 3 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 3 % 6 = 3*/
		main_1_24 = (main_1_21 <<< (64'd57 % 64'd64));
end
always @(*) begin
	main_1_25 = main_unsigned_divide_64_0;
end
always @(*) begin
	/* main: %1*/
	/*   %26 = lshr i64 %25, 57, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !10
	start_time: 67 avail_time: 67 stage: 11 II: 6 start_ii_state = 67 % 6 = 1 avail_ii_state = 67 % 6 = 1*/
		main_1_26 = (main_1_25 >>> (64'd57 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %29 = load volatile i64* %scevgep5, align 8, !tbaa !5, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
		main_1_29 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %30 = load volatile i32* %scevgep3, align 4, !tbaa !14, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
		main_1_30 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %31 = ashr i32 %30, 3, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 4 avail_time: 4 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 4 % 6 = 4*/
		main_1_31 = ($signed(main_1_30) >>> 32'd3);
end
always @(*) begin
	/* main: %1*/
	/*   %32 = sext i32 %31 to i64, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 4 avail_time: 4 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 4 % 6 = 4*/
		main_1_32 = $signed(main_1_31);
end
always @(*) begin
	/* main: %1*/
	/*   %33 = shl i64 %29, 57, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 4 avail_time: 4 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 4 % 6 = 4*/
		main_1_33 = (main_1_29 <<< (64'd57 % 64'd64));
end
always @(*) begin
	main_1_34 = main_unsigned_divide_64_0;
end
always @(*) begin
	/* main: %1*/
	/*   %35 = lshr i64 %34, 57, !legup.pipeline.start_time !16, !legup.pipeline.avail_time !16, !legup.pipeline.stage !10
	start_time: 68 avail_time: 68 stage: 11 II: 6 start_ii_state = 68 % 6 = 2 avail_ii_state = 68 % 6 = 2*/
		main_1_35 = (main_1_34 >>> (64'd57 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %37 = load volatile i64* %scevgep2, align 8, !tbaa !5, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
		main_1_37 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %38 = load volatile i32* %scevgep4, align 4, !tbaa !14, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
		main_1_38 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %39 = ashr i32 %38, 1, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 5 avail_time: 5 stage: 0 II: 6 start_ii_state = 5 % 6 = 5 avail_ii_state = 5 % 6 = 5*/
		main_1_39 = ($signed(main_1_38) >>> 32'd1);
end
always @(*) begin
	/* main: %1*/
	/*   %40 = sext i32 %39 to i64, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 5 avail_time: 5 stage: 0 II: 6 start_ii_state = 5 % 6 = 5 avail_ii_state = 5 % 6 = 5*/
		main_1_40 = $signed(main_1_39);
end
always @(*) begin
	/* main: %1*/
	/*   %41 = shl i64 %37, 57, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 5 avail_time: 5 stage: 0 II: 6 start_ii_state = 5 % 6 = 5 avail_ii_state = 5 % 6 = 5*/
		main_1_41 = (main_1_37 <<< (64'd57 % 64'd64));
end
always @(*) begin
	main_1_42 = main_unsigned_divide_64_0;
end
always @(*) begin
	/* main: %1*/
	/*   %43 = lshr i64 %42, 57, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
		main_1_43 = (main_1_42 >>> (64'd57 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %45 = add i64 %42, %34, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
		main_1_45 = (main_1_42 + main_1_34_reg_stage11);
end
always @(*) begin
	/* main: %1*/
	/*   %46 = trunc i64 %45 to i32, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
		main_1_46 = main_1_45[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %47 = add i64 %25, %17, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !10
	start_time: 67 avail_time: 67 stage: 11 II: 6 start_ii_state = 67 % 6 = 1 avail_ii_state = 67 % 6 = 1*/
		main_1_47 = (main_1_25 + main_1_17_reg_stage11);
end
always @(*) begin
	/* main: %1*/
	/*   %48 = trunc i64 %47 to i32, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !10
	start_time: 67 avail_time: 67 stage: 11 II: 6 start_ii_state = 67 % 6 = 1 avail_ii_state = 67 % 6 = 1*/
		main_1_48 = main_1_47[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %49 = add nsw i32 %46, %48, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
		main_1_49 = (main_1_46 + main_1_48_reg_stage11);
end
always @(*) begin
	/* main: %1*/
	/*   %50 = sext i32 %49 to i64, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
		main_1_50 = $signed(main_1_49);
end
always @(*) begin
	/* main: %1*/
	/*   %51 = load volatile i64* %scevgep8, align 8, !tbaa !5, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !19, !legup.pipeline.stage !3
	start_time: 4 avail_time: 6 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 6 % 6 = 0*/
		main_1_51 = memory_controller_out_a[63:0];
end
always @(*) begin
	/* main: %1*/
	/*   %52 = add i64 %50, %51, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
		main_1_52 = (main_1_50 + main_1_51_reg_stage11);
end
always @(*) begin
	/* main: %1*/
	/*   %53 = load volatile i32* %scevgep, align 4, !tbaa !14, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !12, !legup.pipeline.stage !21
	start_time: 65 avail_time: 67 stage: 10 II: 6 start_ii_state = 65 % 6 = 5 avail_ii_state = 67 % 6 = 1*/
		main_1_53 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %1*/
	/*   %54 = zext i32 %53 to i64, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !10
	start_time: 67 avail_time: 67 stage: 11 II: 6 start_ii_state = 67 % 6 = 1 avail_ii_state = 67 % 6 = 1*/
		main_1_54 = main_1_53;
end
always @(*) begin
	/* main: %1*/
	/*   %55 = shl i64 %54, 57, !legup.pipeline.start_time !12, !legup.pipeline.avail_time !12, !legup.pipeline.stage !10
	start_time: 67 avail_time: 67 stage: 11 II: 6 start_ii_state = 67 % 6 = 1 avail_ii_state = 67 % 6 = 1*/
		main_1_55 = (main_1_54 <<< (64'd57 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %56 = add i64 %52, %55, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
		main_1_56 = (main_1_52 + main_1_55_reg_stage11);
end
always @(*) begin
	/* main: %1*/
	/*   %57 = lshr i64 %56, 57, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
		main_1_57 = (main_1_56 >>> (64'd57 % 64'd64));
end
always @(*) begin
	/* main: %1*/
	/*   %58 = trunc i64 %57 to i32, !legup.pipeline.start_time !18, !legup.pipeline.avail_time !18, !legup.pipeline.stage !10
	start_time: 69 avail_time: 69 stage: 11 II: 6 start_ii_state = 69 % 6 = 3 avail_ii_state = 69 % 6 = 3*/
		main_1_58 = main_1_57[31:0];
end
always @(*) begin
	/* main: %59*/
	/*   %60 = load volatile i32* getelementptr inbounds ([100 x i32]* @cc, i32 0, i32 40), align 4, !tbaa !14*/
		main_59_60 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %59*/
	/*   %60 = load volatile i32* getelementptr inbounds ([100 x i32]* @cc, i32 0, i32 40), align 4, !tbaa !14*/
	if ((cur_state == LEGUP_F_main_BB__59_4)) begin
		main_59_60_reg <= main_59_60;
		if (start == 1'b0 && ^(main_59_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_59_60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %59*/
	/*   %61 = sext i32 %60 to i64*/
		main_59_61 = $signed(main_59_60);
end
always @(*) begin
	/* main: %59*/
	/*   %63 = icmp eq i32 %60, 108*/
		main_59_63 = (main_59_60 == 32'd108);
end
always @(*) begin
	loop_1_pipeline_start = 1'd0;
	if (reset) begin
		loop_1_pipeline_start = 1'd0;
	end
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		loop_1_pipeline_start = 1'd1;
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_started <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_70) & loop_1_valid_bit_71)))) begin
		loop_1_started <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_started"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_ii_state <= 3'd0;
		if (start == 1'b0 && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_ii_state <= 3'd0;
		if (start == 1'b0 && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 3'd0))) begin
		loop_1_ii_state <= 3'd1;
		if (start == 1'b0 && ^(3'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 3'd1))) begin
		loop_1_ii_state <= 3'd2;
		if (start == 1'b0 && ^(3'd2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 3'd2))) begin
		loop_1_ii_state <= 3'd3;
		if (start == 1'b0 && ^(3'd3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 3'd3))) begin
		loop_1_ii_state <= 3'd4;
		if (start == 1'b0 && ^(3'd4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 3'd4))) begin
		loop_1_ii_state <= 3'd5;
		if (start == 1'b0 && ^(3'd5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 3'd5))) begin
		loop_1_ii_state <= 3'd0;
		if (start == 1'b0 && ^(3'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_ii_state"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started)))) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (((memory_controller_waitrequest == 1'd0) & (loop_1_ii_state == 3'd5)) & loop_1_valid_bit_5))) begin
		loop_1_i_stage0 <= (loop_1_i_stage0 + 1'd1);
		if (start == 1'b0 && ^((loop_1_i_stage0 + 1'd1)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
	if (reset) begin
		loop_1_i_stage0 <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_i_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (reset) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 3'd0) & loop_1_pipeline_exit_cond)))) begin
		loop_1_epilogue <= 1'd1;
		if (start == 1'b0 && ^(1'd1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
	if (((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_70) & loop_1_valid_bit_71)))) begin
		loop_1_epilogue <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_epilogue"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_0 <= (((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 3'd0) & loop_1_pipeline_exit_cond))))));
		if (start == 1'b0 && ^((((memory_controller_waitrequest == 1'd0) & (loop_1_pipeline_start & ~(loop_1_started))) | ((loop_1_started & ~(loop_1_epilogue)) & ~(((memory_controller_waitrequest == 1'd0) & (loop_1_started & ((loop_1_ii_state == 3'd0) & loop_1_pipeline_exit_cond))))))) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_0 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_0"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_1 <= loop_1_valid_bit_0;
		if (start == 1'b0 && ^(loop_1_valid_bit_0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_1 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_1"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_2 <= loop_1_valid_bit_1;
		if (start == 1'b0 && ^(loop_1_valid_bit_1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_2 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_2"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_3 <= loop_1_valid_bit_2;
		if (start == 1'b0 && ^(loop_1_valid_bit_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_3 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_3"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_4 <= loop_1_valid_bit_3;
		if (start == 1'b0 && ^(loop_1_valid_bit_3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_4 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_4"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_5 <= loop_1_valid_bit_4;
		if (start == 1'b0 && ^(loop_1_valid_bit_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_5 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_5"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_6 <= loop_1_valid_bit_5;
		if (start == 1'b0 && ^(loop_1_valid_bit_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_6"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_6 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_6"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_7 <= loop_1_valid_bit_6;
		if (start == 1'b0 && ^(loop_1_valid_bit_6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_7"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_7 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_7"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_8 <= loop_1_valid_bit_7;
		if (start == 1'b0 && ^(loop_1_valid_bit_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_8"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_8 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_8"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_9 <= loop_1_valid_bit_8;
		if (start == 1'b0 && ^(loop_1_valid_bit_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_9"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_9 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_9"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_10 <= loop_1_valid_bit_9;
		if (start == 1'b0 && ^(loop_1_valid_bit_9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_10"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_10 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_10"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_11 <= loop_1_valid_bit_10;
		if (start == 1'b0 && ^(loop_1_valid_bit_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_11"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_11 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_11"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_12 <= loop_1_valid_bit_11;
		if (start == 1'b0 && ^(loop_1_valid_bit_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_12"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_12 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_12"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_13 <= loop_1_valid_bit_12;
		if (start == 1'b0 && ^(loop_1_valid_bit_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_13"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_13 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_13"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_14 <= loop_1_valid_bit_13;
		if (start == 1'b0 && ^(loop_1_valid_bit_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_14"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_14 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_14"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_15 <= loop_1_valid_bit_14;
		if (start == 1'b0 && ^(loop_1_valid_bit_14) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_15"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_15 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_15"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_16 <= loop_1_valid_bit_15;
		if (start == 1'b0 && ^(loop_1_valid_bit_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_16"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_16 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_16"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_17 <= loop_1_valid_bit_16;
		if (start == 1'b0 && ^(loop_1_valid_bit_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_17"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_17 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_17"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_18 <= loop_1_valid_bit_17;
		if (start == 1'b0 && ^(loop_1_valid_bit_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_18"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_18 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_18"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_19 <= loop_1_valid_bit_18;
		if (start == 1'b0 && ^(loop_1_valid_bit_18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_19"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_19 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_19"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_20 <= loop_1_valid_bit_19;
		if (start == 1'b0 && ^(loop_1_valid_bit_19) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_20"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_20 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_20"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_21 <= loop_1_valid_bit_20;
		if (start == 1'b0 && ^(loop_1_valid_bit_20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_21"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_21 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_21"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_22 <= loop_1_valid_bit_21;
		if (start == 1'b0 && ^(loop_1_valid_bit_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_22"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_22 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_22"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_23 <= loop_1_valid_bit_22;
		if (start == 1'b0 && ^(loop_1_valid_bit_22) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_23"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_23 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_23"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_24 <= loop_1_valid_bit_23;
		if (start == 1'b0 && ^(loop_1_valid_bit_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_24"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_24 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_24"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_25 <= loop_1_valid_bit_24;
		if (start == 1'b0 && ^(loop_1_valid_bit_24) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_25"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_25 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_25"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_26 <= loop_1_valid_bit_25;
		if (start == 1'b0 && ^(loop_1_valid_bit_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_26"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_26 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_26"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_27 <= loop_1_valid_bit_26;
		if (start == 1'b0 && ^(loop_1_valid_bit_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_27"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_27 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_27"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_28 <= loop_1_valid_bit_27;
		if (start == 1'b0 && ^(loop_1_valid_bit_27) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_28"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_28 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_28"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_29 <= loop_1_valid_bit_28;
		if (start == 1'b0 && ^(loop_1_valid_bit_28) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_29"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_29 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_29"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_30 <= loop_1_valid_bit_29;
		if (start == 1'b0 && ^(loop_1_valid_bit_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_30"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_30 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_30"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_31 <= loop_1_valid_bit_30;
		if (start == 1'b0 && ^(loop_1_valid_bit_30) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_31"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_31 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_31"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_32 <= loop_1_valid_bit_31;
		if (start == 1'b0 && ^(loop_1_valid_bit_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_32"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_32 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_32"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_33 <= loop_1_valid_bit_32;
		if (start == 1'b0 && ^(loop_1_valid_bit_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_33"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_33 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_33"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_34 <= loop_1_valid_bit_33;
		if (start == 1'b0 && ^(loop_1_valid_bit_33) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_34"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_34 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_34"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_35 <= loop_1_valid_bit_34;
		if (start == 1'b0 && ^(loop_1_valid_bit_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_35"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_35 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_35"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_36 <= loop_1_valid_bit_35;
		if (start == 1'b0 && ^(loop_1_valid_bit_35) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_36"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_36 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_36"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_37 <= loop_1_valid_bit_36;
		if (start == 1'b0 && ^(loop_1_valid_bit_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_37"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_37 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_37"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_38 <= loop_1_valid_bit_37;
		if (start == 1'b0 && ^(loop_1_valid_bit_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_38"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_38 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_38"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_39 <= loop_1_valid_bit_38;
		if (start == 1'b0 && ^(loop_1_valid_bit_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_39"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_39 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_39"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_40 <= loop_1_valid_bit_39;
		if (start == 1'b0 && ^(loop_1_valid_bit_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_40"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_40 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_40"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_41 <= loop_1_valid_bit_40;
		if (start == 1'b0 && ^(loop_1_valid_bit_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_41"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_41 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_41"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_42 <= loop_1_valid_bit_41;
		if (start == 1'b0 && ^(loop_1_valid_bit_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_42"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_42 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_42"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_43 <= loop_1_valid_bit_42;
		if (start == 1'b0 && ^(loop_1_valid_bit_42) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_43"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_43 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_43"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_44 <= loop_1_valid_bit_43;
		if (start == 1'b0 && ^(loop_1_valid_bit_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_44"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_44 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_44"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_45 <= loop_1_valid_bit_44;
		if (start == 1'b0 && ^(loop_1_valid_bit_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_45"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_45 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_45"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_46 <= loop_1_valid_bit_45;
		if (start == 1'b0 && ^(loop_1_valid_bit_45) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_46"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_46 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_46"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_47 <= loop_1_valid_bit_46;
		if (start == 1'b0 && ^(loop_1_valid_bit_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_47"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_47 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_47"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_48 <= loop_1_valid_bit_47;
		if (start == 1'b0 && ^(loop_1_valid_bit_47) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_48"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_48 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_48"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_49 <= loop_1_valid_bit_48;
		if (start == 1'b0 && ^(loop_1_valid_bit_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_49"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_49 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_49"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_50 <= loop_1_valid_bit_49;
		if (start == 1'b0 && ^(loop_1_valid_bit_49) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_50"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_50 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_50"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_51 <= loop_1_valid_bit_50;
		if (start == 1'b0 && ^(loop_1_valid_bit_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_51"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_51 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_51"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_52 <= loop_1_valid_bit_51;
		if (start == 1'b0 && ^(loop_1_valid_bit_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_52"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_52 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_52"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_53 <= loop_1_valid_bit_52;
		if (start == 1'b0 && ^(loop_1_valid_bit_52) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_53"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_53 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_53"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_54 <= loop_1_valid_bit_53;
		if (start == 1'b0 && ^(loop_1_valid_bit_53) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_54"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_54 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_54"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_55 <= loop_1_valid_bit_54;
		if (start == 1'b0 && ^(loop_1_valid_bit_54) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_55"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_55 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_55"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_56 <= loop_1_valid_bit_55;
		if (start == 1'b0 && ^(loop_1_valid_bit_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_56"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_56 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_56"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_57 <= loop_1_valid_bit_56;
		if (start == 1'b0 && ^(loop_1_valid_bit_56) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_57"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_57 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_57"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_58 <= loop_1_valid_bit_57;
		if (start == 1'b0 && ^(loop_1_valid_bit_57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_58"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_58 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_58"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_59 <= loop_1_valid_bit_58;
		if (start == 1'b0 && ^(loop_1_valid_bit_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_59"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_59 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_59"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_60 <= loop_1_valid_bit_59;
		if (start == 1'b0 && ^(loop_1_valid_bit_59) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_60"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_60 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_60"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_61 <= loop_1_valid_bit_60;
		if (start == 1'b0 && ^(loop_1_valid_bit_60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_61"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_61 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_61"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_62 <= loop_1_valid_bit_61;
		if (start == 1'b0 && ^(loop_1_valid_bit_61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_62"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_62 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_62"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_63 <= loop_1_valid_bit_62;
		if (start == 1'b0 && ^(loop_1_valid_bit_62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_63"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_63 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_63"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_64 <= loop_1_valid_bit_63;
		if (start == 1'b0 && ^(loop_1_valid_bit_63) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_64"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_64 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_64"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_65 <= loop_1_valid_bit_64;
		if (start == 1'b0 && ^(loop_1_valid_bit_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_65"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_65 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_65"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_66 <= loop_1_valid_bit_65;
		if (start == 1'b0 && ^(loop_1_valid_bit_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_66"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_66 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_66"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_67 <= loop_1_valid_bit_66;
		if (start == 1'b0 && ^(loop_1_valid_bit_66) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_67"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_67 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_67"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_68 <= loop_1_valid_bit_67;
		if (start == 1'b0 && ^(loop_1_valid_bit_67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_68"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_68 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_68"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_69 <= loop_1_valid_bit_68;
		if (start == 1'b0 && ^(loop_1_valid_bit_68) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_69"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_69 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_69"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_70 <= loop_1_valid_bit_69;
		if (start == 1'b0 && ^(loop_1_valid_bit_69) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_70"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_70 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_70"); $finish; end
	end
end
always @(posedge clk) begin
	if ((memory_controller_waitrequest == 1'd0)) begin
		loop_1_valid_bit_71 <= loop_1_valid_bit_70;
		if (start == 1'b0 && ^(loop_1_valid_bit_70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_71"); $finish; end
	end
	if (reset) begin
		loop_1_valid_bit_71 <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to loop_1_valid_bit_71"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep_reg_stage0 <= main_1_scevgep;
		if (start == 1'b0 && ^(main_1_scevgep) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_scevgep_reg_stage1 <= main_1_scevgep_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_scevgep_reg_stage2 <= main_1_scevgep_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_scevgep_reg_stage3 <= main_1_scevgep_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_scevgep_reg_stage4 <= main_1_scevgep_reg_stage3;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_scevgep_reg_stage5 <= main_1_scevgep_reg_stage4;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_scevgep_reg_stage6 <= main_1_scevgep_reg_stage5;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_scevgep_reg_stage7 <= main_1_scevgep_reg_stage6;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_scevgep_reg_stage8 <= main_1_scevgep_reg_stage7;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_scevgep_reg_stage9 <= main_1_scevgep_reg_stage8;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_scevgep_reg_stage10 <= main_1_scevgep_reg_stage9;
		if (start == 1'b0 && ^(main_1_scevgep_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1))) begin
		main_1_scevgep2_reg_stage0 <= main_1_scevgep2;
		if (start == 1'b0 && ^(main_1_scevgep2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep2_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1))) begin
		main_1_scevgep4_reg_stage0 <= main_1_scevgep4;
		if (start == 1'b0 && ^(main_1_scevgep4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep4_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1))) begin
		main_1_scevgep5_reg_stage0 <= main_1_scevgep5;
		if (start == 1'b0 && ^(main_1_scevgep5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep5_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep7_reg_stage0 <= main_1_scevgep7;
		if (start == 1'b0 && ^(main_1_scevgep7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_scevgep7_reg_stage1 <= main_1_scevgep7_reg_stage0;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_scevgep7_reg_stage2 <= main_1_scevgep7_reg_stage1;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_scevgep7_reg_stage3 <= main_1_scevgep7_reg_stage2;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_scevgep7_reg_stage4 <= main_1_scevgep7_reg_stage3;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_scevgep7_reg_stage5 <= main_1_scevgep7_reg_stage4;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_scevgep7_reg_stage6 <= main_1_scevgep7_reg_stage5;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_scevgep7_reg_stage7 <= main_1_scevgep7_reg_stage6;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_scevgep7_reg_stage8 <= main_1_scevgep7_reg_stage7;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_scevgep7_reg_stage9 <= main_1_scevgep7_reg_stage8;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_scevgep7_reg_stage10 <= main_1_scevgep7_reg_stage9;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_scevgep7_reg_stage11 <= main_1_scevgep7_reg_stage10;
		if (start == 1'b0 && ^(main_1_scevgep7_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep7_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep8_reg_stage0 <= main_1_scevgep8;
		if (start == 1'b0 && ^(main_1_scevgep8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep8_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0))) begin
		main_1_scevgep9_reg_stage0 <= main_1_scevgep9;
		if (start == 1'b0 && ^(main_1_scevgep9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_scevgep9_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2))) begin
		main_1_12_reg_stage0 <= main_1_12;
		if (start == 1'b0 && ^(main_1_12) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_12_reg_stage1 <= main_1_12_reg_stage0;
		if (start == 1'b0 && ^(main_1_12_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_12_reg_stage2 <= main_1_12_reg_stage1;
		if (start == 1'b0 && ^(main_1_12_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_12_reg_stage3 <= main_1_12_reg_stage2;
		if (start == 1'b0 && ^(main_1_12_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_12_reg_stage4 <= main_1_12_reg_stage3;
		if (start == 1'b0 && ^(main_1_12_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_12_reg_stage5 <= main_1_12_reg_stage4;
		if (start == 1'b0 && ^(main_1_12_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_12_reg_stage6 <= main_1_12_reg_stage5;
		if (start == 1'b0 && ^(main_1_12_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_12_reg_stage7 <= main_1_12_reg_stage6;
		if (start == 1'b0 && ^(main_1_12_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_12_reg_stage8 <= main_1_12_reg_stage7;
		if (start == 1'b0 && ^(main_1_12_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_12_reg_stage9 <= main_1_12_reg_stage8;
		if (start == 1'b0 && ^(main_1_12_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_12_reg_stage10 <= main_1_12_reg_stage9;
		if (start == 1'b0 && ^(main_1_12_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_12_reg_stage11 <= main_1_12_reg_stage10;
		if (start == 1'b0 && ^(main_1_12_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_12_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2))) begin
		main_1_15_reg_stage0 <= main_1_15;
		if (start == 1'b0 && ^(main_1_15) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_15_reg_stage1 <= main_1_15_reg_stage0;
		if (start == 1'b0 && ^(main_1_15_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_15_reg_stage2 <= main_1_15_reg_stage1;
		if (start == 1'b0 && ^(main_1_15_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_15_reg_stage3 <= main_1_15_reg_stage2;
		if (start == 1'b0 && ^(main_1_15_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_15_reg_stage4 <= main_1_15_reg_stage3;
		if (start == 1'b0 && ^(main_1_15_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_15_reg_stage5 <= main_1_15_reg_stage4;
		if (start == 1'b0 && ^(main_1_15_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_15_reg_stage6 <= main_1_15_reg_stage5;
		if (start == 1'b0 && ^(main_1_15_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_15_reg_stage7 <= main_1_15_reg_stage6;
		if (start == 1'b0 && ^(main_1_15_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_15_reg_stage8 <= main_1_15_reg_stage7;
		if (start == 1'b0 && ^(main_1_15_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_15_reg_stage9 <= main_1_15_reg_stage8;
		if (start == 1'b0 && ^(main_1_15_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_15_reg_stage10 <= main_1_15_reg_stage9;
		if (start == 1'b0 && ^(main_1_15_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_15_reg_stage11 <= main_1_15_reg_stage10;
		if (start == 1'b0 && ^(main_1_15_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_15_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd0) & loop_1_valid_bit_66))) begin
		main_1_17_reg_stage11 <= main_1_17;
		if (start == 1'b0 && ^(main_1_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_17_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3))) begin
		main_1_21_reg_stage0 <= main_1_21;
		if (start == 1'b0 && ^(main_1_21) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_21_reg_stage1 <= main_1_21_reg_stage0;
		if (start == 1'b0 && ^(main_1_21_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_21_reg_stage2 <= main_1_21_reg_stage1;
		if (start == 1'b0 && ^(main_1_21_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_21_reg_stage3 <= main_1_21_reg_stage2;
		if (start == 1'b0 && ^(main_1_21_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_21_reg_stage4 <= main_1_21_reg_stage3;
		if (start == 1'b0 && ^(main_1_21_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_21_reg_stage5 <= main_1_21_reg_stage4;
		if (start == 1'b0 && ^(main_1_21_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_21_reg_stage6 <= main_1_21_reg_stage5;
		if (start == 1'b0 && ^(main_1_21_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_21_reg_stage7 <= main_1_21_reg_stage6;
		if (start == 1'b0 && ^(main_1_21_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_21_reg_stage8 <= main_1_21_reg_stage7;
		if (start == 1'b0 && ^(main_1_21_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_21_reg_stage9 <= main_1_21_reg_stage8;
		if (start == 1'b0 && ^(main_1_21_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_21_reg_stage10 <= main_1_21_reg_stage9;
		if (start == 1'b0 && ^(main_1_21_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_21_reg_stage11 <= main_1_21_reg_stage10;
		if (start == 1'b0 && ^(main_1_21_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_21_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3))) begin
		main_1_23_reg_stage0 <= main_1_23;
		if (start == 1'b0 && ^(main_1_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_23_reg_stage1 <= main_1_23_reg_stage0;
		if (start == 1'b0 && ^(main_1_23_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_23_reg_stage2 <= main_1_23_reg_stage1;
		if (start == 1'b0 && ^(main_1_23_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_23_reg_stage3 <= main_1_23_reg_stage2;
		if (start == 1'b0 && ^(main_1_23_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_23_reg_stage4 <= main_1_23_reg_stage3;
		if (start == 1'b0 && ^(main_1_23_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_23_reg_stage5 <= main_1_23_reg_stage4;
		if (start == 1'b0 && ^(main_1_23_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_23_reg_stage6 <= main_1_23_reg_stage5;
		if (start == 1'b0 && ^(main_1_23_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_23_reg_stage7 <= main_1_23_reg_stage6;
		if (start == 1'b0 && ^(main_1_23_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_23_reg_stage8 <= main_1_23_reg_stage7;
		if (start == 1'b0 && ^(main_1_23_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_23_reg_stage9 <= main_1_23_reg_stage8;
		if (start == 1'b0 && ^(main_1_23_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_23_reg_stage10 <= main_1_23_reg_stage9;
		if (start == 1'b0 && ^(main_1_23_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_23_reg_stage11 <= main_1_23_reg_stage10;
		if (start == 1'b0 && ^(main_1_23_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_23_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd4) & loop_1_valid_bit_4))) begin
		main_1_29_reg_stage0 <= main_1_29;
		if (start == 1'b0 && ^(main_1_29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_29_reg_stage1 <= main_1_29_reg_stage0;
		if (start == 1'b0 && ^(main_1_29_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_29_reg_stage2 <= main_1_29_reg_stage1;
		if (start == 1'b0 && ^(main_1_29_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_29_reg_stage3 <= main_1_29_reg_stage2;
		if (start == 1'b0 && ^(main_1_29_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_29_reg_stage4 <= main_1_29_reg_stage3;
		if (start == 1'b0 && ^(main_1_29_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_29_reg_stage5 <= main_1_29_reg_stage4;
		if (start == 1'b0 && ^(main_1_29_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_29_reg_stage6 <= main_1_29_reg_stage5;
		if (start == 1'b0 && ^(main_1_29_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_29_reg_stage7 <= main_1_29_reg_stage6;
		if (start == 1'b0 && ^(main_1_29_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_29_reg_stage8 <= main_1_29_reg_stage7;
		if (start == 1'b0 && ^(main_1_29_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_29_reg_stage9 <= main_1_29_reg_stage8;
		if (start == 1'b0 && ^(main_1_29_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_29_reg_stage10 <= main_1_29_reg_stage9;
		if (start == 1'b0 && ^(main_1_29_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_29_reg_stage11 <= main_1_29_reg_stage10;
		if (start == 1'b0 && ^(main_1_29_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_29_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd4) & loop_1_valid_bit_4))) begin
		main_1_32_reg_stage0 <= main_1_32;
		if (start == 1'b0 && ^(main_1_32) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage0"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_32_reg_stage1 <= main_1_32_reg_stage0;
		if (start == 1'b0 && ^(main_1_32_reg_stage0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_32_reg_stage2 <= main_1_32_reg_stage1;
		if (start == 1'b0 && ^(main_1_32_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_32_reg_stage3 <= main_1_32_reg_stage2;
		if (start == 1'b0 && ^(main_1_32_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_32_reg_stage4 <= main_1_32_reg_stage3;
		if (start == 1'b0 && ^(main_1_32_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_32_reg_stage5 <= main_1_32_reg_stage4;
		if (start == 1'b0 && ^(main_1_32_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_32_reg_stage6 <= main_1_32_reg_stage5;
		if (start == 1'b0 && ^(main_1_32_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_32_reg_stage7 <= main_1_32_reg_stage6;
		if (start == 1'b0 && ^(main_1_32_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_32_reg_stage8 <= main_1_32_reg_stage7;
		if (start == 1'b0 && ^(main_1_32_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_32_reg_stage9 <= main_1_32_reg_stage8;
		if (start == 1'b0 && ^(main_1_32_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_32_reg_stage10 <= main_1_32_reg_stage9;
		if (start == 1'b0 && ^(main_1_32_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_32_reg_stage11 <= main_1_32_reg_stage10;
		if (start == 1'b0 && ^(main_1_32_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_32_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd2) & loop_1_valid_bit_68))) begin
		main_1_34_reg_stage11 <= main_1_34;
		if (start == 1'b0 && ^(main_1_34) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_34_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_37_reg_stage1 <= main_1_37;
		if (start == 1'b0 && ^(main_1_37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_37_reg_stage2 <= main_1_37_reg_stage1;
		if (start == 1'b0 && ^(main_1_37_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_37_reg_stage3 <= main_1_37_reg_stage2;
		if (start == 1'b0 && ^(main_1_37_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_37_reg_stage4 <= main_1_37_reg_stage3;
		if (start == 1'b0 && ^(main_1_37_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_37_reg_stage5 <= main_1_37_reg_stage4;
		if (start == 1'b0 && ^(main_1_37_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_37_reg_stage6 <= main_1_37_reg_stage5;
		if (start == 1'b0 && ^(main_1_37_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_37_reg_stage7 <= main_1_37_reg_stage6;
		if (start == 1'b0 && ^(main_1_37_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_37_reg_stage8 <= main_1_37_reg_stage7;
		if (start == 1'b0 && ^(main_1_37_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_37_reg_stage9 <= main_1_37_reg_stage8;
		if (start == 1'b0 && ^(main_1_37_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_37_reg_stage10 <= main_1_37_reg_stage9;
		if (start == 1'b0 && ^(main_1_37_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_37_reg_stage11 <= main_1_37_reg_stage10;
		if (start == 1'b0 && ^(main_1_37_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_37_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5))) begin
		main_1_40_reg_stage1 <= main_1_40;
		if (start == 1'b0 && ^(main_1_40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_40_reg_stage2 <= main_1_40_reg_stage1;
		if (start == 1'b0 && ^(main_1_40_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_40_reg_stage3 <= main_1_40_reg_stage2;
		if (start == 1'b0 && ^(main_1_40_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_40_reg_stage4 <= main_1_40_reg_stage3;
		if (start == 1'b0 && ^(main_1_40_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_40_reg_stage5 <= main_1_40_reg_stage4;
		if (start == 1'b0 && ^(main_1_40_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_40_reg_stage6 <= main_1_40_reg_stage5;
		if (start == 1'b0 && ^(main_1_40_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_40_reg_stage7 <= main_1_40_reg_stage6;
		if (start == 1'b0 && ^(main_1_40_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_40_reg_stage8 <= main_1_40_reg_stage7;
		if (start == 1'b0 && ^(main_1_40_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_40_reg_stage9 <= main_1_40_reg_stage8;
		if (start == 1'b0 && ^(main_1_40_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_40_reg_stage10 <= main_1_40_reg_stage9;
		if (start == 1'b0 && ^(main_1_40_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_40_reg_stage11 <= main_1_40_reg_stage10;
		if (start == 1'b0 && ^(main_1_40_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_40_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd1) & loop_1_valid_bit_67))) begin
		main_1_48_reg_stage11 <= main_1_48;
		if (start == 1'b0 && ^(main_1_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_48_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd0) & loop_1_valid_bit_6))) begin
		main_1_51_reg_stage1 <= main_1_51;
		if (start == 1'b0 && ^(main_1_51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage1"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_11))) begin
		main_1_51_reg_stage2 <= main_1_51_reg_stage1;
		if (start == 1'b0 && ^(main_1_51_reg_stage1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage2"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_17))) begin
		main_1_51_reg_stage3 <= main_1_51_reg_stage2;
		if (start == 1'b0 && ^(main_1_51_reg_stage2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage3"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_23))) begin
		main_1_51_reg_stage4 <= main_1_51_reg_stage3;
		if (start == 1'b0 && ^(main_1_51_reg_stage3) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage4"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_29))) begin
		main_1_51_reg_stage5 <= main_1_51_reg_stage4;
		if (start == 1'b0 && ^(main_1_51_reg_stage4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage5"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_35))) begin
		main_1_51_reg_stage6 <= main_1_51_reg_stage5;
		if (start == 1'b0 && ^(main_1_51_reg_stage5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage6"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_41))) begin
		main_1_51_reg_stage7 <= main_1_51_reg_stage6;
		if (start == 1'b0 && ^(main_1_51_reg_stage6) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage7"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_47))) begin
		main_1_51_reg_stage8 <= main_1_51_reg_stage7;
		if (start == 1'b0 && ^(main_1_51_reg_stage7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage8"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_53))) begin
		main_1_51_reg_stage9 <= main_1_51_reg_stage8;
		if (start == 1'b0 && ^(main_1_51_reg_stage8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage9"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_59))) begin
		main_1_51_reg_stage10 <= main_1_51_reg_stage9;
		if (start == 1'b0 && ^(main_1_51_reg_stage9) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage10"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65))) begin
		main_1_51_reg_stage11 <= main_1_51_reg_stage10;
		if (start == 1'b0 && ^(main_1_51_reg_stage10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_51_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd1) & loop_1_valid_bit_67))) begin
		main_1_55_reg_stage11 <= main_1_55;
		if (start == 1'b0 && ^(main_1_55) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_55_reg_stage11"); $finish; end
	end
end
always @(posedge clk) begin
	if (((memory_controller_waitrequest == 1'd0) & ((loop_1_ii_state == 3'd3) & loop_1_valid_bit_69))) begin
		main_1_58_reg_stage11 <= main_1_58;
		if (start == 1'b0 && ^(main_1_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_58_reg_stage11"); $finish; end
	end
end
always @(*) begin
	loop_1_pipeline_exit_cond = (loop_1_i_stage0 == 39);
end
always @(*) begin
	loop_1_pipeline_finish = ((memory_controller_waitrequest == 1'd0) & (loop_1_epilogue & (~(loop_1_valid_bit_70) & loop_1_valid_bit_71)));
end
always @(*) begin
	/* main: %1*/
	/*   %17 = udiv i64 %16, %15, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 66 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 66 % 6 = 0*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		main_unsigned_divide_64_0_op0 = main_1_16;
	end
	/* main: %1*/
	/*   %25 = udiv i64 %24, %23, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !3
	start_time: 3 avail_time: 67 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 67 % 6 = 1*/
	else if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		main_unsigned_divide_64_0_op0 = main_1_24;
	end
	/* main: %1*/
	/*   %34 = udiv i64 %33, %32, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !16, !legup.pipeline.stage !3
	start_time: 4 avail_time: 68 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 68 % 6 = 2*/
	else if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_4)) begin
		main_unsigned_divide_64_0_op0 = main_1_33;
	end
	/* main: %1*/
	/*   %42 = udiv i64 %41, %40, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !18, !legup.pipeline.stage !3
	start_time: 5 avail_time: 69 stage: 0 II: 6 start_ii_state = 5 % 6 = 5 avail_ii_state = 69 % 6 = 3*/
	else /* if (((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5)) */ begin
		main_unsigned_divide_64_0_op0 = main_1_41;
	end
end
always @(*) begin
	/* main: %1*/
	/*   %17 = udiv i64 %16, %15, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !9, !legup.pipeline.stage !3
	start_time: 2 avail_time: 66 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 66 % 6 = 0*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		main_unsigned_divide_64_0_op1 = main_1_15;
	end
	/* main: %1*/
	/*   %25 = udiv i64 %24, %23, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !12, !legup.pipeline.stage !3
	start_time: 3 avail_time: 67 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 67 % 6 = 1*/
	else if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		main_unsigned_divide_64_0_op1 = main_1_23;
	end
	/* main: %1*/
	/*   %34 = udiv i64 %33, %32, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !16, !legup.pipeline.stage !3
	start_time: 4 avail_time: 68 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 68 % 6 = 2*/
	else if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_4)) begin
		main_unsigned_divide_64_0_op1 = main_1_32;
	end
	/* main: %1*/
	/*   %42 = udiv i64 %41, %40, !legup.pipeline.start_time !17, !legup.pipeline.avail_time !18, !legup.pipeline.stage !3
	start_time: 5 avail_time: 69 stage: 0 II: 6 start_ii_state = 5 % 6 = 5 avail_ii_state = 69 % 6 = 3*/
	else /* if (((loop_1_ii_state == 3'd5) & loop_1_valid_bit_5)) */ begin
		main_unsigned_divide_64_0_op1 = main_1_40;
	end
end
always @(*) begin
	lpm_divide_main_1_17_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_main_1_17_out = lpm_divide_main_1_17_temp_out;
end
always @(*) begin
	main_unsigned_divide_64_0 = lpm_divide_main_1_17_out;
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %68*/
	/*   ret i32 %60*/
	if ((cur_state == LEGUP_F_main_BB__68_7)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %12 = load volatile i64* %scevgep11, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %21 = load volatile i64* %scevgep9, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %29 = load volatile i64* %scevgep5, align 8, !tbaa !5, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %37 = load volatile i64* %scevgep2, align 8, !tbaa !5, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
	if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %51 = load volatile i64* %scevgep8, align 8, !tbaa !5, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !19, !legup.pipeline.stage !3
	start_time: 4 avail_time: 6 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 6 % 6 = 0*/
	if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %1*/
	/*   %53 = load volatile i32* %scevgep, align 4, !tbaa !14, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !12, !legup.pipeline.stage !21
	start_time: 65 avail_time: 67 stage: 10 II: 6 start_ii_state = 65 % 6 = 5 avail_ii_state = 67 % 6 = 1*/
	if (((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %59*/
	/*   %60 = load volatile i32* getelementptr inbounds ([100 x i32]* @cc, i32 0, i32 40), align 4, !tbaa !14*/
	if ((cur_state == LEGUP_F_main_BB__59_2)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %1*/
	/*   %12 = load volatile i64* %scevgep11, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		memory_controller_address_a = main_1_scevgep11;
	end
	/* main: %1*/
	/*   %21 = load volatile i64* %scevgep9, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1)) begin
		memory_controller_address_a = main_1_scevgep9_reg_stage0;
	end
	/* main: %1*/
	/*   %29 = load volatile i64* %scevgep5, align 8, !tbaa !5, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		memory_controller_address_a = main_1_scevgep5_reg_stage0;
	end
	/* main: %1*/
	/*   %37 = load volatile i64* %scevgep2, align 8, !tbaa !5, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
	if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		memory_controller_address_a = main_1_scevgep2_reg_stage0;
	end
	/* main: %1*/
	/*   %51 = load volatile i64* %scevgep8, align 8, !tbaa !5, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !19, !legup.pipeline.stage !3
	start_time: 4 avail_time: 6 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 6 % 6 = 0*/
	if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_4)) begin
		memory_controller_address_a = main_1_scevgep8_reg_stage0;
	end
	/* main: %1*/
	/*   %53 = load volatile i32* %scevgep, align 4, !tbaa !14, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !12, !legup.pipeline.stage !21
	start_time: 65 avail_time: 67 stage: 10 II: 6 start_ii_state = 65 % 6 = 5 avail_ii_state = 67 % 6 = 1*/
	if (((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65)) begin
		memory_controller_address_a = main_1_scevgep_reg_stage10;
	end
	/* main: %59*/
	/*   %60 = load volatile i32* getelementptr inbounds ([100 x i32]* @cc, i32 0, i32 40), align 4, !tbaa !14*/
	if ((cur_state == LEGUP_F_main_BB__59_2)) begin
		memory_controller_address_a = (`TAG_g_cc_a + (4 * 32'd40));
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %12 = load volatile i64* %scevgep11, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %21 = load volatile i64* %scevgep9, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %29 = load volatile i64* %scevgep5, align 8, !tbaa !5, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %37 = load volatile i64* %scevgep2, align 8, !tbaa !5, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
	if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %51 = load volatile i64* %scevgep8, align 8, !tbaa !5, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !19, !legup.pipeline.stage !3
	start_time: 4 avail_time: 6 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 6 % 6 = 0*/
	if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_4)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %1*/
	/*   %53 = load volatile i32* %scevgep, align 4, !tbaa !14, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !12, !legup.pipeline.stage !21
	start_time: 65 avail_time: 67 stage: 10 II: 6 start_ii_state = 65 % 6 = 5 avail_ii_state = 67 % 6 = 1*/
	if (((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %59*/
	/*   %60 = load volatile i32* getelementptr inbounds ([100 x i32]* @cc, i32 0, i32 40), align 4, !tbaa !14*/
	if ((cur_state == LEGUP_F_main_BB__59_2)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %1*/
	/*   %12 = load volatile i64* %scevgep11, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %1*/
	/*   %21 = load volatile i64* %scevgep9, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %1*/
	/*   %29 = load volatile i64* %scevgep5, align 8, !tbaa !5, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %1*/
	/*   %37 = load volatile i64* %scevgep2, align 8, !tbaa !5, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
	if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %1*/
	/*   %51 = load volatile i64* %scevgep8, align 8, !tbaa !5, !legup.pipeline.start_time !13, !legup.pipeline.avail_time !19, !legup.pipeline.stage !3
	start_time: 4 avail_time: 6 stage: 0 II: 6 start_ii_state = 4 % 6 = 4 avail_ii_state = 6 % 6 = 0*/
	if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_4)) begin
		memory_controller_size_a = 2'd3;
	end
	/* main: %1*/
	/*   %53 = load volatile i32* %scevgep, align 4, !tbaa !14, !legup.pipeline.start_time !20, !legup.pipeline.avail_time !12, !legup.pipeline.stage !21
	start_time: 65 avail_time: 67 stage: 10 II: 6 start_ii_state = 65 % 6 = 5 avail_ii_state = 67 % 6 = 1*/
	if (((loop_1_ii_state == 3'd5) & loop_1_valid_bit_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %59*/
	/*   %60 = load volatile i32* getelementptr inbounds ([100 x i32]* @cc, i32 0, i32 40), align 4, !tbaa !14*/
	if ((cur_state == LEGUP_F_main_BB__59_2)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep10, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %22 = load volatile i64* %scevgep6, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %30 = load volatile i32* %scevgep3, align 4, !tbaa !14, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   %38 = load volatile i32* %scevgep4, align 4, !tbaa !14, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
	if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %1*/
	/*   store volatile i32 %58, i32* %scevgep7, align 4, !tbaa !14, !legup.pipeline.start_time !22, !legup.pipeline.avail_time !23, !legup.pipeline.stage !10
	start_time: 70 avail_time: 71 stage: 11 II: 6 start_ii_state = 70 % 6 = 4 avail_ii_state = 71 % 6 = 5*/
	if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_70)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep10, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		memory_controller_address_b = main_1_scevgep10;
	end
	/* main: %1*/
	/*   %22 = load volatile i64* %scevgep6, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1)) begin
		memory_controller_address_b = main_1_scevgep6;
	end
	/* main: %1*/
	/*   %30 = load volatile i32* %scevgep3, align 4, !tbaa !14, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		memory_controller_address_b = main_1_scevgep3;
	end
	/* main: %1*/
	/*   %38 = load volatile i32* %scevgep4, align 4, !tbaa !14, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
	if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		memory_controller_address_b = main_1_scevgep4_reg_stage0;
	end
	/* main: %1*/
	/*   store volatile i32 %58, i32* %scevgep7, align 4, !tbaa !14, !legup.pipeline.start_time !22, !legup.pipeline.avail_time !23, !legup.pipeline.stage !10
	start_time: 70 avail_time: 71 stage: 11 II: 6 start_ii_state = 70 % 6 = 4 avail_ii_state = 71 % 6 = 5*/
	if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_70)) begin
		memory_controller_address_b = main_1_scevgep7_reg_stage11;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep10, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %22 = load volatile i64* %scevgep6, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %30 = load volatile i32* %scevgep3, align 4, !tbaa !14, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   %38 = load volatile i32* %scevgep4, align 4, !tbaa !14, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
	if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i32 %58, i32* %scevgep7, align 4, !tbaa !14, !legup.pipeline.start_time !22, !legup.pipeline.avail_time !23, !legup.pipeline.stage !10
	start_time: 70 avail_time: 71 stage: 11 II: 6 start_ii_state = 70 % 6 = 4 avail_ii_state = 71 % 6 = 5*/
	if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_70)) begin
		memory_controller_write_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %1*/
	/*   store volatile i32 %58, i32* %scevgep7, align 4, !tbaa !14, !legup.pipeline.start_time !22, !legup.pipeline.avail_time !23, !legup.pipeline.stage !10
	start_time: 70 avail_time: 71 stage: 11 II: 6 start_ii_state = 70 % 6 = 4 avail_ii_state = 71 % 6 = 5*/
	if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_70)) begin
		memory_controller_in_b = main_1_58_reg_stage11;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %1*/
	/*   %14 = load volatile i64* %scevgep10, align 8, !tbaa !5, !legup.pipeline.start_time !3, !legup.pipeline.avail_time !4, !legup.pipeline.stage !3
	start_time: 0 avail_time: 2 stage: 0 II: 6 start_ii_state = 0 % 6 = 0 avail_ii_state = 2 % 6 = 2*/
	if (((loop_1_ii_state == 3'd0) & loop_1_valid_bit_0)) begin
		memory_controller_size_b = 2'd3;
	end
	/* main: %1*/
	/*   %22 = load volatile i64* %scevgep6, align 8, !tbaa !5, !legup.pipeline.start_time !2, !legup.pipeline.avail_time !11, !legup.pipeline.stage !3
	start_time: 1 avail_time: 3 stage: 0 II: 6 start_ii_state = 1 % 6 = 1 avail_ii_state = 3 % 6 = 3*/
	if (((loop_1_ii_state == 3'd1) & loop_1_valid_bit_1)) begin
		memory_controller_size_b = 2'd3;
	end
	/* main: %1*/
	/*   %30 = load volatile i32* %scevgep3, align 4, !tbaa !14, !legup.pipeline.start_time !4, !legup.pipeline.avail_time !13, !legup.pipeline.stage !3
	start_time: 2 avail_time: 4 stage: 0 II: 6 start_ii_state = 2 % 6 = 2 avail_ii_state = 4 % 6 = 4*/
	if (((loop_1_ii_state == 3'd2) & loop_1_valid_bit_2)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   %38 = load volatile i32* %scevgep4, align 4, !tbaa !14, !legup.pipeline.start_time !11, !legup.pipeline.avail_time !17, !legup.pipeline.stage !3
	start_time: 3 avail_time: 5 stage: 0 II: 6 start_ii_state = 3 % 6 = 3 avail_ii_state = 5 % 6 = 5*/
	if (((loop_1_ii_state == 3'd3) & loop_1_valid_bit_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %1*/
	/*   store volatile i32 %58, i32* %scevgep7, align 4, !tbaa !14, !legup.pipeline.start_time !22, !legup.pipeline.avail_time !23, !legup.pipeline.stage !10
	start_time: 70 avail_time: 71 stage: 11 II: 6 start_ii_state = 70 % 6 = 4 avail_ii_state = 71 % 6 = 5*/
	if (((loop_1_ii_state == 3'd4) & loop_1_valid_bit_70)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %68*/
	/*   ret i32 %60*/
	if ((cur_state == LEGUP_F_main_BB__68_7)) begin
		return_val <= main_59_60_reg;
		if (start == 1'b0 && ^(main_59_60_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
// Adding code from verilog file: /home/leandro/myLegUp/4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
